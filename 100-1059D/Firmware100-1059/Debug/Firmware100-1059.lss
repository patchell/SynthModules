
Firmware100-1059.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000c0  00800100  00002a8e  00002b22  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002a8e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000015b  008001c0  008001c0  00002be2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002be2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002c14  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000590  00000000  00000000  00002c58  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00007792  00000000  00000000  000031e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000026f1  00000000  00000000  0000a97a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002dfa  00000000  00000000  0000d06b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000d04  00000000  00000000  0000fe68  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000011c4  00000000  00000000  00010b6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003fb9  00000000  00000000  00011d30  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000420  00000000  00000000  00015ce9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	5f c0       	rjmp	.+190    	; 0xc0 <__ctors_end>
       2:	00 00       	nop
       4:	94 c5       	rjmp	.+2856   	; 0xb2e <__vector_1>
       6:	00 00       	nop
       8:	e9 c5       	rjmp	.+3026   	; 0xbdc <__vector_2>
       a:	00 00       	nop
       c:	3c c6       	rjmp	.+3192   	; 0xc86 <__vector_3>
       e:	00 00       	nop
      10:	75 c0       	rjmp	.+234    	; 0xfc <__bad_interrupt>
      12:	00 00       	nop
      14:	73 c0       	rjmp	.+230    	; 0xfc <__bad_interrupt>
      16:	00 00       	nop
      18:	71 c0       	rjmp	.+226    	; 0xfc <__bad_interrupt>
      1a:	00 00       	nop
      1c:	6f c0       	rjmp	.+222    	; 0xfc <__bad_interrupt>
      1e:	00 00       	nop
      20:	6d c0       	rjmp	.+218    	; 0xfc <__bad_interrupt>
      22:	00 00       	nop
      24:	6b c0       	rjmp	.+214    	; 0xfc <__bad_interrupt>
      26:	00 00       	nop
      28:	69 c0       	rjmp	.+210    	; 0xfc <__bad_interrupt>
      2a:	00 00       	nop
      2c:	67 c0       	rjmp	.+206    	; 0xfc <__bad_interrupt>
      2e:	00 00       	nop
      30:	65 c0       	rjmp	.+202    	; 0xfc <__bad_interrupt>
      32:	00 00       	nop
      34:	63 c0       	rjmp	.+198    	; 0xfc <__bad_interrupt>
      36:	00 00       	nop
      38:	61 c0       	rjmp	.+194    	; 0xfc <__bad_interrupt>
      3a:	00 00       	nop
      3c:	5f c0       	rjmp	.+190    	; 0xfc <__bad_interrupt>
      3e:	00 00       	nop
      40:	5d c0       	rjmp	.+186    	; 0xfc <__bad_interrupt>
      42:	00 00       	nop
      44:	5b c0       	rjmp	.+182    	; 0xfc <__bad_interrupt>
      46:	00 00       	nop
      48:	09 c5       	rjmp	.+2578   	; 0xa5c <__vector_18>
      4a:	00 00       	nop
      4c:	57 c0       	rjmp	.+174    	; 0xfc <__bad_interrupt>
      4e:	00 00       	nop
      50:	0c 94 26 13 	jmp	0x264c	; 0x264c <__vector_20>
      54:	0c 94 de 13 	jmp	0x27bc	; 0x27bc <__vector_21>
      58:	51 c0       	rjmp	.+162    	; 0xfc <__bad_interrupt>
      5a:	00 00       	nop
      5c:	4f c0       	rjmp	.+158    	; 0xfc <__bad_interrupt>
      5e:	00 00       	nop
      60:	a0 c4       	rjmp	.+2368   	; 0x9a2 <__vector_24>
      62:	00 00       	nop
      64:	4b c0       	rjmp	.+150    	; 0xfc <__bad_interrupt>
      66:	00 00       	nop
      68:	49 c0       	rjmp	.+146    	; 0xfc <__bad_interrupt>
      6a:	00 00       	nop
      6c:	47 c0       	rjmp	.+142    	; 0xfc <__bad_interrupt>
      6e:	00 00       	nop
      70:	45 c0       	rjmp	.+138    	; 0xfc <__bad_interrupt>
      72:	00 00       	nop
      74:	43 c0       	rjmp	.+134    	; 0xfc <__bad_interrupt>
      76:	00 00       	nop
      78:	41 c0       	rjmp	.+130    	; 0xfc <__bad_interrupt>
      7a:	00 00       	nop
      7c:	3f c0       	rjmp	.+126    	; 0xfc <__bad_interrupt>
      7e:	00 00       	nop
      80:	3d c0       	rjmp	.+122    	; 0xfc <__bad_interrupt>
      82:	00 00       	nop
      84:	3b c0       	rjmp	.+118    	; 0xfc <__bad_interrupt>
      86:	00 00       	nop
      88:	39 c0       	rjmp	.+114    	; 0xfc <__bad_interrupt>
      8a:	00 00       	nop
      8c:	61 0b       	sbc	r22, r17
      8e:	68 0b       	sbc	r22, r24
      90:	6d 0b       	sbc	r22, r29
      92:	72 0b       	sbc	r23, r18
      94:	5a 0c       	add	r5, r10
      96:	5a 0c       	add	r5, r10
      98:	5a 0c       	add	r5, r10
      9a:	77 0b       	sbc	r23, r23
      9c:	7b 0b       	sbc	r23, r27
      9e:	5a 0c       	add	r5, r10
      a0:	7d 0b       	sbc	r23, r29
      a2:	7f 0b       	sbc	r23, r31
      a4:	81 0b       	sbc	r24, r17
      a6:	5a 0c       	add	r5, r10
      a8:	5a 0c       	add	r5, r10
      aa:	83 0b       	sbc	r24, r19
      ac:	44 10       	cpse	r4, r4
      ae:	41 10       	cpse	r4, r1
      b0:	5d 10       	cpse	r5, r13
      b2:	a1 10       	cpse	r10, r1
      b4:	59 11       	cpse	r21, r9
      b6:	59 11       	cpse	r21, r9
      b8:	cf 10       	cpse	r12, r15
      ba:	1d 11       	cpse	r17, r13
      bc:	3f 11       	cpse	r19, r15
      be:	56 11       	cpse	r21, r6

000000c0 <__ctors_end>:
      c0:	11 24       	eor	r1, r1
      c2:	1f be       	out	0x3f, r1	; 63
      c4:	cf ef       	ldi	r28, 0xFF	; 255
      c6:	d0 e4       	ldi	r29, 0x40	; 64
      c8:	de bf       	out	0x3e, r29	; 62
      ca:	cd bf       	out	0x3d, r28	; 61

000000cc <__do_copy_data>:
      cc:	11 e0       	ldi	r17, 0x01	; 1
      ce:	a0 e0       	ldi	r26, 0x00	; 0
      d0:	b1 e0       	ldi	r27, 0x01	; 1
      d2:	ee e8       	ldi	r30, 0x8E	; 142
      d4:	fa e2       	ldi	r31, 0x2A	; 42
      d6:	00 e0       	ldi	r16, 0x00	; 0
      d8:	0b bf       	out	0x3b, r16	; 59
      da:	02 c0       	rjmp	.+4      	; 0xe0 <__do_copy_data+0x14>
      dc:	07 90       	elpm	r0, Z+
      de:	0d 92       	st	X+, r0
      e0:	a0 3c       	cpi	r26, 0xC0	; 192
      e2:	b1 07       	cpc	r27, r17
      e4:	d9 f7       	brne	.-10     	; 0xdc <__do_copy_data+0x10>

000000e6 <__do_clear_bss>:
      e6:	23 e0       	ldi	r18, 0x03	; 3
      e8:	a0 ec       	ldi	r26, 0xC0	; 192
      ea:	b1 e0       	ldi	r27, 0x01	; 1
      ec:	01 c0       	rjmp	.+2      	; 0xf0 <.do_clear_bss_start>

000000ee <.do_clear_bss_loop>:
      ee:	1d 92       	st	X+, r1

000000f0 <.do_clear_bss_start>:
      f0:	ab 31       	cpi	r26, 0x1B	; 27
      f2:	b2 07       	cpc	r27, r18
      f4:	e1 f7       	brne	.-8      	; 0xee <.do_clear_bss_loop>
      f6:	30 d6       	rcall	.+3168   	; 0xd58 <main>
      f8:	0c 94 45 15 	jmp	0x2a8a	; 0x2a8a <_exit>

000000fc <__bad_interrupt>:
      fc:	81 cf       	rjmp	.-254    	; 0x0 <__vectors>

000000fe <Disable>:
	.global Disable
	.global Enable

Disable:

	in	r24,_SFR_IO_ADDR(SREG)		;get status register
      fe:	8f b7       	in	r24, 0x3f	; 63
	cli								;disable interrupt
     100:	f8 94       	cli
	andi r24,0x80					;strip off interrupt bit
     102:	80 78       	andi	r24, 0x80	; 128
	ret
     104:	08 95       	ret

00000106 <Enable>:

Enable:
	in r25,_SFR_IO_ADDR(SREG)	;get the status register
     106:	9f b7       	in	r25, 0x3f	; 63
	or r25,r24					;set bits in status reg
     108:	98 2b       	or	r25, r24
	out _SFR_IO_ADDR(SREG),r25	;save new status register
     10a:	9f bf       	out	0x3f, r25	; 63
	ret
     10c:	08 95       	ret

0000010e <CreateSemaphore>:
**	n............name of semaphore (DEBUG only)                           **
**                                                                        **
***************************************************************************/

void CreateSemaphore(SEMAPHORE *pSem,int InitCount,int Mode,char *n)
{
     10e:	cf 93       	push	r28
     110:	df 93       	push	r29
     112:	ec 01       	movw	r28, r24
	char sr;

	pSem->EventCount = InitCount;	//set initial count
     114:	7b 87       	std	Y+11, r23	; 0x0b
     116:	6a 87       	std	Y+10, r22	; 0x0a
	pSem->SemaphoreMode = Mode;	//set mode
     118:	59 87       	std	Y+9, r21	; 0x09
     11a:	48 87       	std	Y+8, r20	; 0x08
	strcpy(pSem->name,n);			//copy name in
     11c:	b9 01       	movw	r22, r18
     11e:	0c 96       	adiw	r24, 0x0c	; 12
     120:	0e 94 0b 15 	call	0x2a16	; 0x2a16 <strcpy>
	pSem->task_head = 0;				//no tasks waiting
     124:	19 82       	std	Y+1, r1	; 0x01
     126:	18 82       	st	Y, r1
	pSem->task_tail = 0;				//no tasks waiting
     128:	1b 82       	std	Y+3, r1	; 0x03
     12a:	1a 82       	std	Y+2, r1	; 0x02
	//-------------------------------------------------------
	// if Mode==SEMAPHORE_MODE_TIMEOUT, then put this
	// semaphore into timeout list
	//-------------------------------------------------------
	// enter critical section, disable interrupts
	sr = Disable();
     12c:	e8 df       	rcall	.-48     	; 0xfe <Disable>
	if(pSem->SemaphoreMode == SEMAPHORE_MODE_TIMEOUT)
     12e:	28 85       	ldd	r18, Y+8	; 0x08
     130:	39 85       	ldd	r19, Y+9	; 0x09
     132:	21 30       	cpi	r18, 0x01	; 1
     134:	31 05       	cpc	r19, r1
     136:	c9 f4       	brne	.+50     	; 0x16a <CreateSemaphore+0x5c>
	{
		if(pTimeoutList)	//is the list already started?
     138:	e0 91 e4 01 	lds	r30, 0x01E4	; 0x8001e4 <pTimeoutList>
     13c:	f0 91 e5 01 	lds	r31, 0x01E5	; 0x8001e5 <pTimeoutList+0x1>
     140:	30 97       	sbiw	r30, 0x00	; 0
     142:	59 f0       	breq	.+22     	; 0x15a <CreateSemaphore+0x4c>
		{
			pSem->Tnext = pTimeoutList;	//make current head next in line
     144:	fd 83       	std	Y+5, r31	; 0x05
     146:	ec 83       	std	Y+4, r30	; 0x04
			pSem->Tprev = 0;			//these is no previous entry
     148:	1f 82       	std	Y+7, r1	; 0x07
     14a:	1e 82       	std	Y+6, r1	; 0x06
			pTimeoutList->Tprev = pSem;	//this will be prev for next entry
     14c:	d7 83       	std	Z+7, r29	; 0x07
     14e:	c6 83       	std	Z+6, r28	; 0x06
			pTimeoutList = pSem;			//this is now the new head of list
     150:	d0 93 e5 01 	sts	0x01E5, r29	; 0x8001e5 <pTimeoutList+0x1>
     154:	c0 93 e4 01 	sts	0x01E4, r28	; 0x8001e4 <pTimeoutList>
     158:	08 c0       	rjmp	.+16     	; 0x16a <CreateSemaphore+0x5c>
		}
		else			//no start list
		{
			pTimeoutList = pSem;	//set timeout list
     15a:	d0 93 e5 01 	sts	0x01E5, r29	; 0x8001e5 <pTimeoutList+0x1>
     15e:	c0 93 e4 01 	sts	0x01E4, r28	; 0x8001e4 <pTimeoutList>
			pSem->Tnext = 0;
     162:	1d 82       	std	Y+5, r1	; 0x05
     164:	1c 82       	std	Y+4, r1	; 0x04
			pSem->Tprev = 0;
     166:	1f 82       	std	Y+7, r1	; 0x07
		}
	}
	//exit critical section, enable IRQ
	Enable(sr);	//restore interrupts
     168:	1e 82       	std	Y+6, r1	; 0x06
     16a:	cd df       	rcall	.-102    	; 0x106 <Enable>
}
     16c:	df 91       	pop	r29
     16e:	cf 91       	pop	r28
     170:	08 95       	ret

00000172 <NewSemaphore>:
	return value:
		pointer to an Event Control block on success
		OR NULL on fail
************************************************/
SEMAPHORE *NewSemaphore(int InitCount,int Mode,char *name)
{
     172:	cf 92       	push	r12
     174:	df 92       	push	r13
     176:	ef 92       	push	r14
     178:	ff 92       	push	r15
     17a:	0f 93       	push	r16
     17c:	1f 93       	push	r17
     17e:	cf 93       	push	r28
     180:	df 93       	push	r29
     182:	8c 01       	movw	r16, r24
     184:	7b 01       	movw	r14, r22
     186:	6a 01       	movw	r12, r20
*********************************************/
static SEMAPHORE *AllocSemaphore(void)
{
	SEMAPHORE *rv;
	// enter critical section disable IRQ
	char sr = Disable();
     188:	ba df       	rcall	.-140    	; 0xfe <Disable>
	if (pSemaphorePool)	//check the pool
     18a:	c0 91 c0 01 	lds	r28, 0x01C0	; 0x8001c0 <__data_end>
     18e:	d0 91 c1 01 	lds	r29, 0x01C1	; 0x8001c1 <__data_end+0x1>
     192:	20 97       	sbiw	r28, 0x00	; 0
     194:	41 f0       	breq	.+16     	; 0x1a6 <NewSemaphore+0x34>
	{
		//get first SEMAPHORE in pool
		rv = pSemaphorePool;
		//new head of pool
		pSemaphorePool = pSemaphorePool->Tnext;
     196:	2c 81       	ldd	r18, Y+4	; 0x04
     198:	3d 81       	ldd	r19, Y+5	; 0x05
     19a:	30 93 c1 01 	sts	0x01C1, r19	; 0x8001c1 <__data_end+0x1>
     19e:	20 93 c0 01 	sts	0x01C0, r18	; 0x8001c0 <__data_end>
		//exit critical section
		Enable(sr);
     1a2:	b1 df       	rcall	.-158    	; 0x106 <Enable>
	}
	else
	{
		//exit critical section
		Enable(sr);
     1a4:	07 c0       	rjmp	.+14     	; 0x1b4 <NewSemaphore+0x42>
		//allocate SEMAPHORE from heap
		rv = (SEMAPHORE *)malloc(sizeof(SEMAPHORE));	//or allocate from the heap
     1a6:	af df       	rcall	.-162    	; 0x106 <Enable>
     1a8:	80 e2       	ldi	r24, 0x20	; 32
     1aa:	90 e0       	ldi	r25, 0x00	; 0
     1ac:	a4 d6       	rcall	.+3400   	; 0xef6 <malloc>
     1ae:	ec 01       	movw	r28, r24
************************************************/
SEMAPHORE *NewSemaphore(int InitCount,int Mode,char *name)
{
	SEMAPHORE *pSem;

	if((pSem = AllocSemaphore()) != NULL)
     1b0:	89 2b       	or	r24, r25
     1b2:	29 f0       	breq	.+10     	; 0x1be <NewSemaphore+0x4c>
		CreateSemaphore(pSem,InitCount,Mode,name);
     1b4:	96 01       	movw	r18, r12
     1b6:	a7 01       	movw	r20, r14
     1b8:	b8 01       	movw	r22, r16
     1ba:	ce 01       	movw	r24, r28
     1bc:	a8 df       	rcall	.-176    	; 0x10e <CreateSemaphore>
	return pSem;
}
     1be:	ce 01       	movw	r24, r28
     1c0:	df 91       	pop	r29
     1c2:	cf 91       	pop	r28
     1c4:	1f 91       	pop	r17
     1c6:	0f 91       	pop	r16
     1c8:	ff 90       	pop	r15
     1ca:	ef 90       	pop	r14
     1cc:	df 90       	pop	r13
     1ce:	cf 90       	pop	r12
     1d0:	08 95       	ret

000001d2 <DeleteSemaphore>:
**		e..........pointer to SEMAPHORE block that describes the semaphore
**
*******************************************************************************/

void DeleteSemaphore(SEMAPHORE *pSem)
{
     1d2:	ff 92       	push	r15
     1d4:	0f 93       	push	r16
     1d6:	1f 93       	push	r17
     1d8:	cf 93       	push	r28
     1da:	df 93       	push	r29
     1dc:	ec 01       	movw	r28, r24
	char sr;
	TCB *t;

	//are there any tasks waiting for this sucker?
	//enter critical section, disable IRQ
	sr = Disable();
     1de:	8f df       	rcall	.-226    	; 0xfe <Disable>
     1e0:	f8 2e       	mov	r15, r24
	while(pSem->task_head)		//remove all tasks
     1e2:	e8 81       	ld	r30, Y
     1e4:	f9 81       	ldd	r31, Y+1	; 0x01
     1e6:	30 97       	sbiw	r30, 0x00	; 0
     1e8:	99 f0       	breq	.+38     	; 0x210 <DeleteSemaphore+0x3e>
	{
		t = pSem->task_head;		//get first task in
		pSem->task_head = t->next;       //remove from list
		t->next = (TCB *)0;
		t->status = EVENT_DELETED;	//return this value
     1ea:	0c ef       	ldi	r16, 0xFC	; 252
     1ec:	1f ef       	ldi	r17, 0xFF	; 255
	//enter critical section, disable IRQ
	sr = Disable();
	while(pSem->task_head)		//remove all tasks
	{
		t = pSem->task_head;		//get first task in
		pSem->task_head = t->next;       //remove from list
     1ee:	84 89       	ldd	r24, Z+20	; 0x14
     1f0:	95 89       	ldd	r25, Z+21	; 0x15
     1f2:	99 83       	std	Y+1, r25	; 0x01
     1f4:	88 83       	st	Y, r24
		t->next = (TCB *)0;
     1f6:	15 8a       	std	Z+21, r1	; 0x15
     1f8:	14 8a       	std	Z+20, r1	; 0x14
		t->status = EVENT_DELETED;	//return this value
     1fa:	11 87       	std	Z+9, r17	; 0x09
     1fc:	00 87       	std	Z+8, r16	; 0x08
		Insert(&ActiveTasks,t);	//put task back onto active list
     1fe:	bf 01       	movw	r22, r30
     200:	86 ee       	ldi	r24, 0xE6	; 230
     202:	91 e0       	ldi	r25, 0x01	; 1
     204:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <Insert>
	TCB *t;

	//are there any tasks waiting for this sucker?
	//enter critical section, disable IRQ
	sr = Disable();
	while(pSem->task_head)		//remove all tasks
     208:	e8 81       	ld	r30, Y
     20a:	f9 81       	ldd	r31, Y+1	; 0x01
     20c:	30 97       	sbiw	r30, 0x00	; 0
***********************************************/
static void FreeSemaphore(SEMAPHORE *pSem)
{
	char sr;
	//enter critical section disable IRQ
	sr = Disable();
     20e:	79 f7       	brne	.-34     	; 0x1ee <DeleteSemaphore+0x1c>
     210:	76 df       	rcall	.-276    	; 0xfe <Disable>
	if(pSem->SemaphoreMode)	//is it in timeout list?
     212:	28 85       	ldd	r18, Y+8	; 0x08
     214:	39 85       	ldd	r19, Y+9	; 0x09
     216:	23 2b       	or	r18, r19
     218:	e9 f0       	breq	.+58     	; 0x254 <DeleteSemaphore+0x82>
	{
		//remove semaphore from timeout list
		if(pSem == pTimeoutList)
     21a:	20 91 e4 01 	lds	r18, 0x01E4	; 0x8001e4 <pTimeoutList>
     21e:	30 91 e5 01 	lds	r19, 0x01E5	; 0x8001e5 <pTimeoutList+0x1>
     222:	c2 17       	cp	r28, r18
     224:	d3 07       	cpc	r29, r19
     226:	31 f4       	brne	.+12     	; 0x234 <DeleteSemaphore+0x62>
			pTimeoutList = pSem->Tnext;
     228:	2c 81       	ldd	r18, Y+4	; 0x04
     22a:	3d 81       	ldd	r19, Y+5	; 0x05
     22c:	30 93 e5 01 	sts	0x01E5, r19	; 0x8001e5 <pTimeoutList+0x1>
     230:	20 93 e4 01 	sts	0x01E4, r18	; 0x8001e4 <pTimeoutList>
		if(pSem->Tprev)
     234:	ee 81       	ldd	r30, Y+6	; 0x06
     236:	ff 81       	ldd	r31, Y+7	; 0x07
     238:	30 97       	sbiw	r30, 0x00	; 0
     23a:	21 f0       	breq	.+8      	; 0x244 <DeleteSemaphore+0x72>
			pSem->Tprev->Tnext = pSem->Tnext;
     23c:	2c 81       	ldd	r18, Y+4	; 0x04
     23e:	3d 81       	ldd	r19, Y+5	; 0x05
     240:	35 83       	std	Z+5, r19	; 0x05
     242:	24 83       	std	Z+4, r18	; 0x04
		if(pSem->Tnext)
     244:	ec 81       	ldd	r30, Y+4	; 0x04
     246:	fd 81       	ldd	r31, Y+5	; 0x05
     248:	30 97       	sbiw	r30, 0x00	; 0
     24a:	21 f0       	breq	.+8      	; 0x254 <DeleteSemaphore+0x82>
			pSem->Tnext->Tprev = pSem->Tprev;
     24c:	2e 81       	ldd	r18, Y+6	; 0x06
     24e:	3f 81       	ldd	r19, Y+7	; 0x07
     250:	37 83       	std	Z+7, r19	; 0x07
     252:	26 83       	std	Z+6, r18	; 0x06
	}
	//put SEMAPHORE into pool
	pSem->Tnext = pSemaphorePool;
     254:	20 91 c0 01 	lds	r18, 0x01C0	; 0x8001c0 <__data_end>
     258:	30 91 c1 01 	lds	r19, 0x01C1	; 0x8001c1 <__data_end+0x1>
     25c:	3d 83       	std	Y+5, r19	; 0x05
     25e:	2c 83       	std	Y+4, r18	; 0x04
	pSemaphorePool = pSem;
     260:	d0 93 c1 01 	sts	0x01C1, r29	; 0x8001c1 <__data_end+0x1>
     264:	c0 93 c0 01 	sts	0x01C0, r28	; 0x8001c0 <__data_end>
		t->next = (TCB *)0;
		t->status = EVENT_DELETED;	//return this value
		Insert(&ActiveTasks,t);	//put task back onto active list
	}
	FreeSemaphore(pSem);		//put semaphore back in pool
	Enable(sr);
     268:	4e df       	rcall	.-356    	; 0x106 <Enable>
     26a:	8f 2d       	mov	r24, r15
     26c:	4c df       	rcall	.-360    	; 0x106 <Enable>
}
     26e:	df 91       	pop	r29
     270:	cf 91       	pop	r28
     272:	1f 91       	pop	r17
     274:	0f 91       	pop	r16
     276:	ff 90       	pop	r15
     278:	08 95       	ret

0000027a <CreateTask>:
**	arg.............argument to be passed to function...it chan either be 
**  a value, or a pointer to some data
***************************************************************************************/

void CreateTask(TCB *t, void (*task)(void *), int stacksize,int priority,char *name,void *arg)
{
     27a:	8f 92       	push	r8
     27c:	9f 92       	push	r9
     27e:	af 92       	push	r10
     280:	bf 92       	push	r11
     282:	cf 92       	push	r12
     284:	df 92       	push	r13
     286:	ef 92       	push	r14
     288:	ff 92       	push	r15
     28a:	0f 93       	push	r16
     28c:	1f 93       	push	r17
     28e:	cf 93       	push	r28
     290:	df 93       	push	r29
     292:	ec 01       	movw	r28, r24
     294:	86 2e       	mov	r8, r22
     296:	97 2e       	mov	r9, r23
     298:	8a 01       	movw	r16, r20
     29a:	59 01       	movw	r10, r18
	char *stk;
	char sr;		//status register
	char *stack;	//pointer to stack

	stack = malloc(stacksize);
     29c:	ca 01       	movw	r24, r20
     29e:	2b d6       	rcall	.+3158   	; 0xef6 <malloc>
     2a0:	6c 01       	movw	r12, r24
	//enter critical section, Disable IRQ
	sr = Disable();
     2a2:	2d df       	rcall	.-422    	; 0xfe <Disable>
     2a4:	20 97       	sbiw	r28, 0x00	; 0
	if(t)
     2a6:	09 f4       	brne	.+2      	; 0x2aa <CreateTask+0x30>
     2a8:	5c c0       	rjmp	.+184    	; 0x362 <CreateTask+0xe8>
     2aa:	1f 86       	std	Y+15, r1	; 0x0f
	{
		//initialize TCB member variables
		t->TcbSwaps = 0;
     2ac:	1e 86       	std	Y+14, r1	; 0x0e
     2ae:	1d 83       	std	Y+5, r17	; 0x05
		t->stacksize = stacksize;
     2b0:	0c 83       	std	Y+4, r16	; 0x04
     2b2:	bf 82       	std	Y+7, r11	; 0x07
		t->priority = priority;
     2b4:	ae 82       	std	Y+6, r10	; 0x06
     2b6:	1d 86       	std	Y+13, r1	; 0x0d
		t->TimeStamp = 0;
     2b8:	1c 86       	std	Y+12, r1	; 0x0c
     2ba:	db 82       	std	Y+3, r13	; 0x03
		t->stacktop = stack;
     2bc:	ca 82       	std	Y+2, r12	; 0x02
     2be:	1d 8a       	std	Y+21, r1	; 0x15
		t->next = (TCB *)0;
     2c0:	1c 8a       	std	Y+20, r1	; 0x14
     2c2:	1f 8a       	std	Y+23, r1	; 0x17
		t->list = (TCB *)0;
     2c4:	1e 8a       	std	Y+22, r1	; 0x16
     2c6:	f8 01       	movw	r30, r16
		stk = stack + stacksize-1;
     2c8:	31 97       	sbiw	r30, 0x01	; 1
     2ca:	ec 0d       	add	r30, r12
     2cc:	fd 1d       	adc	r31, r13
     2ce:	80 82       	st	Z, r8
		//Initialize the stack
		*stk-- = (char)LO( (unsigned)task);/*	return address	*/
     2d0:	df 01       	movw	r26, r30
		*stk-- = (char)HI( (unsigned)task);
     2d2:	11 97       	sbiw	r26, 0x01	; 1
     2d4:	9c 92       	st	X, r9
     2d6:	11 97       	sbiw	r26, 0x01	; 1
		*stk-- = 0;		/*	r31 = 0	*/
     2d8:	1c 92       	st	X, r1
     2da:	11 97       	sbiw	r26, 0x01	; 1
		*stk-- = 0x80;	/*	SREG Interrupts enabled	*/
     2dc:	90 e8       	ldi	r25, 0x80	; 128
     2de:	9c 93       	st	X, r25
     2e0:	11 97       	sbiw	r26, 0x01	; 1
		*stk-- = 0;		/*	r30 = 0	*/
     2e2:	1c 92       	st	X, r1
     2e4:	11 97       	sbiw	r26, 0x01	; 1
		*stk-- = 0;		/*	r29 = 0	*/
     2e6:	1c 92       	st	X, r1
     2e8:	11 97       	sbiw	r26, 0x01	; 1
		*stk-- = 0;		/*	r28 = 0	*/
     2ea:	1c 92       	st	X, r1
     2ec:	11 97       	sbiw	r26, 0x01	; 1
		*stk-- = 0;		/*	r27 = 0	*/
     2ee:	1c 92       	st	X, r1
     2f0:	11 97       	sbiw	r26, 0x01	; 1
		*stk-- = 0;		/*	r26 = 0	*/
     2f2:	1c 92       	st	X, r1
     2f4:	11 97       	sbiw	r26, 0x01	; 1
		*stk-- = (char)HI( (unsigned)arg);		/*	r25 = 0	*/
     2f6:	fc 92       	st	X, r15
     2f8:	11 97       	sbiw	r26, 0x01	; 1
		*stk-- = (char)LO( (unsigned)arg);		/*	r24 = 0	*/
     2fa:	ec 92       	st	X, r14
     2fc:	11 97       	sbiw	r26, 0x01	; 1
		*stk-- = 0;		/*	r23 = 0	*/
     2fe:	1c 92       	st	X, r1
     300:	11 97       	sbiw	r26, 0x01	; 1
		*stk-- = 0;		/*	r22 = 0	*/
     302:	1c 92       	st	X, r1
     304:	11 97       	sbiw	r26, 0x01	; 1
		*stk-- = 0;		/*	r21 = 0	*/
     306:	1c 92       	st	X, r1
     308:	11 97       	sbiw	r26, 0x01	; 1
		*stk-- = 0;		/*	r20 = 0	*/
     30a:	1c 92       	st	X, r1
     30c:	11 97       	sbiw	r26, 0x01	; 1
		*stk-- = 0;		/*	r19 	*/
     30e:	1c 92       	st	X, r1
     310:	11 97       	sbiw	r26, 0x01	; 1
		*stk-- = 0;		/*	r18 	*/
     312:	1c 92       	st	X, r1
     314:	11 97       	sbiw	r26, 0x01	; 1
		*stk-- = 0;		/*	r17 	*/
     316:	1c 92       	st	X, r1
     318:	11 97       	sbiw	r26, 0x01	; 1
		*stk-- = 0;		/*	r16 	*/
     31a:	1c 92       	st	X, r1
     31c:	11 97       	sbiw	r26, 0x01	; 1
		*stk-- = 0;		/*	r15 	*/
     31e:	1c 92       	st	X, r1
     320:	11 97       	sbiw	r26, 0x01	; 1
		*stk-- = 0;		/*	r14 	*/
     322:	1c 92       	st	X, r1
     324:	11 97       	sbiw	r26, 0x01	; 1
		*stk-- = 0;		/*	r13 	*/
     326:	1c 92       	st	X, r1
     328:	11 97       	sbiw	r26, 0x01	; 1
		*stk-- = 0;		/*	r12 	*/
     32a:	1c 92       	st	X, r1
     32c:	11 97       	sbiw	r26, 0x01	; 1
		*stk-- = 0;		/*	r11 	*/
     32e:	1c 92       	st	X, r1
     330:	11 97       	sbiw	r26, 0x01	; 1
		*stk-- = 0;		/*	r10 	*/
     332:	1c 92       	st	X, r1
     334:	11 97       	sbiw	r26, 0x01	; 1
		*stk-- = 0;		/*	r9 		*/
     336:	1c 92       	st	X, r1
     338:	11 97       	sbiw	r26, 0x01	; 1
		*stk-- = 0;		/*	r8 		*/
     33a:	1c 92       	st	X, r1
     33c:	11 97       	sbiw	r26, 0x01	; 1
		*stk-- = 0;		/*	r7 		*/
     33e:	1c 92       	st	X, r1
     340:	11 97       	sbiw	r26, 0x01	; 1
		*stk-- = 0;		/*	r6 		*/
     342:	1c 92       	st	X, r1
     344:	11 97       	sbiw	r26, 0x01	; 1
		*stk-- = 0;		/*	r5 		*/
     346:	1c 92       	st	X, r1
     348:	11 97       	sbiw	r26, 0x01	; 1
		*stk-- = 0;		/*	r4 		*/
     34a:	1c 92       	st	X, r1
     34c:	11 97       	sbiw	r26, 0x01	; 1
		*stk-- = 0;		/*	r3 		*/
     34e:	1c 92       	st	X, r1
     350:	11 97       	sbiw	r26, 0x01	; 1
		*stk-- = 0;		/*	r2 		*/
     352:	1c 92       	st	X, r1
     354:	11 97       	sbiw	r26, 0x01	; 1
		*stk-- = 0;		/*	r1 must be ZERO 	*/
     356:	1c 92       	st	X, r1
     358:	11 97       	sbiw	r26, 0x01	; 1
		*stk-- = 0;		/*	r0 		*/
     35a:	1c 92       	st	X, r1
     35c:	b3 97       	sbiw	r30, 0x23	; 35
     35e:	f9 83       	std	Y+1, r31	; 0x01
		t->stack = stk;
     360:	e8 83       	st	Y, r30
	}
	//exit critical section, enable IRQ
	Enable(sr);
     362:	d1 de       	rcall	.-606    	; 0x106 <Enable>
     364:	df 91       	pop	r29
}
     366:	cf 91       	pop	r28
     368:	1f 91       	pop	r17
     36a:	0f 91       	pop	r16
     36c:	ff 90       	pop	r15
     36e:	ef 90       	pop	r14
     370:	df 90       	pop	r13
     372:	cf 90       	pop	r12
     374:	bf 90       	pop	r11
     376:	af 90       	pop	r10
     378:	9f 90       	pop	r9
     37a:	8f 90       	pop	r8
     37c:	08 95       	ret

0000037e <NewTask>:
     37e:	6f 92       	push	r6

TCB *NewTask(void (*task)(void *),int stacksize,int priority,char *name,void *arg)
{
     380:	7f 92       	push	r7
     382:	8f 92       	push	r8
     384:	9f 92       	push	r9
     386:	af 92       	push	r10
     388:	bf 92       	push	r11
     38a:	cf 92       	push	r12
     38c:	df 92       	push	r13
     38e:	ef 92       	push	r14
     390:	ff 92       	push	r15
     392:	0f 93       	push	r16
     394:	1f 93       	push	r17
     396:	cf 93       	push	r28
     398:	df 93       	push	r29
     39a:	3c 01       	movw	r6, r24
     39c:	6b 01       	movw	r12, r22
     39e:	5a 01       	movw	r10, r20
     3a0:	49 01       	movw	r8, r18
	TCB *pTCB;
	pTCB = (TCB *)malloc(sizeof(TCB));
     3a2:	88 e1       	ldi	r24, 0x18	; 24
     3a4:	90 e0       	ldi	r25, 0x00	; 0
     3a6:	a7 d5       	rcall	.+2894   	; 0xef6 <malloc>
     3a8:	ec 01       	movw	r28, r24
	CreateTask(pTCB,task,stacksize,priority,name,arg);
     3aa:	78 01       	movw	r14, r16
     3ac:	84 01       	movw	r16, r8
     3ae:	95 01       	movw	r18, r10
     3b0:	a6 01       	movw	r20, r12
     3b2:	b3 01       	movw	r22, r6
     3b4:	62 df       	rcall	.-316    	; 0x27a <CreateTask>
	return pTCB;
     3b6:	ce 01       	movw	r24, r28
     3b8:	df 91       	pop	r29
     3ba:	cf 91       	pop	r28
     3bc:	1f 91       	pop	r17
     3be:	0f 91       	pop	r16
     3c0:	ff 90       	pop	r15
     3c2:	ef 90       	pop	r14
     3c4:	df 90       	pop	r13
     3c6:	cf 90       	pop	r12
     3c8:	bf 90       	pop	r11
     3ca:	af 90       	pop	r10
     3cc:	9f 90       	pop	r9
     3ce:	8f 90       	pop	r8
     3d0:	7f 90       	pop	r7
     3d2:	6f 90       	pop	r6
     3d4:	08 95       	ret

000003d6 <DoSwap>:
		This function does a context swap
*******************************************/
void DoSwap(void) __attribute__ ( ( naked ) );
void DoSwap(void)
{
	SAVE_CONTEXT();		//save the context of the current task
     3d6:	ff 93       	push	r31
     3d8:	ff b7       	in	r31, 0x3f	; 63
     3da:	f8 94       	cli
     3dc:	ff 93       	push	r31
     3de:	ef 93       	push	r30
     3e0:	df 93       	push	r29
     3e2:	cf 93       	push	r28
     3e4:	bf 93       	push	r27
     3e6:	af 93       	push	r26
     3e8:	9f 93       	push	r25
     3ea:	8f 93       	push	r24
     3ec:	7f 93       	push	r23
     3ee:	6f 93       	push	r22
     3f0:	5f 93       	push	r21
     3f2:	4f 93       	push	r20
     3f4:	3f 93       	push	r19
     3f6:	2f 93       	push	r18
     3f8:	1f 93       	push	r17
     3fa:	0f 93       	push	r16
     3fc:	ff 92       	push	r15
     3fe:	ef 92       	push	r14
     400:	df 92       	push	r13
     402:	cf 92       	push	r12
     404:	bf 92       	push	r11
     406:	af 92       	push	r10
     408:	9f 92       	push	r9
     40a:	8f 92       	push	r8
     40c:	7f 92       	push	r7
     40e:	6f 92       	push	r6
     410:	5f 92       	push	r5
     412:	4f 92       	push	r4
     414:	3f 92       	push	r3
     416:	2f 92       	push	r2
     418:	1f 92       	push	r1
     41a:	11 24       	eor	r1, r1
     41c:	0f 92       	push	r0
     41e:	a0 91 f0 01 	lds	r26, 0x01F0	; 0x8001f0 <pCurrentTask>
     422:	b0 91 f1 01 	lds	r27, 0x01F1	; 0x8001f1 <pCurrentTask+0x1>
     426:	0d b6       	in	r0, 0x3d	; 61
     428:	0d 92       	st	X+, r0
     42a:	0e b6       	in	r0, 0x3e	; 62
     42c:	0d 92       	st	X+, r0
	pCurrentTask = pNextTask;	//set current task to next task
     42e:	80 91 f4 01 	lds	r24, 0x01F4	; 0x8001f4 <pNextTask>
     432:	90 91 f5 01 	lds	r25, 0x01F5	; 0x8001f5 <pNextTask+0x1>
     436:	90 93 f1 01 	sts	0x01F1, r25	; 0x8001f1 <pCurrentTask+0x1>
     43a:	80 93 f0 01 	sts	0x01F0, r24	; 0x8001f0 <pCurrentTask>
	RESTORE_CONTEXT();		//restore context of new task
     43e:	a0 91 f4 01 	lds	r26, 0x01F4	; 0x8001f4 <pNextTask>
     442:	b0 91 f5 01 	lds	r27, 0x01F5	; 0x8001f5 <pNextTask+0x1>
     446:	cd 91       	ld	r28, X+
     448:	cd bf       	out	0x3d, r28	; 61
     44a:	dd 91       	ld	r29, X+
     44c:	de bf       	out	0x3e, r29	; 62
     44e:	0f 90       	pop	r0
     450:	1f 90       	pop	r1
     452:	2f 90       	pop	r2
     454:	3f 90       	pop	r3
     456:	4f 90       	pop	r4
     458:	5f 90       	pop	r5
     45a:	6f 90       	pop	r6
     45c:	7f 90       	pop	r7
     45e:	8f 90       	pop	r8
     460:	9f 90       	pop	r9
     462:	af 90       	pop	r10
     464:	bf 90       	pop	r11
     466:	cf 90       	pop	r12
     468:	df 90       	pop	r13
     46a:	ef 90       	pop	r14
     46c:	ff 90       	pop	r15
     46e:	0f 91       	pop	r16
     470:	1f 91       	pop	r17
     472:	2f 91       	pop	r18
     474:	3f 91       	pop	r19
     476:	4f 91       	pop	r20
     478:	5f 91       	pop	r21
     47a:	6f 91       	pop	r22
     47c:	7f 91       	pop	r23
     47e:	8f 91       	pop	r24
     480:	9f 91       	pop	r25
     482:	af 91       	pop	r26
     484:	bf 91       	pop	r27
     486:	cf 91       	pop	r28
     488:	df 91       	pop	r29
     48a:	ef 91       	pop	r30
     48c:	ff 91       	pop	r31
     48e:	f7 fd       	sbrc	r31, 7
     490:	03 c0       	rjmp	.+6      	; 0x498 <irqen>
     492:	ff bf       	out	0x3f, r31	; 63
     494:	ff 91       	pop	r31
     496:	08 95       	ret

00000498 <irqen>:
     498:	ff 77       	andi	r31, 0x7F	; 127
     49a:	ff bf       	out	0x3f, r31	; 63
     49c:	ff 91       	pop	r31
     49e:	18 95       	reti

000004a0 <ExitInterrupt>:
************************************************************************/

void ExitInterrupt(void)
{
	//decrement Interrupt level
	--InterruptCount;
     4a0:	80 91 f6 01 	lds	r24, 0x01F6	; 0x8001f6 <InterruptCount>
     4a4:	90 91 f7 01 	lds	r25, 0x01F7	; 0x8001f7 <InterruptCount+0x1>
     4a8:	01 97       	sbiw	r24, 0x01	; 1
     4aa:	90 93 f7 01 	sts	0x01F7, r25	; 0x8001f7 <InterruptCount+0x1>
     4ae:	80 93 f6 01 	sts	0x01F6, r24	; 0x8001f6 <InterruptCount>
	//don't swap if nested or
	//if multitasking is blocked
	if(!InterruptCount)	
     4b2:	80 91 f6 01 	lds	r24, 0x01F6	; 0x8001f6 <InterruptCount>
     4b6:	90 91 f7 01 	lds	r25, 0x01F7	; 0x8001f7 <InterruptCount+0x1>
     4ba:	89 2b       	or	r24, r25
     4bc:	09 f0       	breq	.+2      	; 0x4c0 <ExitInterrupt+0x20>
     4be:	60 c0       	rjmp	.+192    	; 0x580 <irqen+0x8>
	{
		//Update the time stamp in the current task
		pCurrentTask->TimeStamp = TStamp;
     4c0:	40 91 f0 01 	lds	r20, 0x01F0	; 0x8001f0 <pCurrentTask>
     4c4:	50 91 f1 01 	lds	r21, 0x01F1	; 0x8001f1 <pCurrentTask+0x1>
     4c8:	80 91 19 03 	lds	r24, 0x0319	; 0x800319 <TStamp>
     4cc:	90 91 1a 03 	lds	r25, 0x031A	; 0x80031a <TStamp+0x1>
     4d0:	fa 01       	movw	r30, r20
     4d2:	95 87       	std	Z+13, r25	; 0x0d
     4d4:	84 87       	std	Z+12, r24	; 0x0c
		//get the next task and put the current
		//task back into the priority queue
		Replace(&ActiveTasks,(void **)&pNextTask,pCurrentTask);
     4d6:	64 ef       	ldi	r22, 0xF4	; 244
     4d8:	71 e0       	ldi	r23, 0x01	; 1
     4da:	86 ee       	ldi	r24, 0xE6	; 230
     4dc:	91 e0       	ldi	r25, 0x01	; 1
     4de:	0e 94 54 0f 	call	0x1ea8	; 0x1ea8 <Replace>
		//check to see if we got the same task back
		if(pNextTask != pCurrentTask)
     4e2:	e0 91 f4 01 	lds	r30, 0x01F4	; 0x8001f4 <pNextTask>
     4e6:	f0 91 f5 01 	lds	r31, 0x01F5	; 0x8001f5 <pNextTask+0x1>
     4ea:	80 91 f0 01 	lds	r24, 0x01F0	; 0x8001f0 <pCurrentTask>
     4ee:	90 91 f1 01 	lds	r25, 0x01F1	; 0x8001f1 <pCurrentTask+0x1>
     4f2:	e8 17       	cp	r30, r24
     4f4:	f9 07       	cpc	r31, r25
     4f6:	09 f4       	brne	.+2      	; 0x4fa <ExitInterrupt+0x5a>
     4f8:	43 c0       	rjmp	.+134    	; 0x580 <irqen+0x8>
		{
			//increment the swap counter
			pNextTask->TcbSwaps++;
     4fa:	86 85       	ldd	r24, Z+14	; 0x0e
     4fc:	97 85       	ldd	r25, Z+15	; 0x0f
     4fe:	01 96       	adiw	r24, 0x01	; 1
     500:	97 87       	std	Z+15, r25	; 0x0f
     502:	86 87       	std	Z+14, r24	; 0x0e
			// the size of the stack
			// ignore return address on
			// stack to 
			// Exit Interrupt
			//-----------------------------
			asm volatile (
     504:	9e b7       	in	r25, 0x3e	; 62
     506:	8d b7       	in	r24, 0x3d	; 61
     508:	02 96       	adiw	r24, 0x02	; 2
     50a:	a0 91 f0 01 	lds	r26, 0x01F0	; 0x8001f0 <pCurrentTask>
     50e:	b0 91 f1 01 	lds	r27, 0x01F1	; 0x8001f1 <pCurrentTask+0x1>
     512:	8d 93       	st	X+, r24
     514:	9d 93       	st	X+, r25
			"lds	r26, pCurrentTask		\n\t"	//get address of current task
			"lds	r27, pCurrentTask + 1	\n\t"
			"st		x+, r24					\n\t"	//save stack pointer in TCB
			"st		x+, r25					\n\t"
			);
			pCurrentTask = pNextTask;	//update current task
     516:	f0 93 f1 01 	sts	0x01F1, r31	; 0x8001f1 <pCurrentTask+0x1>
     51a:	e0 93 f0 01 	sts	0x01F0, r30	; 0x8001f0 <pCurrentTask>
			RESTORE_CONTEXT();		//restore next task context
     51e:	a0 91 f4 01 	lds	r26, 0x01F4	; 0x8001f4 <pNextTask>
     522:	b0 91 f5 01 	lds	r27, 0x01F5	; 0x8001f5 <pNextTask+0x1>
     526:	cd 91       	ld	r28, X+
     528:	cd bf       	out	0x3d, r28	; 61
     52a:	dd 91       	ld	r29, X+
     52c:	de bf       	out	0x3e, r29	; 62
     52e:	0f 90       	pop	r0
     530:	1f 90       	pop	r1
     532:	2f 90       	pop	r2
     534:	3f 90       	pop	r3
     536:	4f 90       	pop	r4
     538:	5f 90       	pop	r5
     53a:	6f 90       	pop	r6
     53c:	7f 90       	pop	r7
     53e:	8f 90       	pop	r8
     540:	9f 90       	pop	r9
     542:	af 90       	pop	r10
     544:	bf 90       	pop	r11
     546:	cf 90       	pop	r12
     548:	df 90       	pop	r13
     54a:	ef 90       	pop	r14
     54c:	ff 90       	pop	r15
     54e:	0f 91       	pop	r16
     550:	1f 91       	pop	r17
     552:	2f 91       	pop	r18
     554:	3f 91       	pop	r19
     556:	4f 91       	pop	r20
     558:	5f 91       	pop	r21
     55a:	6f 91       	pop	r22
     55c:	7f 91       	pop	r23
     55e:	8f 91       	pop	r24
     560:	9f 91       	pop	r25
     562:	af 91       	pop	r26
     564:	bf 91       	pop	r27
     566:	cf 91       	pop	r28
     568:	df 91       	pop	r29
     56a:	ef 91       	pop	r30
     56c:	ff 91       	pop	r31
     56e:	f7 fd       	sbrc	r31, 7
     570:	03 c0       	rjmp	.+6      	; 0x578 <irqen>
     572:	ff bf       	out	0x3f, r31	; 63
     574:	ff 91       	pop	r31
     576:	08 95       	ret

00000578 <irqen>:
     578:	ff 77       	andi	r31, 0x7F	; 127
     57a:	ff bf       	out	0x3f, r31	; 63
     57c:	ff 91       	pop	r31
     57e:	18 95       	reti
     580:	08 95       	ret

00000582 <EnterInterrupt>:
}

void EnterInterrupt(void)
{
	//Increment interrupt level
	++InterruptCount;
     582:	80 91 f6 01 	lds	r24, 0x01F6	; 0x8001f6 <InterruptCount>
     586:	90 91 f7 01 	lds	r25, 0x01F7	; 0x8001f7 <InterruptCount+0x1>
     58a:	01 96       	adiw	r24, 0x01	; 1
     58c:	90 93 f7 01 	sts	0x01F7, r25	; 0x8001f7 <InterruptCount+0x1>
     590:	80 93 f6 01 	sts	0x01F6, r24	; 0x8001f6 <InterruptCount>
     594:	08 95       	ret

00000596 <IdleTask>:
void IdleTask(void *arg)  __attribute__ ( ( noreturn ) );
void IdleTask(void *arg)
{
	while(1)
	{
		IdleCount++;
     596:	80 91 ef 02 	lds	r24, 0x02EF	; 0x8002ef <IdleCount>
     59a:	90 91 f0 02 	lds	r25, 0x02F0	; 0x8002f0 <IdleCount+0x1>
     59e:	01 96       	adiw	r24, 0x01	; 1
     5a0:	90 93 f0 02 	sts	0x02F0, r25	; 0x8002f0 <IdleCount+0x1>
     5a4:	80 93 ef 02 	sts	0x02EF, r24	; 0x8002ef <IdleCount>
     5a8:	f6 cf       	rjmp	.-20     	; 0x596 <IdleTask>

000005aa <ADSR_1>:
	RESTORE_IRQ();
}

void ADSR_1(void *arg) __attribute__ ( ( noreturn ) );
void ADSR_1(void *arg)
{
     5aa:	cf 93       	push	r28
     5ac:	df 93       	push	r29
     5ae:	00 d0       	rcall	.+0      	; 0x5b0 <ADSR_1+0x6>
     5b0:	cd b7       	in	r28, 0x3d	; 61
     5b2:	de b7       	in	r29, 0x3e	; 62
	volatile int State;
	MESSAGE *pMSG;
	int Sustain=0;

	State = ADSR_STATE_RELEASE;
     5b4:	1a 82       	std	Y+2, r1	; 0x02
     5b6:	19 82       	std	Y+1, r1	; 0x01
	WriteADSRstate(State,0);
     5b8:	89 81       	ldd	r24, Y+1	; 0x01
     5ba:	9a 81       	ldd	r25, Y+2	; 0x02
     5bc:	60 e0       	ldi	r22, 0x00	; 0
     5be:	70 e0       	ldi	r23, 0x00	; 0
     5c0:	0e 94 c3 11 	call	0x2386	; 0x2386 <WriteADSRstate>
void ADSR_1(void *arg) __attribute__ ( ( noreturn ) );
void ADSR_1(void *arg)
{
	volatile int State;
	MESSAGE *pMSG;
	int Sustain=0;
     5c4:	00 e0       	ldi	r16, 0x00	; 0
     5c6:	10 e0       	ldi	r17, 0x00	; 0
				Sustain = pMSG->m_Param1;
				if(ADSR_STATE_SUSTAIN == State)
					PostMessage(pDacTaskMsg,DACTASK_UPDATEDAC,DAC_ADSR1SUS,Sustain);
				break;
			case ADSR_GATE_ON:
				State = ADSR_STATE_ATTACK;
     5c8:	ee 24       	eor	r14, r14
     5ca:	e3 94       	inc	r14
     5cc:	f1 2c       	mov	r15, r1

	State = ADSR_STATE_RELEASE;
	WriteADSRstate(State,0);
	while(1)
	{
		pMSG = GetMessage(pADSR1Msg);
     5ce:	80 91 6f 02 	lds	r24, 0x026F	; 0x80026f <pADSR1Msg>
     5d2:	90 91 70 02 	lds	r25, 0x0270	; 0x800270 <pADSR1Msg+0x1>
     5d6:	ad d6       	rcall	.+3418   	; 0x1332 <GetMessage>
		switch(pMSG->m_Cmd)
     5d8:	fc 01       	movw	r30, r24
     5da:	20 81       	ld	r18, Z
     5dc:	31 81       	ldd	r19, Z+1	; 0x01
     5de:	21 30       	cpi	r18, 0x01	; 1
     5e0:	31 05       	cpc	r19, r1
     5e2:	e1 f0       	breq	.+56     	; 0x61c <ADSR_1+0x72>
     5e4:	38 f0       	brcs	.+14     	; 0x5f4 <ADSR_1+0x4a>
     5e6:	22 30       	cpi	r18, 0x02	; 2
     5e8:	31 05       	cpc	r19, r1
     5ea:	51 f1       	breq	.+84     	; 0x640 <ADSR_1+0x96>
     5ec:	23 30       	cpi	r18, 0x03	; 3
     5ee:	31 05       	cpc	r19, r1
     5f0:	a9 f1       	breq	.+106    	; 0x65c <ADSR_1+0xb2>
     5f2:	41 c0       	rjmp	.+130    	; 0x676 <ADSR_1+0xcc>
		{
			case ADSR_LEVELTRIPPED:
				if(ADSR_STATE_ATTACK == State)
     5f4:	89 81       	ldd	r24, Y+1	; 0x01
     5f6:	9a 81       	ldd	r25, Y+2	; 0x02
     5f8:	01 97       	sbiw	r24, 0x01	; 1
     5fa:	09 f0       	breq	.+2      	; 0x5fe <ADSR_1+0x54>
     5fc:	3c c0       	rjmp	.+120    	; 0x676 <ADSR_1+0xcc>
				{
					State =ADSR_STATE_SUSTAIN;
     5fe:	82 e0       	ldi	r24, 0x02	; 2
     600:	90 e0       	ldi	r25, 0x00	; 0
     602:	9a 83       	std	Y+2, r25	; 0x02
     604:	89 83       	std	Y+1, r24	; 0x01
					PostMessage(pDacTaskMsg,DACTASK_UPDATEDAC,DAC_ADSR1SUS,Sustain);
     606:	98 01       	movw	r18, r16
     608:	4c e0       	ldi	r20, 0x0C	; 12
     60a:	50 e0       	ldi	r21, 0x00	; 0
     60c:	62 e0       	ldi	r22, 0x02	; 2
     60e:	70 e0       	ldi	r23, 0x00	; 0
     610:	80 91 a5 02 	lds	r24, 0x02A5	; 0x8002a5 <pDacTaskMsg>
     614:	90 91 a6 02 	lds	r25, 0x02A6	; 0x8002a6 <pDacTaskMsg+0x1>
     618:	3b d6       	rcall	.+3190   	; 0x1290 <PostMessage>
     61a:	2d c0       	rjmp	.+90     	; 0x676 <ADSR_1+0xcc>
				}
				break;
			case ADSR_SUSTAIN:
				Sustain = pMSG->m_Param1;
     61c:	fc 01       	movw	r30, r24
     61e:	02 81       	ldd	r16, Z+2	; 0x02
     620:	13 81       	ldd	r17, Z+3	; 0x03
				if(ADSR_STATE_SUSTAIN == State)
     622:	89 81       	ldd	r24, Y+1	; 0x01
     624:	9a 81       	ldd	r25, Y+2	; 0x02
     626:	02 97       	sbiw	r24, 0x02	; 2
     628:	31 f5       	brne	.+76     	; 0x676 <ADSR_1+0xcc>
					PostMessage(pDacTaskMsg,DACTASK_UPDATEDAC,DAC_ADSR1SUS,Sustain);
     62a:	98 01       	movw	r18, r16
     62c:	4c e0       	ldi	r20, 0x0C	; 12
     62e:	50 e0       	ldi	r21, 0x00	; 0
     630:	62 e0       	ldi	r22, 0x02	; 2
     632:	70 e0       	ldi	r23, 0x00	; 0
     634:	80 91 a5 02 	lds	r24, 0x02A5	; 0x8002a5 <pDacTaskMsg>
     638:	90 91 a6 02 	lds	r25, 0x02A6	; 0x8002a6 <pDacTaskMsg+0x1>
     63c:	29 d6       	rcall	.+3154   	; 0x1290 <PostMessage>
     63e:	1b c0       	rjmp	.+54     	; 0x676 <ADSR_1+0xcc>
				break;
			case ADSR_GATE_ON:
				State = ADSR_STATE_ATTACK;
     640:	fa 82       	std	Y+2, r15	; 0x02
     642:	e9 82       	std	Y+1, r14	; 0x01
				PostMessage(pDacTaskMsg,DACTASK_UPDATEDAC,DAC_ADSR1SUS,0x3ff);
     644:	2f ef       	ldi	r18, 0xFF	; 255
     646:	33 e0       	ldi	r19, 0x03	; 3
     648:	4c e0       	ldi	r20, 0x0C	; 12
     64a:	50 e0       	ldi	r21, 0x00	; 0
     64c:	62 e0       	ldi	r22, 0x02	; 2
     64e:	70 e0       	ldi	r23, 0x00	; 0
     650:	80 91 a5 02 	lds	r24, 0x02A5	; 0x8002a5 <pDacTaskMsg>
     654:	90 91 a6 02 	lds	r25, 0x02A6	; 0x8002a6 <pDacTaskMsg+0x1>
     658:	1b d6       	rcall	.+3126   	; 0x1290 <PostMessage>
				break;
     65a:	0d c0       	rjmp	.+26     	; 0x676 <ADSR_1+0xcc>
			case ADSR_GATE_OFF:
				State = ADSR_STATE_RELEASE;
     65c:	1a 82       	std	Y+2, r1	; 0x02
     65e:	19 82       	std	Y+1, r1	; 0x01
				PostMessage(pDacTaskMsg,DACTASK_UPDATEDAC,DAC_ADSR1SUS,0);
     660:	20 e0       	ldi	r18, 0x00	; 0
     662:	30 e0       	ldi	r19, 0x00	; 0
     664:	4c e0       	ldi	r20, 0x0C	; 12
     666:	50 e0       	ldi	r21, 0x00	; 0
     668:	62 e0       	ldi	r22, 0x02	; 2
     66a:	70 e0       	ldi	r23, 0x00	; 0
     66c:	80 91 a5 02 	lds	r24, 0x02A5	; 0x8002a5 <pDacTaskMsg>
     670:	90 91 a6 02 	lds	r25, 0x02A6	; 0x8002a6 <pDacTaskMsg+0x1>
     674:	0d d6       	rcall	.+3098   	; 0x1290 <PostMessage>
				break;
		}
		WriteADSRstate(State,0);
     676:	89 81       	ldd	r24, Y+1	; 0x01
     678:	9a 81       	ldd	r25, Y+2	; 0x02
     67a:	60 e0       	ldi	r22, 0x00	; 0
     67c:	70 e0       	ldi	r23, 0x00	; 0
     67e:	0e 94 c3 11 	call	0x2386	; 0x2386 <WriteADSRstate>
	}
     682:	a5 cf       	rjmp	.-182    	; 0x5ce <ADSR_1+0x24>

00000684 <ADSR_2>:
}

void ADSR_2(void *arg) __attribute__ ( ( noreturn ) );
void ADSR_2(void *arg)
{
     684:	cf 93       	push	r28
     686:	df 93       	push	r29
     688:	00 d0       	rcall	.+0      	; 0x68a <ADSR_2+0x6>
     68a:	cd b7       	in	r28, 0x3d	; 61
     68c:	de b7       	in	r29, 0x3e	; 62
	volatile int State;
	int Sustain = 0;
	MESSAGE *pMSG;

	State = ADSR_STATE_RELEASE;
     68e:	1a 82       	std	Y+2, r1	; 0x02
     690:	19 82       	std	Y+1, r1	; 0x01
	WriteADSRstate(State,1);
     692:	89 81       	ldd	r24, Y+1	; 0x01
     694:	9a 81       	ldd	r25, Y+2	; 0x02
     696:	61 e0       	ldi	r22, 0x01	; 1
     698:	70 e0       	ldi	r23, 0x00	; 0
     69a:	0e 94 c3 11 	call	0x2386	; 0x2386 <WriteADSRstate>

void ADSR_2(void *arg) __attribute__ ( ( noreturn ) );
void ADSR_2(void *arg)
{
	volatile int State;
	int Sustain = 0;
     69e:	e1 2c       	mov	r14, r1
     6a0:	f1 2c       	mov	r15, r1
				Sustain = pMSG->m_Param1;
				if(ADSR_STATE_SUSTAIN == State)
					PostMessage(pDacTaskMsg,DACTASK_UPDATEDAC,DAC_ADSR2SUS,Sustain);
				break;
			case ADSR_GATE_ON:
				State = ADSR_STATE_ATTACK;
     6a2:	01 e0       	ldi	r16, 0x01	; 1
     6a4:	10 e0       	ldi	r17, 0x00	; 0

	State = ADSR_STATE_RELEASE;
	WriteADSRstate(State,1);
	while(1)
	{
		pMSG = GetMessage(pADSR2Msg);
     6a6:	80 91 f8 01 	lds	r24, 0x01F8	; 0x8001f8 <pADSR2Msg>
     6aa:	90 91 f9 01 	lds	r25, 0x01F9	; 0x8001f9 <pADSR2Msg+0x1>
     6ae:	41 d6       	rcall	.+3202   	; 0x1332 <GetMessage>
		switch(pMSG->m_Cmd)
     6b0:	fc 01       	movw	r30, r24
     6b2:	20 81       	ld	r18, Z
     6b4:	31 81       	ldd	r19, Z+1	; 0x01
     6b6:	21 30       	cpi	r18, 0x01	; 1
     6b8:	31 05       	cpc	r19, r1
     6ba:	e1 f0       	breq	.+56     	; 0x6f4 <ADSR_2+0x70>
     6bc:	38 f0       	brcs	.+14     	; 0x6cc <ADSR_2+0x48>
     6be:	22 30       	cpi	r18, 0x02	; 2
     6c0:	31 05       	cpc	r19, r1
     6c2:	51 f1       	breq	.+84     	; 0x718 <ADSR_2+0x94>
     6c4:	23 30       	cpi	r18, 0x03	; 3
     6c6:	31 05       	cpc	r19, r1
     6c8:	a9 f1       	breq	.+106    	; 0x734 <ADSR_2+0xb0>
     6ca:	41 c0       	rjmp	.+130    	; 0x74e <ADSR_2+0xca>
		{
			case ADSR_LEVELTRIPPED:
				if(ADSR_STATE_ATTACK == State)
     6cc:	89 81       	ldd	r24, Y+1	; 0x01
     6ce:	9a 81       	ldd	r25, Y+2	; 0x02
     6d0:	01 97       	sbiw	r24, 0x01	; 1
     6d2:	09 f0       	breq	.+2      	; 0x6d6 <ADSR_2+0x52>
     6d4:	3c c0       	rjmp	.+120    	; 0x74e <ADSR_2+0xca>
				{
					State =ADSR_STATE_SUSTAIN;
     6d6:	82 e0       	ldi	r24, 0x02	; 2
     6d8:	90 e0       	ldi	r25, 0x00	; 0
     6da:	9a 83       	std	Y+2, r25	; 0x02
     6dc:	89 83       	std	Y+1, r24	; 0x01
					PostMessage(pDacTaskMsg,DACTASK_UPDATEDAC,DAC_ADSR2SUS,Sustain);
     6de:	97 01       	movw	r18, r14
     6e0:	4d e0       	ldi	r20, 0x0D	; 13
     6e2:	50 e0       	ldi	r21, 0x00	; 0
     6e4:	62 e0       	ldi	r22, 0x02	; 2
     6e6:	70 e0       	ldi	r23, 0x00	; 0
     6e8:	80 91 a5 02 	lds	r24, 0x02A5	; 0x8002a5 <pDacTaskMsg>
     6ec:	90 91 a6 02 	lds	r25, 0x02A6	; 0x8002a6 <pDacTaskMsg+0x1>
     6f0:	cf d5       	rcall	.+2974   	; 0x1290 <PostMessage>
     6f2:	2d c0       	rjmp	.+90     	; 0x74e <ADSR_2+0xca>
				}
				break;
			case ADSR_SUSTAIN:
				Sustain = pMSG->m_Param1;
     6f4:	fc 01       	movw	r30, r24
     6f6:	e2 80       	ldd	r14, Z+2	; 0x02
     6f8:	f3 80       	ldd	r15, Z+3	; 0x03
				if(ADSR_STATE_SUSTAIN == State)
     6fa:	89 81       	ldd	r24, Y+1	; 0x01
     6fc:	9a 81       	ldd	r25, Y+2	; 0x02
     6fe:	02 97       	sbiw	r24, 0x02	; 2
     700:	31 f5       	brne	.+76     	; 0x74e <ADSR_2+0xca>
					PostMessage(pDacTaskMsg,DACTASK_UPDATEDAC,DAC_ADSR2SUS,Sustain);
     702:	97 01       	movw	r18, r14
     704:	4d e0       	ldi	r20, 0x0D	; 13
     706:	50 e0       	ldi	r21, 0x00	; 0
     708:	62 e0       	ldi	r22, 0x02	; 2
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	80 91 a5 02 	lds	r24, 0x02A5	; 0x8002a5 <pDacTaskMsg>
     710:	90 91 a6 02 	lds	r25, 0x02A6	; 0x8002a6 <pDacTaskMsg+0x1>
     714:	bd d5       	rcall	.+2938   	; 0x1290 <PostMessage>
     716:	1b c0       	rjmp	.+54     	; 0x74e <ADSR_2+0xca>
				break;
			case ADSR_GATE_ON:
				State = ADSR_STATE_ATTACK;
     718:	1a 83       	std	Y+2, r17	; 0x02
     71a:	09 83       	std	Y+1, r16	; 0x01
				PostMessage(pDacTaskMsg,DACTASK_UPDATEDAC,DAC_ADSR2SUS,0x3ff);
     71c:	2f ef       	ldi	r18, 0xFF	; 255
     71e:	33 e0       	ldi	r19, 0x03	; 3
     720:	4d e0       	ldi	r20, 0x0D	; 13
     722:	50 e0       	ldi	r21, 0x00	; 0
     724:	62 e0       	ldi	r22, 0x02	; 2
     726:	70 e0       	ldi	r23, 0x00	; 0
     728:	80 91 a5 02 	lds	r24, 0x02A5	; 0x8002a5 <pDacTaskMsg>
     72c:	90 91 a6 02 	lds	r25, 0x02A6	; 0x8002a6 <pDacTaskMsg+0x1>
     730:	af d5       	rcall	.+2910   	; 0x1290 <PostMessage>
				break;
     732:	0d c0       	rjmp	.+26     	; 0x74e <ADSR_2+0xca>
			case ADSR_GATE_OFF:
				State = ADSR_STATE_RELEASE;
     734:	1a 82       	std	Y+2, r1	; 0x02
     736:	19 82       	std	Y+1, r1	; 0x01
				PostMessage(pDacTaskMsg,DACTASK_UPDATEDAC,DAC_ADSR2SUS,0);
     738:	20 e0       	ldi	r18, 0x00	; 0
     73a:	30 e0       	ldi	r19, 0x00	; 0
     73c:	4d e0       	ldi	r20, 0x0D	; 13
     73e:	50 e0       	ldi	r21, 0x00	; 0
     740:	62 e0       	ldi	r22, 0x02	; 2
     742:	70 e0       	ldi	r23, 0x00	; 0
     744:	80 91 a5 02 	lds	r24, 0x02A5	; 0x8002a5 <pDacTaskMsg>
     748:	90 91 a6 02 	lds	r25, 0x02A6	; 0x8002a6 <pDacTaskMsg+0x1>
     74c:	a1 d5       	rcall	.+2882   	; 0x1290 <PostMessage>
				break;
		}
		WriteADSRstate(State,1);
     74e:	89 81       	ldd	r24, Y+1	; 0x01
     750:	9a 81       	ldd	r25, Y+2	; 0x02
     752:	b8 01       	movw	r22, r16
     754:	0e 94 c3 11 	call	0x2386	; 0x2386 <WriteADSRstate>
	}
     758:	a6 cf       	rjmp	.-180    	; 0x6a6 <ADSR_2+0x22>

0000075a <ADCTask>:
{
	int v;
	int chan;

	chan = 0;
	ADCSRA |= BIT(ADEN);	//enable A/D converter
     75a:	ea e7       	ldi	r30, 0x7A	; 122
     75c:	f0 e0       	ldi	r31, 0x00	; 0
     75e:	80 81       	ld	r24, Z
     760:	80 68       	ori	r24, 0x80	; 128
     762:	80 83       	st	Z, r24
	ADMUX = chan;			//set ADC channel
     764:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	ADCSRA |= BIT(ADSC);	//start conversion
     768:	80 81       	ld	r24, Z
     76a:	80 64       	ori	r24, 0x40	; 64
     76c:	80 83       	st	Z, r24
	ADCSRA |= BIT(ADIE) | BIT(ADPS2) | BIT(ADPS1) | BIT(ADPS0);	//enable interrupt
     76e:	80 81       	ld	r24, Z
     770:	8f 60       	ori	r24, 0x0F	; 15
     772:	80 83       	st	Z, r24
void ADCTask(void *arg)
{
	int v;
	int chan;

	chan = 0;
     774:	c0 e0       	ldi	r28, 0x00	; 0
     776:	d0 e0       	ldi	r29, 0x00	; 0
		{
			PostMessage(pADSR2Msg,ADSR_SUSTAIN,v,v);
			chan = 1;
		}
		TimeDelay(50);
		ADMUX = chan;			//set ADC channel
     778:	0f 2e       	mov	r0, r31
     77a:	fc e7       	ldi	r31, 0x7C	; 124
     77c:	ef 2e       	mov	r14, r31
     77e:	f1 2c       	mov	r15, r1
     780:	f0 2d       	mov	r31, r0
		ADCSRA |= BIT(ADSC);	//start conversion
     782:	0a e7       	ldi	r16, 0x7A	; 122
     784:	10 e0       	ldi	r17, 0x00	; 0
	ADCSRA |= BIT(ADSC);	//start conversion
	ADCSRA |= BIT(ADIE) | BIT(ADPS2) | BIT(ADPS1) | BIT(ADPS0);	//enable interrupt
	while(1)
	{
		//get value from ADC
		v = PendSemaphore(pSemAdc,0);
     786:	60 e0       	ldi	r22, 0x00	; 0
     788:	70 e0       	ldi	r23, 0x00	; 0
     78a:	80 91 3d 02 	lds	r24, 0x023D	; 0x80023d <pSemAdc>
     78e:	90 91 3e 02 	lds	r25, 0x023E	; 0x80023e <pSemAdc+0x1>
     792:	0e 94 83 0c 	call	0x1906	; 0x1906 <PendSemaphore>
		if(chan)
     796:	cd 2b       	or	r28, r29
     798:	61 f0       	breq	.+24     	; 0x7b2 <ADCTask+0x58>
		{
			PostMessage(pADSR1Msg,ADSR_SUSTAIN,v,v);
     79a:	9c 01       	movw	r18, r24
     79c:	ac 01       	movw	r20, r24
     79e:	61 e0       	ldi	r22, 0x01	; 1
     7a0:	70 e0       	ldi	r23, 0x00	; 0
     7a2:	80 91 6f 02 	lds	r24, 0x026F	; 0x80026f <pADSR1Msg>
     7a6:	90 91 70 02 	lds	r25, 0x0270	; 0x800270 <pADSR1Msg+0x1>
     7aa:	72 d5       	rcall	.+2788   	; 0x1290 <PostMessage>
			chan = 0;
     7ac:	c0 e0       	ldi	r28, 0x00	; 0
     7ae:	d0 e0       	ldi	r29, 0x00	; 0
     7b0:	0b c0       	rjmp	.+22     	; 0x7c8 <ADCTask+0x6e>
		}
		else
		{
			PostMessage(pADSR2Msg,ADSR_SUSTAIN,v,v);
     7b2:	9c 01       	movw	r18, r24
     7b4:	ac 01       	movw	r20, r24
     7b6:	61 e0       	ldi	r22, 0x01	; 1
     7b8:	70 e0       	ldi	r23, 0x00	; 0
     7ba:	80 91 f8 01 	lds	r24, 0x01F8	; 0x8001f8 <pADSR2Msg>
     7be:	90 91 f9 01 	lds	r25, 0x01F9	; 0x8001f9 <pADSR2Msg+0x1>
     7c2:	66 d5       	rcall	.+2764   	; 0x1290 <PostMessage>
			chan = 1;
     7c4:	c1 e0       	ldi	r28, 0x01	; 1
     7c6:	d0 e0       	ldi	r29, 0x00	; 0
		}
		TimeDelay(50);
     7c8:	82 e3       	ldi	r24, 0x32	; 50
     7ca:	90 e0       	ldi	r25, 0x00	; 0
     7cc:	0e 94 98 12 	call	0x2530	; 0x2530 <TimeDelay>
		ADMUX = chan;			//set ADC channel
     7d0:	f7 01       	movw	r30, r14
     7d2:	c0 83       	st	Z, r28
		ADCSRA |= BIT(ADSC);	//start conversion
     7d4:	f8 01       	movw	r30, r16
     7d6:	80 81       	ld	r24, Z
     7d8:	80 64       	ori	r24, 0x40	; 64
     7da:	80 83       	st	Z, r24
	}
     7dc:	d4 cf       	rjmp	.-88     	; 0x786 <ADCTask+0x2c>

000007de <DacTask>:
{
	MESSAGE *pMsg;
	int i = 0;
	int a;

	PostMessage(pDacTaskMsg,DACTASK_START,0,0);
     7de:	20 e0       	ldi	r18, 0x00	; 0
     7e0:	30 e0       	ldi	r19, 0x00	; 0
     7e2:	40 e0       	ldi	r20, 0x00	; 0
     7e4:	50 e0       	ldi	r21, 0x00	; 0
     7e6:	61 e0       	ldi	r22, 0x01	; 1
     7e8:	70 e0       	ldi	r23, 0x00	; 0
     7ea:	80 91 a5 02 	lds	r24, 0x02A5	; 0x8002a5 <pDacTaskMsg>
     7ee:	90 91 a6 02 	lds	r25, 0x02A6	; 0x8002a6 <pDacTaskMsg+0x1>
     7f2:	4e d5       	rcall	.+2716   	; 0x1290 <PostMessage>

void DacTask(void *arg) __attribute__ ( ( noreturn ) );
void DacTask(void *arg)
{
	MESSAGE *pMsg;
	int i = 0;
     7f4:	c0 e0       	ldi	r28, 0x00	; 0
     7f6:	d0 e0       	ldi	r29, 0x00	; 0
	int a;

	PostMessage(pDacTaskMsg,DACTASK_START,0,0);
	while(1)
	{
		pMsg = GetMessage(pDacTaskMsg);
     7f8:	80 91 a5 02 	lds	r24, 0x02A5	; 0x8002a5 <pDacTaskMsg>
     7fc:	90 91 a6 02 	lds	r25, 0x02A6	; 0x8002a6 <pDacTaskMsg+0x1>
     800:	98 d5       	rcall	.+2864   	; 0x1332 <GetMessage>
		switch(pMsg->m_Cmd)
     802:	dc 01       	movw	r26, r24
     804:	2d 91       	ld	r18, X+
     806:	3c 91       	ld	r19, X
     808:	22 30       	cpi	r18, 0x02	; 2
     80a:	31 05       	cpc	r19, r1
     80c:	c9 f0       	breq	.+50     	; 0x840 <DacTask+0x62>
     80e:	38 f0       	brcs	.+14     	; 0x81e <DacTask+0x40>
     810:	23 30       	cpi	r18, 0x03	; 3
     812:	31 05       	cpc	r19, r1
     814:	29 f1       	breq	.+74     	; 0x860 <DacTask+0x82>
     816:	24 30       	cpi	r18, 0x04	; 4
     818:	31 05       	cpc	r19, r1
     81a:	79 f1       	breq	.+94     	; 0x87a <DacTask+0x9c>
     81c:	ed cf       	rjmp	.-38     	; 0x7f8 <DacTask+0x1a>
//				{
//					DacValues[i] += 100;
//					if(0x3ff < DacValues[i])
//						DacValues[i] = 0;
//				}
				WriteDAC(DacValues[i],i);
     81e:	fe 01       	movw	r30, r28
     820:	ee 0f       	add	r30, r30
     822:	ff 1f       	adc	r31, r31
     824:	e0 50       	subi	r30, 0x00	; 0
     826:	ff 4f       	sbci	r31, 0xFF	; 255
     828:	be 01       	movw	r22, r28
     82a:	80 81       	ld	r24, Z
     82c:	91 81       	ldd	r25, Z+1	; 0x01
     82e:	0e 94 96 11 	call	0x232c	; 0x232c <WriteDAC>
				++i;	//increment DAC index
     832:	21 96       	adiw	r28, 0x01	; 1
				if(i == 14)	//all 14 channels updated?
     834:	ce 30       	cpi	r28, 0x0E	; 14
     836:	d1 05       	cpc	r29, r1
     838:	f9 f6       	brne	.-66     	; 0x7f8 <DacTask+0x1a>
					i = 0;	//wrap when end is reached
     83a:	c0 e0       	ldi	r28, 0x00	; 0
     83c:	d0 e0       	ldi	r29, 0x00	; 0
     83e:	dc cf       	rjmp	.-72     	; 0x7f8 <DacTask+0x1a>
				// Update the shadow for the DAC
				// Change current index to that
				// DAC so it will be updated on
				// next cycle.
				//-------------------------------
				i = pMsg->m_Param1;
     840:	fc 01       	movw	r30, r24
     842:	c2 81       	ldd	r28, Z+2	; 0x02
     844:	d3 81       	ldd	r29, Z+3	; 0x03
				DacValues[i] = pMsg->m_Param2;
     846:	fe 01       	movw	r30, r28
     848:	ee 0f       	add	r30, r30
     84a:	ff 1f       	adc	r31, r31
     84c:	e0 50       	subi	r30, 0x00	; 0
     84e:	ff 4f       	sbci	r31, 0xFF	; 255
     850:	dc 01       	movw	r26, r24
     852:	14 96       	adiw	r26, 0x04	; 4
     854:	8d 91       	ld	r24, X+
     856:	9c 91       	ld	r25, X
     858:	15 97       	sbiw	r26, 0x05	; 5
     85a:	91 83       	std	Z+1, r25	; 0x01
     85c:	80 83       	st	Z, r24
				break;
     85e:	cc cf       	rjmp	.-104    	; 0x7f8 <DacTask+0x1a>
			case DACTASK_WRITEPORT:
				//-------------------------------
				// write to the SPI output port
				// (74HC595)
				//-------------------------------
				WriteSpi(pMsg->m_Param1);
     860:	fc 01       	movw	r30, r24
     862:	82 81       	ldd	r24, Z+2	; 0x02
     864:	0e 94 91 11 	call	0x2322	; 0x2322 <WriteSpi>
				ClearPortB(PORTB_LD_OUTPORT);
     868:	80 e0       	ldi	r24, 0x00	; 0
     86a:	90 e0       	ldi	r25, 0x00	; 0
     86c:	0e 94 59 0d 	call	0x1ab2	; 0x1ab2 <ClearPortB>
				SetPortB(PORTB_LD_OUTPORT);
     870:	80 e0       	ldi	r24, 0x00	; 0
     872:	90 e0       	ldi	r25, 0x00	; 0
     874:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <SetPortB>
				break;
     878:	bf cf       	rjmp	.-130    	; 0x7f8 <DacTask+0x1a>
				//	The reason for this is
				// so that we can synchronize
				// these events with changes
				// in the DAC values.
				//------------------------
				a = pMsg->m_Param1 & 1;
     87a:	dc 01       	movw	r26, r24
     87c:	12 96       	adiw	r26, 0x02	; 2
     87e:	8d 91       	ld	r24, X+
     880:	9c 91       	ld	r25, X
     882:	13 97       	sbiw	r26, 0x03	; 3
     884:	9c 01       	movw	r18, r24
     886:	21 70       	andi	r18, 0x01	; 1
     888:	33 27       	eor	r19, r19
				switch(pMsg->m_Param1>>1)
     88a:	96 95       	lsr	r25
     88c:	87 95       	ror	r24
     88e:	82 30       	cpi	r24, 0x02	; 2
     890:	91 05       	cpc	r25, r1
     892:	21 f1       	breq	.+72     	; 0x8dc <DacTask+0xfe>
     894:	28 f4       	brcc	.+10     	; 0x8a0 <DacTask+0xc2>
     896:	00 97       	sbiw	r24, 0x00	; 0
     898:	49 f0       	breq	.+18     	; 0x8ac <DacTask+0xce>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	99 f0       	breq	.+38     	; 0x8c4 <DacTask+0xe6>
     89e:	ac cf       	rjmp	.-168    	; 0x7f8 <DacTask+0x1a>
     8a0:	83 30       	cpi	r24, 0x03	; 3
     8a2:	91 05       	cpc	r25, r1
     8a4:	39 f1       	breq	.+78     	; 0x8f4 <DacTask+0x116>
     8a6:	04 97       	sbiw	r24, 0x04	; 4
     8a8:	89 f1       	breq	.+98     	; 0x90c <DacTask+0x12e>
     8aa:	a6 cf       	rjmp	.-180    	; 0x7f8 <DacTask+0x1a>
				{
					case WRITE_MISC_START_STOP:
						if(a)
     8ac:	23 2b       	or	r18, r19
     8ae:	29 f0       	breq	.+10     	; 0x8ba <DacTask+0xdc>
							SetPortC(PORTC_START_STOP);
     8b0:	87 e0       	ldi	r24, 0x07	; 7
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	0e 94 71 0d 	call	0x1ae2	; 0x1ae2 <SetPortC>
     8b8:	9f cf       	rjmp	.-194    	; 0x7f8 <DacTask+0x1a>
						else
							ClearPortC(PORTC_START_STOP);
     8ba:	87 e0       	ldi	r24, 0x07	; 7
     8bc:	90 e0       	ldi	r25, 0x00	; 0
     8be:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <ClearPortC>
     8c2:	9a cf       	rjmp	.-204    	; 0x7f8 <DacTask+0x1a>
						break;
					case WRITE_MISC_DRUM1:
						if(a)
     8c4:	23 2b       	or	r18, r19
     8c6:	29 f0       	breq	.+10     	; 0x8d2 <DacTask+0xf4>
							SetPortD(PORTD_DRUMTRIG1);
     8c8:	85 e0       	ldi	r24, 0x05	; 5
     8ca:	90 e0       	ldi	r25, 0x00	; 0
     8cc:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <SetPortD>
     8d0:	93 cf       	rjmp	.-218    	; 0x7f8 <DacTask+0x1a>
						else
							ClearPortD(PORTD_DRUMTRIG1);
     8d2:	85 e0       	ldi	r24, 0x05	; 5
     8d4:	90 e0       	ldi	r25, 0x00	; 0
     8d6:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <ClearPortD>
     8da:	8e cf       	rjmp	.-228    	; 0x7f8 <DacTask+0x1a>
						break;
					case WRITE_MISC_DRUM2:
						if(a)
     8dc:	23 2b       	or	r18, r19
     8de:	29 f0       	breq	.+10     	; 0x8ea <DacTask+0x10c>
							SetPortD(PORTD_DRUMTRIG2);
     8e0:	86 e0       	ldi	r24, 0x06	; 6
     8e2:	90 e0       	ldi	r25, 0x00	; 0
     8e4:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <SetPortD>
     8e8:	87 cf       	rjmp	.-242    	; 0x7f8 <DacTask+0x1a>
						else
							ClearPortD(PORTD_DRUMTRIG2);
     8ea:	86 e0       	ldi	r24, 0x06	; 6
     8ec:	90 e0       	ldi	r25, 0x00	; 0
     8ee:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <ClearPortD>
     8f2:	82 cf       	rjmp	.-252    	; 0x7f8 <DacTask+0x1a>
						break;
					case WRITE_MISC_DRUM3:
						if(a)
     8f4:	23 2b       	or	r18, r19
     8f6:	29 f0       	breq	.+10     	; 0x902 <DacTask+0x124>
							SetPortD(PORTD_DRUMTRIG3);
     8f8:	87 e0       	ldi	r24, 0x07	; 7
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <SetPortD>
     900:	7b cf       	rjmp	.-266    	; 0x7f8 <DacTask+0x1a>
						else
							ClearPortD(PORTD_DRUMTRIG3);
     902:	87 e0       	ldi	r24, 0x07	; 7
     904:	90 e0       	ldi	r25, 0x00	; 0
     906:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <ClearPortD>
     90a:	76 cf       	rjmp	.-276    	; 0x7f8 <DacTask+0x1a>
						break;
					case WRITE_MISC_CYMBAL:
						if(a)
     90c:	23 2b       	or	r18, r19
     90e:	29 f0       	breq	.+10     	; 0x91a <DacTask+0x13c>
							SetPortB(PORTB_CYMBALTRIG);
     910:	83 e0       	ldi	r24, 0x03	; 3
     912:	90 e0       	ldi	r25, 0x00	; 0
     914:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <SetPortB>
     918:	6f cf       	rjmp	.-290    	; 0x7f8 <DacTask+0x1a>
						else
							ClearPortB(PORTB_CYMBALTRIG);
     91a:	83 e0       	ldi	r24, 0x03	; 3
     91c:	90 e0       	ldi	r25, 0x00	; 0
     91e:	0e 94 59 0d 	call	0x1ab2	; 0x1ab2 <ClearPortB>
     922:	6a cf       	rjmp	.-300    	; 0x7f8 <DacTask+0x1a>

00000924 <TaskMidiClock>:
		//-----------------------------
		// Wait for MidiParser to
		// decode a MIDICLOCK real
		// time message
		//-----------------------------
		PendSemaphore(pSemClock,0);
     924:	60 e0       	ldi	r22, 0x00	; 0
     926:	70 e0       	ldi	r23, 0x00	; 0
     928:	80 91 71 02 	lds	r24, 0x0271	; 0x800271 <pSemClock>
     92c:	90 91 72 02 	lds	r25, 0x0272	; 0x800272 <pSemClock+0x1>
     930:	ea d7       	rcall	.+4052   	; 0x1906 <PendSemaphore>
		//-----------------------------
		// Delay for 1.0 mSec to make
		// a 1.0mSec pulse on the Midi
		// Clock output
		//-----------------------------
		TimeDelay(1);
     932:	81 e0       	ldi	r24, 0x01	; 1
     934:	90 e0       	ldi	r25, 0x00	; 0
     936:	0e 94 98 12 	call	0x2530	; 0x2530 <TimeDelay>
		//-----------------------------
		// Set the midi clock output
		// back to zero
		//-----------------------------
		ClearPortC(PORTC_MIDI_CLOCK);
     93a:	86 e0       	ldi	r24, 0x06	; 6
     93c:	90 e0       	ldi	r25, 0x00	; 0
     93e:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <ClearPortC>
     942:	f0 cf       	rjmp	.-32     	; 0x924 <TaskMidiClock>

00000944 <MidiIn>:
	}
}

void MidiIn(void *arg)  __attribute__ ( ( noreturn ) );
void MidiIn(void *arg)
{
     944:	cf 93       	push	r28
     946:	df 93       	push	r29
     948:	00 d0       	rcall	.+0      	; 0x94a <MidiIn+0x6>
     94a:	cd b7       	in	r28, 0x3d	; 61
     94c:	de b7       	in	r29, 0x3e	; 62
	volatile int c;
	MIDIPARSE_D *pMidDesc;

	pMidDesc = newMidiParseDescriptor();
     94e:	94 d5       	rcall	.+2856   	; 0x1478 <newMidiParseDescriptor>
	InitMidiParseDesc(pMidDesc);
     950:	97 d5       	rcall	.+2862   	; 0x1480 <InitMidiParseDesc>
     952:	8c e0       	ldi	r24, 0x0C	; 12
	pMidDesc = malloc(sizeof(MIDIPARSE_D));
     954:	90 e0       	ldi	r25, 0x00	; 0
     956:	cf d2       	rcall	.+1438   	; 0xef6 <malloc>
     958:	8c 01       	movw	r16, r24
     95a:	0e 94 9e 13 	call	0x273c	; 0x273c <USART_GetC>
	while(1)
	{
		c = USART_GetC();	//get a character from the midi port
     95e:	9a 83       	std	Y+2, r25	; 0x02
     960:	89 83       	std	Y+1, r24	; 0x01
     962:	69 81       	ldd	r22, Y+1	; 0x01
		ParseMidi(pMidDesc, c);
     964:	7a 81       	ldd	r23, Y+2	; 0x02
     966:	c8 01       	movw	r24, r16
     968:	8e d6       	rcall	.+3356   	; 0x1686 <ParseMidi>
     96a:	f7 cf       	rjmp	.-18     	; 0x95a <MidiIn+0x16>

0000096c <TaskMidiReset>:
     96c:	60 e0       	ldi	r22, 0x00	; 0
		//------------------------------
		// Wait for the MidiParser to
		// decode a Reset Real time
		// message.
		//------------------------------
		PendSemaphore(pSemReset,0);	
     96e:	70 e0       	ldi	r23, 0x00	; 0
     970:	80 91 8b 02 	lds	r24, 0x028B	; 0x80028b <pSemReset>
     974:	90 91 8c 02 	lds	r25, 0x028C	; 0x80028c <pSemReset+0x1>
     978:	c6 d7       	rcall	.+3980   	; 0x1906 <PendSemaphore>
		TimeDelay(2);	//delay an extra 10mS
     97a:	82 e0       	ldi	r24, 0x02	; 2
     97c:	90 e0       	ldi	r25, 0x00	; 0
     97e:	0e 94 98 12 	call	0x2530	; 0x2530 <TimeDelay>
		//------------------------------
		// Set the RESET output back to
		// zero
		//------------------------------
		ClearPortA(PORTA_MIDIRESET);	//clear bit
     982:	82 e0       	ldi	r24, 0x02	; 2
     984:	90 e0       	ldi	r25, 0x00	; 0
     986:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <ClearPortA>
     98a:	f0 cf       	rjmp	.-32     	; 0x96c <TaskMidiReset>

0000098c <InitTimer0>:
void InitTimer0()
{
	//------------------------------
	// Toggle OC0B on compare
	//------------------------------
	TCCR0A = BIT(COM0B0);
     98c:	80 e1       	ldi	r24, 0x10	; 16
     98e:	84 bd       	out	0x24, r24	; 36
	//------------------------------
	// Set Clock prescaler /64
	//------------------------------
	TCCR0B = BIT(CS00) | BIT(CS01);
     990:	83 e0       	ldi	r24, 0x03	; 3
     992:	85 bd       	out	0x25, r24	; 37
	TIMSK0 = BIT(TOIE0);
     994:	81 e0       	ldi	r24, 0x01	; 1
     996:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
	OCR0A = 254;
     99a:	8e ef       	ldi	r24, 0xFE	; 254
     99c:	87 bd       	out	0x27, r24	; 39
	DDRB |= BIT(4);
     99e:	24 9a       	sbi	0x04, 4	; 4
     9a0:	08 95       	ret

000009a2 <__vector_24>:
void ADC_vect(void) __attribute__ ((naked));
void ADC_vect(void)
{
	int v;

	SAVE_IRQ();
     9a2:	ff 93       	push	r31
     9a4:	ff b7       	in	r31, 0x3f	; 63
     9a6:	f0 68       	ori	r31, 0x80	; 128
     9a8:	ff 93       	push	r31
     9aa:	ef 93       	push	r30
     9ac:	df 93       	push	r29
     9ae:	cf 93       	push	r28
     9b0:	bf 93       	push	r27
     9b2:	af 93       	push	r26
     9b4:	9f 93       	push	r25
     9b6:	8f 93       	push	r24
     9b8:	7f 93       	push	r23
     9ba:	6f 93       	push	r22
     9bc:	5f 93       	push	r21
     9be:	4f 93       	push	r20
     9c0:	3f 93       	push	r19
     9c2:	2f 93       	push	r18
     9c4:	1f 93       	push	r17
     9c6:	0f 93       	push	r16
     9c8:	ff 92       	push	r15
     9ca:	ef 92       	push	r14
     9cc:	df 92       	push	r13
     9ce:	cf 92       	push	r12
     9d0:	bf 92       	push	r11
     9d2:	af 92       	push	r10
     9d4:	9f 92       	push	r9
     9d6:	8f 92       	push	r8
     9d8:	7f 92       	push	r7
     9da:	6f 92       	push	r6
     9dc:	5f 92       	push	r5
     9de:	4f 92       	push	r4
     9e0:	3f 92       	push	r3
     9e2:	2f 92       	push	r2
     9e4:	1f 92       	push	r1
     9e6:	11 24       	eor	r1, r1
     9e8:	0f 92       	push	r0
	EnterInterrupt();
     9ea:	cb dd       	rcall	.-1130   	; 0x582 <EnterInterrupt>
	v = ADC;
     9ec:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     9f0:	70 91 79 00 	lds	r23, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
	ADCSRA |= BIT(ADIF);//CLEAR interrupt flag.
     9f4:	ea e7       	ldi	r30, 0x7A	; 122
     9f6:	f0 e0       	ldi	r31, 0x00	; 0
     9f8:	80 81       	ld	r24, Z
     9fa:	80 61       	ori	r24, 0x10	; 16
     9fc:	80 83       	st	Z, r24
	PostSemaphore(pSemAdc,v << 2);
     9fe:	66 0f       	add	r22, r22
     a00:	77 1f       	adc	r23, r23
     a02:	66 0f       	add	r22, r22
     a04:	77 1f       	adc	r23, r23
     a06:	80 91 3d 02 	lds	r24, 0x023D	; 0x80023d <pSemAdc>
     a0a:	90 91 3e 02 	lds	r25, 0x023E	; 0x80023e <pSemAdc+0x1>
     a0e:	0e 94 cf 0d 	call	0x1b9e	; 0x1b9e <PostSemaphore>
	ExitInterrupt();
     a12:	46 dd       	rcall	.-1396   	; 0x4a0 <ExitInterrupt>
	RESTORE_IRQ();
     a14:	0f 90       	pop	r0
     a16:	1f 90       	pop	r1
     a18:	2f 90       	pop	r2
     a1a:	3f 90       	pop	r3
     a1c:	4f 90       	pop	r4
     a1e:	5f 90       	pop	r5
     a20:	6f 90       	pop	r6
     a22:	7f 90       	pop	r7
     a24:	8f 90       	pop	r8
     a26:	9f 90       	pop	r9
     a28:	af 90       	pop	r10
     a2a:	bf 90       	pop	r11
     a2c:	cf 90       	pop	r12
     a2e:	df 90       	pop	r13
     a30:	ef 90       	pop	r14
     a32:	ff 90       	pop	r15
     a34:	0f 91       	pop	r16
     a36:	1f 91       	pop	r17
     a38:	2f 91       	pop	r18
     a3a:	3f 91       	pop	r19
     a3c:	4f 91       	pop	r20
     a3e:	5f 91       	pop	r21
     a40:	6f 91       	pop	r22
     a42:	7f 91       	pop	r23
     a44:	8f 91       	pop	r24
     a46:	9f 91       	pop	r25
     a48:	af 91       	pop	r26
     a4a:	bf 91       	pop	r27
     a4c:	cf 91       	pop	r28
     a4e:	df 91       	pop	r29
     a50:	ef 91       	pop	r30
     a52:	ff 91       	pop	r31
     a54:	ff 77       	andi	r31, 0x7F	; 127
     a56:	ff bf       	out	0x3f, r31	; 63
     a58:	ff 91       	pop	r31
     a5a:	18 95       	reti

00000a5c <__vector_18>:
}

void TIMER0_OVF_vect(void) __attribute__ ((naked));
void TIMER0_OVF_vect(void)
{
	SAVE_IRQ();
     a5c:	ff 93       	push	r31
     a5e:	ff b7       	in	r31, 0x3f	; 63
     a60:	f0 68       	ori	r31, 0x80	; 128
     a62:	ff 93       	push	r31
     a64:	ef 93       	push	r30
     a66:	df 93       	push	r29
     a68:	cf 93       	push	r28
     a6a:	bf 93       	push	r27
     a6c:	af 93       	push	r26
     a6e:	9f 93       	push	r25
     a70:	8f 93       	push	r24
     a72:	7f 93       	push	r23
     a74:	6f 93       	push	r22
     a76:	5f 93       	push	r21
     a78:	4f 93       	push	r20
     a7a:	3f 93       	push	r19
     a7c:	2f 93       	push	r18
     a7e:	1f 93       	push	r17
     a80:	0f 93       	push	r16
     a82:	ff 92       	push	r15
     a84:	ef 92       	push	r14
     a86:	df 92       	push	r13
     a88:	cf 92       	push	r12
     a8a:	bf 92       	push	r11
     a8c:	af 92       	push	r10
     a8e:	9f 92       	push	r9
     a90:	8f 92       	push	r8
     a92:	7f 92       	push	r7
     a94:	6f 92       	push	r6
     a96:	5f 92       	push	r5
     a98:	4f 92       	push	r4
     a9a:	3f 92       	push	r3
     a9c:	2f 92       	push	r2
     a9e:	1f 92       	push	r1
     aa0:	11 24       	eor	r1, r1
     aa2:	0f 92       	push	r0
	EnterInterrupt();
     aa4:	6e dd       	rcall	.-1316   	; 0x582 <EnterInterrupt>
	TCNT0 = 255-37;
     aa6:	8a ed       	ldi	r24, 0xDA	; 218
     aa8:	86 bd       	out	0x26, r24	; 38
	TimerTicker();
     aaa:	0e 94 d4 12 	call	0x25a8	; 0x25a8 <TimerTicker>
	ExitInterrupt();
     aae:	f8 dc       	rcall	.-1552   	; 0x4a0 <ExitInterrupt>
	RESTORE_IRQ();
     ab0:	0f 90       	pop	r0
     ab2:	1f 90       	pop	r1
     ab4:	2f 90       	pop	r2
     ab6:	3f 90       	pop	r3
     ab8:	4f 90       	pop	r4
     aba:	5f 90       	pop	r5
     abc:	6f 90       	pop	r6
     abe:	7f 90       	pop	r7
     ac0:	8f 90       	pop	r8
     ac2:	9f 90       	pop	r9
     ac4:	af 90       	pop	r10
     ac6:	bf 90       	pop	r11
     ac8:	cf 90       	pop	r12
     aca:	df 90       	pop	r13
     acc:	ef 90       	pop	r14
     ace:	ff 90       	pop	r15
     ad0:	0f 91       	pop	r16
     ad2:	1f 91       	pop	r17
     ad4:	2f 91       	pop	r18
     ad6:	3f 91       	pop	r19
     ad8:	4f 91       	pop	r20
     ada:	5f 91       	pop	r21
     adc:	6f 91       	pop	r22
     ade:	7f 91       	pop	r23
     ae0:	8f 91       	pop	r24
     ae2:	9f 91       	pop	r25
     ae4:	af 91       	pop	r26
     ae6:	bf 91       	pop	r27
     ae8:	cf 91       	pop	r28
     aea:	df 91       	pop	r29
     aec:	ef 91       	pop	r30
     aee:	ff 91       	pop	r31
     af0:	ff 77       	andi	r31, 0x7F	; 127
     af2:	ff bf       	out	0x3f, r31	; 63
     af4:	ff 91       	pop	r31
     af6:	18 95       	reti

00000af8 <InitINT0>:
//	INT0_vect
//		Dac Done Interrupt
//----------------------------------------
void InitINT0(void)
{
	SetPortA(PORTA_LD_DAC);
     af8:	83 e0       	ldi	r24, 0x03	; 3
     afa:	90 e0       	ldi	r25, 0x00	; 0
     afc:	77 d7       	rcall	.+3822   	; 0x19ec <SetPortA>
	ClearPortD(PORTD_CLEAR_DAC_IRQ);
     afe:	84 e0       	ldi	r24, 0x04	; 4
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <ClearPortD>
	SetPortD(PORTD_CLEAR_DAC_IRQ);
     b06:	84 e0       	ldi	r24, 0x04	; 4
     b08:	90 e0       	ldi	r25, 0x00	; 0
     b0a:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <SetPortD>
	EIMSK |= BIT(INT0);
     b0e:	e8 9a       	sbi	0x1d, 0	; 29
     b10:	08 95       	ret

00000b12 <InitINT1>:
}

void InitINT1(void)
{
	EICRA |= BIT(ISC10) | BIT(ISC11);
     b12:	e9 e6       	ldi	r30, 0x69	; 105
     b14:	f0 e0       	ldi	r31, 0x00	; 0
     b16:	80 81       	ld	r24, Z
     b18:	8c 60       	ori	r24, 0x0C	; 12
     b1a:	80 83       	st	Z, r24
	EIMSK |= BIT(INT1);
     b1c:	e9 9a       	sbi	0x1d, 1	; 29
     b1e:	08 95       	ret

00000b20 <InitINT2>:
}

void InitINT2(void)
{
	EICRA |= BIT(ISC20) | BIT(ISC21);
     b20:	e9 e6       	ldi	r30, 0x69	; 105
     b22:	f0 e0       	ldi	r31, 0x00	; 0
     b24:	80 81       	ld	r24, Z
     b26:	80 63       	ori	r24, 0x30	; 48
     b28:	80 83       	st	Z, r24
	EIMSK |= BIT(INT2);
     b2a:	ea 9a       	sbi	0x1d, 2	; 29
     b2c:	08 95       	ret

00000b2e <__vector_1>:
}

void INT0_vect(void) __attribute__ ((naked));
void INT0_vect(void)
{
	SAVE_IRQ();
     b2e:	ff 93       	push	r31
     b30:	ff b7       	in	r31, 0x3f	; 63
     b32:	f0 68       	ori	r31, 0x80	; 128
     b34:	ff 93       	push	r31
     b36:	ef 93       	push	r30
     b38:	df 93       	push	r29
     b3a:	cf 93       	push	r28
     b3c:	bf 93       	push	r27
     b3e:	af 93       	push	r26
     b40:	9f 93       	push	r25
     b42:	8f 93       	push	r24
     b44:	7f 93       	push	r23
     b46:	6f 93       	push	r22
     b48:	5f 93       	push	r21
     b4a:	4f 93       	push	r20
     b4c:	3f 93       	push	r19
     b4e:	2f 93       	push	r18
     b50:	1f 93       	push	r17
     b52:	0f 93       	push	r16
     b54:	ff 92       	push	r15
     b56:	ef 92       	push	r14
     b58:	df 92       	push	r13
     b5a:	cf 92       	push	r12
     b5c:	bf 92       	push	r11
     b5e:	af 92       	push	r10
     b60:	9f 92       	push	r9
     b62:	8f 92       	push	r8
     b64:	7f 92       	push	r7
     b66:	6f 92       	push	r6
     b68:	5f 92       	push	r5
     b6a:	4f 92       	push	r4
     b6c:	3f 92       	push	r3
     b6e:	2f 92       	push	r2
     b70:	1f 92       	push	r1
     b72:	11 24       	eor	r1, r1
     b74:	0f 92       	push	r0
	EnterInterrupt();
     b76:	05 dd       	rcall	.-1526   	; 0x582 <EnterInterrupt>
	PORTD &= ~BIT(PORTD_CLEAR_DAC_IRQ);
     b78:	5c 98       	cbi	0x0b, 4	; 11
	PORTD |= BIT(PORTD_CLEAR_DAC_IRQ);
     b7a:	5c 9a       	sbi	0x0b, 4	; 11
	PostMessage(pDacTaskMsg,DACTASK_DACDONE,0,0);
     b7c:	20 e0       	ldi	r18, 0x00	; 0
     b7e:	30 e0       	ldi	r19, 0x00	; 0
     b80:	40 e0       	ldi	r20, 0x00	; 0
     b82:	50 e0       	ldi	r21, 0x00	; 0
     b84:	60 e0       	ldi	r22, 0x00	; 0
     b86:	70 e0       	ldi	r23, 0x00	; 0
     b88:	80 91 a5 02 	lds	r24, 0x02A5	; 0x8002a5 <pDacTaskMsg>
     b8c:	90 91 a6 02 	lds	r25, 0x02A6	; 0x8002a6 <pDacTaskMsg+0x1>
	ExitInterrupt();
     b90:	7f d3       	rcall	.+1790   	; 0x1290 <PostMessage>
     b92:	86 dc       	rcall	.-1780   	; 0x4a0 <ExitInterrupt>
	RESTORE_IRQ();
     b94:	0f 90       	pop	r0
     b96:	1f 90       	pop	r1
     b98:	2f 90       	pop	r2
     b9a:	3f 90       	pop	r3
     b9c:	4f 90       	pop	r4
     b9e:	5f 90       	pop	r5
     ba0:	6f 90       	pop	r6
     ba2:	7f 90       	pop	r7
     ba4:	8f 90       	pop	r8
     ba6:	9f 90       	pop	r9
     ba8:	af 90       	pop	r10
     baa:	bf 90       	pop	r11
     bac:	cf 90       	pop	r12
     bae:	df 90       	pop	r13
     bb0:	ef 90       	pop	r14
     bb2:	ff 90       	pop	r15
     bb4:	0f 91       	pop	r16
     bb6:	1f 91       	pop	r17
     bb8:	2f 91       	pop	r18
     bba:	3f 91       	pop	r19
     bbc:	4f 91       	pop	r20
     bbe:	5f 91       	pop	r21
     bc0:	6f 91       	pop	r22
     bc2:	7f 91       	pop	r23
     bc4:	8f 91       	pop	r24
     bc6:	9f 91       	pop	r25
     bc8:	af 91       	pop	r26
     bca:	bf 91       	pop	r27
     bcc:	cf 91       	pop	r28
     bce:	df 91       	pop	r29
     bd0:	ef 91       	pop	r30
     bd2:	ff 91       	pop	r31
     bd4:	ff 77       	andi	r31, 0x7F	; 127
     bd6:	ff bf       	out	0x3f, r31	; 63
     bd8:	ff 91       	pop	r31
     bda:	18 95       	reti

00000bdc <__vector_2>:
//----------------------------------------

void INT1_vect(void) __attribute__ ((naked));
void INT1_vect(void)
{
	SAVE_IRQ();
     bdc:	ff 93       	push	r31
     bde:	ff b7       	in	r31, 0x3f	; 63
     be0:	f0 68       	ori	r31, 0x80	; 128
     be2:	ff 93       	push	r31
     be4:	ef 93       	push	r30
     be6:	df 93       	push	r29
     be8:	cf 93       	push	r28
     bea:	bf 93       	push	r27
     bec:	af 93       	push	r26
     bee:	9f 93       	push	r25
     bf0:	8f 93       	push	r24
     bf2:	7f 93       	push	r23
     bf4:	6f 93       	push	r22
     bf6:	5f 93       	push	r21
     bf8:	4f 93       	push	r20
     bfa:	3f 93       	push	r19
     bfc:	2f 93       	push	r18
     bfe:	1f 93       	push	r17
     c00:	0f 93       	push	r16
     c02:	ff 92       	push	r15
     c04:	ef 92       	push	r14
     c06:	df 92       	push	r13
     c08:	cf 92       	push	r12
     c0a:	bf 92       	push	r11
     c0c:	af 92       	push	r10
     c0e:	9f 92       	push	r9
     c10:	8f 92       	push	r8
     c12:	7f 92       	push	r7
     c14:	6f 92       	push	r6
     c16:	5f 92       	push	r5
     c18:	4f 92       	push	r4
     c1a:	3f 92       	push	r3
     c1c:	2f 92       	push	r2
     c1e:	1f 92       	push	r1
     c20:	11 24       	eor	r1, r1
     c22:	0f 92       	push	r0
	EnterInterrupt();
     c24:	ae dc       	rcall	.-1700   	; 0x582 <EnterInterrupt>
	PostMessage(pADSR1Msg,ADSR_LEVELTRIPPED,0,0);
     c26:	20 e0       	ldi	r18, 0x00	; 0
     c28:	30 e0       	ldi	r19, 0x00	; 0
     c2a:	40 e0       	ldi	r20, 0x00	; 0
     c2c:	50 e0       	ldi	r21, 0x00	; 0
     c2e:	60 e0       	ldi	r22, 0x00	; 0
     c30:	70 e0       	ldi	r23, 0x00	; 0
     c32:	80 91 6f 02 	lds	r24, 0x026F	; 0x80026f <pADSR1Msg>
     c36:	90 91 70 02 	lds	r25, 0x0270	; 0x800270 <pADSR1Msg+0x1>
	ExitInterrupt();
     c3a:	2a d3       	rcall	.+1620   	; 0x1290 <PostMessage>
     c3c:	31 dc       	rcall	.-1950   	; 0x4a0 <ExitInterrupt>
	RESTORE_IRQ();
     c3e:	0f 90       	pop	r0
     c40:	1f 90       	pop	r1
     c42:	2f 90       	pop	r2
     c44:	3f 90       	pop	r3
     c46:	4f 90       	pop	r4
     c48:	5f 90       	pop	r5
     c4a:	6f 90       	pop	r6
     c4c:	7f 90       	pop	r7
     c4e:	8f 90       	pop	r8
     c50:	9f 90       	pop	r9
     c52:	af 90       	pop	r10
     c54:	bf 90       	pop	r11
     c56:	cf 90       	pop	r12
     c58:	df 90       	pop	r13
     c5a:	ef 90       	pop	r14
     c5c:	ff 90       	pop	r15
     c5e:	0f 91       	pop	r16
     c60:	1f 91       	pop	r17
     c62:	2f 91       	pop	r18
     c64:	3f 91       	pop	r19
     c66:	4f 91       	pop	r20
     c68:	5f 91       	pop	r21
     c6a:	6f 91       	pop	r22
     c6c:	7f 91       	pop	r23
     c6e:	8f 91       	pop	r24
     c70:	9f 91       	pop	r25
     c72:	af 91       	pop	r26
     c74:	bf 91       	pop	r27
     c76:	cf 91       	pop	r28
     c78:	df 91       	pop	r29
     c7a:	ef 91       	pop	r30
     c7c:	ff 91       	pop	r31
     c7e:	ff 77       	andi	r31, 0x7F	; 127
     c80:	ff bf       	out	0x3f, r31	; 63
     c82:	ff 91       	pop	r31
     c84:	18 95       	reti

00000c86 <__vector_3>:
//		ADSR 2 Done Interrupt
//----------------------------------------
void INT2_vect(void) __attribute__ ((naked));
void INT2_vect(void)
{
	SAVE_IRQ();
     c86:	ff 93       	push	r31
     c88:	ff b7       	in	r31, 0x3f	; 63
     c8a:	f0 68       	ori	r31, 0x80	; 128
     c8c:	ff 93       	push	r31
     c8e:	ef 93       	push	r30
     c90:	df 93       	push	r29
     c92:	cf 93       	push	r28
     c94:	bf 93       	push	r27
     c96:	af 93       	push	r26
     c98:	9f 93       	push	r25
     c9a:	8f 93       	push	r24
     c9c:	7f 93       	push	r23
     c9e:	6f 93       	push	r22
     ca0:	5f 93       	push	r21
     ca2:	4f 93       	push	r20
     ca4:	3f 93       	push	r19
     ca6:	2f 93       	push	r18
     ca8:	1f 93       	push	r17
     caa:	0f 93       	push	r16
     cac:	ff 92       	push	r15
     cae:	ef 92       	push	r14
     cb0:	df 92       	push	r13
     cb2:	cf 92       	push	r12
     cb4:	bf 92       	push	r11
     cb6:	af 92       	push	r10
     cb8:	9f 92       	push	r9
     cba:	8f 92       	push	r8
     cbc:	7f 92       	push	r7
     cbe:	6f 92       	push	r6
     cc0:	5f 92       	push	r5
     cc2:	4f 92       	push	r4
     cc4:	3f 92       	push	r3
     cc6:	2f 92       	push	r2
     cc8:	1f 92       	push	r1
     cca:	11 24       	eor	r1, r1
     ccc:	0f 92       	push	r0
	EnterInterrupt();
     cce:	59 dc       	rcall	.-1870   	; 0x582 <EnterInterrupt>
	PostMessage(pADSR2Msg,ADSR_LEVELTRIPPED,0,0);
     cd0:	20 e0       	ldi	r18, 0x00	; 0
     cd2:	30 e0       	ldi	r19, 0x00	; 0
     cd4:	40 e0       	ldi	r20, 0x00	; 0
     cd6:	50 e0       	ldi	r21, 0x00	; 0
     cd8:	60 e0       	ldi	r22, 0x00	; 0
     cda:	70 e0       	ldi	r23, 0x00	; 0
     cdc:	80 91 f8 01 	lds	r24, 0x01F8	; 0x8001f8 <pADSR2Msg>
     ce0:	90 91 f9 01 	lds	r25, 0x01F9	; 0x8001f9 <pADSR2Msg+0x1>
	ExitInterrupt();
     ce4:	d5 d2       	rcall	.+1450   	; 0x1290 <PostMessage>
     ce6:	dc db       	rcall	.-2120   	; 0x4a0 <ExitInterrupt>
	RESTORE_IRQ();
     ce8:	0f 90       	pop	r0
     cea:	1f 90       	pop	r1
     cec:	2f 90       	pop	r2
     cee:	3f 90       	pop	r3
     cf0:	4f 90       	pop	r4
     cf2:	5f 90       	pop	r5
     cf4:	6f 90       	pop	r6
     cf6:	7f 90       	pop	r7
     cf8:	8f 90       	pop	r8
     cfa:	9f 90       	pop	r9
     cfc:	af 90       	pop	r10
     cfe:	bf 90       	pop	r11
     d00:	cf 90       	pop	r12
     d02:	df 90       	pop	r13
     d04:	ef 90       	pop	r14
     d06:	ff 90       	pop	r15
     d08:	0f 91       	pop	r16
     d0a:	1f 91       	pop	r17
     d0c:	2f 91       	pop	r18
     d0e:	3f 91       	pop	r19
     d10:	4f 91       	pop	r20
     d12:	5f 91       	pop	r21
     d14:	6f 91       	pop	r22
     d16:	7f 91       	pop	r23
     d18:	8f 91       	pop	r24
     d1a:	9f 91       	pop	r25
     d1c:	af 91       	pop	r26
     d1e:	bf 91       	pop	r27
     d20:	cf 91       	pop	r28
     d22:	df 91       	pop	r29
     d24:	ef 91       	pop	r30
     d26:	ff 91       	pop	r31
     d28:	ff 77       	andi	r31, 0x7F	; 127
     d2a:	ff bf       	out	0x3f, r31	; 63
     d2c:	ff 91       	pop	r31
     d2e:	18 95       	reti

00000d30 <Init>:
	}
}

void Init()
{
	DDRD = 0xf0;
     d30:	80 ef       	ldi	r24, 0xF0	; 240
     d32:	8a b9       	out	0x0a, r24	; 10
	DDRC = 0xc0;
     d34:	80 ec       	ldi	r24, 0xC0	; 192
     d36:	87 b9       	out	0x07, r24	; 7
	DDRB = 0xbb;
     d38:	8b eb       	ldi	r24, 0xBB	; 187
     d3a:	84 b9       	out	0x04, r24	; 4
	DDRA = 0xfc;
     d3c:	8c ef       	ldi	r24, 0xFC	; 252
     d3e:	81 b9       	out	0x01, r24	; 1
	Settings.m_CH1_MidiChannel = 0;
     d40:	e2 e1       	ldi	r30, 0x12	; 18
     d42:	f2 e0       	ldi	r31, 0x02	; 2
     d44:	10 82       	st	Z, r1
	Settings.m_CH2_Drum1 = 9;
     d46:	89 e0       	ldi	r24, 0x09	; 9
     d48:	81 83       	std	Z+1, r24	; 0x01
	Settings.m_CH3_Drum2 = 10;
     d4a:	8a e0       	ldi	r24, 0x0A	; 10
     d4c:	82 83       	std	Z+2, r24	; 0x02
	Settings.m_CH4_Drum3 = 11;
     d4e:	8b e0       	ldi	r24, 0x0B	; 11
     d50:	83 83       	std	Z+3, r24	; 0x03
	Settings.m_CH5_Cymbal = 12;
     d52:	8c e0       	ldi	r24, 0x0C	; 12
     d54:	84 83       	std	Z+4, r24	; 0x04
     d56:	08 95       	ret

00000d58 <main>:
int main(void)
{
    //--------------------------
	// Initialize the system
	//--------------------------
	Disable();
     d58:	d2 d9       	rcall	.-3164   	; 0xfe <Disable>
	Init();
     d5a:	ea df       	rcall	.-44     	; 0xd30 <Init>
	InitPorts();
     d5c:	40 d6       	rcall	.+3200   	; 0x19de <InitPorts>
     d5e:	16 de       	rcall	.-980    	; 0x98c <InitTimer0>
	InitTimer0();
     d60:	60 e0       	ldi	r22, 0x00	; 0
     d62:	70 e0       	ldi	r23, 0x00	; 0
	OS_InitMalloc(0,0);	//initialize heap
     d64:	80 e0       	ldi	r24, 0x00	; 0
     d66:	90 e0       	ldi	r25, 0x00	; 0
     d68:	46 d2       	rcall	.+1164   	; 0x11f6 <OS_InitMalloc>
	InitINT0();
     d6a:	c6 de       	rcall	.-628    	; 0xaf8 <InitINT0>
	OSInit();	//Initialize RTOS
     d6c:	c4 d5       	rcall	.+2952   	; 0x18f6 <OSInit>
     d6e:	0e 94 80 11 	call	0x2300	; 0x2300 <InitSpi>
	InitSpi();
	USART_Init();
     d72:	0e 94 8c 14 	call	0x2918	; 0x2918 <USART_Init>
	//-----------------------------
	// Initialize Message Objects
	//-----------------------------
	InitMessageQueueManager();	//Init Message queues
     d76:	73 d3       	rcall	.+1766   	; 0x145e <InitMessageQueueManager>
     d78:	80 e1       	ldi	r24, 0x10	; 16
	pDacTaskMsg = NewMessageBuffer(16);
     d7a:	90 e0       	ldi	r25, 0x00	; 0
     d7c:	5e d2       	rcall	.+1212   	; 0x123a <NewMessageBuffer>
     d7e:	90 93 a6 02 	sts	0x02A6, r25	; 0x8002a6 <pDacTaskMsg+0x1>
     d82:	80 93 a5 02 	sts	0x02A5, r24	; 0x8002a5 <pDacTaskMsg>
     d86:	88 e0       	ldi	r24, 0x08	; 8
	pADSR1Msg = NewMessageBuffer(8);
     d88:	90 e0       	ldi	r25, 0x00	; 0
     d8a:	57 d2       	rcall	.+1198   	; 0x123a <NewMessageBuffer>
     d8c:	90 93 70 02 	sts	0x0270, r25	; 0x800270 <pADSR1Msg+0x1>
     d90:	80 93 6f 02 	sts	0x026F, r24	; 0x80026f <pADSR1Msg>
     d94:	88 e0       	ldi	r24, 0x08	; 8
	pADSR2Msg = NewMessageBuffer(8);
     d96:	90 e0       	ldi	r25, 0x00	; 0
     d98:	50 d2       	rcall	.+1184   	; 0x123a <NewMessageBuffer>
     d9a:	90 93 f9 01 	sts	0x01F9, r25	; 0x8001f9 <pADSR2Msg+0x1>
     d9e:	80 93 f8 01 	sts	0x01F8, r24	; 0x8001f8 <pADSR2Msg>
     da2:	42 e2       	ldi	r20, 0x22	; 34
	pSemClock = NewSemaphore(0,SEMAPHORE_MODE_BLOCKING,"Midi Clock Sem");
     da4:	51 e0       	ldi	r21, 0x01	; 1
     da6:	60 e0       	ldi	r22, 0x00	; 0
     da8:	70 e0       	ldi	r23, 0x00	; 0
     daa:	80 e0       	ldi	r24, 0x00	; 0
     dac:	90 e0       	ldi	r25, 0x00	; 0
     dae:	e1 d9       	rcall	.-3134   	; 0x172 <NewSemaphore>
     db0:	90 93 72 02 	sts	0x0272, r25	; 0x800272 <pSemClock+0x1>
     db4:	80 93 71 02 	sts	0x0271, r24	; 0x800271 <pSemClock>
     db8:	41 e3       	ldi	r20, 0x31	; 49
	pSemReset = NewSemaphore(0,SEMAPHORE_MODE_BLOCKING,"Midi Reset Sem");
     dba:	51 e0       	ldi	r21, 0x01	; 1
     dbc:	60 e0       	ldi	r22, 0x00	; 0
     dbe:	70 e0       	ldi	r23, 0x00	; 0
     dc0:	80 e0       	ldi	r24, 0x00	; 0
     dc2:	90 e0       	ldi	r25, 0x00	; 0
     dc4:	d6 d9       	rcall	.-3156   	; 0x172 <NewSemaphore>
     dc6:	90 93 8c 02 	sts	0x028C, r25	; 0x80028c <pSemReset+0x1>
     dca:	80 93 8b 02 	sts	0x028B, r24	; 0x80028b <pSemReset>
     dce:	40 e4       	ldi	r20, 0x40	; 64
	pSemAdc = NewSemaphore(0,SEMAPHORE_MODE_BLOCKING,"Adc Sem");
     dd0:	51 e0       	ldi	r21, 0x01	; 1
     dd2:	60 e0       	ldi	r22, 0x00	; 0
     dd4:	70 e0       	ldi	r23, 0x00	; 0
     dd6:	80 e0       	ldi	r24, 0x00	; 0
     dd8:	90 e0       	ldi	r25, 0x00	; 0
     dda:	cb d9       	rcall	.-3178   	; 0x172 <NewSemaphore>
     ddc:	90 93 3e 02 	sts	0x023E, r25	; 0x80023e <pSemAdc+0x1>
     de0:	80 93 3d 02 	sts	0x023D, r24	; 0x80023d <pSemAdc>
     de4:	e1 2c       	mov	r14, r1
	//-----------------------------
	//	Create Tasks
	//-----------------------------
	CreateTask(&TAdcTask,ADCTask,256,3,"ADC",0);
     de6:	f1 2c       	mov	r15, r1
     de8:	08 e4       	ldi	r16, 0x48	; 72
     dea:	11 e0       	ldi	r17, 0x01	; 1
     dec:	23 e0       	ldi	r18, 0x03	; 3
     dee:	30 e0       	ldi	r19, 0x00	; 0
     df0:	40 e0       	ldi	r20, 0x00	; 0
     df2:	51 e0       	ldi	r21, 0x01	; 1
     df4:	6d ea       	ldi	r22, 0xAD	; 173
     df6:	73 e0       	ldi	r23, 0x03	; 3
     df8:	8f eb       	ldi	r24, 0xBF	; 191
     dfa:	92 e0       	ldi	r25, 0x02	; 2
     dfc:	3e da       	rcall	.-2948   	; 0x27a <CreateTask>
     dfe:	6f eb       	ldi	r22, 0xBF	; 191
	Insert(&ActiveTasks,&TAdcTask);
     e00:	72 e0       	ldi	r23, 0x02	; 2
     e02:	86 ee       	ldi	r24, 0xE6	; 230
     e04:	91 e0       	ldi	r25, 0x01	; 1
     e06:	ba d7       	rcall	.+3956   	; 0x1d7c <Insert>
     e08:	0c e4       	ldi	r16, 0x4C	; 76
	CreateTask(&TIdleTask,IdleTask,256,1,"Idle Task",0);
     e0a:	11 e0       	ldi	r17, 0x01	; 1
     e0c:	21 e0       	ldi	r18, 0x01	; 1
     e0e:	30 e0       	ldi	r19, 0x00	; 0
     e10:	40 e0       	ldi	r20, 0x00	; 0
     e12:	51 e0       	ldi	r21, 0x01	; 1
     e14:	6b ec       	ldi	r22, 0xCB	; 203
     e16:	72 e0       	ldi	r23, 0x02	; 2
     e18:	8f e3       	ldi	r24, 0x3F	; 63
     e1a:	92 e0       	ldi	r25, 0x02	; 2
     e1c:	2e da       	rcall	.-2980   	; 0x27a <CreateTask>
     e1e:	6f e3       	ldi	r22, 0x3F	; 63
	Insert(&ActiveTasks,&TIdleTask);
     e20:	72 e0       	ldi	r23, 0x02	; 2
     e22:	86 ee       	ldi	r24, 0xE6	; 230
     e24:	91 e0       	ldi	r25, 0x01	; 1
     e26:	aa d7       	rcall	.+3924   	; 0x1d7c <Insert>
     e28:	06 e5       	ldi	r16, 0x56	; 86
	CreateTask(&TDacTask,DacTask,256,20,"Dac Task",0);
     e2a:	11 e0       	ldi	r17, 0x01	; 1
     e2c:	24 e1       	ldi	r18, 0x14	; 20
     e2e:	30 e0       	ldi	r19, 0x00	; 0
     e30:	40 e0       	ldi	r20, 0x00	; 0
     e32:	51 e0       	ldi	r21, 0x01	; 1
     e34:	6f ee       	ldi	r22, 0xEF	; 239
     e36:	73 e0       	ldi	r23, 0x03	; 3
     e38:	8a ef       	ldi	r24, 0xFA	; 250
     e3a:	91 e0       	ldi	r25, 0x01	; 1
     e3c:	1e da       	rcall	.-3012   	; 0x27a <CreateTask>
     e3e:	6a ef       	ldi	r22, 0xFA	; 250
	Insert(&ActiveTasks,&TDacTask);
     e40:	71 e0       	ldi	r23, 0x01	; 1
     e42:	86 ee       	ldi	r24, 0xE6	; 230
     e44:	91 e0       	ldi	r25, 0x01	; 1
     e46:	9a d7       	rcall	.+3892   	; 0x1d7c <Insert>
     e48:	0f e5       	ldi	r16, 0x5F	; 95
	CreateTask(&TMidiClock,TaskMidiClock,256,2,"MidiClock",0);
     e4a:	11 e0       	ldi	r17, 0x01	; 1
     e4c:	22 e0       	ldi	r18, 0x02	; 2
     e4e:	30 e0       	ldi	r19, 0x00	; 0
     e50:	40 e0       	ldi	r20, 0x00	; 0
     e52:	51 e0       	ldi	r21, 0x01	; 1
     e54:	62 e9       	ldi	r22, 0x92	; 146
     e56:	74 e0       	ldi	r23, 0x04	; 4
     e58:	87 ed       	ldi	r24, 0xD7	; 215
     e5a:	92 e0       	ldi	r25, 0x02	; 2
     e5c:	0e da       	rcall	.-3044   	; 0x27a <CreateTask>
     e5e:	67 ed       	ldi	r22, 0xD7	; 215
	Insert(&ActiveTasks,&TMidiClock);
     e60:	72 e0       	ldi	r23, 0x02	; 2
     e62:	86 ee       	ldi	r24, 0xE6	; 230
     e64:	91 e0       	ldi	r25, 0x01	; 1
     e66:	8a d7       	rcall	.+3860   	; 0x1d7c <Insert>
     e68:	09 e6       	ldi	r16, 0x69	; 105
	CreateTask(&TMidiReset,TaskMidiReset,256,2,"Midi Reset",0);
     e6a:	11 e0       	ldi	r17, 0x01	; 1
     e6c:	22 e0       	ldi	r18, 0x02	; 2
     e6e:	30 e0       	ldi	r19, 0x00	; 0
     e70:	40 e0       	ldi	r20, 0x00	; 0
     e72:	51 e0       	ldi	r21, 0x01	; 1
     e74:	66 eb       	ldi	r22, 0xB6	; 182
     e76:	74 e0       	ldi	r23, 0x04	; 4
     e78:	87 ea       	ldi	r24, 0xA7	; 167
     e7a:	92 e0       	ldi	r25, 0x02	; 2
     e7c:	fe d9       	rcall	.-3076   	; 0x27a <CreateTask>
	Insert(&ActiveTasks,&TMidiReset);
     e7e:	67 ea       	ldi	r22, 0xA7	; 167
     e80:	72 e0       	ldi	r23, 0x02	; 2
     e82:	86 ee       	ldi	r24, 0xE6	; 230
     e84:	91 e0       	ldi	r25, 0x01	; 1
     e86:	7a d7       	rcall	.+3828   	; 0x1d7c <Insert>
     e88:	04 e7       	ldi	r16, 0x74	; 116
	CreateTask(&TMidiIn,MidiIn,256,10,"Midi In",0);
     e8a:	11 e0       	ldi	r17, 0x01	; 1
     e8c:	2a e0       	ldi	r18, 0x0A	; 10
     e8e:	30 e0       	ldi	r19, 0x00	; 0
     e90:	40 e0       	ldi	r20, 0x00	; 0
     e92:	51 e0       	ldi	r21, 0x01	; 1
     e94:	62 ea       	ldi	r22, 0xA2	; 162
     e96:	74 e0       	ldi	r23, 0x04	; 4
     e98:	8d e8       	ldi	r24, 0x8D	; 141
     e9a:	92 e0       	ldi	r25, 0x02	; 2
     e9c:	ee d9       	rcall	.-3108   	; 0x27a <CreateTask>
	Insert(&ActiveTasks,&TMidiIn);
     e9e:	6d e8       	ldi	r22, 0x8D	; 141
     ea0:	72 e0       	ldi	r23, 0x02	; 2
     ea2:	86 ee       	ldi	r24, 0xE6	; 230
     ea4:	91 e0       	ldi	r25, 0x01	; 1
     ea6:	6a d7       	rcall	.+3796   	; 0x1d7c <Insert>
     ea8:	0c e7       	ldi	r16, 0x7C	; 124
	CreateTask(&TAdsr1Task,ADSR_1,256,3,"Adsr 1",0);
     eaa:	11 e0       	ldi	r17, 0x01	; 1
     eac:	23 e0       	ldi	r18, 0x03	; 3
     eae:	30 e0       	ldi	r19, 0x00	; 0
     eb0:	40 e0       	ldi	r20, 0x00	; 0
     eb2:	51 e0       	ldi	r21, 0x01	; 1
     eb4:	65 ed       	ldi	r22, 0xD5	; 213
     eb6:	72 e0       	ldi	r23, 0x02	; 2
     eb8:	89 e1       	ldi	r24, 0x19	; 25
     eba:	92 e0       	ldi	r25, 0x02	; 2
	Insert(&ActiveTasks,&TAdsr1Task);
     ebc:	de d9       	rcall	.-3140   	; 0x27a <CreateTask>
     ebe:	69 e1       	ldi	r22, 0x19	; 25
     ec0:	72 e0       	ldi	r23, 0x02	; 2
     ec2:	86 ee       	ldi	r24, 0xE6	; 230
     ec4:	91 e0       	ldi	r25, 0x01	; 1
     ec6:	5a d7       	rcall	.+3764   	; 0x1d7c <Insert>
	CreateTask(&TAdsr2Task,ADSR_2,256,3,"Adsr 2",0);
     ec8:	03 e8       	ldi	r16, 0x83	; 131
     eca:	11 e0       	ldi	r17, 0x01	; 1
     ecc:	23 e0       	ldi	r18, 0x03	; 3
     ece:	30 e0       	ldi	r19, 0x00	; 0
     ed0:	40 e0       	ldi	r20, 0x00	; 0
     ed2:	51 e0       	ldi	r21, 0x01	; 1
     ed4:	62 e4       	ldi	r22, 0x42	; 66
     ed6:	73 e0       	ldi	r23, 0x03	; 3
     ed8:	83 e7       	ldi	r24, 0x73	; 115
     eda:	92 e0       	ldi	r25, 0x02	; 2
     edc:	ce d9       	rcall	.-3172   	; 0x27a <CreateTask>
     ede:	63 e7       	ldi	r22, 0x73	; 115
	Insert(&ActiveTasks,&TAdsr2Task);
     ee0:	72 e0       	ldi	r23, 0x02	; 2
     ee2:	86 ee       	ldi	r24, 0xE6	; 230
     ee4:	91 e0       	ldi	r25, 0x01	; 1
     ee6:	4a d7       	rcall	.+3732   	; 0x1d7c <Insert>
     ee8:	0e 94 5e 11 	call	0x22bc	; 0x22bc <InitSeq>
	 InitSeq();
     eec:	12 de       	rcall	.-988    	; 0xb12 <InitINT1>
     eee:	18 de       	rcall	.-976    	; 0xb20 <InitINT2>
	InitINT1();
     ef0:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <StartOS>
	InitINT2();
     ef4:	ff cf       	rjmp	.-2      	; 0xef4 <main+0x19c>

00000ef6 <malloc>:
     ef6:	ef 92       	push	r14
	StartOS();
     ef8:	ff 92       	push	r15
     efa:	0f 93       	push	r16
     efc:	1f 93       	push	r17
		pointer to memory block on success,
		OR NULL on fail
*******************************************/

void *malloc(size_t len)
{
     efe:	cf 93       	push	r28
     f00:	df 93       	push	r29
     f02:	8c 01       	movw	r16, r24
	 * Our minimum chunk size is the size of a pointer (plus the
	 * size of the "sz" field, but we don't need to account for
	 * this), otherwise we could not possibly fit a freelist entry
	 * into the chunk later.
	 */
	PendSemaphore(&MallocBlocker,0);
     f04:	60 e0       	ldi	r22, 0x00	; 0
     f06:	70 e0       	ldi	r23, 0x00	; 0
     f08:	83 ef       	ldi	r24, 0xF3	; 243
     f0a:	92 e0       	ldi	r25, 0x02	; 2
     f0c:	fc d4       	rcall	.+2552   	; 0x1906 <PendSemaphore>
	if (len < sizeof(struct __freelist) - sizeof(size_t))
     f0e:	02 30       	cpi	r16, 0x02	; 2
     f10:	11 05       	cpc	r17, r1
     f12:	10 f4       	brcc	.+4      	; 0xf18 <malloc+0x22>
		len = sizeof(struct __freelist) - sizeof(size_t);
     f14:	02 e0       	ldi	r16, 0x02	; 2
     f16:	10 e0       	ldi	r17, 0x00	; 0
	 * would match exactly.  If we found one, we are done.  While
	 * walking, note down the size of the largest chunk we found
	 * that would still fit the request -- we need it for step 2.
	 *
	 */
	for (s = 0, fp1 = __flp, fp2 = 0;
     f18:	a0 91 13 03 	lds	r26, 0x0313	; 0x800313 <__flp>
     f1c:	b0 91 14 03 	lds	r27, 0x0314	; 0x800314 <__flp+0x1>
     f20:	10 97       	sbiw	r26, 0x00	; 0
     f22:	09 f4       	brne	.+2      	; 0xf26 <malloc+0x30>
     f24:	83 c0       	rjmp	.+262    	; 0x102c <malloc+0x136>
	     fp1;
	     fp2 = fp1, fp1 = fp1->nx) {
		if (fp1->sz == len) {
     f26:	4d 91       	ld	r20, X+
     f28:	5c 91       	ld	r21, X
     f2a:	11 97       	sbiw	r26, 0x01	; 1
     f2c:	04 17       	cp	r16, r20
     f2e:	15 07       	cpc	r17, r21
     f30:	91 f0       	breq	.+36     	; 0xf56 <malloc+0x60>
     f32:	ca 01       	movw	r24, r20
     f34:	fd 01       	movw	r30, r26
     f36:	20 e0       	ldi	r18, 0x00	; 0
     f38:	30 e0       	ldi	r19, 0x00	; 0
     f3a:	1e c0       	rjmp	.+60     	; 0xf78 <malloc+0x82>
     f3c:	88 81       	ld	r24, Y
     f3e:	99 81       	ldd	r25, Y+1	; 0x01
     f40:	08 17       	cp	r16, r24
     f42:	19 07       	cpc	r17, r25
     f44:	c1 f4       	brne	.+48     	; 0xf76 <malloc+0x80>
			/*
			 * Found it.  Disconnect the chunk from the
			 * freelist, and return it.
			 */
			if (fp2)
     f46:	30 97       	sbiw	r30, 0x00	; 0
     f48:	29 f0       	breq	.+10     	; 0xf54 <malloc+0x5e>
				fp2->nx = fp1->nx;
     f4a:	8a 81       	ldd	r24, Y+2	; 0x02
     f4c:	9b 81       	ldd	r25, Y+3	; 0x03
     f4e:	93 83       	std	Z+3, r25	; 0x03
     f50:	82 83       	std	Z+2, r24	; 0x02
     f52:	0a c0       	rjmp	.+20     	; 0xf68 <malloc+0x72>
	 * that would still fit the request -- we need it for step 2.
	 *
	 */
	for (s = 0, fp1 = __flp, fp2 = 0;
	     fp1;
	     fp2 = fp1, fp1 = fp1->nx) {
     f54:	de 01       	movw	r26, r28
			 * freelist, and return it.
			 */
			if (fp2)
				fp2->nx = fp1->nx;
			else
				__flp = fp1->nx;
     f56:	12 96       	adiw	r26, 0x02	; 2
     f58:	8d 91       	ld	r24, X+
     f5a:	9c 91       	ld	r25, X
     f5c:	13 97       	sbiw	r26, 0x03	; 3
     f5e:	90 93 14 03 	sts	0x0314, r25	; 0x800314 <__flp+0x1>
     f62:	80 93 13 03 	sts	0x0313, r24	; 0x800313 <__flp>
     f66:	ed 01       	movw	r28, r26
			PostSemaphore(&MallocBlocker,0);
     f68:	60 e0       	ldi	r22, 0x00	; 0
     f6a:	70 e0       	ldi	r23, 0x00	; 0
     f6c:	83 ef       	ldi	r24, 0xF3	; 243
     f6e:	92 e0       	ldi	r25, 0x02	; 2
     f70:	16 d6       	rcall	.+3116   	; 0x1b9e <PostSemaphore>
			return &(fp1->nx);
     f72:	22 96       	adiw	r28, 0x02	; 2
     f74:	a8 c0       	rjmp	.+336    	; 0x10c6 <malloc+0x1d0>
	 * that would still fit the request -- we need it for step 2.
	 *
	 */
	for (s = 0, fp1 = __flp, fp2 = 0;
	     fp1;
	     fp2 = fp1, fp1 = fp1->nx) {
     f76:	fe 01       	movw	r30, r28
			else
				__flp = fp1->nx;
			PostSemaphore(&MallocBlocker,0);
			return &(fp1->nx);
		}
		if (fp1->sz > len) {
     f78:	08 17       	cp	r16, r24
     f7a:	19 07       	cpc	r17, r25
     f7c:	48 f4       	brcc	.+18     	; 0xf90 <malloc+0x9a>
			if (s == 0 || fp1->sz < s)
     f7e:	21 15       	cp	r18, r1
     f80:	31 05       	cpc	r19, r1
     f82:	29 f0       	breq	.+10     	; 0xf8e <malloc+0x98>
     f84:	82 17       	cp	r24, r18
     f86:	93 07       	cpc	r25, r19
     f88:	18 f4       	brcc	.+6      	; 0xf90 <malloc+0x9a>
     f8a:	9c 01       	movw	r18, r24
     f8c:	01 c0       	rjmp	.+2      	; 0xf90 <malloc+0x9a>
     f8e:	9c 01       	movw	r18, r24
	 * that would still fit the request -- we need it for step 2.
	 *
	 */
	for (s = 0, fp1 = __flp, fp2 = 0;
	     fp1;
	     fp2 = fp1, fp1 = fp1->nx) {
     f90:	c2 81       	ldd	r28, Z+2	; 0x02
     f92:	d3 81       	ldd	r29, Z+3	; 0x03
	 * would match exactly.  If we found one, we are done.  While
	 * walking, note down the size of the largest chunk we found
	 * that would still fit the request -- we need it for step 2.
	 *
	 */
	for (s = 0, fp1 = __flp, fp2 = 0;
     f94:	20 97       	sbiw	r28, 0x00	; 0
     f96:	91 f6       	brne	.-92     	; 0xf3c <malloc+0x46>
	 * difference between the requested size and the size of the
	 * chunk found is large enough for another freelist entry; if
	 * not, just enlarge the request size to what we have found,
	 * and use the entire chunk.
	 */
	if (s) {
     f98:	21 15       	cp	r18, r1
     f9a:	31 05       	cpc	r19, r1
     f9c:	09 f4       	brne	.+2      	; 0xfa0 <malloc+0xaa>
     f9e:	46 c0       	rjmp	.+140    	; 0x102c <malloc+0x136>
		if (s - len < sizeof(struct __freelist))
     fa0:	c9 01       	movw	r24, r18
     fa2:	80 1b       	sub	r24, r16
     fa4:	91 0b       	sbc	r25, r17
     fa6:	04 97       	sbiw	r24, 0x04	; 4
     fa8:	08 f4       	brcc	.+2      	; 0xfac <malloc+0xb6>
     faa:	87 c0       	rjmp	.+270    	; 0x10ba <malloc+0x1c4>
     fac:	87 c0       	rjmp	.+270    	; 0x10bc <malloc+0x1c6>
			len = s;
		for (fp1 = __flp, fp2 = 0;
		     fp1;
		     fp2 = fp1, fp1 = fp1->nx) {
			if (fp1->sz == s) {
     fae:	f7 01       	movw	r30, r14
     fb0:	80 81       	ld	r24, Z
     fb2:	91 81       	ldd	r25, Z+1	; 0x01
     fb4:	28 17       	cp	r18, r24
     fb6:	39 07       	cpc	r19, r25
     fb8:	81 f5       	brne	.+96     	; 0x101a <malloc+0x124>
				if (len == s) {
     fba:	20 17       	cp	r18, r16
     fbc:	31 07       	cpc	r19, r17
     fbe:	d9 f4       	brne	.+54     	; 0xff6 <malloc+0x100>
					/*
					 * Use entire chunk; same as
					 * above.
					 */
					if (fp2)
     fc0:	10 97       	sbiw	r26, 0x00	; 0
     fc2:	39 f0       	breq	.+14     	; 0xfd2 <malloc+0xdc>
						fp2->nx = fp1->nx;
     fc4:	82 81       	ldd	r24, Z+2	; 0x02
     fc6:	93 81       	ldd	r25, Z+3	; 0x03
     fc8:	13 96       	adiw	r26, 0x03	; 3
     fca:	9c 93       	st	X, r25
     fcc:	8e 93       	st	-X, r24
     fce:	12 97       	sbiw	r26, 0x02	; 2
     fd0:	0a c0       	rjmp	.+20     	; 0xfe6 <malloc+0xf0>
	if (s) {
		if (s - len < sizeof(struct __freelist))
			len = s;
		for (fp1 = __flp, fp2 = 0;
		     fp1;
		     fp2 = fp1, fp1 = fp1->nx) {
     fd2:	d7 01       	movw	r26, r14
					 * above.
					 */
					if (fp2)
						fp2->nx = fp1->nx;
					else
						__flp = fp1->nx;
     fd4:	12 96       	adiw	r26, 0x02	; 2
     fd6:	8d 91       	ld	r24, X+
     fd8:	9c 91       	ld	r25, X
     fda:	13 97       	sbiw	r26, 0x03	; 3
     fdc:	90 93 14 03 	sts	0x0314, r25	; 0x800314 <__flp+0x1>
     fe0:	80 93 13 03 	sts	0x0313, r24	; 0x800313 <__flp>
     fe4:	7d 01       	movw	r14, r26
					PostSemaphore(&MallocBlocker,0);
     fe6:	60 e0       	ldi	r22, 0x00	; 0
     fe8:	70 e0       	ldi	r23, 0x00	; 0
     fea:	83 ef       	ldi	r24, 0xF3	; 243
     fec:	92 e0       	ldi	r25, 0x02	; 2
     fee:	d7 d5       	rcall	.+2990   	; 0x1b9e <PostSemaphore>
					return &(fp1->nx);
     ff0:	e7 01       	movw	r28, r14
     ff2:	22 96       	adiw	r28, 0x02	; 2
     ff4:	68 c0       	rjmp	.+208    	; 0x10c6 <malloc+0x1d0>
				 * entry, and note down the size of
				 * the new chunk before returning it
				 * to the caller.
				 */
				cp = (char *)fp1;
				s -= len;
     ff6:	20 1b       	sub	r18, r16
     ff8:	31 0b       	sbc	r19, r17
				cp += s;
				fp2 = (struct __freelist *)cp;
				fp2->sz = len;
     ffa:	e7 01       	movw	r28, r14
     ffc:	c2 0f       	add	r28, r18
     ffe:	d3 1f       	adc	r29, r19
    1000:	09 93       	st	Y+, r16
    1002:	19 93       	st	Y+, r17
				fp1->sz = s - sizeof(size_t);
    1004:	22 50       	subi	r18, 0x02	; 2
    1006:	31 09       	sbc	r19, r1
    1008:	f7 01       	movw	r30, r14
    100a:	31 83       	std	Z+1, r19	; 0x01
    100c:	20 83       	st	Z, r18
				PostSemaphore(&MallocBlocker,0);
    100e:	60 e0       	ldi	r22, 0x00	; 0
    1010:	70 e0       	ldi	r23, 0x00	; 0
    1012:	83 ef       	ldi	r24, 0xF3	; 243
    1014:	92 e0       	ldi	r25, 0x02	; 2
    1016:	c3 d5       	rcall	.+2950   	; 0x1b9e <PostSemaphore>
				return &(fp2->nx);
    1018:	56 c0       	rjmp	.+172    	; 0x10c6 <malloc+0x1d0>
	if (s) {
		if (s - len < sizeof(struct __freelist))
			len = s;
		for (fp1 = __flp, fp2 = 0;
		     fp1;
		     fp2 = fp1, fp1 = fp1->nx) {
    101a:	d7 01       	movw	r26, r14
    101c:	12 96       	adiw	r26, 0x02	; 2
    101e:	ed 90       	ld	r14, X+
    1020:	fc 90       	ld	r15, X
    1022:	13 97       	sbiw	r26, 0x03	; 3
	 * and use the entire chunk.
	 */
	if (s) {
		if (s - len < sizeof(struct __freelist))
			len = s;
		for (fp1 = __flp, fp2 = 0;
    1024:	e1 14       	cp	r14, r1
    1026:	f1 04       	cpc	r15, r1
    1028:	09 f0       	breq	.+2      	; 0x102c <malloc+0x136>
    102a:	c1 cf       	rjmp	.-126    	; 0xfae <malloc+0xb8>
	 * Under Unix, the "break value" was the end of the data
	 * segment as dynamically requested from the operating system.
	 * Since we don't have an operating system, just make sure
	 * that we don't collide with the stack.
	 */
	if (__brkval == 0)
    102c:	80 91 f1 02 	lds	r24, 0x02F1	; 0x8002f1 <__brkval>
    1030:	90 91 f2 02 	lds	r25, 0x02F2	; 0x8002f2 <__brkval+0x1>
    1034:	89 2b       	or	r24, r25
    1036:	41 f4       	brne	.+16     	; 0x1048 <malloc+0x152>
		__brkval = __malloc_heap_start;
    1038:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <__malloc_heap_start>
    103c:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <__malloc_heap_start+0x1>
    1040:	90 93 f2 02 	sts	0x02F2, r25	; 0x8002f2 <__brkval+0x1>
    1044:	80 93 f1 02 	sts	0x02F1, r24	; 0x8002f1 <__brkval>
	cp = __malloc_heap_end;
    1048:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <__malloc_heap_end>
    104c:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <__malloc_heap_end+0x1>
	if (cp == 0)
    1050:	00 97       	sbiw	r24, 0x00	; 0
    1052:	41 f4       	brne	.+16     	; 0x1064 <malloc+0x16e>
		cp = STACK_POINTER() - __malloc_margin;
    1054:	8d b7       	in	r24, 0x3d	; 61
    1056:	9e b7       	in	r25, 0x3e	; 62
    1058:	20 91 20 01 	lds	r18, 0x0120	; 0x800120 <__malloc_margin>
    105c:	30 91 21 01 	lds	r19, 0x0121	; 0x800121 <__malloc_margin+0x1>
    1060:	82 1b       	sub	r24, r18
    1062:	93 0b       	sbc	r25, r19
	avail = cp - __brkval;
    1064:	c0 91 f1 02 	lds	r28, 0x02F1	; 0x8002f1 <__brkval>
    1068:	d0 91 f2 02 	lds	r29, 0x02F2	; 0x8002f2 <__brkval+0x1>
    106c:	8c 1b       	sub	r24, r28
    106e:	9d 0b       	sbc	r25, r29
	/*
	 * Both tests below are needed to catch the case len >= 0xfffe.
	 */
	if (avail >= len && avail >= len + sizeof(size_t)) {
    1070:	80 17       	cp	r24, r16
    1072:	91 07       	cpc	r25, r17
    1074:	a0 f0       	brcs	.+40     	; 0x109e <malloc+0x1a8>
    1076:	98 01       	movw	r18, r16
    1078:	2e 5f       	subi	r18, 0xFE	; 254
    107a:	3f 4f       	sbci	r19, 0xFF	; 255
    107c:	82 17       	cp	r24, r18
    107e:	93 07       	cpc	r25, r19
    1080:	70 f0       	brcs	.+28     	; 0x109e <malloc+0x1a8>
		fp1 = (struct __freelist *)__brkval;
		__brkval += len + sizeof(size_t);
    1082:	2c 0f       	add	r18, r28
    1084:	3d 1f       	adc	r19, r29
    1086:	30 93 f2 02 	sts	0x02F2, r19	; 0x8002f2 <__brkval+0x1>
    108a:	20 93 f1 02 	sts	0x02F1, r18	; 0x8002f1 <__brkval>
		fp1->sz = len;
    108e:	09 93       	st	Y+, r16
    1090:	19 93       	st	Y+, r17
		PostSemaphore(&MallocBlocker,0);
    1092:	60 e0       	ldi	r22, 0x00	; 0
    1094:	70 e0       	ldi	r23, 0x00	; 0
    1096:	83 ef       	ldi	r24, 0xF3	; 243
    1098:	92 e0       	ldi	r25, 0x02	; 2
    109a:	81 d5       	rcall	.+2818   	; 0x1b9e <PostSemaphore>
		return &(fp1->nx);
	}
	/*
	 * Step 4: There's no help, just fail. :-/
	 */
	 PostSemaphore(&MallocBlocker,0);
    109c:	14 c0       	rjmp	.+40     	; 0x10c6 <malloc+0x1d0>
    109e:	60 e0       	ldi	r22, 0x00	; 0
    10a0:	70 e0       	ldi	r23, 0x00	; 0
    10a2:	83 ef       	ldi	r24, 0xF3	; 243
    10a4:	92 e0       	ldi	r25, 0x02	; 2
    10a6:	7b d5       	rcall	.+2806   	; 0x1b9e <PostSemaphore>
	return 0;
    10a8:	c0 e0       	ldi	r28, 0x00	; 0
    10aa:	d0 e0       	ldi	r29, 0x00	; 0
    10ac:	0c c0       	rjmp	.+24     	; 0x10c6 <malloc+0x1d0>
			len = s;
		for (fp1 = __flp, fp2 = 0;
		     fp1;
		     fp2 = fp1, fp1 = fp1->nx) {
			if (fp1->sz == s) {
				if (len == s) {
    10ae:	20 17       	cp	r18, r16
    10b0:	31 07       	cpc	r19, r17
    10b2:	09 f4       	brne	.+2      	; 0x10b6 <malloc+0x1c0>
    10b4:	8f cf       	rjmp	.-226    	; 0xfd4 <malloc+0xde>
	 * and use the entire chunk.
	 */
	if (s) {
		if (s - len < sizeof(struct __freelist))
			len = s;
		for (fp1 = __flp, fp2 = 0;
    10b6:	7d 01       	movw	r14, r26
    10b8:	9e cf       	rjmp	.-196    	; 0xff6 <malloc+0x100>
	 * chunk found is large enough for another freelist entry; if
	 * not, just enlarge the request size to what we have found,
	 * and use the entire chunk.
	 */
	if (s) {
		if (s - len < sizeof(struct __freelist))
    10ba:	89 01       	movw	r16, r18
			len = s;
		for (fp1 = __flp, fp2 = 0;
		     fp1;
		     fp2 = fp1, fp1 = fp1->nx) {
			if (fp1->sz == s) {
    10bc:	24 17       	cp	r18, r20
    10be:	35 07       	cpc	r19, r21
    10c0:	09 f0       	breq	.+2      	; 0x10c4 <malloc+0x1ce>
    10c2:	ac cf       	rjmp	.-168    	; 0x101c <malloc+0x126>
    10c4:	f4 cf       	rjmp	.-24     	; 0x10ae <malloc+0x1b8>
	/*
	 * Step 4: There's no help, just fail. :-/
	 */
	 PostSemaphore(&MallocBlocker,0);
	return 0;
}
    10c6:	ce 01       	movw	r24, r28
    10c8:	df 91       	pop	r29
    10ca:	cf 91       	pop	r28
    10cc:	1f 91       	pop	r17
    10ce:	0f 91       	pop	r16
    10d0:	ff 90       	pop	r15
    10d2:	ef 90       	pop	r14
    10d4:	08 95       	ret

000010d6 <free>:
		free is thread safe.
	parameters:
		p.....pointer to memory block to free
**************************************************/
void free(void *p)
{
    10d6:	0f 93       	push	r16
    10d8:	1f 93       	push	r17
    10da:	cf 93       	push	r28
    10dc:	df 93       	push	r29
	struct __freelist *fp1, *fp2, *fpnew;
	char *cp1, *cp2, *cpnew;

	/* ISO C says free(NULL) must be a no-op */
	if (p == 0)
    10de:	00 97       	sbiw	r24, 0x00	; 0
    10e0:	09 f4       	brne	.+2      	; 0x10e4 <free+0xe>
    10e2:	84 c0       	rjmp	.+264    	; 0x11ec <free+0x116>
    10e4:	8c 01       	movw	r16, r24
		return;

	PendSemaphore(&MallocBlocker,0);
    10e6:	60 e0       	ldi	r22, 0x00	; 0
    10e8:	70 e0       	ldi	r23, 0x00	; 0
    10ea:	83 ef       	ldi	r24, 0xF3	; 243
    10ec:	92 e0       	ldi	r25, 0x02	; 2
    10ee:	0b d4       	rcall	.+2070   	; 0x1906 <PendSemaphore>
	cpnew = p;
	cpnew -= sizeof(size_t);
    10f0:	d8 01       	movw	r26, r16
    10f2:	12 97       	sbiw	r26, 0x02	; 2
	fpnew = (struct __freelist *)cpnew;
	fpnew->nx = 0;
    10f4:	13 96       	adiw	r26, 0x03	; 3
    10f6:	1c 92       	st	X, r1
    10f8:	1e 92       	st	-X, r1
    10fa:	12 97       	sbiw	r26, 0x02	; 2

	/*
	 * Trivial case first: if there's no freelist yet, our entry
	 * will be the only one on it.
	 */
	if (__flp == 0) {
    10fc:	e0 91 13 03 	lds	r30, 0x0313	; 0x800313 <__flp>
    1100:	f0 91 14 03 	lds	r31, 0x0314	; 0x800314 <__flp+0x1>
    1104:	30 97       	sbiw	r30, 0x00	; 0
    1106:	21 f0       	breq	.+8      	; 0x1110 <free+0x3a>
	 * if possible.
	 */
	for (fp1 = __flp, fp2 = 0;
	     fp1;
	     fp2 = fp1, fp1 = fp1->nx) {
		if (fp1 < fpnew)
    1108:	ea 17       	cp	r30, r26
    110a:	fb 07       	cpc	r31, r27
    110c:	78 f0       	brcs	.+30     	; 0x112c <free+0x56>
    110e:	5f c0       	rjmp	.+190    	; 0x11ce <free+0xf8>
	/*
	 * Trivial case first: if there's no freelist yet, our entry
	 * will be the only one on it.
	 */
	if (__flp == 0) {
		__flp = fpnew;
    1110:	b0 93 14 03 	sts	0x0314, r27	; 0x800314 <__flp+0x1>
    1114:	a0 93 13 03 	sts	0x0313, r26	; 0x800313 <__flp>
		PostSemaphore(&MallocBlocker,0);
    1118:	60 e0       	ldi	r22, 0x00	; 0
    111a:	70 e0       	ldi	r23, 0x00	; 0
    111c:	83 ef       	ldi	r24, 0xF3	; 243
    111e:	92 e0       	ldi	r25, 0x02	; 2
    1120:	3e d5       	rcall	.+2684   	; 0x1b9e <PostSemaphore>
		return;
    1122:	64 c0       	rjmp	.+200    	; 0x11ec <free+0x116>
	 * if possible.
	 */
	for (fp1 = __flp, fp2 = 0;
	     fp1;
	     fp2 = fp1, fp1 = fp1->nx) {
		if (fp1 < fpnew)
    1124:	8a 17       	cp	r24, r26
    1126:	9b 07       	cpc	r25, r27
    1128:	30 f4       	brcc	.+12     	; 0x1136 <free+0x60>
	 * freelist.  Try to aggregate the chunk with adjacent chunks
	 * if possible.
	 */
	for (fp1 = __flp, fp2 = 0;
	     fp1;
	     fp2 = fp1, fp1 = fp1->nx) {
    112a:	fc 01       	movw	r30, r24
    112c:	82 81       	ldd	r24, Z+2	; 0x02
    112e:	93 81       	ldd	r25, Z+3	; 0x03
	/*
	 * Now, find the position where our new entry belongs onto the
	 * freelist.  Try to aggregate the chunk with adjacent chunks
	 * if possible.
	 */
	for (fp1 = __flp, fp2 = 0;
    1130:	00 97       	sbiw	r24, 0x00	; 0
    1132:	c1 f7       	brne	.-16     	; 0x1124 <free+0x4e>
    1134:	2e c0       	rjmp	.+92     	; 0x1192 <free+0xbc>
	     fp1;
	     fp2 = fp1, fp1 = fp1->nx) {
		if (fp1 < fpnew)
			continue;
		cp1 = (char *)fp1;
		fpnew->nx = fp1;
    1136:	98 01       	movw	r18, r16
    1138:	22 50       	subi	r18, 0x02	; 2
    113a:	31 09       	sbc	r19, r1
    113c:	e9 01       	movw	r28, r18
    113e:	9b 83       	std	Y+3, r25	; 0x03
    1140:	8a 83       	std	Y+2, r24	; 0x02
		if ((char *)&(fpnew->nx) + fpnew->sz == cp1) {
    1142:	28 81       	ld	r18, Y
    1144:	39 81       	ldd	r19, Y+1	; 0x01
    1146:	a8 01       	movw	r20, r16
    1148:	42 0f       	add	r20, r18
    114a:	53 1f       	adc	r21, r19
    114c:	84 17       	cp	r24, r20
    114e:	95 07       	cpc	r25, r21
    1150:	a1 f4       	brne	.+40     	; 0x117a <free+0xa4>
    1152:	02 c0       	rjmp	.+4      	; 0x1158 <free+0x82>
    1154:	e0 e0       	ldi	r30, 0x00	; 0
    1156:	f0 e0       	ldi	r31, 0x00	; 0
			/* upper chunk adjacent, assimilate it */
			fpnew->sz += fp1->sz + sizeof(size_t);
    1158:	ec 01       	movw	r28, r24
    115a:	68 81       	ld	r22, Y
    115c:	79 81       	ldd	r23, Y+1	; 0x01
    115e:	6e 5f       	subi	r22, 0xFE	; 254
    1160:	7f 4f       	sbci	r23, 0xFF	; 255
    1162:	26 0f       	add	r18, r22
    1164:	37 1f       	adc	r19, r23
    1166:	e8 01       	movw	r28, r16
    1168:	3a 93       	st	-Y, r19
    116a:	2a 93       	st	-Y, r18
    116c:	ae 01       	movw	r20, r28
			fpnew->nx = fp1->nx;
    116e:	ec 01       	movw	r28, r24
    1170:	8a 81       	ldd	r24, Y+2	; 0x02
    1172:	9b 81       	ldd	r25, Y+3	; 0x03
    1174:	ea 01       	movw	r28, r20
    1176:	9b 83       	std	Y+3, r25	; 0x03
    1178:	8a 83       	std	Y+2, r24	; 0x02
		}
		if (fp2 == 0) {
    117a:	30 97       	sbiw	r30, 0x00	; 0
    117c:	51 f4       	brne	.+20     	; 0x1192 <free+0xbc>
			/* new head of freelist */
			__flp = fpnew;
    117e:	b0 93 14 03 	sts	0x0314, r27	; 0x800314 <__flp+0x1>
    1182:	a0 93 13 03 	sts	0x0313, r26	; 0x800313 <__flp>
			PostSemaphore(&MallocBlocker,0);
    1186:	60 e0       	ldi	r22, 0x00	; 0
    1188:	70 e0       	ldi	r23, 0x00	; 0
    118a:	83 ef       	ldi	r24, 0xF3	; 243
    118c:	92 e0       	ldi	r25, 0x02	; 2
    118e:	07 d5       	rcall	.+2574   	; 0x1b9e <PostSemaphore>
			return;
    1190:	2d c0       	rjmp	.+90     	; 0x11ec <free+0x116>
	 * Note that we get here either if we hit the "break" above,
	 * or if we fell off the end of the loop.  The latter means
	 * we've got a new topmost chunk.  Either way, try aggregating
	 * with the lower chunk if possible.
	 */
	fp2->nx = fpnew;
    1192:	b3 83       	std	Z+3, r27	; 0x03
    1194:	a2 83       	std	Z+2, r26	; 0x02
	cp2 = (char *)&(fp2->nx);
	if (cp2 + fp2->sz == cpnew) {
    1196:	ef 01       	movw	r28, r30
    1198:	29 91       	ld	r18, Y+
    119a:	39 91       	ld	r19, Y+
    119c:	ce 01       	movw	r24, r28
    119e:	82 0f       	add	r24, r18
    11a0:	93 1f       	adc	r25, r19
    11a2:	a8 17       	cp	r26, r24
    11a4:	b9 07       	cpc	r27, r25
    11a6:	69 f4       	brne	.+26     	; 0x11c2 <free+0xec>
		/* lower junk adjacent, merge */
		fp2->sz += fpnew->sz + sizeof(size_t);
    11a8:	e8 01       	movw	r28, r16
    11aa:	5a 91       	ld	r21, -Y
    11ac:	4a 91       	ld	r20, -Y
    11ae:	24 0f       	add	r18, r20
    11b0:	35 1f       	adc	r19, r21
    11b2:	2e 5f       	subi	r18, 0xFE	; 254
    11b4:	3f 4f       	sbci	r19, 0xFF	; 255
    11b6:	31 83       	std	Z+1, r19	; 0x01
    11b8:	20 83       	st	Z, r18
		fp2->nx = fpnew->nx;
    11ba:	8a 81       	ldd	r24, Y+2	; 0x02
    11bc:	9b 81       	ldd	r25, Y+3	; 0x03
    11be:	93 83       	std	Z+3, r25	; 0x03
    11c0:	82 83       	std	Z+2, r24	; 0x02
	}
	PostSemaphore(&MallocBlocker,0);
    11c2:	60 e0       	ldi	r22, 0x00	; 0
    11c4:	70 e0       	ldi	r23, 0x00	; 0
    11c6:	83 ef       	ldi	r24, 0xF3	; 243
    11c8:	92 e0       	ldi	r25, 0x02	; 2
    11ca:	e9 d4       	rcall	.+2514   	; 0x1b9e <PostSemaphore>
    11cc:	0f c0       	rjmp	.+30     	; 0x11ec <free+0x116>
	     fp1;
	     fp2 = fp1, fp1 = fp1->nx) {
		if (fp1 < fpnew)
			continue;
		cp1 = (char *)fp1;
		fpnew->nx = fp1;
    11ce:	c8 01       	movw	r24, r16
    11d0:	02 97       	sbiw	r24, 0x02	; 2
    11d2:	ec 01       	movw	r28, r24
    11d4:	fb 83       	std	Y+3, r31	; 0x03
    11d6:	ea 83       	std	Y+2, r30	; 0x02
		if ((char *)&(fpnew->nx) + fpnew->sz == cp1) {
    11d8:	28 81       	ld	r18, Y
    11da:	39 81       	ldd	r19, Y+1	; 0x01
    11dc:	c8 01       	movw	r24, r16
    11de:	82 0f       	add	r24, r18
    11e0:	93 1f       	adc	r25, r19
    11e2:	e8 17       	cp	r30, r24
    11e4:	f9 07       	cpc	r31, r25
    11e6:	09 f4       	brne	.+2      	; 0x11ea <free+0x114>
    11e8:	b5 cf       	rjmp	.-150    	; 0x1154 <free+0x7e>
    11ea:	c9 cf       	rjmp	.-110    	; 0x117e <free+0xa8>
		/* lower junk adjacent, merge */
		fp2->sz += fpnew->sz + sizeof(size_t);
		fp2->nx = fpnew->nx;
	}
	PostSemaphore(&MallocBlocker,0);
}
    11ec:	df 91       	pop	r29
    11ee:	cf 91       	pop	r28
    11f0:	1f 91       	pop	r17
    11f2:	0f 91       	pop	r16
    11f4:	08 95       	ret

000011f6 <OS_InitMalloc>:
// If start == 0, use default value
// If end == 0, use default value
//--------------------------------------------------------------------

void OS_InitMalloc(char *start, char *end)
{
    11f6:	0f 93       	push	r16
    11f8:	1f 93       	push	r17
    11fa:	cf 93       	push	r28
    11fc:	df 93       	push	r29
    11fe:	8c 01       	movw	r16, r24
    1200:	eb 01       	movw	r28, r22
	CreateSemaphore(&MallocBlocker,1,SEMAPHORE_MODE_BLOCKING,"Malloc");
    1202:	2a e8       	ldi	r18, 0x8A	; 138
    1204:	31 e0       	ldi	r19, 0x01	; 1
    1206:	40 e0       	ldi	r20, 0x00	; 0
    1208:	50 e0       	ldi	r21, 0x00	; 0
    120a:	61 e0       	ldi	r22, 0x01	; 1
    120c:	70 e0       	ldi	r23, 0x00	; 0
    120e:	83 ef       	ldi	r24, 0xF3	; 243
    1210:	92 e0       	ldi	r25, 0x02	; 2
    1212:	0e 94 87 00 	call	0x10e	; 0x10e <CreateSemaphore>
	if(start) __malloc_heap_start = start;
    1216:	01 15       	cp	r16, r1
    1218:	11 05       	cpc	r17, r1
    121a:	21 f0       	breq	.+8      	; 0x1224 <OS_InitMalloc+0x2e>
    121c:	10 93 1f 01 	sts	0x011F, r17	; 0x80011f <__malloc_heap_start+0x1>
    1220:	00 93 1e 01 	sts	0x011E, r16	; 0x80011e <__malloc_heap_start>
	if(end) __malloc_heap_end = end;
    1224:	20 97       	sbiw	r28, 0x00	; 0
    1226:	21 f0       	breq	.+8      	; 0x1230 <OS_InitMalloc+0x3a>
    1228:	d0 93 1d 01 	sts	0x011D, r29	; 0x80011d <__malloc_heap_end+0x1>
    122c:	c0 93 1c 01 	sts	0x011C, r28	; 0x80011c <__malloc_heap_end>
}
    1230:	df 91       	pop	r29
    1232:	cf 91       	pop	r28
    1234:	1f 91       	pop	r17
    1236:	0f 91       	pop	r16
    1238:	08 95       	ret

0000123a <NewMessageBuffer>:
 #include <stdlib.h>
 #include "semaphore.h"
 #include "Message.h"

 MESSBUFF *NewMessageBuffer(int size)
 {
    123a:	0f 93       	push	r16
    123c:	1f 93       	push	r17
    123e:	cf 93       	push	r28
    1240:	df 93       	push	r29
    1242:	8c 01       	movw	r16, r24
	MESSBUFF *pMB;
	pMB = (MESSBUFF *)malloc(sizeof (MESSBUFF));
    1244:	8c e0       	ldi	r24, 0x0C	; 12
    1246:	90 e0       	ldi	r25, 0x00	; 0
    1248:	56 de       	rcall	.-852    	; 0xef6 <malloc>
    124a:	ec 01       	movw	r28, r24
	pMB->m_Buff = (MESSAGE *)malloc(sizeof(MESSAGE) * size);
    124c:	c8 01       	movw	r24, r16
    124e:	88 0f       	add	r24, r24
    1250:	99 1f       	adc	r25, r25
    1252:	80 0f       	add	r24, r16
    1254:	91 1f       	adc	r25, r17
    1256:	88 0f       	add	r24, r24
    1258:	99 1f       	adc	r25, r25
    125a:	4d de       	rcall	.-870    	; 0xef6 <malloc>
    125c:	9b 87       	std	Y+11, r25	; 0x0b
    125e:	8a 87       	std	Y+10, r24	; 0x0a
	pMB->m_pSem = NewSemaphore(0,SEMAPHORE_MODE_BLOCKING,"Message");
    1260:	41 e9       	ldi	r20, 0x91	; 145
    1262:	51 e0       	ldi	r21, 0x01	; 1
    1264:	60 e0       	ldi	r22, 0x00	; 0
    1266:	70 e0       	ldi	r23, 0x00	; 0
    1268:	80 e0       	ldi	r24, 0x00	; 0
    126a:	90 e0       	ldi	r25, 0x00	; 0
    126c:	0e 94 b9 00 	call	0x172	; 0x172 <NewSemaphore>
    1270:	99 83       	std	Y+1, r25	; 0x01
    1272:	88 83       	st	Y, r24
	pMB->m_Head = 0;
    1274:	1d 82       	std	Y+5, r1	; 0x05
    1276:	1c 82       	std	Y+4, r1	; 0x04
	pMB->m_Size = size;
    1278:	19 87       	std	Y+9, r17	; 0x09
    127a:	08 87       	std	Y+8, r16	; 0x08
	pMB->m_Tail = 0;
    127c:	1f 82       	std	Y+7, r1	; 0x07
    127e:	1e 82       	std	Y+6, r1	; 0x06
	pMB->n_Msg = 0;
    1280:	1b 82       	std	Y+3, r1	; 0x03
    1282:	1a 82       	std	Y+2, r1	; 0x02
	return pMB;
 }
    1284:	ce 01       	movw	r24, r28
    1286:	df 91       	pop	r29
    1288:	cf 91       	pop	r28
    128a:	1f 91       	pop	r17
    128c:	0f 91       	pop	r16
    128e:	08 95       	ret

00001290 <PostMessage>:

 void PostMessage(MESSBUFF *pMB, int cmd,int Param1,int Param2)
 {
    1290:	fc 01       	movw	r30, r24
	if(pMB->n_Msg < pMB->m_Size)
    1292:	a2 81       	ldd	r26, Z+2	; 0x02
    1294:	b3 81       	ldd	r27, Z+3	; 0x03
    1296:	80 85       	ldd	r24, Z+8	; 0x08
    1298:	91 85       	ldd	r25, Z+9	; 0x09
    129a:	a8 17       	cp	r26, r24
    129c:	b9 07       	cpc	r27, r25
    129e:	0c f0       	brlt	.+2      	; 0x12a2 <PostMessage+0x12>
    12a0:	47 c0       	rjmp	.+142    	; 0x1330 <PostMessage+0xa0>
	{
		pMB->m_Buff[pMB->m_Head].m_Cmd = cmd;
    12a2:	84 81       	ldd	r24, Z+4	; 0x04
    12a4:	95 81       	ldd	r25, Z+5	; 0x05
    12a6:	dc 01       	movw	r26, r24
    12a8:	aa 0f       	add	r26, r26
    12aa:	bb 1f       	adc	r27, r27
    12ac:	8a 0f       	add	r24, r26
    12ae:	9b 1f       	adc	r25, r27
    12b0:	88 0f       	add	r24, r24
    12b2:	99 1f       	adc	r25, r25
    12b4:	a2 85       	ldd	r26, Z+10	; 0x0a
    12b6:	b3 85       	ldd	r27, Z+11	; 0x0b
    12b8:	a8 0f       	add	r26, r24
    12ba:	b9 1f       	adc	r27, r25
    12bc:	6d 93       	st	X+, r22
    12be:	7c 93       	st	X, r23
		pMB->m_Buff[pMB->m_Head].m_Param1 = Param1;
    12c0:	84 81       	ldd	r24, Z+4	; 0x04
    12c2:	95 81       	ldd	r25, Z+5	; 0x05
    12c4:	dc 01       	movw	r26, r24
    12c6:	aa 0f       	add	r26, r26
    12c8:	bb 1f       	adc	r27, r27
    12ca:	8a 0f       	add	r24, r26
    12cc:	9b 1f       	adc	r25, r27
    12ce:	88 0f       	add	r24, r24
    12d0:	99 1f       	adc	r25, r25
    12d2:	a2 85       	ldd	r26, Z+10	; 0x0a
    12d4:	b3 85       	ldd	r27, Z+11	; 0x0b
    12d6:	a8 0f       	add	r26, r24
    12d8:	b9 1f       	adc	r27, r25
    12da:	13 96       	adiw	r26, 0x03	; 3
    12dc:	5c 93       	st	X, r21
    12de:	4e 93       	st	-X, r20
    12e0:	12 97       	sbiw	r26, 0x02	; 2
		pMB->m_Buff[pMB->m_Head].m_Param2 = Param2;
    12e2:	84 81       	ldd	r24, Z+4	; 0x04
    12e4:	95 81       	ldd	r25, Z+5	; 0x05
    12e6:	dc 01       	movw	r26, r24
    12e8:	aa 0f       	add	r26, r26
    12ea:	bb 1f       	adc	r27, r27
    12ec:	8a 0f       	add	r24, r26
    12ee:	9b 1f       	adc	r25, r27
    12f0:	88 0f       	add	r24, r24
    12f2:	99 1f       	adc	r25, r25
    12f4:	a2 85       	ldd	r26, Z+10	; 0x0a
    12f6:	b3 85       	ldd	r27, Z+11	; 0x0b
    12f8:	a8 0f       	add	r26, r24
    12fa:	b9 1f       	adc	r27, r25
    12fc:	15 96       	adiw	r26, 0x05	; 5
    12fe:	3c 93       	st	X, r19
    1300:	2e 93       	st	-X, r18
    1302:	14 97       	sbiw	r26, 0x04	; 4
		pMB->m_Head++;
    1304:	84 81       	ldd	r24, Z+4	; 0x04
    1306:	95 81       	ldd	r25, Z+5	; 0x05
    1308:	01 96       	adiw	r24, 0x01	; 1
    130a:	95 83       	std	Z+5, r25	; 0x05
    130c:	84 83       	std	Z+4, r24	; 0x04
		if(pMB->m_Head == pMB->m_Size) pMB->m_Head = 0;
    130e:	20 85       	ldd	r18, Z+8	; 0x08
    1310:	31 85       	ldd	r19, Z+9	; 0x09
    1312:	82 17       	cp	r24, r18
    1314:	93 07       	cpc	r25, r19
    1316:	11 f4       	brne	.+4      	; 0x131c <PostMessage+0x8c>
    1318:	15 82       	std	Z+5, r1	; 0x05
    131a:	14 82       	std	Z+4, r1	; 0x04
		pMB->n_Msg++;
    131c:	82 81       	ldd	r24, Z+2	; 0x02
    131e:	93 81       	ldd	r25, Z+3	; 0x03
    1320:	01 96       	adiw	r24, 0x01	; 1
    1322:	93 83       	std	Z+3, r25	; 0x03
    1324:	82 83       	std	Z+2, r24	; 0x02
		PostSemaphore(pMB->m_pSem,0);
    1326:	60 e0       	ldi	r22, 0x00	; 0
    1328:	70 e0       	ldi	r23, 0x00	; 0
    132a:	80 81       	ld	r24, Z
    132c:	91 81       	ldd	r25, Z+1	; 0x01
    132e:	37 c4       	rjmp	.+2158   	; 0x1b9e <PostSemaphore>
    1330:	08 95       	ret

00001332 <GetMessage>:
	}
}

 MESSAGE *GetMessage(MESSBUFF *pMB)
 {
    1332:	cf 93       	push	r28
    1334:	df 93       	push	r29
    1336:	ec 01       	movw	r28, r24
	MESSAGE *pMsg;

	PendSemaphore(pMB->m_pSem,0);
    1338:	60 e0       	ldi	r22, 0x00	; 0
    133a:	70 e0       	ldi	r23, 0x00	; 0
    133c:	88 81       	ld	r24, Y
    133e:	99 81       	ldd	r25, Y+1	; 0x01
    1340:	e2 d2       	rcall	.+1476   	; 0x1906 <PendSemaphore>
	pMsg = &pMB->m_Buff[pMB->m_Tail];
    1342:	2e 81       	ldd	r18, Y+6	; 0x06
    1344:	3f 81       	ldd	r19, Y+7	; 0x07
    1346:	c9 01       	movw	r24, r18
    1348:	88 0f       	add	r24, r24
    134a:	99 1f       	adc	r25, r25
    134c:	82 0f       	add	r24, r18
    134e:	93 1f       	adc	r25, r19
    1350:	88 0f       	add	r24, r24
    1352:	99 1f       	adc	r25, r25
    1354:	4a 85       	ldd	r20, Y+10	; 0x0a
    1356:	5b 85       	ldd	r21, Y+11	; 0x0b
    1358:	84 0f       	add	r24, r20
    135a:	95 1f       	adc	r25, r21
	if(++pMB->m_Tail == pMB->m_Size)
    135c:	2f 5f       	subi	r18, 0xFF	; 255
    135e:	3f 4f       	sbci	r19, 0xFF	; 255
    1360:	3f 83       	std	Y+7, r19	; 0x07
    1362:	2e 83       	std	Y+6, r18	; 0x06
    1364:	48 85       	ldd	r20, Y+8	; 0x08
    1366:	59 85       	ldd	r21, Y+9	; 0x09
    1368:	24 17       	cp	r18, r20
    136a:	35 07       	cpc	r19, r21
    136c:	11 f4       	brne	.+4      	; 0x1372 <GetMessage+0x40>
		pMB->m_Tail = 0;
    136e:	1f 82       	std	Y+7, r1	; 0x07
    1370:	1e 82       	std	Y+6, r1	; 0x06
	pMB->n_Msg--;
    1372:	2a 81       	ldd	r18, Y+2	; 0x02
    1374:	3b 81       	ldd	r19, Y+3	; 0x03
    1376:	21 50       	subi	r18, 0x01	; 1
    1378:	31 09       	sbc	r19, r1
    137a:	3b 83       	std	Y+3, r19	; 0x03
    137c:	2a 83       	std	Y+2, r18	; 0x02
	return pMsg;
 }
    137e:	df 91       	pop	r29
    1380:	cf 91       	pop	r28
    1382:	08 95       	ret

00001384 <MqInit>:
void DeleteMSG(MSG *m)
{
	//-------------------------------------
	//put message into message pool
	//-------------------------------------
	free(m);
    1384:	ef 92       	push	r14
    1386:	ff 92       	push	r15
    1388:	0f 93       	push	r16
    138a:	1f 93       	push	r17
    138c:	cf 93       	push	r28
    138e:	df 93       	push	r29
    1390:	8c 01       	movw	r16, r24
    1392:	7b 01       	movw	r14, r22
    1394:	06 96       	adiw	r24, 0x06	; 6
    1396:	88 0f       	add	r24, r24
    1398:	99 1f       	adc	r25, r25
    139a:	ad dd       	rcall	.-1190   	; 0xef6 <malloc>
    139c:	ec 01       	movw	r28, r24
    139e:	60 e0       	ldi	r22, 0x00	; 0
    13a0:	70 e0       	ldi	r23, 0x00	; 0
    13a2:	80 91 c2 01 	lds	r24, 0x01C2	; 0x8001c2 <MqBlocker>
    13a6:	90 91 c3 01 	lds	r25, 0x01C3	; 0x8001c3 <MqBlocker+0x1>
    13aa:	ad d2       	rcall	.+1370   	; 0x1906 <PendSemaphore>
    13ac:	1b 82       	std	Y+3, r1	; 0x03
    13ae:	1a 82       	std	Y+2, r1	; 0x02
    13b0:	1d 82       	std	Y+5, r1	; 0x05
    13b2:	1c 82       	std	Y+4, r1	; 0x04
    13b4:	1f 82       	std	Y+7, r1	; 0x07
    13b6:	1e 82       	std	Y+6, r1	; 0x06
    13b8:	ce 01       	movw	r24, r28
    13ba:	0c 96       	adiw	r24, 0x0c	; 12
    13bc:	9b 87       	std	Y+11, r25	; 0x0b
    13be:	8a 87       	std	Y+10, r24	; 0x0a
    13c0:	19 87       	std	Y+9, r17	; 0x09
    13c2:	08 87       	std	Y+8, r16	; 0x08
    13c4:	a7 01       	movw	r20, r14
    13c6:	60 e0       	ldi	r22, 0x00	; 0
    13c8:	70 e0       	ldi	r23, 0x00	; 0
    13ca:	80 e0       	ldi	r24, 0x00	; 0
    13cc:	90 e0       	ldi	r25, 0x00	; 0
    13ce:	0e 94 b9 00 	call	0x172	; 0x172 <NewSemaphore>
    13d2:	99 83       	std	Y+1, r25	; 0x01
    13d4:	88 83       	st	Y, r24
    13d6:	60 e0       	ldi	r22, 0x00	; 0
    13d8:	70 e0       	ldi	r23, 0x00	; 0
    13da:	80 91 c2 01 	lds	r24, 0x01C2	; 0x8001c2 <MqBlocker>
    13de:	90 91 c3 01 	lds	r25, 0x01C3	; 0x8001c3 <MqBlocker+0x1>
    13e2:	dd d3       	rcall	.+1978   	; 0x1b9e <PostSemaphore>
    13e4:	ce 01       	movw	r24, r28
    13e6:	df 91       	pop	r29
    13e8:	cf 91       	pop	r28
    13ea:	1f 91       	pop	r17
    13ec:	0f 91       	pop	r16
    13ee:	ff 90       	pop	r15
    13f0:	ef 90       	pop	r14
    13f2:	08 95       	ret

000013f4 <MqGet>:
    13f4:	0f 93       	push	r16
    13f6:	1f 93       	push	r17
    13f8:	cf 93       	push	r28
    13fa:	df 93       	push	r29
    13fc:	00 97       	sbiw	r24, 0x00	; 0
    13fe:	39 f1       	breq	.+78     	; 0x144e <MqGet+0x5a>
    1400:	ec 01       	movw	r28, r24
    1402:	60 e0       	ldi	r22, 0x00	; 0
    1404:	70 e0       	ldi	r23, 0x00	; 0
    1406:	88 81       	ld	r24, Y
    1408:	99 81       	ldd	r25, Y+1	; 0x01
    140a:	7d d2       	rcall	.+1274   	; 0x1906 <PendSemaphore>
    140c:	0e 94 7f 00 	call	0xfe	; 0xfe <Disable>
    1410:	ea 85       	ldd	r30, Y+10	; 0x0a
    1412:	fb 85       	ldd	r31, Y+11	; 0x0b
    1414:	2c 81       	ldd	r18, Y+4	; 0x04
    1416:	3d 81       	ldd	r19, Y+5	; 0x05
    1418:	a9 01       	movw	r20, r18
    141a:	4f 5f       	subi	r20, 0xFF	; 255
    141c:	5f 4f       	sbci	r21, 0xFF	; 255
    141e:	5d 83       	std	Y+5, r21	; 0x05
    1420:	4c 83       	std	Y+4, r20	; 0x04
    1422:	22 0f       	add	r18, r18
    1424:	33 1f       	adc	r19, r19
    1426:	e2 0f       	add	r30, r18
    1428:	f3 1f       	adc	r31, r19
    142a:	00 81       	ld	r16, Z
    142c:	11 81       	ldd	r17, Z+1	; 0x01
    142e:	28 85       	ldd	r18, Y+8	; 0x08
    1430:	39 85       	ldd	r19, Y+9	; 0x09
    1432:	42 17       	cp	r20, r18
    1434:	53 07       	cpc	r21, r19
    1436:	11 f4       	brne	.+4      	; 0x143c <MqGet+0x48>
    1438:	1d 82       	std	Y+5, r1	; 0x05
    143a:	1c 82       	std	Y+4, r1	; 0x04
    143c:	2e 81       	ldd	r18, Y+6	; 0x06
    143e:	3f 81       	ldd	r19, Y+7	; 0x07
    1440:	21 50       	subi	r18, 0x01	; 1
    1442:	31 09       	sbc	r19, r1
    1444:	3f 83       	std	Y+7, r19	; 0x07
    1446:	2e 83       	std	Y+6, r18	; 0x06
    1448:	0e 94 83 00 	call	0x106	; 0x106 <Enable>
    144c:	02 c0       	rjmp	.+4      	; 0x1452 <MqGet+0x5e>
    144e:	00 e0       	ldi	r16, 0x00	; 0
    1450:	10 e0       	ldi	r17, 0x00	; 0
    1452:	c8 01       	movw	r24, r16
    1454:	df 91       	pop	r29
    1456:	cf 91       	pop	r28
    1458:	1f 91       	pop	r17
    145a:	0f 91       	pop	r16
    145c:	08 95       	ret

0000145e <InitMessageQueueManager>:
void InitMessageQueueManager(void)
{
	//--------------------------------------
	// Allow access to one task at a time
	//--------------------------------------
	MqBlocker = NewSemaphore(1,SEMAPHORE_MODE_BLOCKING,"MSG_BLOCKER");
    145e:	49 e9       	ldi	r20, 0x99	; 153
    1460:	51 e0       	ldi	r21, 0x01	; 1
    1462:	60 e0       	ldi	r22, 0x00	; 0
    1464:	70 e0       	ldi	r23, 0x00	; 0
    1466:	81 e0       	ldi	r24, 0x01	; 1
    1468:	90 e0       	ldi	r25, 0x00	; 0
    146a:	0e 94 b9 00 	call	0x172	; 0x172 <NewSemaphore>
    146e:	90 93 c3 01 	sts	0x01C3, r25	; 0x8001c3 <MqBlocker+0x1>
    1472:	80 93 c2 01 	sts	0x01C2, r24	; 0x8001c2 <MqBlocker>
    1476:	08 95       	ret

00001478 <newMidiParseDescriptor>:
		PostMessage(pDacTaskMsg,DAC_PITCHBEND,data,0);
	}
}

void ActionController(unsigned char chan,unsigned char Num,unsigned char val)
{
    1478:	8c e0       	ldi	r24, 0x0C	; 12
    147a:	90 e0       	ldi	r25, 0x00	; 0
    147c:	3c cd       	rjmp	.-1416   	; 0xef6 <malloc>
    147e:	08 95       	ret

00001480 <InitMidiParseDesc>:
    1480:	cf 93       	push	r28
    1482:	df 93       	push	r29
    1484:	ec 01       	movw	r28, r24
    1486:	1a 82       	std	Y+2, r1	; 0x02
    1488:	19 82       	std	Y+1, r1	; 0x01
    148a:	1d 82       	std	Y+5, r1	; 0x05
    148c:	1f 82       	std	Y+7, r1	; 0x07
    148e:	1e 82       	std	Y+6, r1	; 0x06
    1490:	80 e8       	ldi	r24, 0x80	; 128
    1492:	90 e0       	ldi	r25, 0x00	; 0
    1494:	30 dd       	rcall	.-1440   	; 0xef6 <malloc>
    1496:	99 87       	std	Y+9, r25	; 0x09
    1498:	88 87       	std	Y+8, r24	; 0x08
    149a:	18 82       	st	Y, r1
    149c:	1b 82       	std	Y+3, r1	; 0x03
    149e:	1c 82       	std	Y+4, r1	; 0x04
    14a0:	df 91       	pop	r29
    14a2:	cf 91       	pop	r28
    14a4:	08 95       	ret

000014a6 <ActionSysExData>:
    14a6:	fc 01       	movw	r30, r24
    14a8:	80 85       	ldd	r24, Z+8	; 0x08
    14aa:	91 85       	ldd	r25, Z+9	; 0x09
    14ac:	26 81       	ldd	r18, Z+6	; 0x06
    14ae:	37 81       	ldd	r19, Z+7	; 0x07
    14b0:	a9 01       	movw	r20, r18
    14b2:	4f 5f       	subi	r20, 0xFF	; 255
    14b4:	5f 4f       	sbci	r21, 0xFF	; 255
    14b6:	57 83       	std	Z+7, r21	; 0x07
    14b8:	46 83       	std	Z+6, r20	; 0x06
    14ba:	fc 01       	movw	r30, r24
    14bc:	e2 0f       	add	r30, r18
    14be:	f3 1f       	adc	r31, r19
    14c0:	60 83       	st	Z, r22
    14c2:	08 95       	ret

000014c4 <ActionSysRTStart>:
    14c4:	87 e0       	ldi	r24, 0x07	; 7
    14c6:	90 e0       	ldi	r25, 0x00	; 0
    14c8:	0c c3       	rjmp	.+1560   	; 0x1ae2 <SetPortC>
    14ca:	08 95       	ret

000014cc <ActionSysRTContinue>:
    14cc:	87 e0       	ldi	r24, 0x07	; 7
    14ce:	90 e0       	ldi	r25, 0x00	; 0
    14d0:	08 c3       	rjmp	.+1552   	; 0x1ae2 <SetPortC>
    14d2:	08 95       	ret

000014d4 <ActionSysRTStop>:
    14d4:	87 e0       	ldi	r24, 0x07	; 7
    14d6:	90 e0       	ldi	r25, 0x00	; 0
    14d8:	1b c3       	rjmp	.+1590   	; 0x1b10 <ClearPortC>
    14da:	08 95       	ret

000014dc <ActionSysRTReset>:
    14dc:	82 e0       	ldi	r24, 0x02	; 2
    14de:	90 e0       	ldi	r25, 0x00	; 0
    14e0:	85 d2       	rcall	.+1290   	; 0x19ec <SetPortA>
    14e2:	60 e0       	ldi	r22, 0x00	; 0
    14e4:	70 e0       	ldi	r23, 0x00	; 0
    14e6:	80 91 8b 02 	lds	r24, 0x028B	; 0x80028b <pSemReset>
    14ea:	90 91 8c 02 	lds	r25, 0x028C	; 0x80028c <pSemReset+0x1>
    14ee:	57 c3       	rjmp	.+1710   	; 0x1b9e <PostSemaphore>
    14f0:	08 95       	ret

000014f2 <ActionSysRTClock>:
    14f2:	86 e0       	ldi	r24, 0x06	; 6
    14f4:	90 e0       	ldi	r25, 0x00	; 0
    14f6:	f5 d2       	rcall	.+1514   	; 0x1ae2 <SetPortC>
    14f8:	60 e0       	ldi	r22, 0x00	; 0
    14fa:	70 e0       	ldi	r23, 0x00	; 0
    14fc:	80 91 71 02 	lds	r24, 0x0271	; 0x800271 <pSemClock>
    1500:	90 91 72 02 	lds	r25, 0x0272	; 0x800272 <pSemClock+0x1>
    1504:	4c c3       	rjmp	.+1688   	; 0x1b9e <PostSemaphore>
    1506:	08 95       	ret

00001508 <ActionNoteOff>:
    1508:	90 91 12 02 	lds	r25, 0x0212	; 0x800212 <Settings>
    150c:	98 13       	cpse	r25, r24
    150e:	24 c0       	rjmp	.+72     	; 0x1558 <ActionNoteOff+0x50>
    1510:	80 e2       	ldi	r24, 0x20	; 32
    1512:	68 9f       	mul	r22, r24
    1514:	90 01       	movw	r18, r0
    1516:	11 24       	eor	r1, r1
    1518:	40 e0       	ldi	r20, 0x00	; 0
    151a:	50 e0       	ldi	r21, 0x00	; 0
    151c:	62 e0       	ldi	r22, 0x02	; 2
    151e:	70 e0       	ldi	r23, 0x00	; 0
    1520:	80 91 a5 02 	lds	r24, 0x02A5	; 0x8002a5 <pDacTaskMsg>
    1524:	90 91 a6 02 	lds	r25, 0x02A6	; 0x8002a6 <pDacTaskMsg+0x1>
    1528:	b3 de       	rcall	.-666    	; 0x1290 <PostMessage>
    152a:	20 e0       	ldi	r18, 0x00	; 0
    152c:	30 e0       	ldi	r19, 0x00	; 0
    152e:	40 e0       	ldi	r20, 0x00	; 0
    1530:	50 e0       	ldi	r21, 0x00	; 0
    1532:	63 e0       	ldi	r22, 0x03	; 3
    1534:	70 e0       	ldi	r23, 0x00	; 0
    1536:	80 91 6f 02 	lds	r24, 0x026F	; 0x80026f <pADSR1Msg>
    153a:	90 91 70 02 	lds	r25, 0x0270	; 0x800270 <pADSR1Msg+0x1>
    153e:	a8 de       	rcall	.-688    	; 0x1290 <PostMessage>
    1540:	20 e0       	ldi	r18, 0x00	; 0
    1542:	30 e0       	ldi	r19, 0x00	; 0
    1544:	40 e0       	ldi	r20, 0x00	; 0
    1546:	50 e0       	ldi	r21, 0x00	; 0
    1548:	63 e0       	ldi	r22, 0x03	; 3
    154a:	70 e0       	ldi	r23, 0x00	; 0
    154c:	80 91 f8 01 	lds	r24, 0x01F8	; 0x8001f8 <pADSR2Msg>
    1550:	90 91 f9 01 	lds	r25, 0x01F9	; 0x8001f9 <pADSR2Msg+0x1>
    1554:	9d ce       	rjmp	.-710    	; 0x1290 <PostMessage>
    1556:	08 95       	ret
    1558:	90 91 13 02 	lds	r25, 0x0213	; 0x800213 <Settings+0x1>
    155c:	89 17       	cp	r24, r25
    155e:	49 f0       	breq	.+18     	; 0x1572 <ActionNoteOff+0x6a>
    1560:	90 91 14 02 	lds	r25, 0x0214	; 0x800214 <Settings+0x2>
    1564:	89 17       	cp	r24, r25
    1566:	29 f0       	breq	.+10     	; 0x1572 <ActionNoteOff+0x6a>
    1568:	90 91 15 02 	lds	r25, 0x0215	; 0x800215 <Settings+0x3>
    156c:	89 13       	cpse	r24, r25
    156e:	80 91 16 02 	lds	r24, 0x0216	; 0x800216 <Settings+0x4>
    1572:	08 95       	ret

00001574 <ActionNoteOn>:
    1574:	cf 93       	push	r28
    1576:	df 93       	push	r29
    1578:	c4 2f       	mov	r28, r20
    157a:	90 91 12 02 	lds	r25, 0x0212	; 0x800212 <Settings>
    157e:	98 13       	cpse	r25, r24
    1580:	29 c0       	rjmp	.+82     	; 0x15d4 <ActionNoteOn+0x60>
    1582:	80 e2       	ldi	r24, 0x20	; 32
    1584:	68 9f       	mul	r22, r24
    1586:	90 01       	movw	r18, r0
    1588:	11 24       	eor	r1, r1
    158a:	40 e0       	ldi	r20, 0x00	; 0
    158c:	50 e0       	ldi	r21, 0x00	; 0
    158e:	62 e0       	ldi	r22, 0x02	; 2
    1590:	70 e0       	ldi	r23, 0x00	; 0
    1592:	80 91 a5 02 	lds	r24, 0x02A5	; 0x8002a5 <pDacTaskMsg>
    1596:	90 91 a6 02 	lds	r25, 0x02A6	; 0x8002a6 <pDacTaskMsg+0x1>
    159a:	7a de       	rcall	.-780    	; 0x1290 <PostMessage>
    159c:	c1 11       	cpse	r28, r1
    159e:	03 c0       	rjmp	.+6      	; 0x15a6 <ActionNoteOn+0x32>
    15a0:	c3 e0       	ldi	r28, 0x03	; 3
    15a2:	d0 e0       	ldi	r29, 0x00	; 0
    15a4:	02 c0       	rjmp	.+4      	; 0x15aa <ActionNoteOn+0x36>
    15a6:	c2 e0       	ldi	r28, 0x02	; 2
    15a8:	d0 e0       	ldi	r29, 0x00	; 0
    15aa:	20 e0       	ldi	r18, 0x00	; 0
    15ac:	30 e0       	ldi	r19, 0x00	; 0
    15ae:	40 e0       	ldi	r20, 0x00	; 0
    15b0:	50 e0       	ldi	r21, 0x00	; 0
    15b2:	be 01       	movw	r22, r28
    15b4:	80 91 6f 02 	lds	r24, 0x026F	; 0x80026f <pADSR1Msg>
    15b8:	90 91 70 02 	lds	r25, 0x0270	; 0x800270 <pADSR1Msg+0x1>
    15bc:	69 de       	rcall	.-814    	; 0x1290 <PostMessage>
    15be:	20 e0       	ldi	r18, 0x00	; 0
    15c0:	30 e0       	ldi	r19, 0x00	; 0
    15c2:	40 e0       	ldi	r20, 0x00	; 0
    15c4:	50 e0       	ldi	r21, 0x00	; 0
    15c6:	be 01       	movw	r22, r28
    15c8:	80 91 f8 01 	lds	r24, 0x01F8	; 0x8001f8 <pADSR2Msg>
    15cc:	90 91 f9 01 	lds	r25, 0x01F9	; 0x8001f9 <pADSR2Msg+0x1>
    15d0:	5f de       	rcall	.-834    	; 0x1290 <PostMessage>
    15d2:	47 c0       	rjmp	.+142    	; 0x1662 <ActionNoteOn+0xee>
    15d4:	90 91 13 02 	lds	r25, 0x0213	; 0x800213 <Settings+0x1>
    15d8:	89 13       	cpse	r24, r25
    15da:	0e c0       	rjmp	.+28     	; 0x15f8 <ActionNoteOn+0x84>
    15dc:	80 e2       	ldi	r24, 0x20	; 32
    15de:	68 9f       	mul	r22, r24
    15e0:	90 01       	movw	r18, r0
    15e2:	11 24       	eor	r1, r1
    15e4:	44 e0       	ldi	r20, 0x04	; 4
    15e6:	50 e0       	ldi	r21, 0x00	; 0
    15e8:	62 e0       	ldi	r22, 0x02	; 2
    15ea:	70 e0       	ldi	r23, 0x00	; 0
    15ec:	80 91 a5 02 	lds	r24, 0x02A5	; 0x8002a5 <pDacTaskMsg>
    15f0:	90 91 a6 02 	lds	r25, 0x02A6	; 0x8002a6 <pDacTaskMsg+0x1>
    15f4:	4d de       	rcall	.-870    	; 0x1290 <PostMessage>
    15f6:	35 c0       	rjmp	.+106    	; 0x1662 <ActionNoteOn+0xee>
    15f8:	90 91 14 02 	lds	r25, 0x0214	; 0x800214 <Settings+0x2>
    15fc:	89 13       	cpse	r24, r25
    15fe:	0e c0       	rjmp	.+28     	; 0x161c <ActionNoteOn+0xa8>
    1600:	80 e2       	ldi	r24, 0x20	; 32
    1602:	68 9f       	mul	r22, r24
    1604:	90 01       	movw	r18, r0
    1606:	11 24       	eor	r1, r1
    1608:	45 e0       	ldi	r20, 0x05	; 5
    160a:	50 e0       	ldi	r21, 0x00	; 0
    160c:	62 e0       	ldi	r22, 0x02	; 2
    160e:	70 e0       	ldi	r23, 0x00	; 0
    1610:	80 91 a5 02 	lds	r24, 0x02A5	; 0x8002a5 <pDacTaskMsg>
    1614:	90 91 a6 02 	lds	r25, 0x02A6	; 0x8002a6 <pDacTaskMsg+0x1>
    1618:	3b de       	rcall	.-906    	; 0x1290 <PostMessage>
    161a:	23 c0       	rjmp	.+70     	; 0x1662 <ActionNoteOn+0xee>
    161c:	90 91 15 02 	lds	r25, 0x0215	; 0x800215 <Settings+0x3>
    1620:	89 13       	cpse	r24, r25
    1622:	0e c0       	rjmp	.+28     	; 0x1640 <ActionNoteOn+0xcc>
    1624:	80 e2       	ldi	r24, 0x20	; 32
    1626:	68 9f       	mul	r22, r24
    1628:	90 01       	movw	r18, r0
    162a:	11 24       	eor	r1, r1
    162c:	46 e0       	ldi	r20, 0x06	; 6
    162e:	50 e0       	ldi	r21, 0x00	; 0
    1630:	62 e0       	ldi	r22, 0x02	; 2
    1632:	70 e0       	ldi	r23, 0x00	; 0
    1634:	80 91 a5 02 	lds	r24, 0x02A5	; 0x8002a5 <pDacTaskMsg>
    1638:	90 91 a6 02 	lds	r25, 0x02A6	; 0x8002a6 <pDacTaskMsg+0x1>
    163c:	29 de       	rcall	.-942    	; 0x1290 <PostMessage>
    163e:	11 c0       	rjmp	.+34     	; 0x1662 <ActionNoteOn+0xee>
    1640:	90 91 16 02 	lds	r25, 0x0216	; 0x800216 <Settings+0x4>
    1644:	89 13       	cpse	r24, r25
    1646:	0d c0       	rjmp	.+26     	; 0x1662 <ActionNoteOn+0xee>
    1648:	80 e2       	ldi	r24, 0x20	; 32
    164a:	68 9f       	mul	r22, r24
    164c:	90 01       	movw	r18, r0
    164e:	11 24       	eor	r1, r1
    1650:	47 e0       	ldi	r20, 0x07	; 7
    1652:	50 e0       	ldi	r21, 0x00	; 0
    1654:	62 e0       	ldi	r22, 0x02	; 2
    1656:	70 e0       	ldi	r23, 0x00	; 0
    1658:	80 91 a5 02 	lds	r24, 0x02A5	; 0x8002a5 <pDacTaskMsg>
    165c:	90 91 a6 02 	lds	r25, 0x02A6	; 0x8002a6 <pDacTaskMsg+0x1>
    1660:	17 de       	rcall	.-978    	; 0x1290 <PostMessage>
    1662:	df 91       	pop	r29
    1664:	cf 91       	pop	r28
    1666:	08 95       	ret

00001668 <ActionPitchWheel>:
    1668:	90 91 12 02 	lds	r25, 0x0212	; 0x800212 <Settings>
    166c:	98 13       	cpse	r25, r24
    166e:	0a c0       	rjmp	.+20     	; 0x1684 <ActionPitchWheel+0x1c>
    1670:	ab 01       	movw	r20, r22
    1672:	20 e0       	ldi	r18, 0x00	; 0
    1674:	30 e0       	ldi	r19, 0x00	; 0
    1676:	63 e0       	ldi	r22, 0x03	; 3
    1678:	70 e0       	ldi	r23, 0x00	; 0
    167a:	80 91 a5 02 	lds	r24, 0x02A5	; 0x8002a5 <pDacTaskMsg>
    167e:	90 91 a6 02 	lds	r25, 0x02A6	; 0x8002a6 <pDacTaskMsg+0x1>
    1682:	06 ce       	rjmp	.-1012   	; 0x1290 <PostMessage>
    1684:	08 95       	ret

00001686 <ParseMidi>:

}

int ParseMidi(MIDIPARSE_D *pMp, unsigned char c)
{
    1686:	cf 93       	push	r28
    1688:	df 93       	push	r29
    168a:	ec 01       	movw	r28, r24
	//	c.......a byte of midi data
	//
	// returns:
	//	0
	//-----------------------------------------
	if(c & (unsigned char)0x80)	//is it a command?
    168c:	66 23       	and	r22, r22
    168e:	0c f0       	brlt	.+2      	; 0x1692 <ParseMidi+0xc>
    1690:	3c c0       	rjmp	.+120    	; 0x170a <ParseMidi+0x84>
	{
		if(c < (unsigned char)0xf0)
    1692:	60 3f       	cpi	r22, 0xF0	; 240
    1694:	48 f4       	brcc	.+18     	; 0x16a8 <ParseMidi+0x22>
		{
			//process this stuff, dispose of everything else
			//Command portion of data
			pMp->cmd = (unsigned char)(c & (unsigned char)0xf0);
    1696:	86 2f       	mov	r24, r22
    1698:	80 7f       	andi	r24, 0xF0	; 240
    169a:	89 83       	std	Y+1, r24	; 0x01
			// channel portion of data
			pMp->chan = (unsigned char)(c & 0x0f);
    169c:	e6 2f       	mov	r30, r22
    169e:	ef 70       	andi	r30, 0x0F	; 15
    16a0:	ea 83       	std	Y+2, r30	; 0x02
			//set state to receive first data byte
			pMp->state = NOTE0;
    16a2:	81 e0       	ldi	r24, 0x01	; 1
    16a4:	8d 83       	std	Y+5, r24	; 0x05
    16a6:	06 c1       	rjmp	.+524    	; 0x18b4 <ParseMidi+0x22e>
		}
		else	//process system commands
		{
			switch(c)
    16a8:	46 2f       	mov	r20, r22
    16aa:	50 e0       	ldi	r21, 0x00	; 0
    16ac:	fa 01       	movw	r30, r20
    16ae:	e0 5f       	subi	r30, 0xF0	; 240
    16b0:	f1 09       	sbc	r31, r1
    16b2:	e0 31       	cpi	r30, 0x10	; 16
    16b4:	f1 05       	cpc	r31, r1
    16b6:	08 f0       	brcs	.+2      	; 0x16ba <ParseMidi+0x34>
    16b8:	fd c0       	rjmp	.+506    	; 0x18b4 <ParseMidi+0x22e>
    16ba:	ea 5b       	subi	r30, 0xBA	; 186
    16bc:	ff 4f       	sbci	r31, 0xFF	; 255
    16be:	0c 94 02 15 	jmp	0x2a04	; 0x2a04 <__tablejump2__>
			{
				case SYSEX:	//n bytes defined by command
                   	pMp->state = SYSEX_ID;
    16c2:	85 e0       	ldi	r24, 0x05	; 5
    16c4:	8d 83       	std	Y+5, r24	; 0x05
                    pMp->cmd = SYSEX;
    16c6:	80 ef       	ldi	r24, 0xF0	; 240
    16c8:	89 83       	std	Y+1, r24	; 0x01
// Action Functions for Midi Parser
//---------------------------------

void ActionSysEx(MIDIPARSE_D *pMD)
{
	pMD->SysexCount = 0;
    16ca:	1f 82       	std	Y+7, r1	; 0x07
    16cc:	1e 82       	std	Y+6, r1	; 0x06
    16ce:	f2 c0       	rjmp	.+484    	; 0x18b4 <ParseMidi+0x22e>
                   	pMp->state = SYSEX_ID;
                    pMp->cmd = SYSEX;
					ActionSysEx(pMp);
					break;
				case SYSCOM_MTCQUARTERFRAME:		//2 bytes
					pMp->cmd = SYSCOM_MTCQUARTERFRAME;
    16d0:	81 ef       	ldi	r24, 0xF1	; 241
    16d2:	89 83       	std	Y+1, r24	; 0x01
					pMp->state = SYSCOM_STATE;
    16d4:	84 e0       	ldi	r24, 0x04	; 4
    16d6:	8d 83       	std	Y+5, r24	; 0x05
					break;
    16d8:	ed c0       	rjmp	.+474    	; 0x18b4 <ParseMidi+0x22e>
				case SYSCOMSONGPOS:		//3 bytes
					pMp->cmd = SYSCOMSONGPOS;
    16da:	82 ef       	ldi	r24, 0xF2	; 242
    16dc:	89 83       	std	Y+1, r24	; 0x01
					pMp->state = NOTE0;
    16de:	81 e0       	ldi	r24, 0x01	; 1
    16e0:	8d 83       	std	Y+5, r24	; 0x05
					break;
    16e2:	e8 c0       	rjmp	.+464    	; 0x18b4 <ParseMidi+0x22e>
				case SYSCOMSONGSEL:		//2 bytes
					pMp->cmd = SYSCOMSONGSEL;
    16e4:	83 ef       	ldi	r24, 0xF3	; 243
    16e6:	89 83       	std	Y+1, r24	; 0x01
					pMp->state = SYSCOM_STATE;
    16e8:	84 e0       	ldi	r24, 0x04	; 4
    16ea:	8d 83       	std	Y+5, r24	; 0x05
					break;
    16ec:	e3 c0       	rjmp	.+454    	; 0x18b4 <ParseMidi+0x22e>
					break;
				case SYSCOMTUNEREQ:		//1 byte
					ActionSysComTuneReq();
					break;
				case SYSEXEND:			//1 byte
                   	pMp->state = IDLE;
    16ee:	1d 82       	std	Y+5, r1	; 0x05
                    pMp->cmd = SYSEXEND;
    16f0:	87 ef       	ldi	r24, 0xF7	; 247
    16f2:	89 83       	std	Y+1, r24	; 0x01
					ActionSysExEnd(pMp);
					break;
    16f4:	df c0       	rjmp	.+446    	; 0x18b4 <ParseMidi+0x22e>
				case SYSRTCLOCK:		//1 byte
					ActionSysRTClock();
    16f6:	fd de       	rcall	.-518    	; 0x14f2 <ActionSysRTClock>
					break;
				case SYSRTUNDEF:
					ActionSysRTUndef();
					break;
				case SYSRTSTART:		//1 byte
					ActionSysRTStart();
    16f8:	dd c0       	rjmp	.+442    	; 0x18b4 <ParseMidi+0x22e>
					break;
    16fa:	e4 de       	rcall	.-568    	; 0x14c4 <ActionSysRTStart>
				case SYSRTCONTINUE:		//1 byte
					ActionSysRTContinue();
    16fc:	db c0       	rjmp	.+438    	; 0x18b4 <ParseMidi+0x22e>
					break;
				case SYSRTSTOP:			//1 byte
					ActionSysRTStop();
    16fe:	e6 de       	rcall	.-564    	; 0x14cc <ActionSysRTContinue>
    1700:	d9 c0       	rjmp	.+434    	; 0x18b4 <ParseMidi+0x22e>
					break;
    1702:	e8 de       	rcall	.-560    	; 0x14d4 <ActionSysRTStop>
					break;
				case SYSRTACTIVESEN:	//1 byte
					ActionSysRTActiveSense();
					break;
				case SYSRTRESET:		//1 byte
					ActionSysRTReset();
    1704:	d7 c0       	rjmp	.+430    	; 0x18b4 <ParseMidi+0x22e>
    1706:	ea de       	rcall	.-556    	; 0x14dc <ActionSysRTReset>
					break;
    1708:	d5 c0       	rjmp	.+426    	; 0x18b4 <ParseMidi+0x22e>
	else	// 	then it must be data
	{
		/*	we must handle the case of running status...so we need to keep track of
		**  which data byte we are on
		*/
		switch(pMp->cmd)	//what was the last command?
    170a:	89 81       	ldd	r24, Y+1	; 0x01
    170c:	80 3d       	cpi	r24, 0xD0	; 208
    170e:	09 f4       	brne	.+2      	; 0x1712 <ParseMidi+0x8c>
    1710:	64 c0       	rjmp	.+200    	; 0x17da <ParseMidi+0x154>
    1712:	80 f4       	brcc	.+32     	; 0x1734 <ParseMidi+0xae>
    1714:	80 3a       	cpi	r24, 0xA0	; 160
    1716:	09 f4       	brne	.+2      	; 0x171a <ParseMidi+0x94>
    1718:	4c c0       	rjmp	.+152    	; 0x17b2 <ParseMidi+0x12c>
    171a:	28 f4       	brcc	.+10     	; 0x1726 <ParseMidi+0xa0>
    171c:	80 38       	cpi	r24, 0x80	; 128
    171e:	e1 f0       	breq	.+56     	; 0x1758 <ParseMidi+0xd2>
    1720:	80 39       	cpi	r24, 0x90	; 144
    1722:	69 f1       	breq	.+90     	; 0x177e <ParseMidi+0xf8>
    1724:	c7 c0       	rjmp	.+398    	; 0x18b4 <ParseMidi+0x22e>
    1726:	80 3b       	cpi	r24, 0xB0	; 176
    1728:	09 f4       	brne	.+2      	; 0x172c <ParseMidi+0xa6>
    172a:	54 c0       	rjmp	.+168    	; 0x17d4 <ParseMidi+0x14e>
    172c:	80 3c       	cpi	r24, 0xC0	; 192
    172e:	09 f4       	brne	.+2      	; 0x1732 <ParseMidi+0xac>
    1730:	84 c0       	rjmp	.+264    	; 0x183a <ParseMidi+0x1b4>
    1732:	c0 c0       	rjmp	.+384    	; 0x18b4 <ParseMidi+0x22e>
    1734:	81 3f       	cpi	r24, 0xF1	; 241
    1736:	09 f4       	brne	.+2      	; 0x173a <ParseMidi+0xb4>
    1738:	9d c0       	rjmp	.+314    	; 0x1874 <ParseMidi+0x1ee>
    173a:	38 f4       	brcc	.+14     	; 0x174a <ParseMidi+0xc4>
    173c:	80 3e       	cpi	r24, 0xE0	; 224
    173e:	09 f4       	brne	.+2      	; 0x1742 <ParseMidi+0xbc>
    1740:	5b c0       	rjmp	.+182    	; 0x17f8 <ParseMidi+0x172>
    1742:	80 3f       	cpi	r24, 0xF0	; 240
    1744:	09 f4       	brne	.+2      	; 0x1748 <ParseMidi+0xc2>
    1746:	7c c0       	rjmp	.+248    	; 0x1840 <ParseMidi+0x1ba>
    1748:	b5 c0       	rjmp	.+362    	; 0x18b4 <ParseMidi+0x22e>
    174a:	82 3f       	cpi	r24, 0xF2	; 242
    174c:	09 f4       	brne	.+2      	; 0x1750 <ParseMidi+0xca>
    174e:	94 c0       	rjmp	.+296    	; 0x1878 <ParseMidi+0x1f2>
    1750:	83 3f       	cpi	r24, 0xF3	; 243
    1752:	09 f4       	brne	.+2      	; 0x1756 <ParseMidi+0xd0>
    1754:	ae c0       	rjmp	.+348    	; 0x18b2 <ParseMidi+0x22c>
    1756:	ae c0       	rjmp	.+348    	; 0x18b4 <ParseMidi+0x22e>
		{
			case NOTEOFF:	//last command was note off 3 bytes
				switch(pMp->state)
    1758:	8d 81       	ldd	r24, Y+5	; 0x05
    175a:	81 30       	cpi	r24, 0x01	; 1
    175c:	19 f0       	breq	.+6      	; 0x1764 <ParseMidi+0xde>
    175e:	82 30       	cpi	r24, 0x02	; 2
    1760:	29 f0       	breq	.+10     	; 0x176c <ParseMidi+0xe6>
    1762:	a8 c0       	rjmp	.+336    	; 0x18b4 <ParseMidi+0x22e>
				{
					case NOTE0:
						pMp->nextnote = c;
    1764:	6b 83       	std	Y+3, r22	; 0x03
						pMp->state = NOTE1;
    1766:	82 e0       	ldi	r24, 0x02	; 2
    1768:	8d 83       	std	Y+5, r24	; 0x05
						break;
    176a:	a4 c0       	rjmp	.+328    	; 0x18b4 <ParseMidi+0x22e>
					case NOTE1:
						pMp->currentnote = pMp->nextnote;
    176c:	8b 81       	ldd	r24, Y+3	; 0x03
						ActionNoteOff(pMp->chan,pMp->nextnote,c);
    176e:	8c 83       	std	Y+4, r24	; 0x04
    1770:	46 2f       	mov	r20, r22
    1772:	68 2f       	mov	r22, r24
    1774:	8a 81       	ldd	r24, Y+2	; 0x02
    1776:	c8 de       	rcall	.-624    	; 0x1508 <ActionNoteOff>
						pMp->state = NOTE0;
    1778:	81 e0       	ldi	r24, 0x01	; 1
    177a:	8d 83       	std	Y+5, r24	; 0x05
						break;
    177c:	9b c0       	rjmp	.+310    	; 0x18b4 <ParseMidi+0x22e>
				} //end of switch(pMp->state)
				break;
			case NOTEON:	// last command was note on 3 bytes
				switch(pMp->state)
    177e:	8d 81       	ldd	r24, Y+5	; 0x05
    1780:	81 30       	cpi	r24, 0x01	; 1
    1782:	19 f0       	breq	.+6      	; 0x178a <ParseMidi+0x104>
    1784:	82 30       	cpi	r24, 0x02	; 2
    1786:	29 f0       	breq	.+10     	; 0x1792 <ParseMidi+0x10c>
    1788:	95 c0       	rjmp	.+298    	; 0x18b4 <ParseMidi+0x22e>
				{
					case NOTE0:
						pMp->nextnote = c;
    178a:	6b 83       	std	Y+3, r22	; 0x03
						pMp->state = NOTE1;
    178c:	82 e0       	ldi	r24, 0x02	; 2
    178e:	8d 83       	std	Y+5, r24	; 0x05
						break;
    1790:	91 c0       	rjmp	.+290    	; 0x18b4 <ParseMidi+0x22e>
					case NOTE1:
						pMp->currentnote = pMp->nextnote;
    1792:	8b 81       	ldd	r24, Y+3	; 0x03
						if(c > 0)
    1794:	8c 83       	std	Y+4, r24	; 0x04
    1796:	66 23       	and	r22, r22
							ActionNoteOn(pMp->chan,pMp->currentnote,c);
    1798:	29 f0       	breq	.+10     	; 0x17a4 <ParseMidi+0x11e>
    179a:	46 2f       	mov	r20, r22
    179c:	68 2f       	mov	r22, r24
    179e:	8a 81       	ldd	r24, Y+2	; 0x02
    17a0:	e9 de       	rcall	.-558    	; 0x1574 <ActionNoteOn>
						else
							ActionNoteOff(pMp->chan,pMp->nextnote,c);
    17a2:	04 c0       	rjmp	.+8      	; 0x17ac <ParseMidi+0x126>
    17a4:	40 e0       	ldi	r20, 0x00	; 0
    17a6:	68 2f       	mov	r22, r24
    17a8:	8a 81       	ldd	r24, Y+2	; 0x02
    17aa:	ae de       	rcall	.-676    	; 0x1508 <ActionNoteOff>
						pMp->state = NOTE0;
    17ac:	81 e0       	ldi	r24, 0x01	; 1
    17ae:	8d 83       	std	Y+5, r24	; 0x05
						break;
    17b0:	81 c0       	rjmp	.+258    	; 0x18b4 <ParseMidi+0x22e>
					default:
						break;
				} //end of switch(pMp->state)
				break;
			case NOTEPRES:	// last command was note pressure  3 bytes
				switch(pMp->state)
    17b2:	8d 81       	ldd	r24, Y+5	; 0x05
    17b4:	81 30       	cpi	r24, 0x01	; 1
    17b6:	19 f0       	breq	.+6      	; 0x17be <ParseMidi+0x138>
    17b8:	82 30       	cpi	r24, 0x02	; 2
    17ba:	29 f0       	breq	.+10     	; 0x17c6 <ParseMidi+0x140>
    17bc:	7b c0       	rjmp	.+246    	; 0x18b4 <ParseMidi+0x22e>
				{
					case NOTE0:
						pMp->nextnote = c;
    17be:	6b 83       	std	Y+3, r22	; 0x03
						pMp->state = NOTE1;
    17c0:	82 e0       	ldi	r24, 0x02	; 2
    17c2:	8d 83       	std	Y+5, r24	; 0x05
						break;
    17c4:	77 c0       	rjmp	.+238    	; 0x18b4 <ParseMidi+0x22e>
					case NOTE1:
						pMp->state = NOTE0;
    17c6:	81 e0       	ldi	r24, 0x01	; 1
    17c8:	8d 83       	std	Y+5, r24	; 0x05
						pMp->currentnote = pMp->nextnote;
    17ca:	8b 81       	ldd	r24, Y+3	; 0x03
    17cc:	8c 83       	std	Y+4, r24	; 0x04
	}
}

void ActionAfterTouch(unsigned char chan,unsigned char Note, unsigned char Pressure)
{
	if(chan == Settings.m_CH1_MidiChannel)
    17ce:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <Settings>
    17d2:	70 c0       	rjmp	.+224    	; 0x18b4 <ParseMidi+0x22e>
	}
}

void ActionChanPressure(unsigned char chan, unsigned char Pressure)
{
	if(chan == Settings.m_CH1_MidiChannel)
    17d4:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <Settings>
    17d8:	6d c0       	rjmp	.+218    	; 0x18b4 <ParseMidi+0x22e>
				break;
			case CHANPRES:		//last command was channel pressuren 2 bytes
				ActionChanPressure(pMp->chan,c);
				break;
			case CONTROL:			//control change 3 bytes
				switch(pMp->state)
    17da:	8d 81       	ldd	r24, Y+5	; 0x05
    17dc:	81 30       	cpi	r24, 0x01	; 1
    17de:	19 f0       	breq	.+6      	; 0x17e6 <ParseMidi+0x160>
    17e0:	82 30       	cpi	r24, 0x02	; 2
    17e2:	29 f0       	breq	.+10     	; 0x17ee <ParseMidi+0x168>
    17e4:	67 c0       	rjmp	.+206    	; 0x18b4 <ParseMidi+0x22e>
				{
					case NOTE0:
						pMp->state = NOTE1;
    17e6:	82 e0       	ldi	r24, 0x02	; 2
    17e8:	8d 83       	std	Y+5, r24	; 0x05
						pMp->nextnote = c;
    17ea:	6b 83       	std	Y+3, r22	; 0x03
						break;
    17ec:	63 c0       	rjmp	.+198    	; 0x18b4 <ParseMidi+0x22e>
					case NOTE1:
						pMp->state = NOTE0;
    17ee:	81 e0       	ldi	r24, 0x01	; 1
    17f0:	8d 83       	std	Y+5, r24	; 0x05
						pMp->currentnote = pMp->nextnote;
    17f2:	8b 81       	ldd	r24, Y+3	; 0x03
    17f4:	8c 83       	std	Y+4, r24	; 0x04
						ActionController(pMp->chan,pMp->currentnote,c);
						break;
    17f6:	5e c0       	rjmp	.+188    	; 0x18b4 <ParseMidi+0x22e>
				} //end of switch(pMp->state)
				break;
			case WHEEL:			//last command was pitch wheel change 3 bytes
				switch(pMp->state)
    17f8:	8d 81       	ldd	r24, Y+5	; 0x05
    17fa:	81 30       	cpi	r24, 0x01	; 1
    17fc:	19 f0       	breq	.+6      	; 0x1804 <ParseMidi+0x17e>
    17fe:	82 30       	cpi	r24, 0x02	; 2
    1800:	41 f0       	breq	.+16     	; 0x1812 <ParseMidi+0x18c>
    1802:	58 c0       	rjmp	.+176    	; 0x18b4 <ParseMidi+0x22e>
				{
					case NOTE0:
						pMp->v = ((int)c);
    1804:	e6 2f       	mov	r30, r22
    1806:	f0 e0       	ldi	r31, 0x00	; 0
    1808:	fb 87       	std	Y+11, r31	; 0x0b
    180a:	ea 87       	std	Y+10, r30	; 0x0a
						pMp->state = NOTE1;
    180c:	82 e0       	ldi	r24, 0x02	; 2
    180e:	8d 83       	std	Y+5, r24	; 0x05
						break;
    1810:	51 c0       	rjmp	.+162    	; 0x18b4 <ParseMidi+0x22e>
					case NOTE1:
						pMp->v |= ((int)c)<<7;
						pMp->v <<= 2;	//12 bits;
    1812:	80 e8       	ldi	r24, 0x80	; 128
    1814:	68 9f       	mul	r22, r24
    1816:	f0 01       	movw	r30, r0
    1818:	11 24       	eor	r1, r1
    181a:	6a 85       	ldd	r22, Y+10	; 0x0a
    181c:	7b 85       	ldd	r23, Y+11	; 0x0b
    181e:	e6 2b       	or	r30, r22
    1820:	f7 2b       	or	r31, r23
    1822:	bf 01       	movw	r22, r30
    1824:	66 0f       	add	r22, r22
    1826:	77 1f       	adc	r23, r23
    1828:	66 0f       	add	r22, r22
    182a:	77 1f       	adc	r23, r23
    182c:	7b 87       	std	Y+11, r23	; 0x0b
						pMp->state = NOTE0;
    182e:	6a 87       	std	Y+10, r22	; 0x0a
    1830:	81 e0       	ldi	r24, 0x01	; 1
						ActionPitchWheel(pMp->chan,pMp->v);
    1832:	8d 83       	std	Y+5, r24	; 0x05
    1834:	8a 81       	ldd	r24, Y+2	; 0x02
    1836:	18 df       	rcall	.-464    	; 0x1668 <ActionPitchWheel>
						break;
    1838:	3d c0       	rjmp	.+122    	; 0x18b4 <ParseMidi+0x22e>
				}	// end of switch(pMp->state)
				break;
			case PATCH:			//last command was patch change 2 bytes
				pMp->state = NOTE0;
    183a:	81 e0       	ldi	r24, 0x01	; 1
    183c:	8d 83       	std	Y+5, r24	; 0x05
				ActionProgramChange(pMp->chan,c);
				break;
    183e:	3a c0       	rjmp	.+116    	; 0x18b4 <ParseMidi+0x22e>
			case SYSEX:		//1 byte...This is where we pass of sysex data
				switch(pMp->state)
    1840:	8d 81       	ldd	r24, Y+5	; 0x05
    1842:	86 30       	cpi	r24, 0x06	; 6
    1844:	61 f0       	breq	.+24     	; 0x185e <ParseMidi+0x1d8>
    1846:	87 30       	cpi	r24, 0x07	; 7
    1848:	91 f0       	breq	.+36     	; 0x186e <ParseMidi+0x1e8>
    184a:	85 30       	cpi	r24, 0x05	; 5
    184c:	99 f5       	brne	.+102    	; 0x18b4 <ParseMidi+0x22e>
				{
					case SYSEX_ID:
						if(c == 0x7D)	//manufacturers ID
    184e:	6d 37       	cpi	r22, 0x7D	; 125
    1850:	19 f4       	brne	.+6      	; 0x1858 <ParseMidi+0x1d2>
							pMp->state = SYSEX_MODEL;
    1852:	86 e0       	ldi	r24, 0x06	; 6
    1854:	8d 83       	std	Y+5, r24	; 0x05
    1856:	2e c0       	rjmp	.+92     	; 0x18b4 <ParseMidi+0x22e>
						else
							pMp->state = SYSEX_IGNORE;
    1858:	88 e0       	ldi	r24, 0x08	; 8
    185a:	8d 83       	std	Y+5, r24	; 0x05
    185c:	2b c0       	rjmp	.+86     	; 0x18b4 <ParseMidi+0x22e>
						break;
					case SYSEX_MODEL:
						if(c == 0x10)	//model number
    185e:	60 31       	cpi	r22, 0x10	; 16
							pMp->state = SYSEX_DATA;
    1860:	19 f4       	brne	.+6      	; 0x1868 <ParseMidi+0x1e2>
    1862:	87 e0       	ldi	r24, 0x07	; 7
    1864:	8d 83       	std	Y+5, r24	; 0x05
						else
							pMp->state = SYSEX_IGNORE;
    1866:	26 c0       	rjmp	.+76     	; 0x18b4 <ParseMidi+0x22e>
    1868:	88 e0       	ldi	r24, 0x08	; 8
    186a:	8d 83       	std	Y+5, r24	; 0x05
						break;
					case SYSEX_DATA:
						ActionSysExData(pMp,c);
    186c:	23 c0       	rjmp	.+70     	; 0x18b4 <ParseMidi+0x22e>
    186e:	ce 01       	movw	r24, r28
    1870:	1a de       	rcall	.-972    	; 0x14a6 <ActionSysExData>
						break;
    1872:	20 c0       	rjmp	.+64     	; 0x18b4 <ParseMidi+0x22e>
					case SYSEX_IGNORE:
						break;
				} //end of switch(pMp->state)
               	break;
			case SYSCOM_MTCQUARTERFRAME:
				pMp->state = IDLE;
    1874:	1d 82       	std	Y+5, r1	; 0x05
				ActionMTCQuarterFrameMessage(c);
				break;
    1876:	1e c0       	rjmp	.+60     	; 0x18b4 <ParseMidi+0x22e>
			case SYSCOMSONGPOS:
				switch(pMp->state)
    1878:	8d 81       	ldd	r24, Y+5	; 0x05
    187a:	81 30       	cpi	r24, 0x01	; 1
    187c:	19 f0       	breq	.+6      	; 0x1884 <ParseMidi+0x1fe>
    187e:	82 30       	cpi	r24, 0x02	; 2
    1880:	41 f0       	breq	.+16     	; 0x1892 <ParseMidi+0x20c>
    1882:	18 c0       	rjmp	.+48     	; 0x18b4 <ParseMidi+0x22e>
				{
					case NOTE0:
						pMp->v = ((int)c);
    1884:	e6 2f       	mov	r30, r22
    1886:	f0 e0       	ldi	r31, 0x00	; 0
    1888:	fb 87       	std	Y+11, r31	; 0x0b
    188a:	ea 87       	std	Y+10, r30	; 0x0a
						pMp->state = NOTE1;
    188c:	82 e0       	ldi	r24, 0x02	; 2
    188e:	8d 83       	std	Y+5, r24	; 0x05
						break;
    1890:	11 c0       	rjmp	.+34     	; 0x18b4 <ParseMidi+0x22e>
					case NOTE1:
						pMp->v |= ((int)c)<<7;
						pMp->v <<= 2;	//12 bits;
    1892:	80 e8       	ldi	r24, 0x80	; 128
    1894:	68 9f       	mul	r22, r24
    1896:	f0 01       	movw	r30, r0
    1898:	11 24       	eor	r1, r1
    189a:	4a 85       	ldd	r20, Y+10	; 0x0a
    189c:	5b 85       	ldd	r21, Y+11	; 0x0b
    189e:	e4 2b       	or	r30, r20
    18a0:	f5 2b       	or	r31, r21
    18a2:	ee 0f       	add	r30, r30
    18a4:	ff 1f       	adc	r31, r31
    18a6:	ee 0f       	add	r30, r30
    18a8:	ff 1f       	adc	r31, r31
    18aa:	fb 87       	std	Y+11, r31	; 0x0b
    18ac:	ea 87       	std	Y+10, r30	; 0x0a
						pMp->state = IDLE;
    18ae:	1d 82       	std	Y+5, r1	; 0x05
						ActionSysComSongPos(pMp->v);
						break;
    18b0:	01 c0       	rjmp	.+2      	; 0x18b4 <ParseMidi+0x22e>
				} //end of switch(pMp->state)
				break;
			case SYSCOMSONGSEL:
				pMp->state = IDLE;
    18b2:	1d 82       	std	Y+5, r1	; 0x05
				ActionSysComSongSel(c);
				break;
		}	//end of switch(cmd)
	}	//end of if(c & 0x080)
	return 0;
}
    18b4:	80 e0       	ldi	r24, 0x00	; 0
    18b6:	90 e0       	ldi	r25, 0x00	; 0
    18b8:	df 91       	pop	r29
    18ba:	cf 91       	pop	r28
    18bc:	08 95       	ret

000018be <PriorityCompare>:
//		positive....priority of s1 > s2
//		negative....priority of s1 < s2
//----------------------------------------------------------------------
//
static int PriorityCompare(void **s1, void **s2)
{
    18be:	cf 93       	push	r28
    18c0:	df 93       	push	r29
	int r;

	//check priority levels
	if( (r = ((TCB *)*s1)->priority - ((TCB *)*s2)->priority) != 0)
    18c2:	dc 01       	movw	r26, r24
    18c4:	ed 91       	ld	r30, X+
    18c6:	fc 91       	ld	r31, X
    18c8:	eb 01       	movw	r28, r22
    18ca:	a8 81       	ld	r26, Y
    18cc:	b9 81       	ldd	r27, Y+1	; 0x01
    18ce:	86 81       	ldd	r24, Z+6	; 0x06
    18d0:	97 81       	ldd	r25, Z+7	; 0x07
    18d2:	16 96       	adiw	r26, 0x06	; 6
    18d4:	2d 91       	ld	r18, X+
    18d6:	3c 91       	ld	r19, X
    18d8:	17 97       	sbiw	r26, 0x07	; 7
    18da:	82 1b       	sub	r24, r18
    18dc:	93 0b       	sbc	r25, r19
    18de:	41 f4       	brne	.+16     	; 0x18f0 <PriorityCompare+0x32>
		return r;
	//if priority levels are the same, then check time stamps
	return (int)(((TCB *)*s2)->TimeStamp - ((TCB *)*s1)->TimeStamp);
    18e0:	1c 96       	adiw	r26, 0x0c	; 12
    18e2:	8d 91       	ld	r24, X+
    18e4:	9c 91       	ld	r25, X
    18e6:	1d 97       	sbiw	r26, 0x0d	; 13
    18e8:	24 85       	ldd	r18, Z+12	; 0x0c
    18ea:	35 85       	ldd	r19, Z+13	; 0x0d
    18ec:	82 1b       	sub	r24, r18
    18ee:	93 0b       	sbc	r25, r19
}
    18f0:	df 91       	pop	r29
    18f2:	cf 91       	pop	r28
    18f4:	08 95       	ret

000018f6 <OSInit>:
//	parameters:
//		none
//---------------------------------------------------------------------------
void OSInit(void)
{
	CreatePriorityQueue(&ActiveTasks,32,PriorityCompare);
    18f6:	4f e5       	ldi	r20, 0x5F	; 95
    18f8:	5c e0       	ldi	r21, 0x0C	; 12
    18fa:	60 e2       	ldi	r22, 0x20	; 32
    18fc:	70 e0       	ldi	r23, 0x00	; 0
    18fe:	86 ee       	ldi	r24, 0xE6	; 230
    1900:	91 e0       	ldi	r25, 0x01	; 1
    1902:	27 c2       	rjmp	.+1102   	; 0x1d52 <CreatePriorityQueue>
    1904:	08 95       	ret

00001906 <PendSemaphore>:
**	Inidicates status of operation.  0 or positive is normal,
**		negative is error
**************************************************************************/

int PendSemaphore(SEMAPHORE *e, int Timeout)	//wait for semaphore availiable
{
    1906:	ef 92       	push	r14
    1908:	ff 92       	push	r15
    190a:	1f 93       	push	r17
    190c:	cf 93       	push	r28
    190e:	df 93       	push	r29
    1910:	ec 01       	movw	r28, r24
    1912:	7b 01       	movw	r14, r22
	char sr;
	int retval;
	sr = Disable();
    1914:	0e 94 7f 00 	call	0xfe	; 0xfe <Disable>
    1918:	18 2f       	mov	r17, r24
	if(e->EventCount > 0)	/*	is resource availiable?	*/
    191a:	8a 85       	ldd	r24, Y+10	; 0x0a
    191c:	9b 85       	ldd	r25, Y+11	; 0x0b
    191e:	18 16       	cp	r1, r24
    1920:	19 06       	cpc	r1, r25
    1922:	4c f4       	brge	.+18     	; 0x1936 <PendSemaphore+0x30>
	{
		/*	yes	*/
		--e->EventCount;
    1924:	01 97       	sbiw	r24, 0x01	; 1
    1926:	9b 87       	std	Y+11, r25	; 0x0b
    1928:	8a 87       	std	Y+10, r24	; 0x0a
		Enable(sr);
    192a:	81 2f       	mov	r24, r17
    192c:	0e 94 83 00 	call	0x106	; 0x106 <Enable>
		retval = EVENT_NOERROR;	//everything is peachy
    1930:	80 e0       	ldi	r24, 0x00	; 0
    1932:	90 e0       	ldi	r25, 0x00	; 0
    1934:	4e c0       	rjmp	.+156    	; 0x19d2 <PendSemaphore+0xcc>
	}
	else
	{
		/*	no	*/
		--e->EventCount;
    1936:	01 97       	sbiw	r24, 0x01	; 1
    1938:	9b 87       	std	Y+11, r25	; 0x0b
    193a:	8a 87       	std	Y+10, r24	; 0x0a
		if(!e->task_head)		//make linked list of waiting tasks
    193c:	88 81       	ld	r24, Y
    193e:	99 81       	ldd	r25, Y+1	; 0x01
    1940:	89 2b       	or	r24, r25
    1942:	39 f4       	brne	.+14     	; 0x1952 <PendSemaphore+0x4c>
			e->task_head = pCurrentTask;
    1944:	80 91 f0 01 	lds	r24, 0x01F0	; 0x8001f0 <pCurrentTask>
    1948:	90 91 f1 01 	lds	r25, 0x01F1	; 0x8001f1 <pCurrentTask+0x1>
    194c:	99 83       	std	Y+1, r25	; 0x01
    194e:	88 83       	st	Y, r24
    1950:	08 c0       	rjmp	.+16     	; 0x1962 <PendSemaphore+0x5c>
		else
			e->task_tail->next = pCurrentTask;
    1952:	ea 81       	ldd	r30, Y+2	; 0x02
    1954:	fb 81       	ldd	r31, Y+3	; 0x03
    1956:	80 91 f0 01 	lds	r24, 0x01F0	; 0x8001f0 <pCurrentTask>
    195a:	90 91 f1 01 	lds	r25, 0x01F1	; 0x8001f1 <pCurrentTask+0x1>
    195e:	95 8b       	std	Z+21, r25	; 0x15
    1960:	84 8b       	std	Z+20, r24	; 0x14
		e->task_tail = pCurrentTask;
    1962:	e0 91 f0 01 	lds	r30, 0x01F0	; 0x8001f0 <pCurrentTask>
    1966:	f0 91 f1 01 	lds	r31, 0x01F1	; 0x8001f1 <pCurrentTask+0x1>
    196a:	fb 83       	std	Y+3, r31	; 0x03
    196c:	ea 83       	std	Y+2, r30	; 0x02
		pCurrentTask->status = EVENT_NOERROR;
    196e:	11 86       	std	Z+9, r1	; 0x09
    1970:	10 86       	std	Z+8, r1	; 0x08
		if(e->SemaphoreMode)
    1972:	88 85       	ldd	r24, Y+8	; 0x08
    1974:	99 85       	ldd	r25, Y+9	; 0x09
    1976:	89 2b       	or	r24, r25
    1978:	11 f0       	breq	.+4      	; 0x197e <PendSemaphore+0x78>
			pCurrentTask->timeout = Timeout;
    197a:	f1 8a       	std	Z+17, r15	; 0x11
    197c:	e0 8a       	std	Z+16, r14	; 0x10

		//swap out current task
		//Update the time stamp on current task
		pCurrentTask->TimeStamp = TStamp;
    197e:	80 91 19 03 	lds	r24, 0x0319	; 0x800319 <TStamp>
    1982:	90 91 1a 03 	lds	r25, 0x031A	; 0x80031a <TStamp+0x1>
    1986:	95 87       	std	Z+13, r25	; 0x0d
    1988:	84 87       	std	Z+12, r24	; 0x0c
		//get highest priority task from queue
		if(Delete(&ActiveTasks,(void **)&pNextTask))	
    198a:	64 ef       	ldi	r22, 0xF4	; 244
    198c:	71 e0       	ldi	r23, 0x01	; 1
    198e:	86 ee       	ldi	r24, 0xE6	; 230
    1990:	91 e0       	ldi	r25, 0x01	; 1
    1992:	5f d2       	rcall	.+1214   	; 0x1e52 <Delete>
    1994:	89 2b       	or	r24, r25
    1996:	61 f0       	breq	.+24     	; 0x19b0 <PendSemaphore+0xaa>
		{
			//increment swaps on new task
			pNextTask->TcbSwaps++;
    1998:	e0 91 f4 01 	lds	r30, 0x01F4	; 0x8001f4 <pNextTask>
    199c:	f0 91 f5 01 	lds	r31, 0x01F5	; 0x8001f5 <pNextTask+0x1>
    19a0:	86 85       	ldd	r24, Z+14	; 0x0e
    19a2:	97 85       	ldd	r25, Z+15	; 0x0f
    19a4:	01 96       	adiw	r24, 0x01	; 1
    19a6:	97 87       	std	Z+15, r25	; 0x0f
    19a8:	86 87       	std	Z+14, r24	; 0x0e
			DoSwap();		//do context swap
    19aa:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <DoSwap>
    19ae:	08 c0       	rjmp	.+16     	; 0x19c0 <PendSemaphore+0xba>
		}
		else
		{
			//there were no tasks in the queue
			//set status to error and return
			pCurrentTask->status = EVENT_NOTASKS;
    19b0:	e0 91 f0 01 	lds	r30, 0x01F0	; 0x8001f0 <pCurrentTask>
    19b4:	f0 91 f1 01 	lds	r31, 0x01F1	; 0x8001f1 <pCurrentTask+0x1>
    19b8:	8f ef       	ldi	r24, 0xFF	; 255
    19ba:	9f ef       	ldi	r25, 0xFF	; 255
    19bc:	91 87       	std	Z+9, r25	; 0x09
    19be:	80 87       	std	Z+8, r24	; 0x08
		}
		//-----------------------
		// Pend is over, check status
		//-----------------------

		Enable(sr);
    19c0:	81 2f       	mov	r24, r17
    19c2:	0e 94 83 00 	call	0x106	; 0x106 <Enable>
		retval = pCurrentTask->status;	//return this value
    19c6:	e0 91 f0 01 	lds	r30, 0x01F0	; 0x8001f0 <pCurrentTask>
    19ca:	f0 91 f1 01 	lds	r31, 0x01F1	; 0x8001f1 <pCurrentTask+0x1>
    19ce:	80 85       	ldd	r24, Z+8	; 0x08
    19d0:	91 85       	ldd	r25, Z+9	; 0x09
	}
	return retval;
}
    19d2:	df 91       	pop	r29
    19d4:	cf 91       	pop	r28
    19d6:	1f 91       	pop	r17
    19d8:	ff 90       	pop	r15
    19da:	ef 90       	pop	r14
    19dc:	08 95       	ret

000019de <InitPorts>:
 static volatile char PortCShad;
 static volatile char PortDShad;

 void InitPorts(void)
 {
	PORTA = 0x00;
    19de:	12 b8       	out	0x02, r1	; 2
	PORTB = 0x41;
    19e0:	81 e4       	ldi	r24, 0x41	; 65
    19e2:	85 b9       	out	0x05, r24	; 5
	PORTC = 0x00;
    19e4:	18 b8       	out	0x08, r1	; 8
	PORTD = 0x10;
    19e6:	80 e1       	ldi	r24, 0x10	; 16
    19e8:	8b b9       	out	0x0b, r24	; 11
    19ea:	08 95       	ret

000019ec <SetPortA>:
 }
 
 void SetPortA(int bit)
 {
    19ec:	cf 93       	push	r28
    19ee:	c8 2f       	mov	r28, r24
	char sr = Disable();
    19f0:	0e 94 7f 00 	call	0xfe	; 0xfe <Disable>
	PortAShad |= BIT(bit);
    19f4:	90 91 c7 01 	lds	r25, 0x01C7	; 0x8001c7 <PortAShad>
    19f8:	21 e0       	ldi	r18, 0x01	; 1
    19fa:	30 e0       	ldi	r19, 0x00	; 0
    19fc:	02 c0       	rjmp	.+4      	; 0x1a02 <SetPortA+0x16>
    19fe:	22 0f       	add	r18, r18
    1a00:	33 1f       	adc	r19, r19
    1a02:	ca 95       	dec	r28
    1a04:	e2 f7       	brpl	.-8      	; 0x19fe <SetPortA+0x12>
    1a06:	29 2b       	or	r18, r25
    1a08:	20 93 c7 01 	sts	0x01C7, r18	; 0x8001c7 <PortAShad>
	PORTA = PortAShad;
    1a0c:	90 91 c7 01 	lds	r25, 0x01C7	; 0x8001c7 <PortAShad>
    1a10:	92 b9       	out	0x02, r25	; 2
	Enable(sr);
    1a12:	0e 94 83 00 	call	0x106	; 0x106 <Enable>
 }
    1a16:	cf 91       	pop	r28
    1a18:	08 95       	ret

00001a1a <ClearPortA>:

 void ClearPortA(int bit)
 {
    1a1a:	cf 93       	push	r28
    1a1c:	c8 2f       	mov	r28, r24
	char sr = Disable();
    1a1e:	0e 94 7f 00 	call	0xfe	; 0xfe <Disable>
 	PortAShad &= ~BIT(bit);
    1a22:	90 91 c7 01 	lds	r25, 0x01C7	; 0x8001c7 <PortAShad>
    1a26:	21 e0       	ldi	r18, 0x01	; 1
    1a28:	30 e0       	ldi	r19, 0x00	; 0
    1a2a:	02 c0       	rjmp	.+4      	; 0x1a30 <ClearPortA+0x16>
    1a2c:	22 0f       	add	r18, r18
    1a2e:	33 1f       	adc	r19, r19
    1a30:	ca 95       	dec	r28
    1a32:	e2 f7       	brpl	.-8      	; 0x1a2c <ClearPortA+0x12>
    1a34:	20 95       	com	r18
    1a36:	29 23       	and	r18, r25
    1a38:	20 93 c7 01 	sts	0x01C7, r18	; 0x8001c7 <PortAShad>
 	PORTA = PortAShad;
    1a3c:	90 91 c7 01 	lds	r25, 0x01C7	; 0x8001c7 <PortAShad>
    1a40:	92 b9       	out	0x02, r25	; 2
	Enable(sr);
    1a42:	0e 94 83 00 	call	0x106	; 0x106 <Enable>
}
    1a46:	cf 91       	pop	r28
    1a48:	08 95       	ret

00001a4a <SetDacSel>:

 void SetDacSel(int sel)
 {
    1a4a:	cf 93       	push	r28
    1a4c:	df 93       	push	r29
    1a4e:	ec 01       	movw	r28, r24
	char sr = Disable();
    1a50:	0e 94 7f 00 	call	0xfe	; 0xfe <Disable>
	sel <<= PORTA_DACSEL0;
  	PortAShad &= ~(BIT(PORTA_DACSEL3) | BIT(PORTA_DACSEL2)| BIT(PORTA_DACSEL1) | BIT(PORTA_DACSEL0));
    1a54:	90 91 c7 01 	lds	r25, 0x01C7	; 0x8001c7 <PortAShad>
    1a58:	9f 70       	andi	r25, 0x0F	; 15
    1a5a:	90 93 c7 01 	sts	0x01C7, r25	; 0x8001c7 <PortAShad>
	PortAShad |= sel;
    1a5e:	90 91 c7 01 	lds	r25, 0x01C7	; 0x8001c7 <PortAShad>
    1a62:	c2 95       	swap	r28
    1a64:	d2 95       	swap	r29
    1a66:	d0 7f       	andi	r29, 0xF0	; 240
    1a68:	dc 27       	eor	r29, r28
    1a6a:	c0 7f       	andi	r28, 0xF0	; 240
    1a6c:	dc 27       	eor	r29, r28
    1a6e:	c9 2b       	or	r28, r25
    1a70:	c0 93 c7 01 	sts	0x01C7, r28	; 0x8001c7 <PortAShad>
  	PORTA = PortAShad;
    1a74:	90 91 c7 01 	lds	r25, 0x01C7	; 0x8001c7 <PortAShad>
    1a78:	92 b9       	out	0x02, r25	; 2
	Enable(sr);
    1a7a:	0e 94 83 00 	call	0x106	; 0x106 <Enable>
 }
    1a7e:	df 91       	pop	r29
    1a80:	cf 91       	pop	r28
    1a82:	08 95       	ret

00001a84 <SetPortB>:

 void SetPortB(int bit)
 {
    1a84:	cf 93       	push	r28
    1a86:	c8 2f       	mov	r28, r24
	char sr = Disable();
    1a88:	0e 94 7f 00 	call	0xfe	; 0xfe <Disable>
	PortBShad |= BIT(bit);
    1a8c:	90 91 c6 01 	lds	r25, 0x01C6	; 0x8001c6 <PortBShad>
    1a90:	21 e0       	ldi	r18, 0x01	; 1
    1a92:	30 e0       	ldi	r19, 0x00	; 0
    1a94:	02 c0       	rjmp	.+4      	; 0x1a9a <SetPortB+0x16>
    1a96:	22 0f       	add	r18, r18
    1a98:	33 1f       	adc	r19, r19
    1a9a:	ca 95       	dec	r28
    1a9c:	e2 f7       	brpl	.-8      	; 0x1a96 <SetPortB+0x12>
    1a9e:	29 2b       	or	r18, r25
    1aa0:	20 93 c6 01 	sts	0x01C6, r18	; 0x8001c6 <PortBShad>
	PORTB = PortBShad;
    1aa4:	90 91 c6 01 	lds	r25, 0x01C6	; 0x8001c6 <PortBShad>
    1aa8:	95 b9       	out	0x05, r25	; 5
	Enable(sr);
    1aaa:	0e 94 83 00 	call	0x106	; 0x106 <Enable>
 }
    1aae:	cf 91       	pop	r28
    1ab0:	08 95       	ret

00001ab2 <ClearPortB>:

 void ClearPortB(int bit)
 {
    1ab2:	cf 93       	push	r28
    1ab4:	c8 2f       	mov	r28, r24
	char sr = Disable();
    1ab6:	0e 94 7f 00 	call	0xfe	; 0xfe <Disable>
	PortBShad &=~BIT(bit);
    1aba:	90 91 c6 01 	lds	r25, 0x01C6	; 0x8001c6 <PortBShad>
    1abe:	21 e0       	ldi	r18, 0x01	; 1
    1ac0:	30 e0       	ldi	r19, 0x00	; 0
    1ac2:	02 c0       	rjmp	.+4      	; 0x1ac8 <ClearPortB+0x16>
    1ac4:	22 0f       	add	r18, r18
    1ac6:	33 1f       	adc	r19, r19
    1ac8:	ca 95       	dec	r28
    1aca:	e2 f7       	brpl	.-8      	; 0x1ac4 <ClearPortB+0x12>
    1acc:	20 95       	com	r18
    1ace:	29 23       	and	r18, r25
    1ad0:	20 93 c6 01 	sts	0x01C6, r18	; 0x8001c6 <PortBShad>
	PORTB = PortBShad;
    1ad4:	90 91 c6 01 	lds	r25, 0x01C6	; 0x8001c6 <PortBShad>
    1ad8:	95 b9       	out	0x05, r25	; 5
 	Enable(sr);
    1ada:	0e 94 83 00 	call	0x106	; 0x106 <Enable>
}
    1ade:	cf 91       	pop	r28
    1ae0:	08 95       	ret

00001ae2 <SetPortC>:

 void SetPortC(int bit)
 {
    1ae2:	cf 93       	push	r28
    1ae4:	c8 2f       	mov	r28, r24
	char sr = Disable();
    1ae6:	0e 94 7f 00 	call	0xfe	; 0xfe <Disable>
	PortCShad |= BIT(bit);
    1aea:	90 91 c5 01 	lds	r25, 0x01C5	; 0x8001c5 <PortCShad>
    1aee:	21 e0       	ldi	r18, 0x01	; 1
    1af0:	30 e0       	ldi	r19, 0x00	; 0
    1af2:	02 c0       	rjmp	.+4      	; 0x1af8 <SetPortC+0x16>
    1af4:	22 0f       	add	r18, r18
    1af6:	33 1f       	adc	r19, r19
    1af8:	ca 95       	dec	r28
    1afa:	e2 f7       	brpl	.-8      	; 0x1af4 <SetPortC+0x12>
    1afc:	29 2b       	or	r18, r25
    1afe:	20 93 c5 01 	sts	0x01C5, r18	; 0x8001c5 <PortCShad>
	PORTC = PortCShad;
    1b02:	90 91 c5 01 	lds	r25, 0x01C5	; 0x8001c5 <PortCShad>
    1b06:	98 b9       	out	0x08, r25	; 8
	Enable(sr);
    1b08:	0e 94 83 00 	call	0x106	; 0x106 <Enable>
 }
    1b0c:	cf 91       	pop	r28
    1b0e:	08 95       	ret

00001b10 <ClearPortC>:

 void ClearPortC(int bit)
 {
    1b10:	cf 93       	push	r28
    1b12:	c8 2f       	mov	r28, r24
	char sr = Disable();
    1b14:	0e 94 7f 00 	call	0xfe	; 0xfe <Disable>
	PortCShad &= ~BIT(bit);
    1b18:	90 91 c5 01 	lds	r25, 0x01C5	; 0x8001c5 <PortCShad>
    1b1c:	21 e0       	ldi	r18, 0x01	; 1
    1b1e:	30 e0       	ldi	r19, 0x00	; 0
    1b20:	02 c0       	rjmp	.+4      	; 0x1b26 <ClearPortC+0x16>
    1b22:	22 0f       	add	r18, r18
    1b24:	33 1f       	adc	r19, r19
    1b26:	ca 95       	dec	r28
    1b28:	e2 f7       	brpl	.-8      	; 0x1b22 <ClearPortC+0x12>
    1b2a:	20 95       	com	r18
    1b2c:	29 23       	and	r18, r25
    1b2e:	20 93 c5 01 	sts	0x01C5, r18	; 0x8001c5 <PortCShad>
	PORTC = PortCShad;
    1b32:	90 91 c5 01 	lds	r25, 0x01C5	; 0x8001c5 <PortCShad>
    1b36:	98 b9       	out	0x08, r25	; 8
	Enable(sr);
    1b38:	0e 94 83 00 	call	0x106	; 0x106 <Enable>
}
    1b3c:	cf 91       	pop	r28
    1b3e:	08 95       	ret

00001b40 <SetPortD>:

 void SetPortD(int bit)
 {
    1b40:	cf 93       	push	r28
    1b42:	c8 2f       	mov	r28, r24
	char sr = Disable();
    1b44:	0e 94 7f 00 	call	0xfe	; 0xfe <Disable>
	PortDShad |= BIT(bit);
    1b48:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <PortDShad>
    1b4c:	21 e0       	ldi	r18, 0x01	; 1
    1b4e:	30 e0       	ldi	r19, 0x00	; 0
    1b50:	02 c0       	rjmp	.+4      	; 0x1b56 <SetPortD+0x16>
    1b52:	22 0f       	add	r18, r18
    1b54:	33 1f       	adc	r19, r19
    1b56:	ca 95       	dec	r28
    1b58:	e2 f7       	brpl	.-8      	; 0x1b52 <SetPortD+0x12>
    1b5a:	29 2b       	or	r18, r25
    1b5c:	20 93 c4 01 	sts	0x01C4, r18	; 0x8001c4 <PortDShad>
	PORTD = PortDShad;
    1b60:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <PortDShad>
    1b64:	9b b9       	out	0x0b, r25	; 11
 	Enable(sr);
    1b66:	0e 94 83 00 	call	0x106	; 0x106 <Enable>
}
    1b6a:	cf 91       	pop	r28
    1b6c:	08 95       	ret

00001b6e <ClearPortD>:

 void ClearPortD(int bit)
 {
    1b6e:	cf 93       	push	r28
    1b70:	c8 2f       	mov	r28, r24
	char sr = Disable();
    1b72:	0e 94 7f 00 	call	0xfe	; 0xfe <Disable>
	PortDShad &= ~BIT(bit);
    1b76:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <PortDShad>
    1b7a:	21 e0       	ldi	r18, 0x01	; 1
    1b7c:	30 e0       	ldi	r19, 0x00	; 0
    1b7e:	02 c0       	rjmp	.+4      	; 0x1b84 <ClearPortD+0x16>
    1b80:	22 0f       	add	r18, r18
    1b82:	33 1f       	adc	r19, r19
    1b84:	ca 95       	dec	r28
    1b86:	e2 f7       	brpl	.-8      	; 0x1b80 <ClearPortD+0x12>
    1b88:	20 95       	com	r18
    1b8a:	29 23       	and	r18, r25
    1b8c:	20 93 c4 01 	sts	0x01C4, r18	; 0x8001c4 <PortDShad>
	PORTD = PortDShad;
    1b90:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <PortDShad>
    1b94:	9b b9       	out	0x0b, r25	; 11
 	Enable(sr);
    1b96:	0e 94 83 00 	call	0x106	; 0x106 <Enable>
    1b9a:	cf 91       	pop	r28
    1b9c:	08 95       	ret

00001b9e <PostSemaphore>:
**
** return value: 0 = No Error, negative indicates error
***************************************************************************/

int PostSemaphore(SEMAPHORE *e, int Value)	//signal semaphore availiable
{
    1b9e:	ef 92       	push	r14
    1ba0:	ff 92       	push	r15
    1ba2:	1f 93       	push	r17
    1ba4:	cf 93       	push	r28
    1ba6:	df 93       	push	r29
    1ba8:	ec 01       	movw	r28, r24
    1baa:	7b 01       	movw	r14, r22
	char sr=0;
	//------------------------------
	// do not disable IRQ if inside
	// of an interrupt routine
	//------------------------------
	if(!InterruptCount)sr = Disable();
    1bac:	80 91 f6 01 	lds	r24, 0x01F6	; 0x8001f6 <InterruptCount>
    1bb0:	90 91 f7 01 	lds	r25, 0x01F7	; 0x8001f7 <InterruptCount+0x1>
    1bb4:	89 2b       	or	r24, r25
    1bb6:	21 f4       	brne	.+8      	; 0x1bc0 <PostSemaphore+0x22>
    1bb8:	0e 94 7f 00 	call	0xfe	; 0xfe <Disable>
    1bbc:	18 2f       	mov	r17, r24
    1bbe:	01 c0       	rjmp	.+2      	; 0x1bc2 <PostSemaphore+0x24>
***************************************************************************/

int PostSemaphore(SEMAPHORE *e, int Value)	//signal semaphore availiable
{
	TCB *t;
	char sr=0;
    1bc0:	10 e0       	ldi	r17, 0x00	; 0
	//------------------------------
	// do not disable IRQ if inside
	// of an interrupt routine
	//------------------------------
	if(!InterruptCount)sr = Disable();
	if(e->EventCount < 32766)	//is it going to overflow??
    1bc2:	8a 85       	ldd	r24, Y+10	; 0x0a
    1bc4:	9b 85       	ldd	r25, Y+11	; 0x0b
    1bc6:	8e 3f       	cpi	r24, 0xFE	; 254
    1bc8:	2f e7       	ldi	r18, 0x7F	; 127
    1bca:	92 07       	cpc	r25, r18
    1bcc:	cc f5       	brge	.+114    	; 0x1c40 <PostSemaphore+0xa2>
	{
		if(e->EventCount >= 0)	//increment semaphore
    1bce:	99 23       	and	r25, r25
    1bd0:	6c f0       	brlt	.+26     	; 0x1bec <PostSemaphore+0x4e>
		{
			++e->EventCount;
    1bd2:	01 96       	adiw	r24, 0x01	; 1
    1bd4:	9b 87       	std	Y+11, r25	; 0x0b
    1bd6:	8a 87       	std	Y+10, r24	; 0x0a
			if(!InterruptCount)Enable(sr);
    1bd8:	c0 91 f6 01 	lds	r28, 0x01F6	; 0x8001f6 <InterruptCount>
    1bdc:	d0 91 f7 01 	lds	r29, 0x01F7	; 0x8001f7 <InterruptCount+0x1>
    1be0:	20 97       	sbiw	r28, 0x00	; 0
    1be2:	d1 f5       	brne	.+116    	; 0x1c58 <PostSemaphore+0xba>
    1be4:	81 2f       	mov	r24, r17
    1be6:	0e 94 83 00 	call	0x106	; 0x106 <Enable>
    1bea:	3e c0       	rjmp	.+124    	; 0x1c68 <PostSemaphore+0xca>
		}
		else
		{
			++e->EventCount;
    1bec:	01 96       	adiw	r24, 0x01	; 1
    1bee:	9b 87       	std	Y+11, r25	; 0x0b
    1bf0:	8a 87       	std	Y+10, r24	; 0x0a
			if(e->task_head)				//is there really a task waiting?
    1bf2:	e8 81       	ld	r30, Y
    1bf4:	f9 81       	ldd	r31, Y+1	; 0x01
    1bf6:	30 97       	sbiw	r30, 0x00	; 0
    1bf8:	c9 f0       	breq	.+50     	; 0x1c2c <PostSemaphore+0x8e>
			{
				t = e->task_head;		//get first task in
				e->task_head = t->next;       //remove from list
    1bfa:	84 89       	ldd	r24, Z+20	; 0x14
    1bfc:	95 89       	ldd	r25, Z+21	; 0x15
    1bfe:	99 83       	std	Y+1, r25	; 0x01
    1c00:	88 83       	st	Y, r24
				t->next = (TCB *)0;
    1c02:	15 8a       	std	Z+21, r1	; 0x15
    1c04:	14 8a       	std	Z+20, r1	; 0x14
				t->status = Value;			//return this value
    1c06:	f1 86       	std	Z+9, r15	; 0x09
    1c08:	e0 86       	std	Z+8, r14	; 0x08
				Insert(&ActiveTasks,t);	//put task back onto active list
    1c0a:	bf 01       	movw	r22, r30
    1c0c:	86 ee       	ldi	r24, 0xE6	; 230
    1c0e:	91 e0       	ldi	r25, 0x01	; 1
    1c10:	b5 d0       	rcall	.+362    	; 0x1d7c <Insert>
				if(!InterruptCount)Enable(sr);
    1c12:	80 91 f6 01 	lds	r24, 0x01F6	; 0x8001f6 <InterruptCount>
    1c16:	90 91 f7 01 	lds	r25, 0x01F7	; 0x8001f7 <InterruptCount+0x1>
    1c1a:	89 2b       	or	r24, r25
    1c1c:	19 f4       	brne	.+6      	; 0x1c24 <PostSemaphore+0x86>
    1c1e:	81 2f       	mov	r24, r17
    1c20:	0e 94 83 00 	call	0x106	; 0x106 <Enable>
				Yield();
    1c24:	c5 d6       	rcall	.+3466   	; 0x29b0 <Yield>
			else
			{
				if(!InterruptCount)Enable(sr);
			}
		}
		return EVENT_NOERROR;
    1c26:	c0 e0       	ldi	r28, 0x00	; 0
    1c28:	d0 e0       	ldi	r29, 0x00	; 0
    1c2a:	1e c0       	rjmp	.+60     	; 0x1c68 <PostSemaphore+0xca>
				if(!InterruptCount)Enable(sr);
				Yield();
			}
			else
			{
				if(!InterruptCount)Enable(sr);
    1c2c:	c0 91 f6 01 	lds	r28, 0x01F6	; 0x8001f6 <InterruptCount>
    1c30:	d0 91 f7 01 	lds	r29, 0x01F7	; 0x8001f7 <InterruptCount+0x1>
    1c34:	20 97       	sbiw	r28, 0x00	; 0
    1c36:	99 f4       	brne	.+38     	; 0x1c5e <PostSemaphore+0xc0>
    1c38:	81 2f       	mov	r24, r17
    1c3a:	0e 94 83 00 	call	0x106	; 0x106 <Enable>
    1c3e:	14 c0       	rjmp	.+40     	; 0x1c68 <PostSemaphore+0xca>
		}
		return EVENT_NOERROR;
	}
	else
	{
		if(!InterruptCount)Enable(sr);
    1c40:	80 91 f6 01 	lds	r24, 0x01F6	; 0x8001f6 <InterruptCount>
    1c44:	90 91 f7 01 	lds	r25, 0x01F7	; 0x8001f7 <InterruptCount+0x1>
    1c48:	89 2b       	or	r24, r25
    1c4a:	61 f4       	brne	.+24     	; 0x1c64 <PostSemaphore+0xc6>
    1c4c:	81 2f       	mov	r24, r17
    1c4e:	0e 94 83 00 	call	0x106	; 0x106 <Enable>
		return(EVENT_OVERFLOW);
    1c52:	ce ef       	ldi	r28, 0xFE	; 254
    1c54:	df ef       	ldi	r29, 0xFF	; 255
    1c56:	08 c0       	rjmp	.+16     	; 0x1c68 <PostSemaphore+0xca>
			else
			{
				if(!InterruptCount)Enable(sr);
			}
		}
		return EVENT_NOERROR;
    1c58:	c0 e0       	ldi	r28, 0x00	; 0
    1c5a:	d0 e0       	ldi	r29, 0x00	; 0
    1c5c:	05 c0       	rjmp	.+10     	; 0x1c68 <PostSemaphore+0xca>
    1c5e:	c0 e0       	ldi	r28, 0x00	; 0
    1c60:	d0 e0       	ldi	r29, 0x00	; 0
    1c62:	02 c0       	rjmp	.+4      	; 0x1c68 <PostSemaphore+0xca>
	}
	else
	{
		if(!InterruptCount)Enable(sr);
		return(EVENT_OVERFLOW);
    1c64:	ce ef       	ldi	r28, 0xFE	; 254
    1c66:	df ef       	ldi	r29, 0xFF	; 255
	}
}
    1c68:	ce 01       	movw	r24, r28
    1c6a:	df 91       	pop	r29
    1c6c:	cf 91       	pop	r28
    1c6e:	1f 91       	pop	r17
    1c70:	ff 90       	pop	r15
    1c72:	ef 90       	pop	r14
    1c74:	08 95       	ret

00001c76 <ReheapDown>:
**	parameters:
**		pQ.......pointer to the priority queue
**
***********************************************/
static void ReheapDown(PRIORITYQUEUE* pQ)
{
    1c76:	6f 92       	push	r6
    1c78:	7f 92       	push	r7
    1c7a:	8f 92       	push	r8
    1c7c:	9f 92       	push	r9
    1c7e:	af 92       	push	r10
    1c80:	bf 92       	push	r11
    1c82:	cf 92       	push	r12
    1c84:	df 92       	push	r13
    1c86:	ef 92       	push	r14
    1c88:	ff 92       	push	r15
    1c8a:	0f 93       	push	r16
    1c8c:	1f 93       	push	r17
    1c8e:	cf 93       	push	r28
    1c90:	df 93       	push	r29
	void **ppParent;	//pointer to parent
	void **ppChild;   //pointer to child
	void **ppSibling;	//pointer to sibling
	void **ppHeap;	//pointer to m_ppHeap

	ppHeap = pQ->m_ppHeap;
    1c92:	dc 01       	movw	r26, r24
    1c94:	18 96       	adiw	r26, 0x08	; 8
    1c96:	ad 90       	ld	r10, X+
    1c98:	bc 90       	ld	r11, X
    1c9a:	19 97       	sbiw	r26, 0x09	; 9
	for(parent=0,child=1;child < pQ->m_nItems;)
    1c9c:	12 96       	adiw	r26, 0x02	; 2
    1c9e:	2d 91       	ld	r18, X+
    1ca0:	3c 91       	ld	r19, X
    1ca2:	13 97       	sbiw	r26, 0x03	; 3
    1ca4:	22 30       	cpi	r18, 0x02	; 2
    1ca6:	31 05       	cpc	r19, r1
    1ca8:	0c f4       	brge	.+2      	; 0x1cac <ReheapDown+0x36>
    1caa:	44 c0       	rjmp	.+136    	; 0x1d34 <ReheapDown+0xbe>
    1cac:	6c 01       	movw	r12, r24
    1cae:	ee 24       	eor	r14, r14
    1cb0:	e3 94       	inc	r14
    1cb2:	f1 2c       	mov	r15, r1
    1cb4:	c0 e0       	ldi	r28, 0x00	; 0
    1cb6:	d0 e0       	ldi	r29, 0x00	; 0
    1cb8:	02 c0       	rjmp	.+4      	; 0x1cbe <ReheapDown+0x48>
		//----------------------------------
		swap(ppParent,ppChild);
		//----------------------------------
		// new parent is the child
		//----------------------------------
		parent = child;
    1cba:	e7 01       	movw	r28, r14
		//----------------------------------
		// calculate new child index
		//----------------------------------
		child = LEFTCHILD(parent);
    1cbc:	7c 01       	movw	r14, r24
	for(parent=0,child=1;child < pQ->m_nItems;)
	{
		//----------------------------------
		// get pointer to parent and child nodes
		//----------------------------------
		ppParent = &ppHeap[parent];
    1cbe:	cc 0f       	add	r28, r28
    1cc0:	dd 1f       	adc	r29, r29
    1cc2:	ca 0d       	add	r28, r10
    1cc4:	db 1d       	adc	r29, r11
		ppChild = &ppHeap[child];
    1cc6:	87 01       	movw	r16, r14
    1cc8:	00 0f       	add	r16, r16
    1cca:	11 1f       	adc	r17, r17
    1ccc:	0a 0d       	add	r16, r10
    1cce:	1b 1d       	adc	r17, r11
		//-----------------------------------
		// is there a possible sibling to
		// the child node?
		//------------------------------------
		if(child + 1 < pQ->m_nItems)
    1cd0:	37 01       	movw	r6, r14
    1cd2:	bf ef       	ldi	r27, 0xFF	; 255
    1cd4:	6b 1a       	sub	r6, r27
    1cd6:	7b 0a       	sbc	r7, r27
    1cd8:	62 16       	cp	r6, r18
    1cda:	73 06       	cpc	r7, r19
    1cdc:	74 f4       	brge	.+28     	; 0x1cfa <ReheapDown+0x84>
		{
			//---------------------------------
			// get a pointer to the sibling
			//---------------------------------
			ppSibling = ppChild + 1;
    1cde:	48 01       	movw	r8, r16
    1ce0:	e2 e0       	ldi	r30, 0x02	; 2
    1ce2:	8e 0e       	add	r8, r30
    1ce4:	91 1c       	adc	r9, r1
			//---------------------------------
			// is priority of child less than
			// that of the sibling?
			//---------------------------------
			if((*pQ->m_Cmp)(ppChild,ppSibling) < 0)
    1ce6:	d6 01       	movw	r26, r12
    1ce8:	ed 91       	ld	r30, X+
    1cea:	fc 91       	ld	r31, X
    1cec:	b4 01       	movw	r22, r8
    1cee:	c8 01       	movw	r24, r16
    1cf0:	09 95       	icall
    1cf2:	99 23       	and	r25, r25
    1cf4:	14 f4       	brge	.+4      	; 0x1cfa <ReheapDown+0x84>
			{
				//--------------------------------
				// make the child equal to sibling
				//---------------------------------
				ppChild = ppSibling;
    1cf6:	84 01       	movw	r16, r8
				//--------------------------------
				// make child index equal to that
				// of the sibling
				//--------------------------------
				child++;
    1cf8:	73 01       	movw	r14, r6
		//-------------------------------------
		// if the priority of the parent is
		// greater than or equal to the child
		// we are done, break out of the loop
		//------------------------------------
		if((*pQ->m_Cmp)(ppParent,ppChild) >= 0)
    1cfa:	d6 01       	movw	r26, r12
    1cfc:	ed 91       	ld	r30, X+
    1cfe:	fc 91       	ld	r31, X
    1d00:	b8 01       	movw	r22, r16
    1d02:	ce 01       	movw	r24, r28
    1d04:	09 95       	icall
    1d06:	99 23       	and	r25, r25
    1d08:	ac f4       	brge	.+42     	; 0x1d34 <ReheapDown+0xbe>

static void swap(void **ppS1,void **ppS2)
{
	void *pTemp;

	pTemp = *ppS1;
    1d0a:	88 81       	ld	r24, Y
    1d0c:	99 81       	ldd	r25, Y+1	; 0x01
	*ppS1 = *ppS2;
    1d0e:	f8 01       	movw	r30, r16
    1d10:	20 81       	ld	r18, Z
    1d12:	31 81       	ldd	r19, Z+1	; 0x01
    1d14:	39 83       	std	Y+1, r19	; 0x01
    1d16:	28 83       	st	Y, r18
	*ppS2 = pTemp;
    1d18:	91 83       	std	Z+1, r25	; 0x01
    1d1a:	80 83       	st	Z, r24
		//----------------------------------
		parent = child;
		//----------------------------------
		// calculate new child index
		//----------------------------------
		child = LEFTCHILD(parent);
    1d1c:	c7 01       	movw	r24, r14
    1d1e:	88 0f       	add	r24, r24
    1d20:	99 1f       	adc	r25, r25
    1d22:	01 96       	adiw	r24, 0x01	; 1
	void **ppChild;   //pointer to child
	void **ppSibling;	//pointer to sibling
	void **ppHeap;	//pointer to m_ppHeap

	ppHeap = pQ->m_ppHeap;
	for(parent=0,child=1;child < pQ->m_nItems;)
    1d24:	d6 01       	movw	r26, r12
    1d26:	12 96       	adiw	r26, 0x02	; 2
    1d28:	2d 91       	ld	r18, X+
    1d2a:	3c 91       	ld	r19, X
    1d2c:	13 97       	sbiw	r26, 0x03	; 3
    1d2e:	82 17       	cp	r24, r18
    1d30:	93 07       	cpc	r25, r19
    1d32:	1c f2       	brlt	.-122    	; 0x1cba <ReheapDown+0x44>
		//----------------------------------
		// calculate new child index
		//----------------------------------
		child = LEFTCHILD(parent);
	}	//end of for loop
}
    1d34:	df 91       	pop	r29
    1d36:	cf 91       	pop	r28
    1d38:	1f 91       	pop	r17
    1d3a:	0f 91       	pop	r16
    1d3c:	ff 90       	pop	r15
    1d3e:	ef 90       	pop	r14
    1d40:	df 90       	pop	r13
    1d42:	cf 90       	pop	r12
    1d44:	bf 90       	pop	r11
    1d46:	af 90       	pop	r10
    1d48:	9f 90       	pop	r9
    1d4a:	8f 90       	pop	r8
    1d4c:	7f 90       	pop	r7
    1d4e:	6f 90       	pop	r6
    1d50:	08 95       	ret

00001d52 <CreatePriorityQueue>:
// these.
//
//---------------------------------------------------------
//
void CreatePriorityQueue(PRIORITYQUEUE *q,int ne,int (*c)(void **,void **))
{
    1d52:	cf 93       	push	r28
    1d54:	df 93       	push	r29
    1d56:	ec 01       	movw	r28, r24
	q->m_Cmp = c;
    1d58:	59 83       	std	Y+1, r21	; 0x01
    1d5a:	48 83       	st	Y, r20
	q->m_nItems = 0;
    1d5c:	1b 82       	std	Y+3, r1	; 0x03
    1d5e:	1a 82       	std	Y+2, r1	; 0x02
	q->m_Maxitems = ne;
    1d60:	7d 83       	std	Y+5, r23	; 0x05
    1d62:	6c 83       	std	Y+4, r22	; 0x04
	q->m_ppHeap = (void **)malloc(sizeof(void *) * ne);
    1d64:	cb 01       	movw	r24, r22
    1d66:	88 0f       	add	r24, r24
    1d68:	99 1f       	adc	r25, r25
    1d6a:	c5 d8       	rcall	.-3702   	; 0xef6 <malloc>
    1d6c:	99 87       	std	Y+9, r25	; 0x09
    1d6e:	88 87       	std	Y+8, r24	; 0x08
    q->m_ppBottom = &q->m_ppHeap[-1];
    1d70:	02 97       	sbiw	r24, 0x02	; 2
    1d72:	9f 83       	std	Y+7, r25	; 0x07
    1d74:	8e 83       	std	Y+6, r24	; 0x06
}
    1d76:	df 91       	pop	r29
    1d78:	cf 91       	pop	r28
    1d7a:	08 95       	ret

00001d7c <Insert>:
//		space available in queue
//
//---------------------------------------------------------
//
int Insert(PRIORITYQUEUE* pQ,void *item)
{
    1d7c:	af 92       	push	r10
    1d7e:	bf 92       	push	r11
    1d80:	cf 92       	push	r12
    1d82:	df 92       	push	r13
    1d84:	ef 92       	push	r14
    1d86:	ff 92       	push	r15
    1d88:	0f 93       	push	r16
    1d8a:	1f 93       	push	r17
    1d8c:	cf 93       	push	r28
    1d8e:	df 93       	push	r29
	int space_avail;

	space_avail = pQ->m_Maxitems - pQ->m_nItems;
    1d90:	dc 01       	movw	r26, r24
    1d92:	12 96       	adiw	r26, 0x02	; 2
    1d94:	2d 91       	ld	r18, X+
    1d96:	3c 91       	ld	r19, X
    1d98:	13 97       	sbiw	r26, 0x03	; 3
    1d9a:	14 96       	adiw	r26, 0x04	; 4
    1d9c:	ed 90       	ld	r14, X+
    1d9e:	fc 90       	ld	r15, X
    1da0:	15 97       	sbiw	r26, 0x05	; 5
    1da2:	e2 1a       	sub	r14, r18
    1da4:	f3 0a       	sbc	r15, r19
	if((space_avail) > 0)
    1da6:	1e 14       	cp	r1, r14
    1da8:	1f 04       	cpc	r1, r15
    1daa:	0c f0       	brlt	.+2      	; 0x1dae <Insert+0x32>
    1dac:	46 c0       	rjmp	.+140    	; 0x1e3a <Insert+0xbe>
    1dae:	8c 01       	movw	r16, r24
	{
		++pQ->m_nItems;
    1db0:	2f 5f       	subi	r18, 0xFF	; 255
    1db2:	3f 4f       	sbci	r19, 0xFF	; 255
    1db4:	fc 01       	movw	r30, r24
    1db6:	33 83       	std	Z+3, r19	; 0x03
    1db8:	22 83       	std	Z+2, r18	; 0x02
		*(++pQ->m_ppBottom) = item;
    1dba:	06 80       	ldd	r0, Z+6	; 0x06
    1dbc:	f7 81       	ldd	r31, Z+7	; 0x07
    1dbe:	e0 2d       	mov	r30, r0
    1dc0:	cf 01       	movw	r24, r30
    1dc2:	02 96       	adiw	r24, 0x02	; 2
    1dc4:	17 96       	adiw	r26, 0x07	; 7
    1dc6:	9c 93       	st	X, r25
    1dc8:	8e 93       	st	-X, r24
    1dca:	16 97       	sbiw	r26, 0x06	; 6
    1dcc:	73 83       	std	Z+3, r23	; 0x03
    1dce:	62 83       	std	Z+2, r22	; 0x02
	void **ppChild;	//pointer to child

	//-------------------------
	// Index of child node
	//-------------------------
	child = pQ->m_nItems - 1;
    1dd0:	12 96       	adiw	r26, 0x02	; 2
    1dd2:	6d 91       	ld	r22, X+
    1dd4:	7c 91       	ld	r23, X
    1dd6:	13 97       	sbiw	r26, 0x03	; 3
    1dd8:	61 50       	subi	r22, 0x01	; 1
    1dda:	71 09       	sbc	r23, r1
	//-------------------------
	// Index of parent node
	// Keep looping while
	// parent is valid (>= 0)
	//-------------------------
	while(child > 0)
    1ddc:	16 16       	cp	r1, r22
    1dde:	17 06       	cpc	r1, r23
    1de0:	64 f5       	brge	.+88     	; 0x1e3a <Insert+0xbe>
	{
		parent = PARENT(child);
    1de2:	cb 01       	movw	r24, r22
    1de4:	01 97       	sbiw	r24, 0x01	; 1
    1de6:	6c 01       	movw	r12, r24
    1de8:	1a f4       	brpl	.+6      	; 0x1df0 <Insert+0x74>
    1dea:	bf ef       	ldi	r27, 0xFF	; 255
    1dec:	cb 1a       	sub	r12, r27
    1dee:	db 0a       	sbc	r13, r27
    1df0:	d5 94       	asr	r13
    1df2:	c7 94       	ror	r12
		//-----------------------------
		// get pointers to parent
		// and child nodes
		//------------------------------
		ppChild = &pQ->m_ppHeap[child];
    1df4:	f8 01       	movw	r30, r16
    1df6:	80 85       	ldd	r24, Z+8	; 0x08
    1df8:	91 85       	ldd	r25, Z+9	; 0x09
    1dfa:	66 0f       	add	r22, r22
    1dfc:	77 1f       	adc	r23, r23
    1dfe:	ec 01       	movw	r28, r24
    1e00:	c6 0f       	add	r28, r22
    1e02:	d7 1f       	adc	r29, r23
		ppParent = &pQ->m_ppHeap[parent];
    1e04:	56 01       	movw	r10, r12
    1e06:	aa 0c       	add	r10, r10
    1e08:	bb 1c       	adc	r11, r11
    1e0a:	a8 0e       	add	r10, r24
    1e0c:	b9 1e       	adc	r11, r25
		// If the priority of the parent
		// is greater than or equal to
		// the priority of the child,
		// we are done, break from the loop
		//---------------------------------
		if( (*pQ->m_Cmp)(ppParent,ppChild) >= 0)
    1e0e:	01 90       	ld	r0, Z+
    1e10:	f0 81       	ld	r31, Z
    1e12:	e0 2d       	mov	r30, r0
    1e14:	be 01       	movw	r22, r28
    1e16:	c5 01       	movw	r24, r10
    1e18:	09 95       	icall
    1e1a:	99 23       	and	r25, r25
    1e1c:	74 f4       	brge	.+28     	; 0x1e3a <Insert+0xbe>

static void swap(void **ppS1,void **ppS2)
{
	void *pTemp;

	pTemp = *ppS1;
    1e1e:	d5 01       	movw	r26, r10
    1e20:	8d 91       	ld	r24, X+
    1e22:	9c 91       	ld	r25, X
    1e24:	11 97       	sbiw	r26, 0x01	; 1
	*ppS1 = *ppS2;
    1e26:	28 81       	ld	r18, Y
    1e28:	39 81       	ldd	r19, Y+1	; 0x01
    1e2a:	2d 93       	st	X+, r18
    1e2c:	3c 93       	st	X, r19
	*ppS2 = pTemp;
    1e2e:	99 83       	std	Y+1, r25	; 0x01
    1e30:	88 83       	st	Y, r24
		//----------------------------------
		swap(ppParent,ppChild);
		//----------------------------------
		// the new parent is the child
		//----------------------------------
		child = parent;
    1e32:	b6 01       	movw	r22, r12
	//-------------------------
	// Index of parent node
	// Keep looping while
	// parent is valid (>= 0)
	//-------------------------
	while(child > 0)
    1e34:	1c 14       	cp	r1, r12
    1e36:	1d 04       	cpc	r1, r13
    1e38:	a4 f2       	brlt	.-88     	; 0x1de2 <Insert+0x66>
		++pQ->m_nItems;
		*(++pQ->m_ppBottom) = item;
		ReheapUp(pQ);
	}
	return space_avail;
}
    1e3a:	c7 01       	movw	r24, r14
    1e3c:	df 91       	pop	r29
    1e3e:	cf 91       	pop	r28
    1e40:	1f 91       	pop	r17
    1e42:	0f 91       	pop	r16
    1e44:	ff 90       	pop	r15
    1e46:	ef 90       	pop	r14
    1e48:	df 90       	pop	r13
    1e4a:	cf 90       	pop	r12
    1e4c:	bf 90       	pop	r11
    1e4e:	af 90       	pop	r10
    1e50:	08 95       	ret

00001e52 <Delete>:
// return value:
//		returns slots in use in the queue
//---------------------------------------------------------

int Delete(PRIORITYQUEUE* pQ,void **target)
{
    1e52:	cf 93       	push	r28
    1e54:	df 93       	push	r29
	int SlotsInUse;

	if((SlotsInUse = pQ->m_nItems) > 0)
    1e56:	dc 01       	movw	r26, r24
    1e58:	12 96       	adiw	r26, 0x02	; 2
    1e5a:	cd 91       	ld	r28, X+
    1e5c:	dc 91       	ld	r29, X
    1e5e:	13 97       	sbiw	r26, 0x03	; 3
    1e60:	1c 16       	cp	r1, r28
    1e62:	1d 06       	cpc	r1, r29
    1e64:	ec f4       	brge	.+58     	; 0x1ea0 <Delete+0x4e>
    1e66:	fc 01       	movw	r30, r24
	{
		*target = *pQ->m_ppHeap;		//get item from top of m_ppHeap
    1e68:	a0 85       	ldd	r26, Z+8	; 0x08
    1e6a:	b1 85       	ldd	r27, Z+9	; 0x09
    1e6c:	8d 91       	ld	r24, X+
    1e6e:	9c 91       	ld	r25, X
    1e70:	db 01       	movw	r26, r22
    1e72:	8d 93       	st	X+, r24
    1e74:	9c 93       	st	X, r25
		*pQ->m_ppHeap = *pQ->m_ppBottom--;
    1e76:	80 85       	ldd	r24, Z+8	; 0x08
    1e78:	91 85       	ldd	r25, Z+9	; 0x09
    1e7a:	a6 81       	ldd	r26, Z+6	; 0x06
    1e7c:	b7 81       	ldd	r27, Z+7	; 0x07
    1e7e:	9d 01       	movw	r18, r26
    1e80:	22 50       	subi	r18, 0x02	; 2
    1e82:	31 09       	sbc	r19, r1
    1e84:	37 83       	std	Z+7, r19	; 0x07
    1e86:	26 83       	std	Z+6, r18	; 0x06
    1e88:	2d 91       	ld	r18, X+
    1e8a:	3c 91       	ld	r19, X
    1e8c:	dc 01       	movw	r26, r24
    1e8e:	2d 93       	st	X+, r18
    1e90:	3c 93       	st	X, r19
		--pQ->m_nItems;
    1e92:	82 81       	ldd	r24, Z+2	; 0x02
    1e94:	93 81       	ldd	r25, Z+3	; 0x03
    1e96:	01 97       	sbiw	r24, 0x01	; 1
    1e98:	93 83       	std	Z+3, r25	; 0x03
    1e9a:	82 83       	std	Z+2, r24	; 0x02
		ReheapDown(pQ);
    1e9c:	cf 01       	movw	r24, r30
    1e9e:	eb de       	rcall	.-554    	; 0x1c76 <ReheapDown>
	}
	return SlotsInUse;
}
    1ea0:	ce 01       	movw	r24, r28
    1ea2:	df 91       	pop	r29
    1ea4:	cf 91       	pop	r28
    1ea6:	08 95       	ret

00001ea8 <Replace>:
//	return value:
//		returns number of slots in use
//-----------------------------------------------------------

int Replace(PRIORITYQUEUE* pQ,void **target,void *item)
{
    1ea8:	cf 92       	push	r12
    1eaa:	df 92       	push	r13
    1eac:	ef 92       	push	r14
    1eae:	ff 92       	push	r15
    1eb0:	0f 93       	push	r16
    1eb2:	1f 93       	push	r17
    1eb4:	cf 93       	push	r28
    1eb6:	df 93       	push	r29
    1eb8:	00 d0       	rcall	.+0      	; 0x1eba <Replace+0x12>
    1eba:	cd b7       	in	r28, 0x3d	; 61
    1ebc:	de b7       	in	r29, 0x3e	; 62
    1ebe:	5a 83       	std	Y+2, r21	; 0x02
    1ec0:	49 83       	std	Y+1, r20	; 0x01
	int SlotsInUse;

	if((SlotsInUse = pQ->m_nItems) > 0)
    1ec2:	dc 01       	movw	r26, r24
    1ec4:	12 96       	adiw	r26, 0x02	; 2
    1ec6:	cd 90       	ld	r12, X+
    1ec8:	dc 90       	ld	r13, X
    1eca:	13 97       	sbiw	r26, 0x03	; 3
    1ecc:	1c 14       	cp	r1, r12
    1ece:	1d 04       	cpc	r1, r13
    1ed0:	4c f5       	brge	.+82     	; 0x1f24 <Replace+0x7c>
    1ed2:	7b 01       	movw	r14, r22
    1ed4:	8c 01       	movw	r16, r24
	{
		if ((*pQ->m_Cmp)(&item,pQ->m_ppHeap) > 0)	//only replace if priority is less
    1ed6:	fc 01       	movw	r30, r24
    1ed8:	60 85       	ldd	r22, Z+8	; 0x08
    1eda:	71 85       	ldd	r23, Z+9	; 0x09
    1edc:	01 90       	ld	r0, Z+
    1ede:	f0 81       	ld	r31, Z
    1ee0:	e0 2d       	mov	r30, r0
    1ee2:	ce 01       	movw	r24, r28
    1ee4:	01 96       	adiw	r24, 0x01	; 1
    1ee6:	09 95       	icall
    1ee8:	18 16       	cp	r1, r24
    1eea:	19 06       	cpc	r1, r25
    1eec:	34 f4       	brge	.+12     	; 0x1efa <Replace+0x52>
		{
			*target = item;		//item is higher priority
    1eee:	89 81       	ldd	r24, Y+1	; 0x01
    1ef0:	9a 81       	ldd	r25, Y+2	; 0x02
    1ef2:	d7 01       	movw	r26, r14
    1ef4:	8d 93       	st	X+, r24
    1ef6:	9c 93       	st	X, r25
    1ef8:	1a c0       	rjmp	.+52     	; 0x1f2e <Replace+0x86>
		}
		else
		{
			*target = *pQ->m_ppHeap;
    1efa:	d8 01       	movw	r26, r16
    1efc:	18 96       	adiw	r26, 0x08	; 8
    1efe:	ed 91       	ld	r30, X+
    1f00:	fc 91       	ld	r31, X
    1f02:	19 97       	sbiw	r26, 0x09	; 9
    1f04:	80 81       	ld	r24, Z
    1f06:	91 81       	ldd	r25, Z+1	; 0x01
    1f08:	f7 01       	movw	r30, r14
    1f0a:	91 83       	std	Z+1, r25	; 0x01
    1f0c:	80 83       	st	Z, r24
			*pQ->m_ppHeap = item;
    1f0e:	18 96       	adiw	r26, 0x08	; 8
    1f10:	ed 91       	ld	r30, X+
    1f12:	fc 91       	ld	r31, X
    1f14:	19 97       	sbiw	r26, 0x09	; 9
    1f16:	89 81       	ldd	r24, Y+1	; 0x01
    1f18:	9a 81       	ldd	r25, Y+2	; 0x02
    1f1a:	91 83       	std	Z+1, r25	; 0x01
    1f1c:	80 83       	st	Z, r24
			ReheapDown(pQ);
    1f1e:	c8 01       	movw	r24, r16
    1f20:	aa de       	rcall	.-684    	; 0x1c76 <ReheapDown>
    1f22:	05 c0       	rjmp	.+10     	; 0x1f2e <Replace+0x86>
		}
	}
	else
		*target = item;
    1f24:	89 81       	ldd	r24, Y+1	; 0x01
    1f26:	9a 81       	ldd	r25, Y+2	; 0x02
    1f28:	db 01       	movw	r26, r22
    1f2a:	8d 93       	st	X+, r24
    1f2c:	9c 93       	st	X, r25
	return SlotsInUse;
}
    1f2e:	c6 01       	movw	r24, r12
    1f30:	0f 90       	pop	r0
    1f32:	0f 90       	pop	r0
    1f34:	df 91       	pop	r29
    1f36:	cf 91       	pop	r28
    1f38:	1f 91       	pop	r17
    1f3a:	0f 91       	pop	r16
    1f3c:	ff 90       	pop	r15
    1f3e:	ef 90       	pop	r14
    1f40:	df 90       	pop	r13
    1f42:	cf 90       	pop	r12
    1f44:	08 95       	ret

00001f46 <SendSysEx>:
 MESSAGE_QUEUE *pSeqMsg;

 void DumpByte(char b)
 {
	SendSysEx(&b,1,SYSEX_CMD_DUMP);
 }
    1f46:	ef 92       	push	r14
    1f48:	ff 92       	push	r15
    1f4a:	0f 93       	push	r16
    1f4c:	1f 93       	push	r17
    1f4e:	cf 93       	push	r28
    1f50:	df 93       	push	r29
    1f52:	7c 01       	movw	r14, r24
    1f54:	8b 01       	movw	r16, r22
    1f56:	ea 01       	movw	r28, r20
    1f58:	80 ef       	ldi	r24, 0xF0	; 240
    1f5a:	90 e0       	ldi	r25, 0x00	; 0
    1f5c:	a7 d4       	rcall	.+2382   	; 0x28ac <USART_PutC>
    1f5e:	8d e7       	ldi	r24, 0x7D	; 125
    1f60:	90 e0       	ldi	r25, 0x00	; 0
    1f62:	a4 d4       	rcall	.+2376   	; 0x28ac <USART_PutC>
    1f64:	ce 01       	movw	r24, r28
    1f66:	a2 d4       	rcall	.+2372   	; 0x28ac <USART_PutC>
    1f68:	10 16       	cp	r1, r16
    1f6a:	11 06       	cpc	r1, r17
    1f6c:	4c f4       	brge	.+18     	; 0x1f80 <SendSysEx+0x3a>
    1f6e:	e7 01       	movw	r28, r14
    1f70:	0e 0d       	add	r16, r14
    1f72:	1f 1d       	adc	r17, r15
    1f74:	89 91       	ld	r24, Y+
    1f76:	90 e0       	ldi	r25, 0x00	; 0
    1f78:	99 d4       	rcall	.+2354   	; 0x28ac <USART_PutC>
    1f7a:	c0 17       	cp	r28, r16
    1f7c:	d1 07       	cpc	r29, r17
    1f7e:	d1 f7       	brne	.-12     	; 0x1f74 <SendSysEx+0x2e>
    1f80:	87 ef       	ldi	r24, 0xF7	; 247
    1f82:	90 e0       	ldi	r25, 0x00	; 0
    1f84:	93 d4       	rcall	.+2342   	; 0x28ac <USART_PutC>
    1f86:	df 91       	pop	r29
    1f88:	cf 91       	pop	r28
    1f8a:	1f 91       	pop	r17
    1f8c:	0f 91       	pop	r16
    1f8e:	ff 90       	pop	r15
    1f90:	ef 90       	pop	r14
    1f92:	08 95       	ret

00001f94 <SendCurrentStep>:

 void SendCurrentStep(int SeqID,int EventID)
 {
    1f94:	0f 93       	push	r16
    1f96:	1f 93       	push	r17
    1f98:	cf 93       	push	r28
    1f9a:	df 93       	push	r29
    1f9c:	08 2f       	mov	r16, r24
    1f9e:	16 2f       	mov	r17, r22
	char *b = malloc(32);
    1fa0:	80 e2       	ldi	r24, 0x20	; 32
    1fa2:	90 e0       	ldi	r25, 0x00	; 0
    1fa4:	0e 94 7b 07 	call	0xef6	; 0xef6 <malloc>
    1fa8:	ec 01       	movw	r28, r24
	b[0] = SeqID;
    1faa:	08 83       	st	Y, r16
	b[1] = EventID;
    1fac:	19 83       	std	Y+1, r17	; 0x01
	SendSysEx(b,2,SYSEX_CMD_STEP);
    1fae:	4a e0       	ldi	r20, 0x0A	; 10
    1fb0:	50 e0       	ldi	r21, 0x00	; 0
    1fb2:	62 e0       	ldi	r22, 0x02	; 2
    1fb4:	70 e0       	ldi	r23, 0x00	; 0
    1fb6:	c7 df       	rcall	.-114    	; 0x1f46 <SendSysEx>
	free(b);
    1fb8:	ce 01       	movw	r24, r28
    1fba:	8d d8       	rcall	.-3814   	; 0x10d6 <free>
 }
    1fbc:	df 91       	pop	r29
    1fbe:	cf 91       	pop	r28
    1fc0:	1f 91       	pop	r17
    1fc2:	0f 91       	pop	r16
    1fc4:	08 95       	ret

00001fc6 <SeqTask>:
		USART_PutC(data[i]);
 	USART_PutC(SYSEXEND);
 }
 void SeqTask(void *arg)  __attribute__ ( ( noreturn ) );
 void SeqTask(void *arg)
 {
    1fc6:	cf 93       	push	r28
    1fc8:	df 93       	push	r29
    1fca:	00 d0       	rcall	.+0      	; 0x1fcc <SeqTask+0x6>
    1fcc:	00 d0       	rcall	.+0      	; 0x1fce <SeqTask+0x8>
    1fce:	00 d0       	rcall	.+0      	; 0x1fd0 <SeqTask+0xa>
    1fd0:	cd b7       	in	r28, 0x3d	; 61
    1fd2:	de b7       	in	r29, 0x3e	; 62
	}c;
	SEQ **ppSequencers;
	MSG *pMSG=0;
	int Start=0;
	SEQ_EVENT *pE;
	char *buff = malloc(256);
    1fd4:	80 e0       	ldi	r24, 0x00	; 0
    1fd6:	91 e0       	ldi	r25, 0x01	; 1
    1fd8:	0e 94 7b 07 	call	0xef6	; 0xef6 <malloc>
    1fdc:	7c 01       	movw	r14, r24

	//****************************************
	//		Initialize local variables
	//****************************************
	ppSequencers = (SEQ **)malloc(sizeof(SEQ *) * 4);
    1fde:	88 e0       	ldi	r24, 0x08	; 8
    1fe0:	90 e0       	ldi	r25, 0x00	; 0
    1fe2:	0e 94 7b 07 	call	0xef6	; 0xef6 <malloc>
    1fe6:	4c 01       	movw	r8, r24
    1fe8:	8b 83       	std	Y+3, r24	; 0x03
    1fea:	9c 82       	std	Y+4, r9	; 0x04
    1fec:	1c 01       	movw	r2, r24
    1fee:	88 e0       	ldi	r24, 0x08	; 8
    1ff0:	28 0e       	add	r2, r24
    1ff2:	31 1c       	adc	r3, r1
    1ff4:	84 01       	movw	r16, r8
	{
//		ClearGatePort(GATE_SEQ0+i);	//reset the gate
		//allocate a sequencer
		ppSequencers[i] = malloc(sizeof(SEQ));
		//set the number of step to 8
		ppSequencers[i]->m_nSteps = 8;
    1ff6:	68 94       	set
    1ff8:	cc 24       	eor	r12, r12
    1ffa:	c3 f8       	bld	r12, 3
    1ffc:	d1 2c       	mov	r13, r1
		ppSequencers[i]->m_pSteps = malloc(sizeof(SEQ_EVENT) * 8);
		//initialize all events to default value
		for(j=0;j<8;++j)
		{
			pE = ppSequencers[i]->m_pSteps;
			pE[j].m_Count = pE[j].m_Ticks = 24;
    1ffe:	0f 2e       	mov	r0, r31
    2000:	f8 e1       	ldi	r31, 0x18	; 24
    2002:	bf 2e       	mov	r11, r31
    2004:	f0 2d       	mov	r31, r0
			pE[j].m_GateFlags = 16+2;
    2006:	0f 2e       	mov	r0, r31
    2008:	f2 e1       	ldi	r31, 0x12	; 18
    200a:	af 2e       	mov	r10, r31
    200c:	f0 2d       	mov	r31, r0
	ppSequencers = (SEQ **)malloc(sizeof(SEQ *) * 4);
	for(i=0;i<4;++i)
	{
//		ClearGatePort(GATE_SEQ0+i);	//reset the gate
		//allocate a sequencer
		ppSequencers[i] = malloc(sizeof(SEQ));
    200e:	86 e0       	ldi	r24, 0x06	; 6
    2010:	90 e0       	ldi	r25, 0x00	; 0
    2012:	0e 94 7b 07 	call	0xef6	; 0xef6 <malloc>
    2016:	9a 83       	std	Y+2, r25	; 0x02
    2018:	89 83       	std	Y+1, r24	; 0x01
    201a:	d8 01       	movw	r26, r16
    201c:	8d 93       	st	X+, r24
    201e:	9d 93       	st	X+, r25
    2020:	8d 01       	movw	r16, r26
		//set the number of step to 8
		ppSequencers[i]->m_nSteps = 8;
    2022:	fc 01       	movw	r30, r24
    2024:	d1 82       	std	Z+1, r13	; 0x01
    2026:	c0 82       	st	Z, r12
		ppSequencers[i]->m_CurPos = 0;
    2028:	13 82       	std	Z+3, r1	; 0x03
    202a:	12 82       	std	Z+2, r1	; 0x02
		//allocate sequencer events
		ppSequencers[i]->m_pSteps = malloc(sizeof(SEQ_EVENT) * 8);
    202c:	88 e2       	ldi	r24, 0x28	; 40
    202e:	90 e0       	ldi	r25, 0x00	; 0
    2030:	0e 94 7b 07 	call	0xef6	; 0xef6 <malloc>
    2034:	a9 81       	ldd	r26, Y+1	; 0x01
    2036:	ba 81       	ldd	r27, Y+2	; 0x02
    2038:	15 96       	adiw	r26, 0x05	; 5
    203a:	9c 93       	st	X, r25
    203c:	8e 93       	st	-X, r24
    203e:	14 97       	sbiw	r26, 0x04	; 4
    2040:	fc 01       	movw	r30, r24
    2042:	88 96       	adiw	r24, 0x28	; 40
		//initialize all events to default value
		for(j=0;j<8;++j)
		{
			pE = ppSequencers[i]->m_pSteps;
			pE[j].m_Count = pE[j].m_Ticks = 24;
    2044:	b3 82       	std	Z+3, r11	; 0x03
    2046:	b4 82       	std	Z+4, r11	; 0x04
			pE[j].m_GateFlags = 16+2;
    2048:	a2 82       	std	Z+2, r10	; 0x02
			pE[j].m_v = 0;
    204a:	11 82       	std	Z+1, r1	; 0x01
    204c:	10 82       	st	Z, r1
    204e:	35 96       	adiw	r30, 0x05	; 5
		ppSequencers[i]->m_nSteps = 8;
		ppSequencers[i]->m_CurPos = 0;
		//allocate sequencer events
		ppSequencers[i]->m_pSteps = malloc(sizeof(SEQ_EVENT) * 8);
		//initialize all events to default value
		for(j=0;j<8;++j)
    2050:	8e 17       	cp	r24, r30
    2052:	9f 07       	cpc	r25, r31
    2054:	b9 f7       	brne	.-18     	; 0x2044 <SeqTask+0x7e>

	//****************************************
	//		Initialize local variables
	//****************************************
	ppSequencers = (SEQ **)malloc(sizeof(SEQ *) * 4);
	for(i=0;i<4;++i)
    2056:	02 15       	cp	r16, r2
    2058:	13 05       	cpc	r17, r3
    205a:	c9 f6       	brne	.-78     	; 0x200e <SeqTask+0x48>
    205c:	41 2c       	mov	r4, r1
    205e:	51 2c       	mov	r5, r1
	{
		//***************************
		// wait on message queue
		// for a command
		//***************************
		pMSG = MqGet(pSeqMsg);
    2060:	80 91 17 03 	lds	r24, 0x0317	; 0x800317 <pSeqMsg>
    2064:	90 91 18 03 	lds	r25, 0x0318	; 0x800318 <pSeqMsg+0x1>
    2068:	c5 d9       	rcall	.-3190   	; 0x13f4 <MqGet>
    206a:	9e 83       	std	Y+6, r25	; 0x06
    206c:	8d 83       	std	Y+5, r24	; 0x05
		// get a pointer to the payload
		c.m_pVoid = pMSG->Payload;
		//decode message command
		switch(pMSG->MsgCmd)
    206e:	dc 01       	movw	r26, r24
    2070:	ed 91       	ld	r30, X+
    2072:	fc 91       	ld	r31, X
    2074:	ea 30       	cpi	r30, 0x0A	; 10
    2076:	f1 05       	cpc	r31, r1
    2078:	08 f0       	brcs	.+2      	; 0x207c <SeqTask+0xb6>
    207a:	1b c1       	rjmp	.+566    	; 0x22b2 <SeqTask+0x2ec>
    207c:	ea 5a       	subi	r30, 0xAA	; 170
    207e:	ff 4f       	sbci	r31, 0xFF	; 255
    2080:	c1 c4       	rjmp	.+2434   	; 0x2a04 <__tablejump2__>
						pE[j].m_Count = pE[j].m_Ticks;
					}
				}
				break;
			case SEQMSG_STOP:
				Start = 0;	//sequencer is stopped
    2082:	41 2c       	mov	r4, r1
    2084:	51 2c       	mov	r5, r1
    2086:	15 c1       	rjmp	.+554    	; 0x22b2 <SeqTask+0x2ec>
		//***************************
		pMSG = MqGet(pSeqMsg);
		// get a pointer to the payload
		c.m_pVoid = pMSG->Payload;
		//decode message command
		switch(pMSG->MsgCmd)
    2088:	ab 81       	ldd	r26, Y+3	; 0x03
    208a:	bc 81       	ldd	r27, Y+4	; 0x04
			case SEQMSG_START:
				Start = 1;	//sequencer is running
				for(i=0;i<4;++i)
				{
//					ClearGatePort(GATE_SEQ0+i);	//reset the gate
					ppSequencers[i]->m_CurPos = 0;
    208c:	ed 91       	ld	r30, X+
    208e:	fd 91       	ld	r31, X+
    2090:	13 82       	std	Z+3, r1	; 0x03
    2092:	12 82       	std	Z+2, r1	; 0x02
					for(j=0;j<8;++j)
					{
						pE = ppSequencers[i]->m_pSteps;
    2094:	04 80       	ldd	r0, Z+4	; 0x04
    2096:	f5 81       	ldd	r31, Z+5	; 0x05
    2098:	e0 2d       	mov	r30, r0
    209a:	9f 01       	movw	r18, r30
    209c:	28 5d       	subi	r18, 0xD8	; 216
    209e:	3f 4f       	sbci	r19, 0xFF	; 255
						pE[j].m_Count = pE[j].m_Ticks;
    20a0:	83 81       	ldd	r24, Z+3	; 0x03
    20a2:	84 83       	std	Z+4, r24	; 0x04
    20a4:	35 96       	adiw	r30, 0x05	; 5
				Start = 1;	//sequencer is running
				for(i=0;i<4;++i)
				{
//					ClearGatePort(GATE_SEQ0+i);	//reset the gate
					ppSequencers[i]->m_CurPos = 0;
					for(j=0;j<8;++j)
    20a6:	2e 17       	cp	r18, r30
    20a8:	3f 07       	cpc	r19, r31
    20aa:	d1 f7       	brne	.-12     	; 0x20a0 <SeqTask+0xda>
		//decode message command
		switch(pMSG->MsgCmd)
		{
			case SEQMSG_START:
				Start = 1;	//sequencer is running
				for(i=0;i<4;++i)
    20ac:	2a 16       	cp	r2, r26
    20ae:	3b 06       	cpc	r3, r27
    20b0:	69 f7       	brne	.-38     	; 0x208c <SeqTask+0xc6>
		c.m_pVoid = pMSG->Payload;
		//decode message command
		switch(pMSG->MsgCmd)
		{
			case SEQMSG_START:
				Start = 1;	//sequencer is running
    20b2:	44 24       	eor	r4, r4
    20b4:	43 94       	inc	r4
    20b6:	51 2c       	mov	r5, r1
    20b8:	fc c0       	rjmp	.+504    	; 0x22b2 <SeqTask+0x2ec>
				//	Get the data associated
				// with an Event as determined
				// by the sequencer ID and
				// the Event ID
				//------------------------
				pE = &ppSequencers[c.m_pGetEvent->m_SeqID]->m_pSteps[c.m_pGetEvent->m_EventID];
    20ba:	ed 81       	ldd	r30, Y+5	; 0x05
    20bc:	fe 81       	ldd	r31, Y+6	; 0x06
    20be:	24 85       	ldd	r18, Z+12	; 0x0c
    20c0:	35 85       	ldd	r19, Z+13	; 0x0d
    20c2:	f9 01       	movw	r30, r18
    20c4:	ee 0f       	add	r30, r30
    20c6:	ff 1f       	adc	r31, r31
    20c8:	e8 0d       	add	r30, r8
    20ca:	f9 1d       	adc	r31, r9
    20cc:	a0 81       	ld	r26, Z
    20ce:	b1 81       	ldd	r27, Z+1	; 0x01
    20d0:	ed 81       	ldd	r30, Y+5	; 0x05
    20d2:	fe 81       	ldd	r31, Y+6	; 0x06
    20d4:	86 85       	ldd	r24, Z+14	; 0x0e
    20d6:	97 85       	ldd	r25, Z+15	; 0x0f
    20d8:	fc 01       	movw	r30, r24
    20da:	ee 0f       	add	r30, r30
    20dc:	ff 1f       	adc	r31, r31
    20de:	ee 0f       	add	r30, r30
    20e0:	ff 1f       	adc	r31, r31
    20e2:	8e 0f       	add	r24, r30
    20e4:	9f 1f       	adc	r25, r31
    20e6:	14 96       	adiw	r26, 0x04	; 4
    20e8:	ed 91       	ld	r30, X+
    20ea:	fc 91       	ld	r31, X
    20ec:	15 97       	sbiw	r26, 0x05	; 5
    20ee:	e8 0f       	add	r30, r24
    20f0:	f9 1f       	adc	r31, r25
				buff[0] = c.m_pGetEvent->m_SeqID;
    20f2:	d7 01       	movw	r26, r14
    20f4:	2c 93       	st	X, r18
				buff[1] = c.m_pGetEvent->m_EventID;
    20f6:	ad 81       	ldd	r26, Y+5	; 0x05
    20f8:	be 81       	ldd	r27, Y+6	; 0x06
    20fa:	1e 96       	adiw	r26, 0x0e	; 14
    20fc:	8c 91       	ld	r24, X
    20fe:	d7 01       	movw	r26, r14
    2100:	11 96       	adiw	r26, 0x01	; 1
    2102:	8c 93       	st	X, r24
    2104:	11 97       	sbiw	r26, 0x01	; 1
				buff[2] = LO7(pE->m_v);
    2106:	80 81       	ld	r24, Z
    2108:	8f 77       	andi	r24, 0x7F	; 127
    210a:	12 96       	adiw	r26, 0x02	; 2
    210c:	8c 93       	st	X, r24
    210e:	12 97       	sbiw	r26, 0x02	; 2
				buff[3] = HI7(pE->m_v);
    2110:	80 81       	ld	r24, Z
    2112:	91 81       	ldd	r25, Z+1	; 0x01
    2114:	88 0f       	add	r24, r24
    2116:	89 2f       	mov	r24, r25
    2118:	88 1f       	adc	r24, r24
    211a:	99 0b       	sbc	r25, r25
    211c:	91 95       	neg	r25
    211e:	8f 77       	andi	r24, 0x7F	; 127
    2120:	13 96       	adiw	r26, 0x03	; 3
    2122:	8c 93       	st	X, r24
    2124:	13 97       	sbiw	r26, 0x03	; 3
				buff[4] = pE->m_Ticks;
    2126:	83 81       	ldd	r24, Z+3	; 0x03
    2128:	14 96       	adiw	r26, 0x04	; 4
    212a:	8c 93       	st	X, r24
    212c:	14 97       	sbiw	r26, 0x04	; 4
				buff[5] = pE->m_GateFlags;
    212e:	82 81       	ldd	r24, Z+2	; 0x02
    2130:	15 96       	adiw	r26, 0x05	; 5
    2132:	8c 93       	st	X, r24
				SendSysEx(buff,6,SYSEX_CMD_GETEVENT);
    2134:	44 e0       	ldi	r20, 0x04	; 4
    2136:	50 e0       	ldi	r21, 0x00	; 0
    2138:	66 e0       	ldi	r22, 0x06	; 6
    213a:	70 e0       	ldi	r23, 0x00	; 0
    213c:	c7 01       	movw	r24, r14
    213e:	03 df       	rcall	.-506    	; 0x1f46 <SendSysEx>
				break;
    2140:	b8 c0       	rjmp	.+368    	; 0x22b2 <SeqTask+0x2ec>
			case SEQMSG_SETEVENT:
				pE = &ppSequencers[c.m_pSetEvent->m_SeqID]->m_pSteps[c.m_pSetEvent->m_EventID];
    2142:	ad 81       	ldd	r26, Y+5	; 0x05
    2144:	be 81       	ldd	r27, Y+6	; 0x06
    2146:	1c 96       	adiw	r26, 0x0c	; 12
    2148:	ed 91       	ld	r30, X+
    214a:	fc 91       	ld	r31, X
    214c:	1d 97       	sbiw	r26, 0x0d	; 13
    214e:	ee 0f       	add	r30, r30
    2150:	ff 1f       	adc	r31, r31
    2152:	e8 0d       	add	r30, r8
    2154:	f9 1d       	adc	r31, r9
    2156:	a0 81       	ld	r26, Z
    2158:	b1 81       	ldd	r27, Z+1	; 0x01
    215a:	ed 81       	ldd	r30, Y+5	; 0x05
    215c:	fe 81       	ldd	r31, Y+6	; 0x06
    215e:	86 85       	ldd	r24, Z+14	; 0x0e
    2160:	97 85       	ldd	r25, Z+15	; 0x0f
    2162:	fc 01       	movw	r30, r24
    2164:	ee 0f       	add	r30, r30
    2166:	ff 1f       	adc	r31, r31
    2168:	ee 0f       	add	r30, r30
    216a:	ff 1f       	adc	r31, r31
    216c:	8e 0f       	add	r24, r30
    216e:	9f 1f       	adc	r25, r31
    2170:	14 96       	adiw	r26, 0x04	; 4
    2172:	ed 91       	ld	r30, X+
    2174:	fc 91       	ld	r31, X
    2176:	15 97       	sbiw	r26, 0x05	; 5
    2178:	e8 0f       	add	r30, r24
    217a:	f9 1f       	adc	r31, r25
				pE->m_v = c.m_pSetEvent->m_v;
    217c:	ad 81       	ldd	r26, Y+5	; 0x05
    217e:	be 81       	ldd	r27, Y+6	; 0x06
    2180:	50 96       	adiw	r26, 0x10	; 16
    2182:	8d 91       	ld	r24, X+
    2184:	9c 91       	ld	r25, X
    2186:	51 97       	sbiw	r26, 0x11	; 17
    2188:	91 83       	std	Z+1, r25	; 0x01
    218a:	80 83       	st	Z, r24
				pE->m_Ticks = c.m_pSetEvent->m_Ticks;
    218c:	53 96       	adiw	r26, 0x13	; 19
    218e:	8c 91       	ld	r24, X
    2190:	53 97       	sbiw	r26, 0x13	; 19
    2192:	83 83       	std	Z+3, r24	; 0x03
				pE->m_Count = pE->m_Ticks;
    2194:	84 83       	std	Z+4, r24	; 0x04
				pE->m_GateFlags = c.m_pSetEvent->m_GateFlags;
    2196:	52 96       	adiw	r26, 0x12	; 18
    2198:	8c 91       	ld	r24, X
    219a:	82 83       	std	Z+2, r24	; 0x02
				break;
    219c:	8a c0       	rjmp	.+276    	; 0x22b2 <SeqTask+0x2ec>
			case SEQMSG_DELEVENT:
				break;
			case SEQMSG_ADDEVENT:
				break;
			case SEQMSG_TICK:
				if(Start)
    219e:	41 14       	cp	r4, r1
    21a0:	51 04       	cpc	r5, r1
    21a2:	09 f4       	brne	.+2      	; 0x21a6 <SeqTask+0x1e0>
    21a4:	86 c0       	rjmp	.+268    	; 0x22b2 <SeqTask+0x2ec>
    21a6:	bb 81       	ldd	r27, Y+3	; 0x03
    21a8:	b9 83       	std	Y+1, r27	; 0x01
    21aa:	ec 81       	ldd	r30, Y+4	; 0x04
    21ac:	ea 83       	std	Y+2, r30	; 0x02
    21ae:	a1 2c       	mov	r10, r1
    21b0:	b1 2c       	mov	r11, r1
				{
					for(i=0;i<4;++i)
					{
						if(ppSequencers[i]->m_pSteps)
    21b2:	a9 81       	ldd	r26, Y+1	; 0x01
    21b4:	ba 81       	ldd	r27, Y+2	; 0x02
    21b6:	cd 90       	ld	r12, X+
    21b8:	dd 90       	ld	r13, X+
    21ba:	ba 83       	std	Y+2, r27	; 0x02
    21bc:	a9 83       	std	Y+1, r26	; 0x01
    21be:	f6 01       	movw	r30, r12
    21c0:	84 81       	ldd	r24, Z+4	; 0x04
    21c2:	95 81       	ldd	r25, Z+5	; 0x05
    21c4:	00 97       	sbiw	r24, 0x00	; 0
    21c6:	81 f1       	breq	.+96     	; 0x2228 <SeqTask+0x262>
						{
							pE = &ppSequencers[i]->m_pSteps[ppSequencers[i]->m_CurPos];
    21c8:	62 80       	ldd	r6, Z+2	; 0x02
    21ca:	73 80       	ldd	r7, Z+3	; 0x03
    21cc:	83 01       	movw	r16, r6
    21ce:	00 0f       	add	r16, r16
    21d0:	11 1f       	adc	r17, r17
    21d2:	00 0f       	add	r16, r16
    21d4:	11 1f       	adc	r17, r17
    21d6:	06 0d       	add	r16, r6
    21d8:	17 1d       	adc	r17, r7
    21da:	08 0f       	add	r16, r24
    21dc:	19 1f       	adc	r17, r25
							if(pE->m_Count == pE->m_Ticks)
    21de:	d8 01       	movw	r26, r16
    21e0:	14 96       	adiw	r26, 0x04	; 4
    21e2:	9c 91       	ld	r25, X
    21e4:	14 97       	sbiw	r26, 0x04	; 4
    21e6:	13 96       	adiw	r26, 0x03	; 3
    21e8:	8c 91       	ld	r24, X
    21ea:	98 13       	cpse	r25, r24
							{
//								SendData(pE->m_v,SPIPORT_SEQ0 + i);
//								SetGatePort(GATE_SEQ0 + i);
								SendCurrentStep(i,ppSequencers[i]->m_CurPos);
    21ec:	03 c0       	rjmp	.+6      	; 0x21f4 <SeqTask+0x22e>
    21ee:	b3 01       	movw	r22, r6
    21f0:	c5 01       	movw	r24, r10
    21f2:	d0 de       	rcall	.-608    	; 0x1f94 <SendCurrentStep>
							}
							pE->m_Count--;
    21f4:	f8 01       	movw	r30, r16
    21f6:	84 81       	ldd	r24, Z+4	; 0x04
    21f8:	81 50       	subi	r24, 0x01	; 1
    21fa:	84 83       	std	Z+4, r24	; 0x04
							if (pE->m_Count == 8)
							{
//								ClearGatePort(GATE_SEQ0+i);
							}
							else if(pE->m_Count == 0)
    21fc:	81 11       	cpse	r24, r1
    21fe:	14 c0       	rjmp	.+40     	; 0x2228 <SeqTask+0x262>
							{
								pE->m_Count = pE->m_Ticks;
    2200:	83 81       	ldd	r24, Z+3	; 0x03
    2202:	84 83       	std	Z+4, r24	; 0x04
								ppSequencers[i]->m_CurPos++;
    2204:	ff ef       	ldi	r31, 0xFF	; 255
    2206:	6f 1a       	sub	r6, r31
    2208:	7f 0a       	sbc	r7, r31
    220a:	d6 01       	movw	r26, r12
    220c:	13 96       	adiw	r26, 0x03	; 3
    220e:	7c 92       	st	X, r7
    2210:	6e 92       	st	-X, r6
    2212:	12 97       	sbiw	r26, 0x02	; 2
								if(ppSequencers[i]->m_CurPos == ppSequencers[i]->m_nSteps)
    2214:	8d 91       	ld	r24, X+
    2216:	9c 91       	ld	r25, X
    2218:	11 97       	sbiw	r26, 0x01	; 1
    221a:	68 16       	cp	r6, r24
    221c:	79 06       	cpc	r7, r25
    221e:	21 f4       	brne	.+8      	; 0x2228 <SeqTask+0x262>
									ppSequencers[i]->m_CurPos = 0;
    2220:	13 96       	adiw	r26, 0x03	; 3
    2222:	1c 92       	st	X, r1
    2224:	1e 92       	st	-X, r1
    2226:	12 97       	sbiw	r26, 0x02	; 2
			case SEQMSG_ADDEVENT:
				break;
			case SEQMSG_TICK:
				if(Start)
				{
					for(i=0;i<4;++i)
    2228:	bf ef       	ldi	r27, 0xFF	; 255
    222a:	ab 1a       	sub	r10, r27
    222c:	bb 0a       	sbc	r11, r27
    222e:	e4 e0       	ldi	r30, 0x04	; 4
    2230:	ae 16       	cp	r10, r30
    2232:	b1 04       	cpc	r11, r1
    2234:	09 f0       	breq	.+2      	; 0x2238 <SeqTask+0x272>
    2236:	bd cf       	rjmp	.-134    	; 0x21b2 <SeqTask+0x1ec>
    2238:	3c c0       	rjmp	.+120    	; 0x22b2 <SeqTask+0x2ec>
						}
					}
				}
				break;
			case SEQMSG_CREATE:
				ppSequencers[c.m_Create->m_SeqID]->m_nSteps = c.m_Create->m_Size;
    223a:	ad 81       	ldd	r26, Y+5	; 0x05
    223c:	be 81       	ldd	r27, Y+6	; 0x06
    223e:	1c 96       	adiw	r26, 0x0c	; 12
    2240:	ed 91       	ld	r30, X+
    2242:	fc 91       	ld	r31, X
    2244:	1d 97       	sbiw	r26, 0x0d	; 13
    2246:	ee 0f       	add	r30, r30
    2248:	ff 1f       	adc	r31, r31
    224a:	e8 0d       	add	r30, r8
    224c:	f9 1d       	adc	r31, r9
    224e:	00 81       	ld	r16, Z
    2250:	11 81       	ldd	r17, Z+1	; 0x01
    2252:	1e 96       	adiw	r26, 0x0e	; 14
    2254:	8d 91       	ld	r24, X+
    2256:	9c 91       	ld	r25, X
    2258:	1f 97       	sbiw	r26, 0x0f	; 15
    225a:	f8 01       	movw	r30, r16
    225c:	91 83       	std	Z+1, r25	; 0x01
    225e:	80 83       	st	Z, r24
				ppSequencers[c.m_Create->m_SeqID]->m_pSteps = (SEQ_EVENT *)malloc(sizeof(SEQ_EVENT) * c.m_Create->m_Size);
    2260:	9c 01       	movw	r18, r24
    2262:	22 0f       	add	r18, r18
    2264:	33 1f       	adc	r19, r19
    2266:	22 0f       	add	r18, r18
    2268:	33 1f       	adc	r19, r19
    226a:	82 0f       	add	r24, r18
    226c:	93 1f       	adc	r25, r19
    226e:	0e 94 7b 07 	call	0xef6	; 0xef6 <malloc>
    2272:	d8 01       	movw	r26, r16
    2274:	15 96       	adiw	r26, 0x05	; 5
    2276:	9c 93       	st	X, r25
    2278:	8e 93       	st	-X, r24
    227a:	14 97       	sbiw	r26, 0x04	; 4
				break;
    227c:	1a c0       	rjmp	.+52     	; 0x22b2 <SeqTask+0x2ec>
			case SEQMSG_GET_NEVENTS:
				buff[0] = ppSequencers[c.m_pSetEvent->m_SeqID]->m_nSteps;
    227e:	ad 81       	ldd	r26, Y+5	; 0x05
    2280:	be 81       	ldd	r27, Y+6	; 0x06
    2282:	1c 96       	adiw	r26, 0x0c	; 12
    2284:	ed 91       	ld	r30, X+
    2286:	fc 91       	ld	r31, X
    2288:	1d 97       	sbiw	r26, 0x0d	; 13
    228a:	ee 0f       	add	r30, r30
    228c:	ff 1f       	adc	r31, r31
    228e:	e8 0d       	add	r30, r8
    2290:	f9 1d       	adc	r31, r9
    2292:	01 90       	ld	r0, Z+
    2294:	f0 81       	ld	r31, Z
    2296:	e0 2d       	mov	r30, r0
    2298:	80 81       	ld	r24, Z
    229a:	f7 01       	movw	r30, r14
    229c:	80 83       	st	Z, r24
				SendSysEx(buff,1,SYSEX_CMD_GETNEVENTS);
    229e:	49 e0       	ldi	r20, 0x09	; 9
    22a0:	50 e0       	ldi	r21, 0x00	; 0
    22a2:	61 e0       	ldi	r22, 0x01	; 1
    22a4:	70 e0       	ldi	r23, 0x00	; 0
    22a6:	c7 01       	movw	r24, r14
    22a8:	4e de       	rcall	.-868    	; 0x1f46 <SendSysEx>
				break;
    22aa:	03 c0       	rjmp	.+6      	; 0x22b2 <SeqTask+0x2ec>
			case SEQMSG_CONTINUE:
				Start = 1;
    22ac:	44 24       	eor	r4, r4
    22ae:	43 94       	inc	r4
    22b0:	51 2c       	mov	r5, r1
//				SetGatePort(GATE_STARTSTOP);
				break;
		}
		free(pMSG);
    22b2:	8d 81       	ldd	r24, Y+5	; 0x05
    22b4:	9e 81       	ldd	r25, Y+6	; 0x06
    22b6:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <free>
	}
    22ba:	d2 ce       	rjmp	.-604    	; 0x2060 <SeqTask+0x9a>

000022bc <InitSeq>:
 }

 void InitSeq(void)
 {
    22bc:	0f 93       	push	r16
    22be:	1f 93       	push	r17
	pSeqMsg = MqInit(64,"SeqMsg");
    22c0:	65 ea       	ldi	r22, 0xA5	; 165
    22c2:	71 e0       	ldi	r23, 0x01	; 1
    22c4:	80 e4       	ldi	r24, 0x40	; 64
    22c6:	90 e0       	ldi	r25, 0x00	; 0
    22c8:	5d d8       	rcall	.-3910   	; 0x1384 <MqInit>
    22ca:	90 93 18 03 	sts	0x0318, r25	; 0x800318 <pSeqMsg+0x1>
    22ce:	80 93 17 03 	sts	0x0317, r24	; 0x800317 <pSeqMsg>
	pSeqTaskTCB = NewTask(SeqTask,512,2,"Seq",0);
    22d2:	00 e0       	ldi	r16, 0x00	; 0
    22d4:	10 e0       	ldi	r17, 0x00	; 0
    22d6:	2c ea       	ldi	r18, 0xAC	; 172
    22d8:	31 e0       	ldi	r19, 0x01	; 1
    22da:	42 e0       	ldi	r20, 0x02	; 2
    22dc:	50 e0       	ldi	r21, 0x00	; 0
    22de:	60 e0       	ldi	r22, 0x00	; 0
    22e0:	72 e0       	ldi	r23, 0x02	; 2
    22e2:	83 ee       	ldi	r24, 0xE3	; 227
    22e4:	9f e0       	ldi	r25, 0x0F	; 15
    22e6:	0e 94 bf 01 	call	0x37e	; 0x37e <NewTask>
    22ea:	90 93 16 03 	sts	0x0316, r25	; 0x800316 <pSeqTaskTCB+0x1>
    22ee:	80 93 15 03 	sts	0x0315, r24	; 0x800315 <pSeqTaskTCB>
	Insert(&ActiveTasks,pSeqTaskTCB);
    22f2:	bc 01       	movw	r22, r24
    22f4:	86 ee       	ldi	r24, 0xE6	; 230
    22f6:	91 e0       	ldi	r25, 0x01	; 1
    22f8:	41 dd       	rcall	.-1406   	; 0x1d7c <Insert>
    22fa:	1f 91       	pop	r17
    22fc:	0f 91       	pop	r16
    22fe:	08 95       	ret

00002300 <InitSpi>:
void InitSpi(void)
{
	// setup SPI interface :
	// master mode
	// enable SPI
	SPCR |= BIT(MSTR)  | BIT(SPE);
    2300:	8c b5       	in	r24, 0x2c	; 44
    2302:	80 65       	ori	r24, 0x50	; 80
    2304:	8c bd       	out	0x2c, r24	; 44
	// clock = f/16
	// select clock phase positive-going in middle of data
	// Data order MSB first
	SPCR &= ~(BIT(CPOL) | BIT(DORD) );
    2306:	8c b5       	in	r24, 0x2c	; 44
    2308:	87 7d       	andi	r24, 0xD7	; 215
    230a:	8c bd       	out	0x2c, r24	; 44
    230c:	08 95       	ret

0000230e <PortFull>:

int PortFull(void)
{
	char a;
	int retval=0;
	a = SPSR;
    230e:	8d b5       	in	r24, 0x2d	; 45
	if(a & 0x80) retval = 1;
	return retval;
    2310:	08 2e       	mov	r0, r24
    2312:	00 0c       	add	r0, r0
    2314:	99 0b       	sbc	r25, r25
}
    2316:	89 2f       	mov	r24, r25
    2318:	88 1f       	adc	r24, r24
    231a:	88 27       	eor	r24, r24
    231c:	88 1f       	adc	r24, r24
    231e:	90 e0       	ldi	r25, 0x00	; 0
    2320:	08 95       	ret

00002322 <WriteSpi>:
	parameters:
*************************************************/

void WriteSpi(char v)
{
	SPDR = v;
    2322:	8e bd       	out	0x2e, r24	; 46
	while(!PortFull());
    2324:	f4 df       	rcall	.-24     	; 0x230e <PortFull>
    2326:	89 2b       	or	r24, r25
    2328:	e9 f3       	breq	.-6      	; 0x2324 <WriteSpi+0x2>
}
    232a:	08 95       	ret

0000232c <WriteDAC>:

void WriteDAC(int v,int Sel)
{
    232c:	ff 92       	push	r15
    232e:	0f 93       	push	r16
    2330:	1f 93       	push	r17
    2332:	cf 93       	push	r28
    2334:	df 93       	push	r29
    2336:	00 d0       	rcall	.+0      	; 0x2338 <WriteDAC+0xc>
    2338:	cd b7       	in	r28, 0x3d	; 61
    233a:	de b7       	in	r29, 0x3e	; 62
    233c:	9a 83       	std	Y+2, r25	; 0x02
    233e:	89 83       	std	Y+1, r24	; 0x01
    2340:	8b 01       	movw	r16, r22
	char t;
	char *b = (char *)&v;
	char sr;

	t = b[0];
	b[0] = b[1];
    2342:	8a 81       	ldd	r24, Y+2	; 0x02
	b[1] = t;
    2344:	99 81       	ldd	r25, Y+1	; 0x01
    2346:	9a 83       	std	Y+2, r25	; 0x02
	SPDR = b[0];
    2348:	8e bd       	out	0x2e, r24	; 46
	while(!PortFull());
    234a:	e1 df       	rcall	.-62     	; 0x230e <PortFull>
    234c:	89 2b       	or	r24, r25
    234e:	e9 f3       	breq	.-6      	; 0x234a <WriteDAC+0x1e>
	SPDR = b[1];
    2350:	8a 81       	ldd	r24, Y+2	; 0x02
	while(!PortFull());
    2352:	8e bd       	out	0x2e, r24	; 46
    2354:	dc df       	rcall	.-72     	; 0x230e <PortFull>
    2356:	89 2b       	or	r24, r25
    2358:	e9 f3       	breq	.-6      	; 0x2354 <WriteDAC+0x28>
	sr = Disable();
    235a:	0e 94 7f 00 	call	0xfe	; 0xfe <Disable>
    235e:	f8 2e       	mov	r15, r24
	ClearPortA(PORTA_LD_DAC);
    2360:	83 e0       	ldi	r24, 0x03	; 3
    2362:	90 e0       	ldi	r25, 0x00	; 0
    2364:	5a db       	rcall	.-2380   	; 0x1a1a <ClearPortA>
	SetPortA(PORTA_LD_DAC);
    2366:	83 e0       	ldi	r24, 0x03	; 3
    2368:	90 e0       	ldi	r25, 0x00	; 0
    236a:	40 db       	rcall	.-2432   	; 0x19ec <SetPortA>
    236c:	8f 2d       	mov	r24, r15
	Enable(sr);
    236e:	0e 94 83 00 	call	0x106	; 0x106 <Enable>
	SetDacSel(Sel);
    2372:	c8 01       	movw	r24, r16
    2374:	6a db       	rcall	.-2348   	; 0x1a4a <SetDacSel>
    2376:	0f 90       	pop	r0
}
    2378:	0f 90       	pop	r0
    237a:	df 91       	pop	r29
    237c:	cf 91       	pop	r28
    237e:	1f 91       	pop	r17
    2380:	0f 91       	pop	r16
    2382:	ff 90       	pop	r15
    2384:	08 95       	ret

00002386 <WriteADSRstate>:
    2386:	cf 93       	push	r28
{
	char portB;
	char sr;

	char *b = (char *)&ADSRshad;
	switch(v)
    2388:	81 30       	cpi	r24, 0x01	; 1
    238a:	91 05       	cpc	r25, r1
    238c:	79 f1       	breq	.+94     	; 0x23ec <WriteADSRstate+0x66>
    238e:	82 30       	cpi	r24, 0x02	; 2
    2390:	91 05       	cpc	r25, r1
    2392:	09 f4       	brne	.+2      	; 0x2396 <WriteADSRstate+0x10>
    2394:	53 c0       	rjmp	.+166    	; 0x243c <WriteADSRstate+0xb6>
    2396:	89 2b       	or	r24, r25
    2398:	09 f0       	breq	.+2      	; 0x239c <WriteADSRstate+0x16>
    239a:	77 c0       	rjmp	.+238    	; 0x248a <WriteADSRstate+0x104>
	{
		case ADSR_STATE_RELEASE:
			if(unit)
    239c:	67 2b       	or	r22, r23
    239e:	99 f0       	breq	.+38     	; 0x23c6 <WriteADSRstate+0x40>
			{
				ADSRshad |= BIT(SPIDATA_EG1_STATE_A) | BIT(SPIDATA_EG1_STATE_B) | BIT(SPIDATA_EG1_STATE_C);
    23a0:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <ADSRshad>
    23a4:	90 91 c9 01 	lds	r25, 0x01C9	; 0x8001c9 <ADSRshad+0x1>
    23a8:	87 60       	ori	r24, 0x07	; 7
    23aa:	90 93 c9 01 	sts	0x01C9, r25	; 0x8001c9 <ADSRshad+0x1>
    23ae:	80 93 c8 01 	sts	0x01C8, r24	; 0x8001c8 <ADSRshad>
				ADSRshad &= ~BIT(SPIDATA_EG1_STATE_C);
    23b2:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <ADSRshad>
    23b6:	90 91 c9 01 	lds	r25, 0x01C9	; 0x8001c9 <ADSRshad+0x1>
    23ba:	8b 7f       	andi	r24, 0xFB	; 251
    23bc:	90 93 c9 01 	sts	0x01C9, r25	; 0x8001c9 <ADSRshad+0x1>
    23c0:	80 93 c8 01 	sts	0x01C8, r24	; 0x8001c8 <ADSRshad>
    23c4:	62 c0       	rjmp	.+196    	; 0x248a <WriteADSRstate+0x104>
			}
			else
			{
				ADSRshad |= BIT(SPIDATA_EG2_STATE_A) | BIT(SPIDATA_EG2_STATE_B) | BIT(SPIDATA_EG2_STATE_C);
    23c6:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <ADSRshad>
    23ca:	90 91 c9 01 	lds	r25, 0x01C9	; 0x8001c9 <ADSRshad+0x1>
    23ce:	88 63       	ori	r24, 0x38	; 56
    23d0:	90 93 c9 01 	sts	0x01C9, r25	; 0x8001c9 <ADSRshad+0x1>
    23d4:	80 93 c8 01 	sts	0x01C8, r24	; 0x8001c8 <ADSRshad>
				ADSRshad &= ~BIT(SPIDATA_EG2_STATE_C);
    23d8:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <ADSRshad>
    23dc:	90 91 c9 01 	lds	r25, 0x01C9	; 0x8001c9 <ADSRshad+0x1>
    23e0:	8f 7d       	andi	r24, 0xDF	; 223
    23e2:	90 93 c9 01 	sts	0x01C9, r25	; 0x8001c9 <ADSRshad+0x1>
    23e6:	80 93 c8 01 	sts	0x01C8, r24	; 0x8001c8 <ADSRshad>
    23ea:	4f c0       	rjmp	.+158    	; 0x248a <WriteADSRstate+0x104>
			}
			break;
		case ADSR_STATE_ATTACK:
			if(unit)
    23ec:	67 2b       	or	r22, r23
    23ee:	99 f0       	breq	.+38     	; 0x2416 <WriteADSRstate+0x90>
			{
				ADSRshad |= BIT(SPIDATA_EG1_STATE_A) | BIT(SPIDATA_EG1_STATE_B) | BIT(SPIDATA_EG1_STATE_C);
    23f0:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <ADSRshad>
    23f4:	90 91 c9 01 	lds	r25, 0x01C9	; 0x8001c9 <ADSRshad+0x1>
    23f8:	87 60       	ori	r24, 0x07	; 7
    23fa:	90 93 c9 01 	sts	0x01C9, r25	; 0x8001c9 <ADSRshad+0x1>
    23fe:	80 93 c8 01 	sts	0x01C8, r24	; 0x8001c8 <ADSRshad>
				ADSRshad &= ~BIT(SPIDATA_EG1_STATE_A);
    2402:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <ADSRshad>
    2406:	90 91 c9 01 	lds	r25, 0x01C9	; 0x8001c9 <ADSRshad+0x1>
    240a:	8e 7f       	andi	r24, 0xFE	; 254
    240c:	90 93 c9 01 	sts	0x01C9, r25	; 0x8001c9 <ADSRshad+0x1>
    2410:	80 93 c8 01 	sts	0x01C8, r24	; 0x8001c8 <ADSRshad>
    2414:	3a c0       	rjmp	.+116    	; 0x248a <WriteADSRstate+0x104>
			}
			else
			{
				ADSRshad |= BIT(SPIDATA_EG2_STATE_A) | BIT(SPIDATA_EG2_STATE_B) | BIT(SPIDATA_EG2_STATE_C);
    2416:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <ADSRshad>
    241a:	90 91 c9 01 	lds	r25, 0x01C9	; 0x8001c9 <ADSRshad+0x1>
    241e:	88 63       	ori	r24, 0x38	; 56
    2420:	90 93 c9 01 	sts	0x01C9, r25	; 0x8001c9 <ADSRshad+0x1>
    2424:	80 93 c8 01 	sts	0x01C8, r24	; 0x8001c8 <ADSRshad>
				ADSRshad &= ~BIT(SPIDATA_EG2_STATE_A);
    2428:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <ADSRshad>
    242c:	90 91 c9 01 	lds	r25, 0x01C9	; 0x8001c9 <ADSRshad+0x1>
    2430:	87 7f       	andi	r24, 0xF7	; 247
    2432:	90 93 c9 01 	sts	0x01C9, r25	; 0x8001c9 <ADSRshad+0x1>
    2436:	80 93 c8 01 	sts	0x01C8, r24	; 0x8001c8 <ADSRshad>
    243a:	27 c0       	rjmp	.+78     	; 0x248a <WriteADSRstate+0x104>
			}
			break;
		case ADSR_STATE_SUSTAIN:
			if(unit)
    243c:	67 2b       	or	r22, r23
    243e:	99 f0       	breq	.+38     	; 0x2466 <WriteADSRstate+0xe0>
			{
				ADSRshad |= BIT(SPIDATA_EG1_STATE_A) | BIT(SPIDATA_EG1_STATE_B) | BIT(SPIDATA_EG1_STATE_C);
    2440:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <ADSRshad>
    2444:	90 91 c9 01 	lds	r25, 0x01C9	; 0x8001c9 <ADSRshad+0x1>
    2448:	87 60       	ori	r24, 0x07	; 7
    244a:	90 93 c9 01 	sts	0x01C9, r25	; 0x8001c9 <ADSRshad+0x1>
    244e:	80 93 c8 01 	sts	0x01C8, r24	; 0x8001c8 <ADSRshad>
				ADSRshad &= ~BIT(SPIDATA_EG1_STATE_B);
    2452:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <ADSRshad>
    2456:	90 91 c9 01 	lds	r25, 0x01C9	; 0x8001c9 <ADSRshad+0x1>
    245a:	8d 7f       	andi	r24, 0xFD	; 253
    245c:	90 93 c9 01 	sts	0x01C9, r25	; 0x8001c9 <ADSRshad+0x1>
    2460:	80 93 c8 01 	sts	0x01C8, r24	; 0x8001c8 <ADSRshad>
    2464:	12 c0       	rjmp	.+36     	; 0x248a <WriteADSRstate+0x104>
			}
			else
			{
				ADSRshad |= BIT(SPIDATA_EG2_STATE_A) | BIT(SPIDATA_EG2_STATE_B) | BIT(SPIDATA_EG2_STATE_C);
    2466:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <ADSRshad>
    246a:	90 91 c9 01 	lds	r25, 0x01C9	; 0x8001c9 <ADSRshad+0x1>
    246e:	88 63       	ori	r24, 0x38	; 56
    2470:	90 93 c9 01 	sts	0x01C9, r25	; 0x8001c9 <ADSRshad+0x1>
    2474:	80 93 c8 01 	sts	0x01C8, r24	; 0x8001c8 <ADSRshad>
				ADSRshad &= ~BIT(SPIDATA_EG2_STATE_B);
    2478:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <ADSRshad>
    247c:	90 91 c9 01 	lds	r25, 0x01C9	; 0x8001c9 <ADSRshad+0x1>
    2480:	8f 7e       	andi	r24, 0xEF	; 239
    2482:	90 93 c9 01 	sts	0x01C9, r25	; 0x8001c9 <ADSRshad+0x1>
    2486:	80 93 c8 01 	sts	0x01C8, r24	; 0x8001c8 <ADSRshad>
			}
			break;
	}
	while(!PortFull());
    248a:	41 df       	rcall	.-382    	; 0x230e <PortFull>
    248c:	89 2b       	or	r24, r25
    248e:	e9 f3       	breq	.-6      	; 0x248a <WriteADSRstate+0x104>
	SPDR = b[0];
    2490:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <ADSRshad>
	while(!PortFull());
    2494:	8e bd       	out	0x2e, r24	; 46
    2496:	3b df       	rcall	.-394    	; 0x230e <PortFull>
    2498:	89 2b       	or	r24, r25
    249a:	e9 f3       	breq	.-6      	; 0x2496 <WriteADSRstate+0x110>
	portB = PORTB;
    249c:	c5 b1       	in	r28, 0x05	; 5
	sr = Disable();
    249e:	0e 94 7f 00 	call	0xfe	; 0xfe <Disable>
	portB &= ~BIT(PORTB_LD_OUTPORT);
    24a2:	9c 2f       	mov	r25, r28
    24a4:	9e 7f       	andi	r25, 0xFE	; 254
	PORTB = portB;
    24a6:	95 b9       	out	0x05, r25	; 5
	portB |= BIT(PORTB_LD_OUTPORT);
    24a8:	91 60       	ori	r25, 0x01	; 1
	PORTB = portB;
    24aa:	95 b9       	out	0x05, r25	; 5
	Enable(sr);
    24ac:	0e 94 83 00 	call	0x106	; 0x106 <Enable>
}
    24b0:	cf 91       	pop	r28
    24b2:	08 95       	ret

000024b4 <StartOS>:
	// Remove task from priorty queue
	// Restore its context
	// and then jump to the first task using
	// return from subroutine
	//---------------------------------------
	Delete(&ActiveTasks,(void **)&pNextTask);
    24b4:	64 ef       	ldi	r22, 0xF4	; 244
    24b6:	71 e0       	ldi	r23, 0x01	; 1
    24b8:	86 ee       	ldi	r24, 0xE6	; 230
    24ba:	91 e0       	ldi	r25, 0x01	; 1
    24bc:	ca dc       	rcall	.-1644   	; 0x1e52 <Delete>
	pCurrentTask = pNextTask;
    24be:	80 91 f4 01 	lds	r24, 0x01F4	; 0x8001f4 <pNextTask>
    24c2:	90 91 f5 01 	lds	r25, 0x01F5	; 0x8001f5 <pNextTask+0x1>
    24c6:	90 93 f1 01 	sts	0x01F1, r25	; 0x8001f1 <pCurrentTask+0x1>
    24ca:	80 93 f0 01 	sts	0x01F0, r24	; 0x8001f0 <pCurrentTask>
	RESTORE_CONTEXT();
    24ce:	a0 91 f4 01 	lds	r26, 0x01F4	; 0x8001f4 <pNextTask>
    24d2:	b0 91 f5 01 	lds	r27, 0x01F5	; 0x8001f5 <pNextTask+0x1>
    24d6:	cd 91       	ld	r28, X+
    24d8:	cd bf       	out	0x3d, r28	; 61
    24da:	dd 91       	ld	r29, X+
    24dc:	de bf       	out	0x3e, r29	; 62
    24de:	0f 90       	pop	r0
    24e0:	1f 90       	pop	r1
    24e2:	2f 90       	pop	r2
    24e4:	3f 90       	pop	r3
    24e6:	4f 90       	pop	r4
    24e8:	5f 90       	pop	r5
    24ea:	6f 90       	pop	r6
    24ec:	7f 90       	pop	r7
    24ee:	8f 90       	pop	r8
    24f0:	9f 90       	pop	r9
    24f2:	af 90       	pop	r10
    24f4:	bf 90       	pop	r11
    24f6:	cf 90       	pop	r12
    24f8:	df 90       	pop	r13
    24fa:	ef 90       	pop	r14
    24fc:	ff 90       	pop	r15
    24fe:	0f 91       	pop	r16
    2500:	1f 91       	pop	r17
    2502:	2f 91       	pop	r18
    2504:	3f 91       	pop	r19
    2506:	4f 91       	pop	r20
    2508:	5f 91       	pop	r21
    250a:	6f 91       	pop	r22
    250c:	7f 91       	pop	r23
    250e:	8f 91       	pop	r24
    2510:	9f 91       	pop	r25
    2512:	af 91       	pop	r26
    2514:	bf 91       	pop	r27
    2516:	cf 91       	pop	r28
    2518:	df 91       	pop	r29
    251a:	ef 91       	pop	r30
    251c:	ff 91       	pop	r31
    251e:	f7 fd       	sbrc	r31, 7
    2520:	03 c0       	rjmp	.+6      	; 0x2528 <irqen>
    2522:	ff bf       	out	0x3f, r31	; 63
    2524:	ff 91       	pop	r31
    2526:	08 95       	ret

00002528 <irqen>:
    2528:	ff 77       	andi	r31, 0x7F	; 127
    252a:	ff bf       	out	0x3f, r31	; 63
    252c:	ff 91       	pop	r31
    252e:	18 95       	reti

00002530 <TimeDelay>:
// return value:
//	returns non zero value if something happened out of the ordinary
//--------------------------------------------------------------------------

int TimeDelay(int mSec)
{
    2530:	ef 92       	push	r14
    2532:	ff 92       	push	r15
    2534:	0f 93       	push	r16
    2536:	1f 93       	push	r17
    2538:	cf 93       	push	r28
    253a:	df 93       	push	r29
    253c:	7c 01       	movw	r14, r24
	int retval;
	static int DCount = 0;	//keeps track of the number of times its called
	SEMAPHORE *e;					//pointer to event control block for semaphore

	char *s = malloc(32);	//get a new block of memory
    253e:	80 e2       	ldi	r24, 0x20	; 32
    2540:	90 e0       	ldi	r25, 0x00	; 0
    2542:	0e 94 7b 07 	call	0xef6	; 0xef6 <malloc>
    2546:	d8 2f       	mov	r29, r24
    2548:	c9 2f       	mov	r28, r25
	s[0] = 'D';				//create name for semaphore
    254a:	68 2f       	mov	r22, r24
    254c:	79 2f       	mov	r23, r25
    254e:	84 e4       	ldi	r24, 0x44	; 68
    2550:	fb 01       	movw	r30, r22
    2552:	81 93       	st	Z+, r24
    2554:	bf 01       	movw	r22, r30
	itoa(DCount++,&s[1],10);
    2556:	80 91 ca 01 	lds	r24, 0x01CA	; 0x8001ca <DCount.2226>
    255a:	90 91 cb 01 	lds	r25, 0x01CB	; 0x8001cb <DCount.2226+0x1>
    255e:	9c 01       	movw	r18, r24
    2560:	2f 5f       	subi	r18, 0xFF	; 255
    2562:	3f 4f       	sbci	r19, 0xFF	; 255
    2564:	30 93 cb 01 	sts	0x01CB, r19	; 0x8001cb <DCount.2226+0x1>
    2568:	20 93 ca 01 	sts	0x01CA, r18	; 0x8001ca <DCount.2226>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
    256c:	4a e0       	ldi	r20, 0x0A	; 10
    256e:	5a d2       	rcall	.+1204   	; 0x2a24 <__itoa_ncheck>
	e = NewSemaphore(0,SEMAPHORE_MODE_TIMEOUT,s);	//create semaphore
    2570:	4d 2f       	mov	r20, r29
    2572:	5c 2f       	mov	r21, r28
    2574:	61 e0       	ldi	r22, 0x01	; 1
    2576:	70 e0       	ldi	r23, 0x00	; 0
    2578:	80 e0       	ldi	r24, 0x00	; 0
    257a:	90 e0       	ldi	r25, 0x00	; 0
    257c:	0e 94 b9 00 	call	0x172	; 0x172 <NewSemaphore>
    2580:	8c 01       	movw	r16, r24
	free(s);			//return memory block
    2582:	8d 2f       	mov	r24, r29
    2584:	9c 2f       	mov	r25, r28
    2586:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <free>
	retval = PendSemaphore(e,mSec);	//pend for time delay period
    258a:	b7 01       	movw	r22, r14
    258c:	c8 01       	movw	r24, r16
    258e:	bb d9       	rcall	.-3210   	; 0x1906 <PendSemaphore>
    2590:	ec 01       	movw	r28, r24
	DeleteSemaphore(e);				//return semaphore back to pool
    2592:	c8 01       	movw	r24, r16
    2594:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <DeleteSemaphore>
	return retval;					//exit
}
    2598:	ce 01       	movw	r24, r28
    259a:	df 91       	pop	r29
    259c:	cf 91       	pop	r28
    259e:	1f 91       	pop	r17
    25a0:	0f 91       	pop	r16
    25a2:	ff 90       	pop	r15
    25a4:	ef 90       	pop	r14
    25a6:	08 95       	ret

000025a8 <TimerTicker>:
**  Control Blocks looking for timed out events.                      **
**                                                                    **
***********************************************************************/

void TimerTicker(void)
{
    25a8:	ef 92       	push	r14
    25aa:	ff 92       	push	r15
    25ac:	0f 93       	push	r16
    25ae:	1f 93       	push	r17
    25b0:	cf 93       	push	r28
    25b2:	df 93       	push	r29
	TCB *t,**prev;

	//------------------------------
	// Increment the time stamp
	//------------------------------
	++TStamp;
    25b4:	80 91 19 03 	lds	r24, 0x0319	; 0x800319 <TStamp>
    25b8:	90 91 1a 03 	lds	r25, 0x031A	; 0x80031a <TStamp+0x1>
    25bc:	01 96       	adiw	r24, 0x01	; 1
    25be:	90 93 1a 03 	sts	0x031A, r25	; 0x80031a <TStamp+0x1>
    25c2:	80 93 19 03 	sts	0x0319, r24	; 0x800319 <TStamp>
	// gone to zero, put the tasks that
	// are waiting on those semaphores
	// back into the queue so that they
	// can execute.
	//-----------------------------------
	for(e = pTimeoutList;e;e=e->Tnext)	//go through whole list
    25c6:	e0 90 e4 01 	lds	r14, 0x01E4	; 0x8001e4 <pTimeoutList>
    25ca:	f0 90 e5 01 	lds	r15, 0x01E5	; 0x8001e5 <pTimeoutList+0x1>
    25ce:	e1 14       	cp	r14, r1
    25d0:	f1 04       	cpc	r15, r1
    25d2:	a9 f1       	breq	.+106    	; 0x263e <TimerTicker+0x96>
			if(t->timeout > 0)	//if less than zero, infinite timeout
			{
				if( --(t->timeout) <= 0)	//decrement timeout counter
				{
					e->EventCount++;		//fake a post
					t->status = EVENT_TIMEOUT;	//event caused by semaphore
    25d4:	0d ef       	ldi	r16, 0xFD	; 253
    25d6:	1f ef       	ldi	r17, 0xFF	; 255
	// back into the queue so that they
	// can execute.
	//-----------------------------------
	for(e = pTimeoutList;e;e=e->Tnext)	//go through whole list
	{
		for(prev = &(e->task_head),t = e->task_head;t;)
    25d8:	f7 01       	movw	r30, r14
    25da:	c0 81       	ld	r28, Z
    25dc:	d1 81       	ldd	r29, Z+1	; 0x01
    25de:	20 97       	sbiw	r28, 0x00	; 0
    25e0:	41 f1       	breq	.+80     	; 0x2632 <TimerTicker+0x8a>
		{
			if(t->timeout > 0)	//if less than zero, infinite timeout
    25e2:	88 89       	ldd	r24, Y+16	; 0x10
    25e4:	99 89       	ldd	r25, Y+17	; 0x11
    25e6:	18 16       	cp	r1, r24
    25e8:	19 06       	cpc	r1, r25
    25ea:	e4 f4       	brge	.+56     	; 0x2624 <TimerTicker+0x7c>
			{
				if( --(t->timeout) <= 0)	//decrement timeout counter
    25ec:	01 97       	sbiw	r24, 0x01	; 1
    25ee:	99 8b       	std	Y+17, r25	; 0x11
    25f0:	88 8b       	std	Y+16, r24	; 0x10
    25f2:	18 16       	cp	r1, r24
    25f4:	19 06       	cpc	r1, r25
    25f6:	b4 f0       	brlt	.+44     	; 0x2624 <TimerTicker+0x7c>
				{
					e->EventCount++;		//fake a post
    25f8:	d7 01       	movw	r26, r14
    25fa:	1a 96       	adiw	r26, 0x0a	; 10
    25fc:	8d 91       	ld	r24, X+
    25fe:	9c 91       	ld	r25, X
    2600:	1b 97       	sbiw	r26, 0x0b	; 11
    2602:	01 96       	adiw	r24, 0x01	; 1
    2604:	1b 96       	adiw	r26, 0x0b	; 11
    2606:	9c 93       	st	X, r25
    2608:	8e 93       	st	-X, r24
    260a:	1a 97       	sbiw	r26, 0x0a	; 10
					t->status = EVENT_TIMEOUT;	//event caused by semaphore
    260c:	19 87       	std	Y+9, r17	; 0x09
    260e:	08 87       	std	Y+8, r16	; 0x08
					*prev = t->next;	//remove t from list
    2610:	8c 89       	ldd	r24, Y+20	; 0x14
    2612:	9d 89       	ldd	r25, Y+21	; 0x15
    2614:	91 83       	std	Z+1, r25	; 0x01
    2616:	80 83       	st	Z, r24
					t->next = 0;
    2618:	1d 8a       	std	Y+21, r1	; 0x15
    261a:	1c 8a       	std	Y+20, r1	; 0x14
					Insert(&ActiveTasks,t);//put it back in queue
    261c:	be 01       	movw	r22, r28
    261e:	86 ee       	ldi	r24, 0xE6	; 230
    2620:	91 e0       	ldi	r25, 0x01	; 1
    2622:	ac db       	rcall	.-2216   	; 0x1d7c <Insert>
				}
			}
			prev = &(t->next);
    2624:	fe 01       	movw	r30, r28
    2626:	74 96       	adiw	r30, 0x14	; 20
			t = t->next;
    2628:	0c 88       	ldd	r0, Y+20	; 0x14
    262a:	dd 89       	ldd	r29, Y+21	; 0x15
    262c:	c0 2d       	mov	r28, r0
	// back into the queue so that they
	// can execute.
	//-----------------------------------
	for(e = pTimeoutList;e;e=e->Tnext)	//go through whole list
	{
		for(prev = &(e->task_head),t = e->task_head;t;)
    262e:	20 97       	sbiw	r28, 0x00	; 0
    2630:	c1 f6       	brne	.-80     	; 0x25e2 <TimerTicker+0x3a>
	// gone to zero, put the tasks that
	// are waiting on those semaphores
	// back into the queue so that they
	// can execute.
	//-----------------------------------
	for(e = pTimeoutList;e;e=e->Tnext)	//go through whole list
    2632:	f7 01       	movw	r30, r14
    2634:	e4 80       	ldd	r14, Z+4	; 0x04
    2636:	f5 80       	ldd	r15, Z+5	; 0x05
    2638:	e1 14       	cp	r14, r1
    263a:	f1 04       	cpc	r15, r1
    263c:	69 f6       	brne	.-102    	; 0x25d8 <TimerTicker+0x30>
			}
			prev = &(t->next);
			t = t->next;
		}
	}
}
    263e:	df 91       	pop	r29
    2640:	cf 91       	pop	r28
    2642:	1f 91       	pop	r17
    2644:	0f 91       	pop	r16
    2646:	ff 90       	pop	r15
    2648:	ef 90       	pop	r14
    264a:	08 95       	ret

0000264c <__vector_20>:
//	USART_Status
//*************************************************
int USART_Status(void)
{
	return RxDesc.m_nChar;
}
    264c:	ff 93       	push	r31
    264e:	ff b7       	in	r31, 0x3f	; 63
    2650:	f0 68       	ori	r31, 0x80	; 128
    2652:	ff 93       	push	r31
    2654:	ef 93       	push	r30
    2656:	df 93       	push	r29
    2658:	cf 93       	push	r28
    265a:	bf 93       	push	r27
    265c:	af 93       	push	r26
    265e:	9f 93       	push	r25
    2660:	8f 93       	push	r24
    2662:	7f 93       	push	r23
    2664:	6f 93       	push	r22
    2666:	5f 93       	push	r21
    2668:	4f 93       	push	r20
    266a:	3f 93       	push	r19
    266c:	2f 93       	push	r18
    266e:	1f 93       	push	r17
    2670:	0f 93       	push	r16
    2672:	ff 92       	push	r15
    2674:	ef 92       	push	r14
    2676:	df 92       	push	r13
    2678:	cf 92       	push	r12
    267a:	bf 92       	push	r11
    267c:	af 92       	push	r10
    267e:	9f 92       	push	r9
    2680:	8f 92       	push	r8
    2682:	7f 92       	push	r7
    2684:	6f 92       	push	r6
    2686:	5f 92       	push	r5
    2688:	4f 92       	push	r4
    268a:	3f 92       	push	r3
    268c:	2f 92       	push	r2
    268e:	1f 92       	push	r1
    2690:	11 24       	eor	r1, r1
    2692:	0f 92       	push	r0
    2694:	0e 94 c1 02 	call	0x582	; 0x582 <EnterInterrupt>
    2698:	e8 ed       	ldi	r30, 0xD8	; 216
    269a:	f1 e0       	ldi	r31, 0x01	; 1
    269c:	22 85       	ldd	r18, Z+10	; 0x0a
    269e:	33 85       	ldd	r19, Z+11	; 0x0b
    26a0:	84 81       	ldd	r24, Z+4	; 0x04
    26a2:	95 81       	ldd	r25, Z+5	; 0x05
    26a4:	28 17       	cp	r18, r24
    26a6:	39 07       	cpc	r19, r25
    26a8:	1c f5       	brge	.+70     	; 0x26f0 <__vector_20+0xa4>
    26aa:	ef 01       	movw	r28, r30
    26ac:	60 e0       	ldi	r22, 0x00	; 0
    26ae:	70 e0       	ldi	r23, 0x00	; 0
    26b0:	80 81       	ld	r24, Z
    26b2:	91 81       	ldd	r25, Z+1	; 0x01
    26b4:	74 da       	rcall	.-2840   	; 0x1b9e <PostSemaphore>
    26b6:	40 91 c6 00 	lds	r20, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    26ba:	6a 81       	ldd	r22, Y+2	; 0x02
    26bc:	7b 81       	ldd	r23, Y+3	; 0x03
    26be:	8e 81       	ldd	r24, Y+6	; 0x06
    26c0:	9f 81       	ldd	r25, Y+7	; 0x07
    26c2:	9c 01       	movw	r18, r24
    26c4:	2f 5f       	subi	r18, 0xFF	; 255
    26c6:	3f 4f       	sbci	r19, 0xFF	; 255
    26c8:	3f 83       	std	Y+7, r19	; 0x07
    26ca:	2e 83       	std	Y+6, r18	; 0x06
    26cc:	fb 01       	movw	r30, r22
    26ce:	e8 0f       	add	r30, r24
    26d0:	f9 1f       	adc	r31, r25
    26d2:	40 83       	st	Z, r20
    26d4:	8a 85       	ldd	r24, Y+10	; 0x0a
    26d6:	9b 85       	ldd	r25, Y+11	; 0x0b
    26d8:	01 96       	adiw	r24, 0x01	; 1
    26da:	9b 87       	std	Y+11, r25	; 0x0b
    26dc:	8a 87       	std	Y+10, r24	; 0x0a
    26de:	8c 81       	ldd	r24, Y+4	; 0x04
    26e0:	9d 81       	ldd	r25, Y+5	; 0x05
    26e2:	28 17       	cp	r18, r24
    26e4:	39 07       	cpc	r19, r25
    26e6:	21 f4       	brne	.+8      	; 0x26f0 <__vector_20+0xa4>
    26e8:	10 92 df 01 	sts	0x01DF, r1	; 0x8001df <RxDesc+0x7>
    26ec:	10 92 de 01 	sts	0x01DE, r1	; 0x8001de <RxDesc+0x6>
    26f0:	0e 94 50 02 	call	0x4a0	; 0x4a0 <ExitInterrupt>
    26f4:	0f 90       	pop	r0
    26f6:	1f 90       	pop	r1
    26f8:	2f 90       	pop	r2
    26fa:	3f 90       	pop	r3
    26fc:	4f 90       	pop	r4
    26fe:	5f 90       	pop	r5
    2700:	6f 90       	pop	r6
    2702:	7f 90       	pop	r7
    2704:	8f 90       	pop	r8
    2706:	9f 90       	pop	r9
    2708:	af 90       	pop	r10
    270a:	bf 90       	pop	r11
    270c:	cf 90       	pop	r12
    270e:	df 90       	pop	r13
    2710:	ef 90       	pop	r14
    2712:	ff 90       	pop	r15
    2714:	0f 91       	pop	r16
    2716:	1f 91       	pop	r17
    2718:	2f 91       	pop	r18
    271a:	3f 91       	pop	r19
    271c:	4f 91       	pop	r20
    271e:	5f 91       	pop	r21
    2720:	6f 91       	pop	r22
    2722:	7f 91       	pop	r23
    2724:	8f 91       	pop	r24
    2726:	9f 91       	pop	r25
    2728:	af 91       	pop	r26
    272a:	bf 91       	pop	r27
    272c:	cf 91       	pop	r28
    272e:	df 91       	pop	r29
    2730:	ef 91       	pop	r30
    2732:	ff 91       	pop	r31
    2734:	ff 77       	andi	r31, 0x7F	; 127
    2736:	ff bf       	out	0x3f, r31	; 63
    2738:	ff 91       	pop	r31
    273a:	18 95       	reti

0000273c <USART_GetC>:
//***************************************************
//	USART_GetC
//		Get a character from the uart
//***************************************************
int USART_GetC(void)
{
    273c:	0f 93       	push	r16
    273e:	1f 93       	push	r17
    2740:	cf 93       	push	r28
    2742:	df 93       	push	r29
	//-------------------------
	// if there are no chars
	// waiting for us, pend
	// until there are
	//-------------------------
	PendSemaphore(RxDesc.m_pSem,0);
    2744:	c8 ed       	ldi	r28, 0xD8	; 216
    2746:	d1 e0       	ldi	r29, 0x01	; 1
    2748:	60 e0       	ldi	r22, 0x00	; 0
    274a:	70 e0       	ldi	r23, 0x00	; 0
    274c:	88 81       	ld	r24, Y
    274e:	99 81       	ldd	r25, Y+1	; 0x01
    2750:	da d8       	rcall	.-3660   	; 0x1906 <PendSemaphore>
	sr = Disable();	//enter critical section
    2752:	0e 94 7f 00 	call	0xfe	; 0xfe <Disable>
	c = RxDesc.m_pBuffer[RxDesc.m_Tail++];
    2756:	6a 81       	ldd	r22, Y+2	; 0x02
    2758:	7b 81       	ldd	r23, Y+3	; 0x03
    275a:	28 85       	ldd	r18, Y+8	; 0x08
    275c:	39 85       	ldd	r19, Y+9	; 0x09
    275e:	a9 01       	movw	r20, r18
    2760:	4f 5f       	subi	r20, 0xFF	; 255
    2762:	5f 4f       	sbci	r21, 0xFF	; 255
    2764:	59 87       	std	Y+9, r21	; 0x09
    2766:	48 87       	std	Y+8, r20	; 0x08
    2768:	fb 01       	movw	r30, r22
    276a:	e2 0f       	add	r30, r18
    276c:	f3 1f       	adc	r31, r19
    276e:	00 81       	ld	r16, Z
    2770:	10 e0       	ldi	r17, 0x00	; 0
	RxDesc.m_nChar--;
    2772:	2a 85       	ldd	r18, Y+10	; 0x0a
    2774:	3b 85       	ldd	r19, Y+11	; 0x0b
    2776:	21 50       	subi	r18, 0x01	; 1
    2778:	31 09       	sbc	r19, r1
    277a:	3b 87       	std	Y+11, r19	; 0x0b
    277c:	2a 87       	std	Y+10, r18	; 0x0a
	if(RxDesc.m_Tail == RxDesc.m_Size)
    277e:	2c 81       	ldd	r18, Y+4	; 0x04
    2780:	3d 81       	ldd	r19, Y+5	; 0x05
    2782:	42 17       	cp	r20, r18
    2784:	53 07       	cpc	r21, r19
    2786:	21 f4       	brne	.+8      	; 0x2790 <USART_GetC+0x54>
		RxDesc.m_Tail = 0;
    2788:	10 92 e1 01 	sts	0x01E1, r1	; 0x8001e1 <RxDesc+0x9>
    278c:	10 92 e0 01 	sts	0x01E0, r1	; 0x8001e0 <RxDesc+0x8>
	Enable(sr);
    2790:	0e 94 83 00 	call	0x106	; 0x106 <Enable>
	return c;
}
    2794:	c8 01       	movw	r24, r16
    2796:	df 91       	pop	r29
    2798:	cf 91       	pop	r28
    279a:	1f 91       	pop	r17
    279c:	0f 91       	pop	r16
    279e:	08 95       	ret

000027a0 <UART_TXirq>:
	Enable(sr);
}

void UART_TXirq(char en)
{
	if(en)
    27a0:	88 23       	and	r24, r24
    27a2:	31 f0       	breq	.+12     	; 0x27b0 <UART_TXirq+0x10>
		UCSR0B |= BIT(UDRIE0);
    27a4:	e1 ec       	ldi	r30, 0xC1	; 193
    27a6:	f0 e0       	ldi	r31, 0x00	; 0
    27a8:	80 81       	ld	r24, Z
    27aa:	80 62       	ori	r24, 0x20	; 32
    27ac:	80 83       	st	Z, r24
    27ae:	08 95       	ret
	else
		UCSR0B &= ~BIT(UDRIE0);
    27b0:	e1 ec       	ldi	r30, 0xC1	; 193
    27b2:	f0 e0       	ldi	r31, 0x00	; 0
    27b4:	80 81       	ld	r24, Z
    27b6:	8f 7d       	andi	r24, 0xDF	; 223
    27b8:	80 83       	st	Z, r24
    27ba:	08 95       	ret

000027bc <__vector_21>:
//*************************************************

void USART0_UDRE_vect(void) __attribute__ ((naked));
void USART0_UDRE_vect(void)
{
	SAVE_IRQ();		//save context
    27bc:	ff 93       	push	r31
    27be:	ff b7       	in	r31, 0x3f	; 63
    27c0:	f0 68       	ori	r31, 0x80	; 128
    27c2:	ff 93       	push	r31
    27c4:	ef 93       	push	r30
    27c6:	df 93       	push	r29
    27c8:	cf 93       	push	r28
    27ca:	bf 93       	push	r27
    27cc:	af 93       	push	r26
    27ce:	9f 93       	push	r25
    27d0:	8f 93       	push	r24
    27d2:	7f 93       	push	r23
    27d4:	6f 93       	push	r22
    27d6:	5f 93       	push	r21
    27d8:	4f 93       	push	r20
    27da:	3f 93       	push	r19
    27dc:	2f 93       	push	r18
    27de:	1f 93       	push	r17
    27e0:	0f 93       	push	r16
    27e2:	ff 92       	push	r15
    27e4:	ef 92       	push	r14
    27e6:	df 92       	push	r13
    27e8:	cf 92       	push	r12
    27ea:	bf 92       	push	r11
    27ec:	af 92       	push	r10
    27ee:	9f 92       	push	r9
    27f0:	8f 92       	push	r8
    27f2:	7f 92       	push	r7
    27f4:	6f 92       	push	r6
    27f6:	5f 92       	push	r5
    27f8:	4f 92       	push	r4
    27fa:	3f 92       	push	r3
    27fc:	2f 92       	push	r2
    27fe:	1f 92       	push	r1
    2800:	11 24       	eor	r1, r1
    2802:	0f 92       	push	r0
	EnterInterrupt();
    2804:	0e 94 c1 02 	call	0x582	; 0x582 <EnterInterrupt>
	PostSemaphore(TxDesc.m_pSem,0);	//increment semaphore count
    2808:	cc ec       	ldi	r28, 0xCC	; 204
    280a:	d1 e0       	ldi	r29, 0x01	; 1
    280c:	60 e0       	ldi	r22, 0x00	; 0
    280e:	70 e0       	ldi	r23, 0x00	; 0
    2810:	88 81       	ld	r24, Y
    2812:	99 81       	ldd	r25, Y+1	; 0x01
    2814:	c4 d9       	rcall	.-3192   	; 0x1b9e <PostSemaphore>
									//this indicates the free space of the buffer
	UDR0 = TxDesc.m_pBuffer[TxDesc.m_Tail++];;	//send data
    2816:	2a 81       	ldd	r18, Y+2	; 0x02
    2818:	3b 81       	ldd	r19, Y+3	; 0x03
    281a:	88 85       	ldd	r24, Y+8	; 0x08
    281c:	99 85       	ldd	r25, Y+9	; 0x09
    281e:	ac 01       	movw	r20, r24
    2820:	4f 5f       	subi	r20, 0xFF	; 255
    2822:	5f 4f       	sbci	r21, 0xFF	; 255
    2824:	59 87       	std	Y+9, r21	; 0x09
    2826:	48 87       	std	Y+8, r20	; 0x08
    2828:	f9 01       	movw	r30, r18
    282a:	e8 0f       	add	r30, r24
    282c:	f9 1f       	adc	r31, r25
    282e:	80 81       	ld	r24, Z
    2830:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	TxDesc.m_nChar--;	//decrement number of chars in buffer
    2834:	8a 85       	ldd	r24, Y+10	; 0x0a
    2836:	9b 85       	ldd	r25, Y+11	; 0x0b
    2838:	01 97       	sbiw	r24, 0x01	; 1
    283a:	9b 87       	std	Y+11, r25	; 0x0b
    283c:	8a 87       	std	Y+10, r24	; 0x0a
	if(TxDesc.m_nChar == 0) UART_TXirq(0);	//disable interrupt if no chars
    283e:	89 2b       	or	r24, r25
    2840:	11 f4       	brne	.+4      	; 0x2846 <__vector_21+0x8a>
    2842:	80 e0       	ldi	r24, 0x00	; 0
    2844:	ad df       	rcall	.-166    	; 0x27a0 <UART_TXirq>
	if(TxDesc.m_Tail == TxDesc.m_Size) TxDesc.m_Tail = 0;	//update tail pointer
    2846:	ec ec       	ldi	r30, 0xCC	; 204
    2848:	f1 e0       	ldi	r31, 0x01	; 1
    284a:	20 85       	ldd	r18, Z+8	; 0x08
    284c:	31 85       	ldd	r19, Z+9	; 0x09
    284e:	84 81       	ldd	r24, Z+4	; 0x04
    2850:	95 81       	ldd	r25, Z+5	; 0x05
    2852:	28 17       	cp	r18, r24
    2854:	39 07       	cpc	r19, r25
    2856:	21 f4       	brne	.+8      	; 0x2860 <__vector_21+0xa4>
    2858:	10 92 d5 01 	sts	0x01D5, r1	; 0x8001d5 <TxDesc+0x9>
    285c:	10 92 d4 01 	sts	0x01D4, r1	; 0x8001d4 <TxDesc+0x8>
	ExitInterrupt();
    2860:	0e 94 50 02 	call	0x4a0	; 0x4a0 <ExitInterrupt>
	RESTORE_IRQ();
    2864:	0f 90       	pop	r0
    2866:	1f 90       	pop	r1
    2868:	2f 90       	pop	r2
    286a:	3f 90       	pop	r3
    286c:	4f 90       	pop	r4
    286e:	5f 90       	pop	r5
    2870:	6f 90       	pop	r6
    2872:	7f 90       	pop	r7
    2874:	8f 90       	pop	r8
    2876:	9f 90       	pop	r9
    2878:	af 90       	pop	r10
    287a:	bf 90       	pop	r11
    287c:	cf 90       	pop	r12
    287e:	df 90       	pop	r13
    2880:	ef 90       	pop	r14
    2882:	ff 90       	pop	r15
    2884:	0f 91       	pop	r16
    2886:	1f 91       	pop	r17
    2888:	2f 91       	pop	r18
    288a:	3f 91       	pop	r19
    288c:	4f 91       	pop	r20
    288e:	5f 91       	pop	r21
    2890:	6f 91       	pop	r22
    2892:	7f 91       	pop	r23
    2894:	8f 91       	pop	r24
    2896:	9f 91       	pop	r25
    2898:	af 91       	pop	r26
    289a:	bf 91       	pop	r27
    289c:	cf 91       	pop	r28
    289e:	df 91       	pop	r29
    28a0:	ef 91       	pop	r30
    28a2:	ff 91       	pop	r31
    28a4:	ff 77       	andi	r31, 0x7F	; 127
    28a6:	ff bf       	out	0x3f, r31	; 63
    28a8:	ff 91       	pop	r31
    28aa:	18 95       	reti

000028ac <USART_PutC>:
//
// Parameters:
//		c......character to output to Uart
//**********************************************
void USART_PutC(int c)
{
    28ac:	0f 93       	push	r16
    28ae:	1f 93       	push	r17
    28b0:	cf 93       	push	r28
    28b2:	df 93       	push	r29
    28b4:	08 2f       	mov	r16, r24
	char sr;

	PendSemaphore(TxDesc.m_pSem,0);
    28b6:	cc ec       	ldi	r28, 0xCC	; 204
    28b8:	d1 e0       	ldi	r29, 0x01	; 1
    28ba:	60 e0       	ldi	r22, 0x00	; 0
    28bc:	70 e0       	ldi	r23, 0x00	; 0
    28be:	88 81       	ld	r24, Y
    28c0:	99 81       	ldd	r25, Y+1	; 0x01
    28c2:	21 d8       	rcall	.-4030   	; 0x1906 <PendSemaphore>
	sr = Disable();
    28c4:	0e 94 7f 00 	call	0xfe	; 0xfe <Disable>
    28c8:	18 2f       	mov	r17, r24
	TxDesc.m_pBuffer[TxDesc.m_Head++] = c;
    28ca:	4a 81       	ldd	r20, Y+2	; 0x02
    28cc:	5b 81       	ldd	r21, Y+3	; 0x03
    28ce:	8e 81       	ldd	r24, Y+6	; 0x06
    28d0:	9f 81       	ldd	r25, Y+7	; 0x07
    28d2:	9c 01       	movw	r18, r24
    28d4:	2f 5f       	subi	r18, 0xFF	; 255
    28d6:	3f 4f       	sbci	r19, 0xFF	; 255
    28d8:	3f 83       	std	Y+7, r19	; 0x07
    28da:	2e 83       	std	Y+6, r18	; 0x06
    28dc:	fa 01       	movw	r30, r20
    28de:	e8 0f       	add	r30, r24
    28e0:	f9 1f       	adc	r31, r25
    28e2:	00 83       	st	Z, r16
	if(TxDesc.m_Head == TxDesc.m_Size) TxDesc.m_Head = 0;
    28e4:	8c 81       	ldd	r24, Y+4	; 0x04
    28e6:	9d 81       	ldd	r25, Y+5	; 0x05
    28e8:	28 17       	cp	r18, r24
    28ea:	39 07       	cpc	r19, r25
    28ec:	21 f4       	brne	.+8      	; 0x28f6 <USART_PutC+0x4a>
    28ee:	10 92 d3 01 	sts	0x01D3, r1	; 0x8001d3 <TxDesc+0x7>
    28f2:	10 92 d2 01 	sts	0x01D2, r1	; 0x8001d2 <TxDesc+0x6>
	TxDesc.m_nChar++;
    28f6:	ec ec       	ldi	r30, 0xCC	; 204
    28f8:	f1 e0       	ldi	r31, 0x01	; 1
    28fa:	82 85       	ldd	r24, Z+10	; 0x0a
    28fc:	93 85       	ldd	r25, Z+11	; 0x0b
    28fe:	01 96       	adiw	r24, 0x01	; 1
    2900:	93 87       	std	Z+11, r25	; 0x0b
    2902:	82 87       	std	Z+10, r24	; 0x0a
	UART_TXirq(1);
    2904:	81 e0       	ldi	r24, 0x01	; 1
    2906:	4c df       	rcall	.-360    	; 0x27a0 <UART_TXirq>
	Enable(sr);
    2908:	81 2f       	mov	r24, r17
    290a:	0e 94 83 00 	call	0x106	; 0x106 <Enable>
}
    290e:	df 91       	pop	r29
    2910:	cf 91       	pop	r28
    2912:	1f 91       	pop	r17
    2914:	0f 91       	pop	r16
    2916:	08 95       	ret

00002918 <USART_Init>:
	else
		UCSR0B &= ~BIT(UDRIE0);
}

void USART_Init(void)
{
    2918:	0f 93       	push	r16
    291a:	1f 93       	push	r17
    291c:	cf 93       	push	r28
    291e:	df 93       	push	r29
	//---------------------------------------
	// Transmit descriptor
	//---------------------------------------
	 TxDesc.m_pBuffer = malloc(UART_BUFFSIZE);
    2920:	80 e8       	ldi	r24, 0x80	; 128
    2922:	90 e0       	ldi	r25, 0x00	; 0
    2924:	0e 94 7b 07 	call	0xef6	; 0xef6 <malloc>
    2928:	cc ec       	ldi	r28, 0xCC	; 204
    292a:	d1 e0       	ldi	r29, 0x01	; 1
    292c:	9b 83       	std	Y+3, r25	; 0x03
    292e:	8a 83       	std	Y+2, r24	; 0x02
	 TxDesc.m_Head = 0;
    2930:	1f 82       	std	Y+7, r1	; 0x07
    2932:	1e 82       	std	Y+6, r1	; 0x06
	 TxDesc.m_Tail = 0;
    2934:	19 86       	std	Y+9, r1	; 0x09
    2936:	18 86       	std	Y+8, r1	; 0x08
	 TxDesc.m_nChar = 0;
    2938:	1b 86       	std	Y+11, r1	; 0x0b
    293a:	1a 86       	std	Y+10, r1	; 0x0a
	 TxDesc.m_Size = UART_BUFFSIZE;
    293c:	00 e8       	ldi	r16, 0x80	; 128
    293e:	10 e0       	ldi	r17, 0x00	; 0
    2940:	1d 83       	std	Y+5, r17	; 0x05
    2942:	0c 83       	std	Y+4, r16	; 0x04
	 TxDesc.m_pSem = NewSemaphore(UART_BUFFSIZE,SEMAPHORE_MODE_BLOCKING,"TxBlock");
    2944:	40 eb       	ldi	r20, 0xB0	; 176
    2946:	51 e0       	ldi	r21, 0x01	; 1
    2948:	60 e0       	ldi	r22, 0x00	; 0
    294a:	70 e0       	ldi	r23, 0x00	; 0
    294c:	80 e8       	ldi	r24, 0x80	; 128
    294e:	90 e0       	ldi	r25, 0x00	; 0
    2950:	0e 94 b9 00 	call	0x172	; 0x172 <NewSemaphore>
    2954:	99 83       	std	Y+1, r25	; 0x01
    2956:	88 83       	st	Y, r24
	 //---------------------------------------
	 // Receive Descriptor
	 //---------------------------------------
	 RxDesc.m_pBuffer = malloc(UART_BUFFSIZE);
    2958:	80 e8       	ldi	r24, 0x80	; 128
    295a:	90 e0       	ldi	r25, 0x00	; 0
    295c:	0e 94 7b 07 	call	0xef6	; 0xef6 <malloc>
    2960:	c8 ed       	ldi	r28, 0xD8	; 216
    2962:	d1 e0       	ldi	r29, 0x01	; 1
    2964:	9b 83       	std	Y+3, r25	; 0x03
    2966:	8a 83       	std	Y+2, r24	; 0x02
	 RxDesc.m_Head = 0;
    2968:	1f 82       	std	Y+7, r1	; 0x07
    296a:	1e 82       	std	Y+6, r1	; 0x06
	 RxDesc.m_Tail = 0;
    296c:	19 86       	std	Y+9, r1	; 0x09
    296e:	18 86       	std	Y+8, r1	; 0x08
	 RxDesc.m_nChar = 0;
    2970:	1b 86       	std	Y+11, r1	; 0x0b
    2972:	1a 86       	std	Y+10, r1	; 0x0a
	 RxDesc.m_pSem = NewSemaphore(0,SEMAPHORE_MODE_BLOCKING,"RxBlock");
    2974:	48 eb       	ldi	r20, 0xB8	; 184
    2976:	51 e0       	ldi	r21, 0x01	; 1
    2978:	60 e0       	ldi	r22, 0x00	; 0
    297a:	70 e0       	ldi	r23, 0x00	; 0
    297c:	80 e0       	ldi	r24, 0x00	; 0
    297e:	90 e0       	ldi	r25, 0x00	; 0
    2980:	0e 94 b9 00 	call	0x172	; 0x172 <NewSemaphore>
    2984:	99 83       	std	Y+1, r25	; 0x01
    2986:	88 83       	st	Y, r24
	 RxDesc.m_Size = UART_BUFFSIZE;
    2988:	1d 83       	std	Y+5, r17	; 0x05
    298a:	0c 83       	std	Y+4, r16	; 0x04
	 //---------------------------------
	 // Set Baud Rate
	 // UBRR = Fosc/(16 * Baud) - 1
	 //---------------------------------
	 UBRR0H = 0;
    298c:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	 UBRR0L = BAUD_MIDI; // 20000000/(16 * 31250) - 1
    2990:	87 e2       	ldi	r24, 0x27	; 39
    2992:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	 UCSR0A = 0;
    2996:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
	 //----------------------------------
	 // Enable TX and RX interrupt
	 //----------------------------------
	 UCSR0B = BIT(RXCIE0) | BIT(RXEN0) | BIT(TXEN0);
    299a:	88 e9       	ldi	r24, 0x98	; 152
    299c:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	 //----------------------------------
	 // 8 Bits, No parity
	 //----------------------------------
	 UCSR0C =  BIT(UCSZ01) | BIT(UCSZ00);
    29a0:	86 e0       	ldi	r24, 0x06	; 6
    29a2:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
}
    29a6:	df 91       	pop	r29
    29a8:	cf 91       	pop	r28
    29aa:	1f 91       	pop	r17
    29ac:	0f 91       	pop	r16
    29ae:	08 95       	ret

000029b0 <Yield>:
** are in an interrupt
** routine
*********************************************************************/

void Yield(void)
{
    29b0:	cf 93       	push	r28
	char sr;

	// Do not yield if at the interrupt level
	if(!InterruptCount)
    29b2:	80 91 f6 01 	lds	r24, 0x01F6	; 0x8001f6 <InterruptCount>
    29b6:	90 91 f7 01 	lds	r25, 0x01F7	; 0x8001f7 <InterruptCount+0x1>
    29ba:	89 2b       	or	r24, r25
    29bc:	09 f5       	brne	.+66     	; 0x2a00 <Yield+0x50>
	{
		sr = Disable();
    29be:	0e 94 7f 00 	call	0xfe	; 0xfe <Disable>
    29c2:	c8 2f       	mov	r28, r24
		//update the time stamp in current task
		pCurrentTask->TimeStamp = TStamp;
    29c4:	40 91 f0 01 	lds	r20, 0x01F0	; 0x8001f0 <pCurrentTask>
    29c8:	50 91 f1 01 	lds	r21, 0x01F1	; 0x8001f1 <pCurrentTask+0x1>
    29cc:	80 91 19 03 	lds	r24, 0x0319	; 0x800319 <TStamp>
    29d0:	90 91 1a 03 	lds	r25, 0x031A	; 0x80031a <TStamp+0x1>
    29d4:	fa 01       	movw	r30, r20
    29d6:	95 87       	std	Z+13, r25	; 0x0d
    29d8:	84 87       	std	Z+12, r24	; 0x0c
		//Insert current task back into queue
		//and get a new task
		Replace(&ActiveTasks,(void **)&pNextTask,(void *)pCurrentTask);
    29da:	64 ef       	ldi	r22, 0xF4	; 244
    29dc:	71 e0       	ldi	r23, 0x01	; 1
    29de:	86 ee       	ldi	r24, 0xE6	; 230
    29e0:	91 e0       	ldi	r25, 0x01	; 1
    29e2:	62 da       	rcall	.-2876   	; 0x1ea8 <Replace>
		//increment task swaps
		pNextTask->TcbSwaps++;
    29e4:	e0 91 f4 01 	lds	r30, 0x01F4	; 0x8001f4 <pNextTask>
    29e8:	f0 91 f5 01 	lds	r31, 0x01F5	; 0x8001f5 <pNextTask+0x1>
    29ec:	86 85       	ldd	r24, Z+14	; 0x0e
    29ee:	97 85       	ldd	r25, Z+15	; 0x0f
    29f0:	01 96       	adiw	r24, 0x01	; 1
    29f2:	97 87       	std	Z+15, r25	; 0x0f
    29f4:	86 87       	std	Z+14, r24	; 0x0e
		//swap tasks
		DoSwap();
    29f6:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <DoSwap>
		Enable(sr);
    29fa:	8c 2f       	mov	r24, r28
    29fc:	0e 94 83 00 	call	0x106	; 0x106 <Enable>
	}
}
    2a00:	cf 91       	pop	r28
    2a02:	08 95       	ret

00002a04 <__tablejump2__>:
    2a04:	ee 0f       	add	r30, r30
    2a06:	ff 1f       	adc	r31, r31
    2a08:	00 24       	eor	r0, r0
    2a0a:	00 1c       	adc	r0, r0
    2a0c:	0b be       	out	0x3b, r0	; 59
    2a0e:	07 90       	elpm	r0, Z+
    2a10:	f6 91       	elpm	r31, Z
    2a12:	e0 2d       	mov	r30, r0
    2a14:	09 94       	ijmp

00002a16 <strcpy>:
    2a16:	fb 01       	movw	r30, r22
    2a18:	dc 01       	movw	r26, r24
    2a1a:	01 90       	ld	r0, Z+
    2a1c:	0d 92       	st	X+, r0
    2a1e:	00 20       	and	r0, r0
    2a20:	e1 f7       	brne	.-8      	; 0x2a1a <strcpy+0x4>
    2a22:	08 95       	ret

00002a24 <__itoa_ncheck>:
    2a24:	bb 27       	eor	r27, r27
    2a26:	4a 30       	cpi	r20, 0x0A	; 10
    2a28:	31 f4       	brne	.+12     	; 0x2a36 <__itoa_ncheck+0x12>
    2a2a:	99 23       	and	r25, r25
    2a2c:	22 f4       	brpl	.+8      	; 0x2a36 <__itoa_ncheck+0x12>
    2a2e:	bd e2       	ldi	r27, 0x2D	; 45
    2a30:	90 95       	com	r25
    2a32:	81 95       	neg	r24
    2a34:	9f 4f       	sbci	r25, 0xFF	; 255
    2a36:	01 c0       	rjmp	.+2      	; 0x2a3a <__utoa_common>

00002a38 <__utoa_ncheck>:
    2a38:	bb 27       	eor	r27, r27

00002a3a <__utoa_common>:
    2a3a:	fb 01       	movw	r30, r22
    2a3c:	55 27       	eor	r21, r21
    2a3e:	aa 27       	eor	r26, r26
    2a40:	88 0f       	add	r24, r24
    2a42:	99 1f       	adc	r25, r25
    2a44:	aa 1f       	adc	r26, r26
    2a46:	a4 17       	cp	r26, r20
    2a48:	10 f0       	brcs	.+4      	; 0x2a4e <__utoa_common+0x14>
    2a4a:	a4 1b       	sub	r26, r20
    2a4c:	83 95       	inc	r24
    2a4e:	50 51       	subi	r21, 0x10	; 16
    2a50:	b9 f7       	brne	.-18     	; 0x2a40 <__utoa_common+0x6>
    2a52:	a0 5d       	subi	r26, 0xD0	; 208
    2a54:	aa 33       	cpi	r26, 0x3A	; 58
    2a56:	08 f0       	brcs	.+2      	; 0x2a5a <__utoa_common+0x20>
    2a58:	a9 5d       	subi	r26, 0xD9	; 217
    2a5a:	a1 93       	st	Z+, r26
    2a5c:	00 97       	sbiw	r24, 0x00	; 0
    2a5e:	79 f7       	brne	.-34     	; 0x2a3e <__utoa_common+0x4>
    2a60:	b1 11       	cpse	r27, r1
    2a62:	b1 93       	st	Z+, r27
    2a64:	11 92       	st	Z+, r1
    2a66:	cb 01       	movw	r24, r22
    2a68:	00 c0       	rjmp	.+0      	; 0x2a6a <strrev>

00002a6a <strrev>:
    2a6a:	dc 01       	movw	r26, r24
    2a6c:	fc 01       	movw	r30, r24
    2a6e:	67 2f       	mov	r22, r23
    2a70:	71 91       	ld	r23, Z+
    2a72:	77 23       	and	r23, r23
    2a74:	e1 f7       	brne	.-8      	; 0x2a6e <strrev+0x4>
    2a76:	32 97       	sbiw	r30, 0x02	; 2
    2a78:	04 c0       	rjmp	.+8      	; 0x2a82 <strrev+0x18>
    2a7a:	7c 91       	ld	r23, X
    2a7c:	6d 93       	st	X+, r22
    2a7e:	70 83       	st	Z, r23
    2a80:	62 91       	ld	r22, -Z
    2a82:	ae 17       	cp	r26, r30
    2a84:	bf 07       	cpc	r27, r31
    2a86:	c8 f3       	brcs	.-14     	; 0x2a7a <strrev+0x10>
    2a88:	08 95       	ret

00002a8a <_exit>:
    2a8a:	f8 94       	cli

00002a8c <__stop_program>:
    2a8c:	ff cf       	rjmp	.-2      	; 0x2a8c <__stop_program>
