
SynthRevB.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001dd2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000016  00800060  00001dd2  00001e66  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000ec  00800076  00800076  00001e7c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001e7c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001eac  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000480  00000000  00000000  00001ef0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005c9d  00000000  00000000  00002370  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002014  00000000  00000000  0000800d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000231f  00000000  00000000  0000a021  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000a58  00000000  00000000  0000c340  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000d88  00000000  00000000  0000cd98  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003232  00000000  00000000  0000db20  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000350  00000000  00000000  00010d52  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	2a c0       	rjmp	.+84     	; 0x56 <__ctors_end>
       2:	44 c0       	rjmp	.+136    	; 0x8c <__bad_interrupt>
       4:	43 c0       	rjmp	.+134    	; 0x8c <__bad_interrupt>
       6:	42 c0       	rjmp	.+132    	; 0x8c <__bad_interrupt>
       8:	41 c0       	rjmp	.+130    	; 0x8c <__bad_interrupt>
       a:	40 c0       	rjmp	.+128    	; 0x8c <__bad_interrupt>
       c:	3f c0       	rjmp	.+126    	; 0x8c <__bad_interrupt>
       e:	e1 c2       	rjmp	.+1474   	; 0x5d2 <__vector_7>
      10:	d3 cb       	rjmp	.-2138   	; 0xfffff7b8 <__eeprom_end+0xff7ef7b8>
      12:	fe cc       	rjmp	.-1540   	; 0xfffffa10 <__eeprom_end+0xff7efa10>
      14:	f4 cd       	rjmp	.-1048   	; 0xfffffbfe <__eeprom_end+0xff7efbfe>
      16:	3a c0       	rjmp	.+116    	; 0x8c <__bad_interrupt>
      18:	39 c0       	rjmp	.+114    	; 0x8c <__bad_interrupt>
      1a:	38 c0       	rjmp	.+112    	; 0x8c <__bad_interrupt>
      1c:	37 c0       	rjmp	.+110    	; 0x8c <__bad_interrupt>
      1e:	36 c0       	rjmp	.+108    	; 0x8c <__bad_interrupt>
      20:	35 c0       	rjmp	.+106    	; 0x8c <__bad_interrupt>
      22:	34 c7       	rjmp	.+3688   	; 0xe8c <ParseMidi+0x34>
      24:	3a c7       	rjmp	.+3700   	; 0xe9a <ParseMidi+0x42>
      26:	3b c7       	rjmp	.+3702   	; 0xe9e <ParseMidi+0x46>
      28:	3d c7       	rjmp	.+3706   	; 0xea4 <ParseMidi+0x4c>
      2a:	e9 c7       	rjmp	.+4050   	; 0xffe <ParseMidi+0x1a6>
      2c:	e8 c7       	rjmp	.+4048   	; 0xffe <ParseMidi+0x1a6>
      2e:	e7 c7       	rjmp	.+4046   	; 0xffe <ParseMidi+0x1a6>
      30:	3d c7       	rjmp	.+3706   	; 0xeac <ParseMidi+0x54>
      32:	42 c7       	rjmp	.+3716   	; 0xeb8 <ParseMidi+0x60>
      34:	e4 c7       	rjmp	.+4040   	; 0xffe <ParseMidi+0x1a6>
      36:	42 c7       	rjmp	.+3716   	; 0xebc <ParseMidi+0x64>
      38:	43 c7       	rjmp	.+3718   	; 0xec0 <ParseMidi+0x68>
      3a:	44 c7       	rjmp	.+3720   	; 0xec4 <ParseMidi+0x6c>
      3c:	e0 c7       	rjmp	.+4032   	; 0xffe <ParseMidi+0x1a6>
      3e:	df c7       	rjmp	.+4030   	; 0xffe <ParseMidi+0x1a6>
      40:	43 c7       	rjmp	.+3718   	; 0xec8 <ParseMidi+0x70>
      42:	94 ca       	rjmp	.-2776   	; 0xfffff56c <__eeprom_end+0xff7ef56c>
      44:	90 ca       	rjmp	.-2784   	; 0xfffff566 <__eeprom_end+0xff7ef566>
      46:	ad ca       	rjmp	.-2726   	; 0xfffff5a2 <__eeprom_end+0xff7ef5a2>
      48:	e5 ca       	rjmp	.-2614   	; 0xfffff614 <__eeprom_end+0xff7ef614>
      4a:	8b cb       	rjmp	.-2282   	; 0xfffff762 <__eeprom_end+0xff7ef762>
      4c:	8a cb       	rjmp	.-2284   	; 0xfffff762 <__eeprom_end+0xff7ef762>
      4e:	02 cb       	rjmp	.-2556   	; 0xfffff654 <__eeprom_end+0xff7ef654>
      50:	55 cb       	rjmp	.-2390   	; 0xfffff6fc <__eeprom_end+0xff7ef6fc>
      52:	6f cb       	rjmp	.-2338   	; 0xfffff732 <__eeprom_end+0xff7ef732>
      54:	81 cb       	rjmp	.-2302   	; 0xfffff758 <__eeprom_end+0xff7ef758>

00000056 <__ctors_end>:
      56:	11 24       	eor	r1, r1
      58:	1f be       	out	0x3f, r1	; 63
      5a:	cf e5       	ldi	r28, 0x5F	; 95
      5c:	d2 e0       	ldi	r29, 0x02	; 2
      5e:	de bf       	out	0x3e, r29	; 62
      60:	cd bf       	out	0x3d, r28	; 61

00000062 <__do_copy_data>:
      62:	10 e0       	ldi	r17, 0x00	; 0
      64:	a0 e6       	ldi	r26, 0x60	; 96
      66:	b0 e0       	ldi	r27, 0x00	; 0
      68:	e2 ed       	ldi	r30, 0xD2	; 210
      6a:	fd e1       	ldi	r31, 0x1D	; 29
      6c:	02 c0       	rjmp	.+4      	; 0x72 <__do_copy_data+0x10>
      6e:	05 90       	lpm	r0, Z+
      70:	0d 92       	st	X+, r0
      72:	a6 37       	cpi	r26, 0x76	; 118
      74:	b1 07       	cpc	r27, r17
      76:	d9 f7       	brne	.-10     	; 0x6e <__do_copy_data+0xc>

00000078 <__do_clear_bss>:
      78:	21 e0       	ldi	r18, 0x01	; 1
      7a:	a6 e7       	ldi	r26, 0x76	; 118
      7c:	b0 e0       	ldi	r27, 0x00	; 0
      7e:	01 c0       	rjmp	.+2      	; 0x82 <.do_clear_bss_start>

00000080 <.do_clear_bss_loop>:
      80:	1d 92       	st	X+, r1

00000082 <.do_clear_bss_start>:
      82:	a2 36       	cpi	r26, 0x62	; 98
      84:	b2 07       	cpc	r27, r18
      86:	e1 f7       	brne	.-8      	; 0x80 <.do_clear_bss_loop>
      88:	ff d2       	rcall	.+1534   	; 0x688 <main>
      8a:	a1 ce       	rjmp	.-702    	; 0xfffffdce <__eeprom_end+0xff7efdce>

0000008c <__bad_interrupt>:
      8c:	b9 cf       	rjmp	.-142    	; 0x0 <__vectors>

0000008e <Disable>:
	.global Disable
	.global Enable

Disable:

	in	r24,_SFR_IO_ADDR(SREG)		;get status register
      8e:	8f b7       	in	r24, 0x3f	; 63
	cli								;disable interrupt
      90:	f8 94       	cli
	andi r24,0x80					;strip off interrupt bit
      92:	80 78       	andi	r24, 0x80	; 128
	ret
      94:	08 95       	ret

00000096 <Enable>:

Enable:
	in r25,_SFR_IO_ADDR(SREG)		;status reg in r24
      96:	9f b7       	in	r25, 0x3f	; 63
	or r25,r24						;or with status reg
      98:	98 2b       	or	r25, r24
	out _SFR_IO_ADDR(SREG),r25		;restored status register
      9a:	9f bf       	out	0x3f, r25	; 63
	ret
      9c:	08 95       	ret

0000009e <SetGatePort>:

static unsigned char GateShadow;

void SetGatePort(char bit)
{
	GateShadow |= (1 << bit);
      9e:	21 e0       	ldi	r18, 0x01	; 1
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	01 c0       	rjmp	.+2      	; 0xa6 <SetGatePort+0x8>
      a4:	22 0f       	add	r18, r18
      a6:	8a 95       	dec	r24
      a8:	ea f7       	brpl	.-6      	; 0xa4 <SetGatePort+0x6>
      aa:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <__data_end>
      ae:	28 2b       	or	r18, r24
      b0:	20 93 76 00 	sts	0x0076, r18	; 0x800076 <__data_end>
	GATE_PORT = GateShadow;
      b4:	20 93 00 c0 	sts	0xC000, r18	; 0x80c000 <__bss_end+0xbe9e>
	LED_PORT = ~GateShadow;
      b8:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <__data_end>
      bc:	80 95       	com	r24
      be:	80 93 00 c4 	sts	0xC400, r24	; 0x80c400 <__bss_end+0xc29e>
      c2:	08 95       	ret

000000c4 <ClearGatePort>:
}

void ClearGatePort(char bit)
{
	GateShadow &= ~(1 << bit);
      c4:	21 e0       	ldi	r18, 0x01	; 1
      c6:	30 e0       	ldi	r19, 0x00	; 0
      c8:	01 c0       	rjmp	.+2      	; 0xcc <ClearGatePort+0x8>
      ca:	22 0f       	add	r18, r18
      cc:	8a 95       	dec	r24
      ce:	ea f7       	brpl	.-6      	; 0xca <ClearGatePort+0x6>
      d0:	20 95       	com	r18
      d2:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <__data_end>
      d6:	28 23       	and	r18, r24
      d8:	20 93 76 00 	sts	0x0076, r18	; 0x800076 <__data_end>
	GATE_PORT = GateShadow;
      dc:	20 93 00 c0 	sts	0xC000, r18	; 0x80c000 <__bss_end+0xbe9e>
	LED_PORT = ~GateShadow;
      e0:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <__data_end>
      e4:	80 95       	com	r24
      e6:	80 93 00 c4 	sts	0xC400, r24	; 0x80c400 <__bss_end+0xc29e>
      ea:	08 95       	ret

000000ec <CreateSemaphore>:
**	n............name of semaphore (DEBUG only)                           **
**                                                                        **
***************************************************************************/

void CreateSemaphore(SEMAPHORE *pSem,int InitCount,int Mode)
{
      ec:	cf 93       	push	r28
      ee:	df 93       	push	r29
      f0:	ec 01       	movw	r28, r24
	char sr;

	pSem->EventCount = InitCount;	//set initial count
      f2:	7b 87       	std	Y+11, r23	; 0x0b
      f4:	6a 87       	std	Y+10, r22	; 0x0a
	pSem->SemaphoreMode = Mode;	//set mode
      f6:	59 87       	std	Y+9, r21	; 0x09
      f8:	48 87       	std	Y+8, r20	; 0x08
	pSem->task_head = 0;				//no tasks waiting
      fa:	19 82       	std	Y+1, r1	; 0x01
      fc:	18 82       	st	Y, r1
	pSem->task_tail = 0;				//no tasks waiting
      fe:	1b 82       	std	Y+3, r1	; 0x03
     100:	1a 82       	std	Y+2, r1	; 0x02
	//-------------------------------------------------------
	// if Mode==SEMAPHORE_MODE_TIMEOUT, then put this
	// semaphore into timeout list
	//-------------------------------------------------------
	// enter critical section, disable interrupts
	sr = Disable();
     102:	c5 df       	rcall	.-118    	; 0x8e <Disable>
	if(pSem->SemaphoreMode == SEMAPHORE_MODE_TIMEOUT)
     104:	28 85       	ldd	r18, Y+8	; 0x08
     106:	39 85       	ldd	r19, Y+9	; 0x09
     108:	21 30       	cpi	r18, 0x01	; 1
     10a:	31 05       	cpc	r19, r1
     10c:	c9 f4       	brne	.+50     	; 0x140 <CreateSemaphore+0x54>
	{
		if(pTimeoutList)	//is the list already started?
     10e:	e0 91 96 00 	lds	r30, 0x0096	; 0x800096 <pTimeoutList>
     112:	f0 91 97 00 	lds	r31, 0x0097	; 0x800097 <pTimeoutList+0x1>
     116:	30 97       	sbiw	r30, 0x00	; 0
     118:	59 f0       	breq	.+22     	; 0x130 <CreateSemaphore+0x44>
		{
			pSem->Tnext = pTimeoutList;	//make current head next in line
     11a:	fd 83       	std	Y+5, r31	; 0x05
     11c:	ec 83       	std	Y+4, r30	; 0x04
			pSem->Tprev = 0;			//these is no previous entry
     11e:	1f 82       	std	Y+7, r1	; 0x07
     120:	1e 82       	std	Y+6, r1	; 0x06
			pTimeoutList->Tprev = pSem;	//this will be prev for next entry
     122:	d7 83       	std	Z+7, r29	; 0x07
     124:	c6 83       	std	Z+6, r28	; 0x06
			pTimeoutList = pSem;			//this is now the new head of list
     126:	d0 93 97 00 	sts	0x0097, r29	; 0x800097 <pTimeoutList+0x1>
     12a:	c0 93 96 00 	sts	0x0096, r28	; 0x800096 <pTimeoutList>
     12e:	08 c0       	rjmp	.+16     	; 0x140 <CreateSemaphore+0x54>
		}
		else			//no start list
		{
			pTimeoutList = pSem;	//set timeout list
     130:	d0 93 97 00 	sts	0x0097, r29	; 0x800097 <pTimeoutList+0x1>
     134:	c0 93 96 00 	sts	0x0096, r28	; 0x800096 <pTimeoutList>
			pSem->Tnext = 0;
     138:	1d 82       	std	Y+5, r1	; 0x05
     13a:	1c 82       	std	Y+4, r1	; 0x04
			pSem->Tprev = 0;
     13c:	1f 82       	std	Y+7, r1	; 0x07
     13e:	1e 82       	std	Y+6, r1	; 0x06
		}
	}
	//exit critical section, enable IRQ
	Enable(sr);	//restore interrupts
}
     140:	df 91       	pop	r29
     142:	cf 91       	pop	r28
			pSem->Tnext = 0;
			pSem->Tprev = 0;
		}
	}
	//exit critical section, enable IRQ
	Enable(sr);	//restore interrupts
     144:	a8 cf       	rjmp	.-176    	; 0x96 <Enable>

00000146 <NewSemaphore>:
	return value:
		pointer to an Event Control block on success
		OR NULL on fail
************************************************/
SEMAPHORE *NewSemaphore(int InitCount,int Mode)
{
     146:	ef 92       	push	r14
     148:	ff 92       	push	r15
     14a:	0f 93       	push	r16
     14c:	1f 93       	push	r17
     14e:	cf 93       	push	r28
     150:	df 93       	push	r29
     152:	8c 01       	movw	r16, r24
     154:	7b 01       	movw	r14, r22
*********************************************/
static SEMAPHORE *AllocSemaphore(void)
{
	SEMAPHORE *rv;
	// enter critical section disable IRQ
	char sr = Disable();
     156:	9b df       	rcall	.-202    	; 0x8e <Disable>
	if (pSemaphorePool)	//check the pool
     158:	c0 91 77 00 	lds	r28, 0x0077	; 0x800077 <pSemaphorePool>
     15c:	d0 91 78 00 	lds	r29, 0x0078	; 0x800078 <pSemaphorePool+0x1>
     160:	20 97       	sbiw	r28, 0x00	; 0
     162:	41 f0       	breq	.+16     	; 0x174 <NewSemaphore+0x2e>
	{
		//get first SEMAPHORE in pool
		rv = pSemaphorePool;
		//new head of pool
		pSemaphorePool = pSemaphorePool->Tnext;
     164:	2c 81       	ldd	r18, Y+4	; 0x04
     166:	3d 81       	ldd	r19, Y+5	; 0x05
     168:	30 93 78 00 	sts	0x0078, r19	; 0x800078 <pSemaphorePool+0x1>
     16c:	20 93 77 00 	sts	0x0077, r18	; 0x800077 <pSemaphorePool>
		//exit critical section
		Enable(sr);
     170:	92 df       	rcall	.-220    	; 0x96 <Enable>
     172:	07 c0       	rjmp	.+14     	; 0x182 <NewSemaphore+0x3c>
	}
	else
	{
		//exit critical section
		Enable(sr);
     174:	90 df       	rcall	.-224    	; 0x96 <Enable>
		//allocate SEMAPHORE from heap
		rv = (SEMAPHORE *)malloc(sizeof(SEMAPHORE));	//or allocate from the heap
     176:	8c e0       	ldi	r24, 0x0C	; 12
     178:	90 e0       	ldi	r25, 0x00	; 0
     17a:	e3 d2       	rcall	.+1478   	; 0x742 <malloc>
     17c:	ec 01       	movw	r28, r24
************************************************/
SEMAPHORE *NewSemaphore(int InitCount,int Mode)
{
	SEMAPHORE *pSem;

	if((pSem = AllocSemaphore()) != NULL)
     17e:	89 2b       	or	r24, r25
     180:	21 f0       	breq	.+8      	; 0x18a <NewSemaphore+0x44>
		CreateSemaphore(pSem,InitCount,Mode);
     182:	a7 01       	movw	r20, r14
     184:	b8 01       	movw	r22, r16
     186:	ce 01       	movw	r24, r28
     188:	b1 df       	rcall	.-158    	; 0xec <CreateSemaphore>
	return pSem;
}
     18a:	ce 01       	movw	r24, r28
     18c:	df 91       	pop	r29
     18e:	cf 91       	pop	r28
     190:	1f 91       	pop	r17
     192:	0f 91       	pop	r16
     194:	ff 90       	pop	r15
     196:	ef 90       	pop	r14
     198:	08 95       	ret

0000019a <DeleteSemaphore>:
**		e..........pointer to SEMAPHORE block that describes the semaphore
**
*******************************************************************************/

void DeleteSemaphore(SEMAPHORE *pSem)
{
     19a:	ef 92       	push	r14
     19c:	ff 92       	push	r15
     19e:	1f 93       	push	r17
     1a0:	cf 93       	push	r28
     1a2:	df 93       	push	r29
     1a4:	ec 01       	movw	r28, r24
	char sr;
	TCB *t;

	//are there any tasks waiting for this sucker?
	//enter critical section, disable IRQ
	sr = Disable();
     1a6:	73 df       	rcall	.-282    	; 0x8e <Disable>
     1a8:	18 2f       	mov	r17, r24
	while(pSem->task_head)		//remove all tasks
	{
		t = pSem->task_head;		//get first task in
		pSem->task_head = t->next;       //remove from list
		t->next = (TCB *)0;
		t->status = EVENT_DELETED;	//return this value
     1aa:	8c ef       	ldi	r24, 0xFC	; 252
     1ac:	e8 2e       	mov	r14, r24
     1ae:	ff 24       	eor	r15, r15
     1b0:	fa 94       	dec	r15
	TCB *t;

	//are there any tasks waiting for this sucker?
	//enter critical section, disable IRQ
	sr = Disable();
	while(pSem->task_head)		//remove all tasks
     1b2:	e8 81       	ld	r30, Y
     1b4:	f9 81       	ldd	r31, Y+1	; 0x01
     1b6:	30 97       	sbiw	r30, 0x00	; 0
     1b8:	69 f0       	breq	.+26     	; 0x1d4 <DeleteSemaphore+0x3a>
	{
		t = pSem->task_head;		//get first task in
		pSem->task_head = t->next;       //remove from list
     1ba:	84 89       	ldd	r24, Z+20	; 0x14
     1bc:	95 89       	ldd	r25, Z+21	; 0x15
     1be:	99 83       	std	Y+1, r25	; 0x01
     1c0:	88 83       	st	Y, r24
		t->next = (TCB *)0;
     1c2:	15 8a       	std	Z+21, r1	; 0x15
     1c4:	14 8a       	std	Z+20, r1	; 0x14
		t->status = EVENT_DELETED;	//return this value
     1c6:	f1 86       	std	Z+9, r15	; 0x09
     1c8:	e0 86       	std	Z+8, r14	; 0x08
		Insert(&ActiveTasks,t);	//put task back onto active list
     1ca:	bf 01       	movw	r22, r30
     1cc:	88 e9       	ldi	r24, 0x98	; 152
     1ce:	90 e0       	ldi	r25, 0x00	; 0
     1d0:	6f d8       	rcall	.-3874   	; 0xfffff2b0 <__eeprom_end+0xff7ef2b0>
     1d2:	ef cf       	rjmp	.-34     	; 0x1b2 <DeleteSemaphore+0x18>
***********************************************/
static void FreeSemaphore(SEMAPHORE *pSem)
{
	char sr;
	//enter critical section disable IRQ
	sr = Disable();
     1d4:	5c df       	rcall	.-328    	; 0x8e <Disable>
	if(pSem->SemaphoreMode)	//is it in timeout list?
     1d6:	28 85       	ldd	r18, Y+8	; 0x08
     1d8:	39 85       	ldd	r19, Y+9	; 0x09
     1da:	23 2b       	or	r18, r19
     1dc:	d9 f0       	breq	.+54     	; 0x214 <DeleteSemaphore+0x7a>
	{
		//remove semaphore from timeout list
		if(pSem == pTimeoutList)
     1de:	40 91 96 00 	lds	r20, 0x0096	; 0x800096 <pTimeoutList>
     1e2:	50 91 97 00 	lds	r21, 0x0097	; 0x800097 <pTimeoutList+0x1>
     1e6:	2c 81       	ldd	r18, Y+4	; 0x04
     1e8:	3d 81       	ldd	r19, Y+5	; 0x05
     1ea:	c4 17       	cp	r28, r20
     1ec:	d5 07       	cpc	r29, r21
     1ee:	21 f4       	brne	.+8      	; 0x1f8 <DeleteSemaphore+0x5e>
			pTimeoutList = pSem->Tnext;
     1f0:	30 93 97 00 	sts	0x0097, r19	; 0x800097 <pTimeoutList+0x1>
     1f4:	20 93 96 00 	sts	0x0096, r18	; 0x800096 <pTimeoutList>
		if(pSem->Tprev)
     1f8:	ee 81       	ldd	r30, Y+6	; 0x06
     1fa:	ff 81       	ldd	r31, Y+7	; 0x07
     1fc:	30 97       	sbiw	r30, 0x00	; 0
     1fe:	11 f0       	breq	.+4      	; 0x204 <DeleteSemaphore+0x6a>
			pSem->Tprev->Tnext = pSem->Tnext;
     200:	35 83       	std	Z+5, r19	; 0x05
     202:	24 83       	std	Z+4, r18	; 0x04
		if(pSem->Tnext)
     204:	ac 81       	ldd	r26, Y+4	; 0x04
     206:	bd 81       	ldd	r27, Y+5	; 0x05
     208:	10 97       	sbiw	r26, 0x00	; 0
     20a:	21 f0       	breq	.+8      	; 0x214 <DeleteSemaphore+0x7a>
			pSem->Tnext->Tprev = pSem->Tprev;
     20c:	17 96       	adiw	r26, 0x07	; 7
     20e:	fc 93       	st	X, r31
     210:	ee 93       	st	-X, r30
     212:	16 97       	sbiw	r26, 0x06	; 6
	}
	//put SEMAPHORE into pool
	pSem->Tnext = pSemaphorePool;
     214:	20 91 77 00 	lds	r18, 0x0077	; 0x800077 <pSemaphorePool>
     218:	30 91 78 00 	lds	r19, 0x0078	; 0x800078 <pSemaphorePool+0x1>
     21c:	3d 83       	std	Y+5, r19	; 0x05
     21e:	2c 83       	std	Y+4, r18	; 0x04
	pSemaphorePool = pSem;
     220:	d0 93 78 00 	sts	0x0078, r29	; 0x800078 <pSemaphorePool+0x1>
     224:	c0 93 77 00 	sts	0x0077, r28	; 0x800077 <pSemaphorePool>
	//Exit Critical Section, Enable IRQ
	Enable(sr);
     228:	36 df       	rcall	.-404    	; 0x96 <Enable>
		t->next = (TCB *)0;
		t->status = EVENT_DELETED;	//return this value
		Insert(&ActiveTasks,t);	//put task back onto active list
	}
	FreeSemaphore(pSem);		//put semaphore back in pool
	Enable(sr);
     22a:	81 2f       	mov	r24, r17
}
     22c:	df 91       	pop	r29
     22e:	cf 91       	pop	r28
     230:	1f 91       	pop	r17
     232:	ff 90       	pop	r15
     234:	ef 90       	pop	r14
		t->next = (TCB *)0;
		t->status = EVENT_DELETED;	//return this value
		Insert(&ActiveTasks,t);	//put task back onto active list
	}
	FreeSemaphore(pSem);		//put semaphore back in pool
	Enable(sr);
     236:	2f cf       	rjmp	.-418    	; 0x96 <Enable>

00000238 <CreateTask>:
**	arg.............argument to be passed to function...it chan either be 
**  a value, or a pointer to some data
***************************************************************************************/

void CreateTask(TCB *t, void (*task)(void *), int stacksize,int priority,void *arg)
{
     238:	8f 92       	push	r8
     23a:	9f 92       	push	r9
     23c:	af 92       	push	r10
     23e:	bf 92       	push	r11
     240:	cf 92       	push	r12
     242:	df 92       	push	r13
     244:	ef 92       	push	r14
     246:	ff 92       	push	r15
     248:	0f 93       	push	r16
     24a:	1f 93       	push	r17
     24c:	cf 93       	push	r28
     24e:	df 93       	push	r29
     250:	7c 01       	movw	r14, r24
     252:	4b 01       	movw	r8, r22
     254:	ea 01       	movw	r28, r20
     256:	59 01       	movw	r10, r18
	char *stk;
	char sr;		//status register
	char *stack;	//pointer to stack

	stack = malloc(stacksize);
     258:	ca 01       	movw	r24, r20
     25a:	73 d2       	rcall	.+1254   	; 0x742 <malloc>
     25c:	6c 01       	movw	r12, r24
	//enter critical section, Disable IRQ
	sr = Disable();
     25e:	17 df       	rcall	.-466    	; 0x8e <Disable>
	if(t)
     260:	e1 14       	cp	r14, r1
     262:	f1 04       	cpc	r15, r1
     264:	09 f4       	brne	.+2      	; 0x268 <__stack+0x9>
     266:	6c c0       	rjmp	.+216    	; 0x340 <__stack+0xe1>
	{
		//initialize TCB member variables
		t->TcbSwaps = 0;
     268:	d7 01       	movw	r26, r14
     26a:	1f 96       	adiw	r26, 0x0f	; 15
     26c:	1c 92       	st	X, r1
     26e:	1e 92       	st	-X, r1
     270:	1e 97       	sbiw	r26, 0x0e	; 14
		t->stacksize = stacksize;
     272:	15 96       	adiw	r26, 0x05	; 5
     274:	dc 93       	st	X, r29
     276:	ce 93       	st	-X, r28
     278:	14 97       	sbiw	r26, 0x04	; 4
		t->priority = priority;
     27a:	17 96       	adiw	r26, 0x07	; 7
     27c:	bc 92       	st	X, r11
     27e:	ae 92       	st	-X, r10
     280:	16 97       	sbiw	r26, 0x06	; 6
		t->TimeStamp = 0;
     282:	1d 96       	adiw	r26, 0x0d	; 13
     284:	1c 92       	st	X, r1
     286:	1e 92       	st	-X, r1
     288:	1c 97       	sbiw	r26, 0x0c	; 12
		t->stacktop = stack;
     28a:	13 96       	adiw	r26, 0x03	; 3
     28c:	dc 92       	st	X, r13
     28e:	ce 92       	st	-X, r12
     290:	12 97       	sbiw	r26, 0x02	; 2
		t->next = (TCB *)0;
     292:	55 96       	adiw	r26, 0x15	; 21
     294:	1c 92       	st	X, r1
     296:	1e 92       	st	-X, r1
     298:	54 97       	sbiw	r26, 0x14	; 20
		t->list = (TCB *)0;
     29a:	57 96       	adiw	r26, 0x17	; 23
     29c:	1c 92       	st	X, r1
     29e:	1e 92       	st	-X, r1
     2a0:	56 97       	sbiw	r26, 0x16	; 22
		stk = stack + stacksize-1;
     2a2:	fe 01       	movw	r30, r28
     2a4:	31 97       	sbiw	r30, 0x01	; 1
     2a6:	ec 0d       	add	r30, r12
     2a8:	fd 1d       	adc	r31, r13
		//Initialize the stack
		*stk-- = (char)LO( (unsigned)task);/*	return address	*/
     2aa:	80 82       	st	Z, r8
		*stk-- = (char)HI( (unsigned)task);
     2ac:	df 01       	movw	r26, r30
     2ae:	11 97       	sbiw	r26, 0x01	; 1
     2b0:	9c 92       	st	X, r9
		*stk-- = 0;		/*	r31 = 0	*/
     2b2:	11 97       	sbiw	r26, 0x01	; 1
     2b4:	1c 92       	st	X, r1
		*stk-- = 0x80;	/*	SREG Interrupts enabled	*/
     2b6:	11 97       	sbiw	r26, 0x01	; 1
     2b8:	90 e8       	ldi	r25, 0x80	; 128
     2ba:	9c 93       	st	X, r25
		*stk-- = 0;		/*	r30 = 0	*/
     2bc:	11 97       	sbiw	r26, 0x01	; 1
     2be:	1c 92       	st	X, r1
		*stk-- = 0;		/*	r29 = 0	*/
     2c0:	11 97       	sbiw	r26, 0x01	; 1
     2c2:	1c 92       	st	X, r1
		*stk-- = 0;		/*	r28 = 0	*/
     2c4:	11 97       	sbiw	r26, 0x01	; 1
     2c6:	1c 92       	st	X, r1
		*stk-- = 0;		/*	r27 = 0	*/
     2c8:	11 97       	sbiw	r26, 0x01	; 1
     2ca:	1c 92       	st	X, r1
		*stk-- = 0;		/*	r26 = 0	*/
     2cc:	11 97       	sbiw	r26, 0x01	; 1
     2ce:	1c 92       	st	X, r1
		*stk-- = (char)HI( (unsigned)arg);		/*	r25 = 0	*/
     2d0:	11 97       	sbiw	r26, 0x01	; 1
     2d2:	1c 93       	st	X, r17
		*stk-- = (char)LO( (unsigned)arg);		/*	r24 = 0	*/
     2d4:	11 97       	sbiw	r26, 0x01	; 1
     2d6:	0c 93       	st	X, r16
		*stk-- = 0;		/*	r23 = 0	*/
     2d8:	11 97       	sbiw	r26, 0x01	; 1
     2da:	1c 92       	st	X, r1
		*stk-- = 0;		/*	r22 = 0	*/
     2dc:	11 97       	sbiw	r26, 0x01	; 1
     2de:	1c 92       	st	X, r1
		*stk-- = 0;		/*	r21 = 0	*/
     2e0:	11 97       	sbiw	r26, 0x01	; 1
     2e2:	1c 92       	st	X, r1
		*stk-- = 0;		/*	r20 = 0	*/
     2e4:	11 97       	sbiw	r26, 0x01	; 1
     2e6:	1c 92       	st	X, r1
		*stk-- = 0;		/*	r19 	*/
     2e8:	11 97       	sbiw	r26, 0x01	; 1
     2ea:	1c 92       	st	X, r1
		*stk-- = 0;		/*	r18 	*/
     2ec:	11 97       	sbiw	r26, 0x01	; 1
     2ee:	1c 92       	st	X, r1
		*stk-- = 0;		/*	r17 	*/
     2f0:	11 97       	sbiw	r26, 0x01	; 1
     2f2:	1c 92       	st	X, r1
		*stk-- = 0;		/*	r16 	*/
     2f4:	11 97       	sbiw	r26, 0x01	; 1
     2f6:	1c 92       	st	X, r1
		*stk-- = 0;		/*	r15 	*/
     2f8:	11 97       	sbiw	r26, 0x01	; 1
     2fa:	1c 92       	st	X, r1
		*stk-- = 0;		/*	r14 	*/
     2fc:	11 97       	sbiw	r26, 0x01	; 1
     2fe:	1c 92       	st	X, r1
		*stk-- = 0;		/*	r13 	*/
     300:	11 97       	sbiw	r26, 0x01	; 1
     302:	1c 92       	st	X, r1
		*stk-- = 0;		/*	r12 	*/
     304:	11 97       	sbiw	r26, 0x01	; 1
     306:	1c 92       	st	X, r1
		*stk-- = 0;		/*	r11 	*/
     308:	11 97       	sbiw	r26, 0x01	; 1
     30a:	1c 92       	st	X, r1
		*stk-- = 0;		/*	r10 	*/
     30c:	11 97       	sbiw	r26, 0x01	; 1
     30e:	1c 92       	st	X, r1
		*stk-- = 0;		/*	r9 		*/
     310:	11 97       	sbiw	r26, 0x01	; 1
     312:	1c 92       	st	X, r1
		*stk-- = 0;		/*	r8 		*/
     314:	11 97       	sbiw	r26, 0x01	; 1
     316:	1c 92       	st	X, r1
		*stk-- = 0;		/*	r7 		*/
     318:	11 97       	sbiw	r26, 0x01	; 1
     31a:	1c 92       	st	X, r1
		*stk-- = 0;		/*	r6 		*/
     31c:	11 97       	sbiw	r26, 0x01	; 1
     31e:	1c 92       	st	X, r1
		*stk-- = 0;		/*	r5 		*/
     320:	11 97       	sbiw	r26, 0x01	; 1
     322:	1c 92       	st	X, r1
		*stk-- = 0;		/*	r4 		*/
     324:	11 97       	sbiw	r26, 0x01	; 1
     326:	1c 92       	st	X, r1
		*stk-- = 0;		/*	r3 		*/
     328:	11 97       	sbiw	r26, 0x01	; 1
     32a:	1c 92       	st	X, r1
		*stk-- = 0;		/*	r2 		*/
     32c:	11 97       	sbiw	r26, 0x01	; 1
     32e:	1c 92       	st	X, r1
		*stk-- = 0;		/*	r1 must be ZERO 	*/
     330:	11 97       	sbiw	r26, 0x01	; 1
     332:	1c 92       	st	X, r1
		*stk-- = 0;		/*	r0 		*/
     334:	11 97       	sbiw	r26, 0x01	; 1
     336:	1c 92       	st	X, r1
     338:	b3 97       	sbiw	r30, 0x23	; 35
		t->stack = stk;
     33a:	d7 01       	movw	r26, r14
     33c:	ed 93       	st	X+, r30
     33e:	fc 93       	st	X, r31
	}
	//exit critical section, enable IRQ
	Enable(sr);
}
     340:	df 91       	pop	r29
     342:	cf 91       	pop	r28
     344:	1f 91       	pop	r17
     346:	0f 91       	pop	r16
     348:	ff 90       	pop	r15
     34a:	ef 90       	pop	r14
     34c:	df 90       	pop	r13
     34e:	cf 90       	pop	r12
     350:	bf 90       	pop	r11
     352:	af 90       	pop	r10
     354:	9f 90       	pop	r9
     356:	8f 90       	pop	r8
		*stk-- = 0;		/*	r1 must be ZERO 	*/
		*stk-- = 0;		/*	r0 		*/
		t->stack = stk;
	}
	//exit critical section, enable IRQ
	Enable(sr);
     358:	9e ce       	rjmp	.-708    	; 0x96 <Enable>

0000035a <NewTask>:
}

TCB *NewTask(void (*task)(void *),int stacksize,int priority,void *arg)
{
     35a:	af 92       	push	r10
     35c:	bf 92       	push	r11
     35e:	cf 92       	push	r12
     360:	df 92       	push	r13
     362:	ef 92       	push	r14
     364:	ff 92       	push	r15
     366:	0f 93       	push	r16
     368:	1f 93       	push	r17
     36a:	cf 93       	push	r28
     36c:	df 93       	push	r29
     36e:	7c 01       	movw	r14, r24
     370:	6b 01       	movw	r12, r22
     372:	5a 01       	movw	r10, r20
     374:	89 01       	movw	r16, r18
	TCB *pTCB;
	pTCB = (TCB *)malloc(sizeof(TCB));
     376:	88 e1       	ldi	r24, 0x18	; 24
     378:	90 e0       	ldi	r25, 0x00	; 0
     37a:	e3 d1       	rcall	.+966    	; 0x742 <malloc>
     37c:	ec 01       	movw	r28, r24
	CreateTask(pTCB,task,stacksize,priority,arg);
     37e:	95 01       	movw	r18, r10
     380:	a6 01       	movw	r20, r12
     382:	b7 01       	movw	r22, r14
     384:	59 df       	rcall	.-334    	; 0x238 <CreateTask>
	return pTCB;
     386:	ce 01       	movw	r24, r28
     388:	df 91       	pop	r29
     38a:	cf 91       	pop	r28
     38c:	1f 91       	pop	r17
     38e:	0f 91       	pop	r16
     390:	ff 90       	pop	r15
     392:	ef 90       	pop	r14
     394:	df 90       	pop	r13
     396:	cf 90       	pop	r12
     398:	bf 90       	pop	r11
     39a:	af 90       	pop	r10
     39c:	08 95       	ret

0000039e <DoSwap>:
		This function does a context swap
*******************************************/
void DoSwap(void) __attribute__ ( ( naked ) );
void DoSwap(void)
{
	SAVE_CONTEXT();		//save the context of the current task
     39e:	ff 93       	push	r31
     3a0:	ff b7       	in	r31, 0x3f	; 63
     3a2:	f8 94       	cli
     3a4:	ff 93       	push	r31
     3a6:	ef 93       	push	r30
     3a8:	df 93       	push	r29
     3aa:	cf 93       	push	r28
     3ac:	bf 93       	push	r27
     3ae:	af 93       	push	r26
     3b0:	9f 93       	push	r25
     3b2:	8f 93       	push	r24
     3b4:	7f 93       	push	r23
     3b6:	6f 93       	push	r22
     3b8:	5f 93       	push	r21
     3ba:	4f 93       	push	r20
     3bc:	3f 93       	push	r19
     3be:	2f 93       	push	r18
     3c0:	1f 93       	push	r17
     3c2:	0f 93       	push	r16
     3c4:	ff 92       	push	r15
     3c6:	ef 92       	push	r14
     3c8:	df 92       	push	r13
     3ca:	cf 92       	push	r12
     3cc:	bf 92       	push	r11
     3ce:	af 92       	push	r10
     3d0:	9f 92       	push	r9
     3d2:	8f 92       	push	r8
     3d4:	7f 92       	push	r7
     3d6:	6f 92       	push	r6
     3d8:	5f 92       	push	r5
     3da:	4f 92       	push	r4
     3dc:	3f 92       	push	r3
     3de:	2f 92       	push	r2
     3e0:	1f 92       	push	r1
     3e2:	11 24       	eor	r1, r1
     3e4:	0f 92       	push	r0
     3e6:	a0 91 a2 00 	lds	r26, 0x00A2	; 0x8000a2 <pCurrentTask>
     3ea:	b0 91 a3 00 	lds	r27, 0x00A3	; 0x8000a3 <pCurrentTask+0x1>
     3ee:	0d b6       	in	r0, 0x3d	; 61
     3f0:	0d 92       	st	X+, r0
     3f2:	0e b6       	in	r0, 0x3e	; 62
     3f4:	0d 92       	st	X+, r0
	pCurrentTask = pNextTask;	//set current task to next task
     3f6:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <pNextTask>
     3fa:	90 91 a7 00 	lds	r25, 0x00A7	; 0x8000a7 <pNextTask+0x1>
     3fe:	90 93 a3 00 	sts	0x00A3, r25	; 0x8000a3 <pCurrentTask+0x1>
     402:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <pCurrentTask>
	RESTORE_CONTEXT();		//restore context of new task
     406:	a0 91 a6 00 	lds	r26, 0x00A6	; 0x8000a6 <pNextTask>
     40a:	b0 91 a7 00 	lds	r27, 0x00A7	; 0x8000a7 <pNextTask+0x1>
     40e:	cd 91       	ld	r28, X+
     410:	cd bf       	out	0x3d, r28	; 61
     412:	dd 91       	ld	r29, X+
     414:	de bf       	out	0x3e, r29	; 62
     416:	0f 90       	pop	r0
     418:	1f 90       	pop	r1
     41a:	2f 90       	pop	r2
     41c:	3f 90       	pop	r3
     41e:	4f 90       	pop	r4
     420:	5f 90       	pop	r5
     422:	6f 90       	pop	r6
     424:	7f 90       	pop	r7
     426:	8f 90       	pop	r8
     428:	9f 90       	pop	r9
     42a:	af 90       	pop	r10
     42c:	bf 90       	pop	r11
     42e:	cf 90       	pop	r12
     430:	df 90       	pop	r13
     432:	ef 90       	pop	r14
     434:	ff 90       	pop	r15
     436:	0f 91       	pop	r16
     438:	1f 91       	pop	r17
     43a:	2f 91       	pop	r18
     43c:	3f 91       	pop	r19
     43e:	4f 91       	pop	r20
     440:	5f 91       	pop	r21
     442:	6f 91       	pop	r22
     444:	7f 91       	pop	r23
     446:	8f 91       	pop	r24
     448:	9f 91       	pop	r25
     44a:	af 91       	pop	r26
     44c:	bf 91       	pop	r27
     44e:	cf 91       	pop	r28
     450:	df 91       	pop	r29
     452:	ef 91       	pop	r30
     454:	ff 91       	pop	r31
     456:	f7 fd       	sbrc	r31, 7
     458:	03 c0       	rjmp	.+6      	; 0x460 <irqen>
     45a:	ff bf       	out	0x3f, r31	; 63
     45c:	ff 91       	pop	r31
     45e:	08 95       	ret

00000460 <irqen>:
     460:	ff 77       	andi	r31, 0x7F	; 127
     462:	ff bf       	out	0x3f, r31	; 63
     464:	ff 91       	pop	r31
     466:	18 95       	reti

00000468 <ExitInterrupt>:
************************************************************************/

void ExitInterrupt(void)
{
	//decrement Interrupt level
	--InterruptCount;
     468:	80 91 a8 00 	lds	r24, 0x00A8	; 0x8000a8 <InterruptCount>
     46c:	90 91 a9 00 	lds	r25, 0x00A9	; 0x8000a9 <InterruptCount+0x1>
     470:	01 97       	sbiw	r24, 0x01	; 1
     472:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <InterruptCount+0x1>
     476:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <InterruptCount>
	//don't swap if nested or
	//if multitasking is blocked
	if(!InterruptCount)	
     47a:	80 91 a8 00 	lds	r24, 0x00A8	; 0x8000a8 <InterruptCount>
     47e:	90 91 a9 00 	lds	r25, 0x00A9	; 0x8000a9 <InterruptCount+0x1>
     482:	89 2b       	or	r24, r25
     484:	09 f0       	breq	.+2      	; 0x488 <ExitInterrupt+0x20>
     486:	5f c0       	rjmp	.+190    	; 0x546 <irqen+0x8>
	{
		//Update the time stamp in the current task
		pCurrentTask->TimeStamp = TStamp;
     488:	40 91 a2 00 	lds	r20, 0x00A2	; 0x8000a2 <pCurrentTask>
     48c:	50 91 a3 00 	lds	r21, 0x00A3	; 0x8000a3 <pCurrentTask+0x1>
     490:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <TStamp>
     494:	90 91 61 01 	lds	r25, 0x0161	; 0x800161 <TStamp+0x1>
     498:	fa 01       	movw	r30, r20
     49a:	95 87       	std	Z+13, r25	; 0x0d
     49c:	84 87       	std	Z+12, r24	; 0x0c
		//get the next task and put the current
		//task back into the priority queue
		Replace(&ActiveTasks,(void **)&pNextTask,pCurrentTask);
     49e:	66 ea       	ldi	r22, 0xA6	; 166
     4a0:	70 e0       	ldi	r23, 0x00	; 0
     4a2:	88 e9       	ldi	r24, 0x98	; 152
     4a4:	90 e0       	ldi	r25, 0x00	; 0
     4a6:	8e d7       	rcall	.+3868   	; 0x13c4 <Replace>
		//check to see if we got the same task back
		if(pNextTask != pCurrentTask)
     4a8:	e0 91 a6 00 	lds	r30, 0x00A6	; 0x8000a6 <pNextTask>
     4ac:	f0 91 a7 00 	lds	r31, 0x00A7	; 0x8000a7 <pNextTask+0x1>
     4b0:	80 91 a2 00 	lds	r24, 0x00A2	; 0x8000a2 <pCurrentTask>
     4b4:	90 91 a3 00 	lds	r25, 0x00A3	; 0x8000a3 <pCurrentTask+0x1>
     4b8:	e8 17       	cp	r30, r24
     4ba:	f9 07       	cpc	r31, r25
     4bc:	09 f4       	brne	.+2      	; 0x4c0 <ExitInterrupt+0x58>
     4be:	43 c0       	rjmp	.+134    	; 0x546 <irqen+0x8>
		{
			//increment the swap counter
			pNextTask->TcbSwaps++;
     4c0:	86 85       	ldd	r24, Z+14	; 0x0e
     4c2:	97 85       	ldd	r25, Z+15	; 0x0f
     4c4:	01 96       	adiw	r24, 0x01	; 1
     4c6:	97 87       	std	Z+15, r25	; 0x0f
     4c8:	86 87       	std	Z+14, r24	; 0x0e
			// the size of the stack
			// ignore return address on
			// stack to 
			// Exit Interrupt
			//-----------------------------
			asm volatile (
     4ca:	9e b7       	in	r25, 0x3e	; 62
     4cc:	8d b7       	in	r24, 0x3d	; 61
     4ce:	02 96       	adiw	r24, 0x02	; 2
     4d0:	a0 91 a2 00 	lds	r26, 0x00A2	; 0x8000a2 <pCurrentTask>
     4d4:	b0 91 a3 00 	lds	r27, 0x00A3	; 0x8000a3 <pCurrentTask+0x1>
     4d8:	8d 93       	st	X+, r24
     4da:	9d 93       	st	X+, r25
			"lds	r26, pCurrentTask		\n\t"	//get address of current task
			"lds	r27, pCurrentTask + 1	\n\t"
			"st		x+, r24					\n\t"	//save stack pointer in TCB
			"st		x+, r25					\n\t"
			);
			pCurrentTask = pNextTask;	//update current task
     4dc:	f0 93 a3 00 	sts	0x00A3, r31	; 0x8000a3 <pCurrentTask+0x1>
     4e0:	e0 93 a2 00 	sts	0x00A2, r30	; 0x8000a2 <pCurrentTask>
			RESTORE_CONTEXT();		//restore next task context
     4e4:	a0 91 a6 00 	lds	r26, 0x00A6	; 0x8000a6 <pNextTask>
     4e8:	b0 91 a7 00 	lds	r27, 0x00A7	; 0x8000a7 <pNextTask+0x1>
     4ec:	cd 91       	ld	r28, X+
     4ee:	cd bf       	out	0x3d, r28	; 61
     4f0:	dd 91       	ld	r29, X+
     4f2:	de bf       	out	0x3e, r29	; 62
     4f4:	0f 90       	pop	r0
     4f6:	1f 90       	pop	r1
     4f8:	2f 90       	pop	r2
     4fa:	3f 90       	pop	r3
     4fc:	4f 90       	pop	r4
     4fe:	5f 90       	pop	r5
     500:	6f 90       	pop	r6
     502:	7f 90       	pop	r7
     504:	8f 90       	pop	r8
     506:	9f 90       	pop	r9
     508:	af 90       	pop	r10
     50a:	bf 90       	pop	r11
     50c:	cf 90       	pop	r12
     50e:	df 90       	pop	r13
     510:	ef 90       	pop	r14
     512:	ff 90       	pop	r15
     514:	0f 91       	pop	r16
     516:	1f 91       	pop	r17
     518:	2f 91       	pop	r18
     51a:	3f 91       	pop	r19
     51c:	4f 91       	pop	r20
     51e:	5f 91       	pop	r21
     520:	6f 91       	pop	r22
     522:	7f 91       	pop	r23
     524:	8f 91       	pop	r24
     526:	9f 91       	pop	r25
     528:	af 91       	pop	r26
     52a:	bf 91       	pop	r27
     52c:	cf 91       	pop	r28
     52e:	df 91       	pop	r29
     530:	ef 91       	pop	r30
     532:	ff 91       	pop	r31
     534:	f7 fd       	sbrc	r31, 7
     536:	03 c0       	rjmp	.+6      	; 0x53e <irqen>
     538:	ff bf       	out	0x3f, r31	; 63
     53a:	ff 91       	pop	r31
     53c:	08 95       	ret

0000053e <irqen>:
     53e:	ff 77       	andi	r31, 0x7F	; 127
     540:	ff bf       	out	0x3f, r31	; 63
     542:	ff 91       	pop	r31
     544:	18 95       	reti
     546:	08 95       	ret

00000548 <EnterInterrupt>:
}

void EnterInterrupt(void)
{
	//Increment interrupt level
	++InterruptCount;
     548:	80 91 a8 00 	lds	r24, 0x00A8	; 0x8000a8 <InterruptCount>
     54c:	90 91 a9 00 	lds	r25, 0x00A9	; 0x8000a9 <InterruptCount+0x1>
     550:	01 96       	adiw	r24, 0x01	; 1
     552:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <InterruptCount+0x1>
     556:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <InterruptCount>
     55a:	08 95       	ret

0000055c <TaskIdle>:
//	allowed to use any blocking objects, such
//	as PendSemaphore, etc.
//************************************************
void TaskIdle(void *arg)  __attribute__ ( ( noreturn ) );
void TaskIdle(void *arg)
{
     55c:	cf 93       	push	r28
     55e:	df 93       	push	r29
     560:	00 d0       	rcall	.+0      	; 0x562 <TaskIdle+0x6>
     562:	cd b7       	in	r28, 0x3d	; 61
     564:	de b7       	in	r29, 0x3e	; 62
	volatile int i=0;
     566:	1a 82       	std	Y+2, r1	; 0x02
     568:	19 82       	std	Y+1, r1	; 0x01

	while(1)
	{
		i++;	//busy work for the idle task
     56a:	89 81       	ldd	r24, Y+1	; 0x01
     56c:	9a 81       	ldd	r25, Y+2	; 0x02
     56e:	01 96       	adiw	r24, 0x01	; 1
     570:	9a 83       	std	Y+2, r25	; 0x02
     572:	89 83       	std	Y+1, r24	; 0x01
     574:	fa cf       	rjmp	.-12     	; 0x56a <TaskIdle+0xe>

00000576 <MidiIn>:
void MidiIn(void *arg)  __attribute__ ( ( noreturn ) );
void MidiIn(void *arg)
{
	char c;	//character from midi port
	//Initialize Parser Descriptor block
	InitMidiParseDesc(&MidiParseDesc);
     576:	84 ef       	ldi	r24, 0xF4	; 244
     578:	90 e0       	ldi	r25, 0x00	; 0
     57a:	e6 d2       	rcall	.+1484   	; 0xb48 <InitMidiParseDesc>
	while(1)	//infinite loop
	{
		c = USART_GetC();	//get character from midi port
     57c:	cd da       	rcall	.-2662   	; 0xfffffb18 <__eeprom_end+0xff7efb18>
		ParseMidi(&MidiParseDesc,c);	//parse byte
     57e:	68 2f       	mov	r22, r24
     580:	84 ef       	ldi	r24, 0xF4	; 244
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	69 d4       	rcall	.+2258   	; 0xe58 <ParseMidi>
     586:	fa cf       	rjmp	.-12     	; 0x57c <MidiIn+0x6>

00000588 <TaskMidiClock>:
		//-----------------------------
		// Wait for MidiParser to
		// decode a MIDICLOCK real
		// time message
		//-----------------------------
		PendSemaphore(pSemClock,0);
     588:	60 e0       	ldi	r22, 0x00	; 0
     58a:	70 e0       	ldi	r23, 0x00	; 0
     58c:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <pSemClock>
     590:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <pSemClock+0x1>
     594:	5c d5       	rcall	.+2744   	; 0x104e <PendSemaphore>
		//-----------------------------
		// Delay for 1.0 mSec to make
		// a 1.0mSec pulse on the Midi
		// Clock output
		//-----------------------------
		TimeDelay(1);
     596:	81 e0       	ldi	r24, 0x01	; 1
     598:	90 e0       	ldi	r25, 0x00	; 0
     59a:	d4 d9       	rcall	.-3160   	; 0xfffff944 <__eeprom_end+0xff7ef944>
		//-----------------------------
		// Set the midi clock output
		// back to zero
		//-----------------------------
		ClearGatePort(GATE_CLOCK);
     59c:	83 e0       	ldi	r24, 0x03	; 3
     59e:	92 dd       	rcall	.-1244   	; 0xc4 <ClearGatePort>
     5a0:	f3 cf       	rjmp	.-26     	; 0x588 <TaskMidiClock>

000005a2 <TaskMidiReset>:
		//------------------------------
		// Wait for the MidiParser to
		// decode a Reset Real time
		// message.
		//------------------------------
		PendSemaphore(pSemReset,0);	
     5a2:	60 e0       	ldi	r22, 0x00	; 0
     5a4:	70 e0       	ldi	r23, 0x00	; 0
     5a6:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <pSemReset>
     5aa:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <pSemReset+0x1>
     5ae:	4f d5       	rcall	.+2718   	; 0x104e <PendSemaphore>
		TimeDelay(10);	//delay an extra 10mS
     5b0:	8a e0       	ldi	r24, 0x0A	; 10
     5b2:	90 e0       	ldi	r25, 0x00	; 0
     5b4:	c7 d9       	rcall	.-3186   	; 0xfffff944 <__eeprom_end+0xff7ef944>
		//------------------------------
		// Set the RESET output back to
		// zero
		//------------------------------
		ClearGatePort(GATE_RESET);	//clear bit
     5b6:	81 e0       	ldi	r24, 0x01	; 1
     5b8:	85 dd       	rcall	.-1270   	; 0xc4 <ClearGatePort>
     5ba:	f3 cf       	rjmp	.-26     	; 0x5a2 <TaskMidiReset>

000005bc <Timer0Init>:
//		Timer0Init
//	Initialize Timer 0
//-----------------------------------
void Timer0Init(void)
{
	TCCR0 = 0x00;	//stop timer
     5bc:	13 be       	out	0x33, r1	; 51
	TCNT0 = 0x80;	//set count register
     5be:	80 e8       	ldi	r24, 0x80	; 128
     5c0:	82 bf       	out	0x32, r24	; 50
	OCR0 = 0xff;	//set output compare
     5c2:	8f ef       	ldi	r24, 0xFF	; 255
     5c4:	81 bf       	out	0x31, r24	; 49
	//Divide clock by 64
	TCCR0 = BIT(CS01) | BIT(CS00); //start timer
     5c6:	83 e0       	ldi	r24, 0x03	; 3
     5c8:	83 bf       	out	0x33, r24	; 51
	TIMSK |= BIT(TOIE0);
     5ca:	89 b7       	in	r24, 0x39	; 57
     5cc:	82 60       	ori	r24, 0x02	; 2
     5ce:	89 bf       	out	0x39, r24	; 57
     5d0:	08 95       	ret

000005d2 <__vector_7>:
//	system.
//************************************************
void TIMER0_OVF_vect(void) __attribute__ ((naked));
void TIMER0_OVF_vect(void)
{
	SAVE_IRQ();			//Save Context
     5d2:	ff 93       	push	r31
     5d4:	ff b7       	in	r31, 0x3f	; 63
     5d6:	f0 68       	ori	r31, 0x80	; 128
     5d8:	ff 93       	push	r31
     5da:	ef 93       	push	r30
     5dc:	df 93       	push	r29
     5de:	cf 93       	push	r28
     5e0:	bf 93       	push	r27
     5e2:	af 93       	push	r26
     5e4:	9f 93       	push	r25
     5e6:	8f 93       	push	r24
     5e8:	7f 93       	push	r23
     5ea:	6f 93       	push	r22
     5ec:	5f 93       	push	r21
     5ee:	4f 93       	push	r20
     5f0:	3f 93       	push	r19
     5f2:	2f 93       	push	r18
     5f4:	1f 93       	push	r17
     5f6:	0f 93       	push	r16
     5f8:	ff 92       	push	r15
     5fa:	ef 92       	push	r14
     5fc:	df 92       	push	r13
     5fe:	cf 92       	push	r12
     600:	bf 92       	push	r11
     602:	af 92       	push	r10
     604:	9f 92       	push	r9
     606:	8f 92       	push	r8
     608:	7f 92       	push	r7
     60a:	6f 92       	push	r6
     60c:	5f 92       	push	r5
     60e:	4f 92       	push	r4
     610:	3f 92       	push	r3
     612:	2f 92       	push	r2
     614:	1f 92       	push	r1
     616:	11 24       	eor	r1, r1
     618:	0f 92       	push	r0
	EnterInterrupt();	//Extra processing
     61a:	96 df       	rcall	.-212    	; 0x548 <EnterInterrupt>
	TCNT0 = 0x80;		//reload timer data
     61c:	80 e8       	ldi	r24, 0x80	; 128
     61e:	82 bf       	out	0x32, r24	; 50
	TimerTicker();		//real time clock service
     620:	a7 d9       	rcall	.-3250   	; 0xfffff970 <__eeprom_end+0xff7ef970>
	ExitInterrupt();	//Interrupt Exit Processing
     622:	22 df       	rcall	.-444    	; 0x468 <ExitInterrupt>
	RESTORE_IRQ();		//Restore Context
     624:	0f 90       	pop	r0
     626:	1f 90       	pop	r1
     628:	2f 90       	pop	r2
     62a:	3f 90       	pop	r3
     62c:	4f 90       	pop	r4
     62e:	5f 90       	pop	r5
     630:	6f 90       	pop	r6
     632:	7f 90       	pop	r7
     634:	8f 90       	pop	r8
     636:	9f 90       	pop	r9
     638:	af 90       	pop	r10
     63a:	bf 90       	pop	r11
     63c:	cf 90       	pop	r12
     63e:	df 90       	pop	r13
     640:	ef 90       	pop	r14
     642:	ff 90       	pop	r15
     644:	0f 91       	pop	r16
     646:	1f 91       	pop	r17
     648:	2f 91       	pop	r18
     64a:	3f 91       	pop	r19
     64c:	4f 91       	pop	r20
     64e:	5f 91       	pop	r21
     650:	6f 91       	pop	r22
     652:	7f 91       	pop	r23
     654:	8f 91       	pop	r24
     656:	9f 91       	pop	r25
     658:	af 91       	pop	r26
     65a:	bf 91       	pop	r27
     65c:	cf 91       	pop	r28
     65e:	df 91       	pop	r29
     660:	ef 91       	pop	r30
     662:	ff 91       	pop	r31
     664:	ff 77       	andi	r31, 0x7F	; 127
     666:	ff bf       	out	0x3f, r31	; 63
     668:	ff 91       	pop	r31
     66a:	18 95       	reti

0000066c <reset>:
// Init Code
//**********************************************

void reset(void)
{
	MCUCR |= BIT(SRE);	//enable external bus
     66c:	85 b7       	in	r24, 0x35	; 53
     66e:	80 68       	ori	r24, 0x80	; 128
     670:	85 bf       	out	0x35, r24	; 53
	DDRB |= BIT(0) | BIT(1) | BIT(2);	//S/H Select Bits
     672:	87 b3       	in	r24, 0x17	; 23
     674:	87 60       	ori	r24, 0x07	; 7
     676:	87 bb       	out	0x17, r24	; 23
	GATE_PORT = 0;		//all gates 0
     678:	10 92 00 c0 	sts	0xC000, r1	; 0x80c000 <__bss_end+0xbe9e>
	LED_PORT = 0xff;	//all LEDs off
     67c:	8f ef       	ldi	r24, 0xFF	; 255
     67e:	80 93 00 c4 	sts	0xC400, r24	; 0x80c400 <__bss_end+0xc29e>
	InitSPI();			//initialize SPI port
     682:	8a d8       	rcall	.-3820   	; 0xfffff798 <__eeprom_end+0xff7ef798>
	Timer0Init();		//initialize timer 0
     684:	9b df       	rcall	.-202    	; 0x5bc <Timer0Init>
	USART_Init();		//initialize midi port
     686:	3c cb       	rjmp	.-2440   	; 0xfffffd00 <__eeprom_end+0xff7efd00>

00000688 <main>:

//**********************************************
//		Startup
//**********************************************
int main()
{
     688:	0f 93       	push	r16
     68a:	1f 93       	push	r17
	Disable();	//disable interrupts
     68c:	00 dd       	rcall	.-1536   	; 0x8e <Disable>
	reset();	//initialize stuff
     68e:	ee df       	rcall	.-36     	; 0x66c <reset>
	//initialize memory allocation
	OS_InitMalloc(0, 0);
     690:	60 e0       	ldi	r22, 0x00	; 0
     692:	70 e0       	ldi	r23, 0x00	; 0
     694:	80 e0       	ldi	r24, 0x00	; 0
     696:	90 e0       	ldi	r25, 0x00	; 0
     698:	7c d1       	rcall	.+760    	; 0x992 <OS_InitMalloc>
	//initialize real time OS
	OSInit();
     69a:	d2 d4       	rcall	.+2468   	; 0x1040 <OSInit>
	//------------------------------
	// Create tasks and put their
	// Task Control Blocks into the
	// priority queue
	//------------------------------
	CreateTask(&MidiInTCB,MidiIn,256,10,0);
     69c:	00 e0       	ldi	r16, 0x00	; 0
     69e:	10 e0       	ldi	r17, 0x00	; 0
     6a0:	2a e0       	ldi	r18, 0x0A	; 10
     6a2:	30 e0       	ldi	r19, 0x00	; 0
     6a4:	40 e0       	ldi	r20, 0x00	; 0
     6a6:	51 e0       	ldi	r21, 0x01	; 1
     6a8:	6b eb       	ldi	r22, 0xBB	; 187
     6aa:	72 e0       	ldi	r23, 0x02	; 2
     6ac:	8a e1       	ldi	r24, 0x1A	; 26
     6ae:	91 e0       	ldi	r25, 0x01	; 1
     6b0:	c3 dd       	rcall	.-1146   	; 0x238 <CreateTask>
	Insert(&ActiveTasks,&MidiInTCB);
     6b2:	6a e1       	ldi	r22, 0x1A	; 26
     6b4:	71 e0       	ldi	r23, 0x01	; 1
     6b6:	88 e9       	ldi	r24, 0x98	; 152
     6b8:	90 e0       	ldi	r25, 0x00	; 0
     6ba:	fa d5       	rcall	.+3060   	; 0x12b0 <Insert>
	CreateTask(&IdleTCB,TaskIdle,256,1,0);
     6bc:	21 e0       	ldi	r18, 0x01	; 1
     6be:	30 e0       	ldi	r19, 0x00	; 0
     6c0:	40 e0       	ldi	r20, 0x00	; 0
     6c2:	51 e0       	ldi	r21, 0x01	; 1
     6c4:	6e ea       	ldi	r22, 0xAE	; 174
     6c6:	72 e0       	ldi	r23, 0x02	; 2
     6c8:	80 e0       	ldi	r24, 0x00	; 0
     6ca:	91 e0       	ldi	r25, 0x01	; 1
     6cc:	b5 dd       	rcall	.-1174   	; 0x238 <CreateTask>
	Insert(&ActiveTasks,&IdleTCB);
     6ce:	60 e0       	ldi	r22, 0x00	; 0
     6d0:	71 e0       	ldi	r23, 0x01	; 1
     6d2:	88 e9       	ldi	r24, 0x98	; 152
     6d4:	90 e0       	ldi	r25, 0x00	; 0
     6d6:	ec d5       	rcall	.+3032   	; 0x12b0 <Insert>
	CreateTask(&TaskMidiClockTCB,TaskMidiClock,256,5,0);
     6d8:	25 e0       	ldi	r18, 0x05	; 5
     6da:	30 e0       	ldi	r19, 0x00	; 0
     6dc:	40 e0       	ldi	r20, 0x00	; 0
     6de:	51 e0       	ldi	r21, 0x01	; 1
     6e0:	64 ec       	ldi	r22, 0xC4	; 196
     6e2:	72 e0       	ldi	r23, 0x02	; 2
     6e4:	8c ed       	ldi	r24, 0xDC	; 220
     6e6:	90 e0       	ldi	r25, 0x00	; 0
     6e8:	a7 dd       	rcall	.-1202   	; 0x238 <CreateTask>
	Insert(&ActiveTasks,&TaskMidiClockTCB);
     6ea:	6c ed       	ldi	r22, 0xDC	; 220
     6ec:	70 e0       	ldi	r23, 0x00	; 0
     6ee:	88 e9       	ldi	r24, 0x98	; 152
     6f0:	90 e0       	ldi	r25, 0x00	; 0
     6f2:	de d5       	rcall	.+3004   	; 0x12b0 <Insert>
	CreateTask(&TaskMidiResetTCB,TaskMidiReset,256,5,0);
     6f4:	25 e0       	ldi	r18, 0x05	; 5
     6f6:	30 e0       	ldi	r19, 0x00	; 0
     6f8:	40 e0       	ldi	r20, 0x00	; 0
     6fa:	51 e0       	ldi	r21, 0x01	; 1
     6fc:	61 ed       	ldi	r22, 0xD1	; 209
     6fe:	72 e0       	ldi	r23, 0x02	; 2
     700:	84 ec       	ldi	r24, 0xC4	; 196
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	99 dd       	rcall	.-1230   	; 0x238 <CreateTask>
	Insert(&ActiveTasks,&TaskMidiResetTCB);
     706:	64 ec       	ldi	r22, 0xC4	; 196
     708:	70 e0       	ldi	r23, 0x00	; 0
     70a:	88 e9       	ldi	r24, 0x98	; 152
     70c:	90 e0       	ldi	r25, 0x00	; 0
     70e:	d0 d5       	rcall	.+2976   	; 0x12b0 <Insert>
	//-----------------------------------
	// Initialize the step sequencer
	//----------------------------------
	InitSeq();
     710:	2b d8       	rcall	.-4010   	; 0xfffff768 <__eeprom_end+0xff7ef768>
	//----------------------------------
	// Create the semaphores for their
	// respective tasks.
	//-----------------------------------
	pSemClock = NewSemaphore(0,SEMAPHORE_MODE_BLOCKING);
     712:	60 e0       	ldi	r22, 0x00	; 0
     714:	70 e0       	ldi	r23, 0x00	; 0
     716:	80 e0       	ldi	r24, 0x00	; 0
     718:	90 e0       	ldi	r25, 0x00	; 0
     71a:	15 dd       	rcall	.-1494   	; 0x146 <NewSemaphore>
     71c:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <pSemClock+0x1>
     720:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <pSemClock>
	pSemReset = NewSemaphore(0,SEMAPHORE_MODE_BLOCKING);
     724:	60 e0       	ldi	r22, 0x00	; 0
     726:	70 e0       	ldi	r23, 0x00	; 0
     728:	80 e0       	ldi	r24, 0x00	; 0
     72a:	90 e0       	ldi	r25, 0x00	; 0
     72c:	0c dd       	rcall	.-1512   	; 0x146 <NewSemaphore>
     72e:	90 93 33 01 	sts	0x0133, r25	; 0x800133 <pSemReset+0x1>
     732:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <pSemReset>
	//-----------------
	// Run the tasks
	// StartOS will
	// never return
	//-----------------
	StartOS();
     736:	c8 d8       	rcall	.-3696   	; 0xfffff8c8 <__eeprom_end+0xff7ef8c8>
	return 0;
}
     738:	80 e0       	ldi	r24, 0x00	; 0
     73a:	90 e0       	ldi	r25, 0x00	; 0
     73c:	1f 91       	pop	r17
     73e:	0f 91       	pop	r16
     740:	08 95       	ret

00000742 <malloc>:
		pointer to memory block on success,
		OR NULL on fail
*******************************************/

void *malloc(size_t len)
{
     742:	ef 92       	push	r14
     744:	ff 92       	push	r15
     746:	0f 93       	push	r16
     748:	1f 93       	push	r17
     74a:	cf 93       	push	r28
     74c:	df 93       	push	r29
     74e:	8c 01       	movw	r16, r24
	 * Our minimum chunk size is the size of a pointer (plus the
	 * size of the "sz" field, but we don't need to account for
	 * this), otherwise we could not possibly fit a freelist entry
	 * into the chunk later.
	 */
	PendSemaphore(&MallocBlocker,0);
     750:	60 e0       	ldi	r22, 0x00	; 0
     752:	70 e0       	ldi	r23, 0x00	; 0
     754:	8e e4       	ldi	r24, 0x4E	; 78
     756:	91 e0       	ldi	r25, 0x01	; 1
     758:	7a d4       	rcall	.+2292   	; 0x104e <PendSemaphore>
	if (len < sizeof(struct __freelist) - sizeof(size_t))
     75a:	02 30       	cpi	r16, 0x02	; 2
     75c:	11 05       	cpc	r17, r1
     75e:	10 f4       	brcc	.+4      	; 0x764 <malloc+0x22>
		len = sizeof(struct __freelist) - sizeof(size_t);
     760:	02 e0       	ldi	r16, 0x02	; 2
     762:	10 e0       	ldi	r17, 0x00	; 0
	 * would match exactly.  If we found one, we are done.  While
	 * walking, note down the size of the largest chunk we found
	 * that would still fit the request -- we need it for step 2.
	 *
	 */
	for (s = 0, fp1 = __flp, fp2 = 0;
     764:	e0 90 79 00 	lds	r14, 0x0079	; 0x800079 <__flp>
     768:	f0 90 7a 00 	lds	r15, 0x007A	; 0x80007a <__flp+0x1>
     76c:	e7 01       	movw	r28, r14
     76e:	80 e0       	ldi	r24, 0x00	; 0
     770:	90 e0       	ldi	r25, 0x00	; 0
     772:	e0 e0       	ldi	r30, 0x00	; 0
     774:	f0 e0       	ldi	r31, 0x00	; 0
     776:	20 97       	sbiw	r28, 0x00	; 0
     778:	19 f1       	breq	.+70     	; 0x7c0 <malloc+0x7e>
	     fp1;
	     fp2 = fp1, fp1 = fp1->nx) {
		if (fp1->sz == len) {
     77a:	28 81       	ld	r18, Y
     77c:	39 81       	ldd	r19, Y+1	; 0x01
     77e:	5a 81       	ldd	r21, Y+2	; 0x02
     780:	4b 81       	ldd	r20, Y+3	; 0x03
     782:	02 17       	cp	r16, r18
     784:	13 07       	cpc	r17, r19
     786:	79 f4       	brne	.+30     	; 0x7a6 <malloc+0x64>
			/*
			 * Found it.  Disconnect the chunk from the
			 * freelist, and return it.
			 */
			if (fp2)
     788:	30 97       	sbiw	r30, 0x00	; 0
     78a:	19 f0       	breq	.+6      	; 0x792 <malloc+0x50>
				fp2->nx = fp1->nx;
     78c:	52 83       	std	Z+2, r21	; 0x02
     78e:	43 83       	std	Z+3, r20	; 0x03
     790:	04 c0       	rjmp	.+8      	; 0x79a <malloc+0x58>
			else
				__flp = fp1->nx;
     792:	50 93 79 00 	sts	0x0079, r21	; 0x800079 <__flp>
     796:	40 93 7a 00 	sts	0x007A, r20	; 0x80007a <__flp+0x1>
			PostSemaphore(&MallocBlocker,0);
     79a:	60 e0       	ldi	r22, 0x00	; 0
     79c:	70 e0       	ldi	r23, 0x00	; 0
     79e:	8e e4       	ldi	r24, 0x4E	; 78
     7a0:	91 e0       	ldi	r25, 0x01	; 1
     7a2:	b5 d4       	rcall	.+2410   	; 0x110e <PostSemaphore>
     7a4:	32 c0       	rjmp	.+100    	; 0x80a <malloc+0xc8>
			return &(fp1->nx);
		}
		if (fp1->sz > len) {
     7a6:	02 17       	cp	r16, r18
     7a8:	13 07       	cpc	r17, r19
     7aa:	30 f4       	brcc	.+12     	; 0x7b8 <malloc+0x76>
			if (s == 0 || fp1->sz < s)
     7ac:	00 97       	sbiw	r24, 0x00	; 0
     7ae:	19 f0       	breq	.+6      	; 0x7b6 <malloc+0x74>
     7b0:	28 17       	cp	r18, r24
     7b2:	39 07       	cpc	r19, r25
     7b4:	08 f4       	brcc	.+2      	; 0x7b8 <malloc+0x76>
     7b6:	c9 01       	movw	r24, r18
	 * that would still fit the request -- we need it for step 2.
	 *
	 */
	for (s = 0, fp1 = __flp, fp2 = 0;
	     fp1;
	     fp2 = fp1, fp1 = fp1->nx) {
     7b8:	fe 01       	movw	r30, r28
     7ba:	c5 2f       	mov	r28, r21
     7bc:	d4 2f       	mov	r29, r20
     7be:	db cf       	rjmp	.-74     	; 0x776 <malloc+0x34>
	 * difference between the requested size and the size of the
	 * chunk found is large enough for another freelist entry; if
	 * not, just enlarge the request size to what we have found,
	 * and use the entire chunk.
	 */
	if (s) {
     7c0:	00 97       	sbiw	r24, 0x00	; 0
     7c2:	b1 f1       	breq	.+108    	; 0x830 <malloc+0xee>
		if (s - len < sizeof(struct __freelist))
     7c4:	9c 01       	movw	r18, r24
     7c6:	20 1b       	sub	r18, r16
     7c8:	31 0b       	sbc	r19, r17
     7ca:	24 30       	cpi	r18, 0x04	; 4
     7cc:	31 05       	cpc	r19, r1
     7ce:	28 f4       	brcc	.+10     	; 0x7da <malloc+0x98>
     7d0:	8c 01       	movw	r16, r24
			len = s;
		for (fp1 = __flp, fp2 = 0;
     7d2:	03 c0       	rjmp	.+6      	; 0x7da <malloc+0x98>
		     fp1;
		     fp2 = fp1, fp1 = fp1->nx) {
     7d4:	e7 01       	movw	r28, r14
     7d6:	e2 80       	ldd	r14, Z+2	; 0x02
     7d8:	f3 80       	ldd	r15, Z+3	; 0x03
	 * and use the entire chunk.
	 */
	if (s) {
		if (s - len < sizeof(struct __freelist))
			len = s;
		for (fp1 = __flp, fp2 = 0;
     7da:	e1 14       	cp	r14, r1
     7dc:	f1 04       	cpc	r15, r1
     7de:	41 f1       	breq	.+80     	; 0x830 <malloc+0xee>
		     fp1;
		     fp2 = fp1, fp1 = fp1->nx) {
			if (fp1->sz == s) {
     7e0:	f7 01       	movw	r30, r14
     7e2:	20 81       	ld	r18, Z
     7e4:	31 81       	ldd	r19, Z+1	; 0x01
     7e6:	82 17       	cp	r24, r18
     7e8:	93 07       	cpc	r25, r19
     7ea:	a1 f7       	brne	.-24     	; 0x7d4 <malloc+0x92>
				if (len == s) {
     7ec:	08 17       	cp	r16, r24
     7ee:	19 07       	cpc	r17, r25
     7f0:	99 f4       	brne	.+38     	; 0x818 <malloc+0xd6>
     7f2:	82 81       	ldd	r24, Z+2	; 0x02
     7f4:	93 81       	ldd	r25, Z+3	; 0x03
					/*
					 * Use entire chunk; same as
					 * above.
					 */
					if (fp2)
     7f6:	20 97       	sbiw	r28, 0x00	; 0
     7f8:	51 f0       	breq	.+20     	; 0x80e <malloc+0xcc>
						fp2->nx = fp1->nx;
     7fa:	9b 83       	std	Y+3, r25	; 0x03
     7fc:	8a 83       	std	Y+2, r24	; 0x02
					else
						__flp = fp1->nx;
					PostSemaphore(&MallocBlocker,0);
     7fe:	60 e0       	ldi	r22, 0x00	; 0
     800:	70 e0       	ldi	r23, 0x00	; 0
     802:	8e e4       	ldi	r24, 0x4E	; 78
     804:	91 e0       	ldi	r25, 0x01	; 1
     806:	83 d4       	rcall	.+2310   	; 0x110e <PostSemaphore>
					return &(fp1->nx);
     808:	e7 01       	movw	r28, r14
     80a:	22 96       	adiw	r28, 0x02	; 2
     80c:	51 c0       	rjmp	.+162    	; 0x8b0 <malloc+0x16e>
					 * above.
					 */
					if (fp2)
						fp2->nx = fp1->nx;
					else
						__flp = fp1->nx;
     80e:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <__flp+0x1>
     812:	80 93 79 00 	sts	0x0079, r24	; 0x800079 <__flp>
     816:	f3 cf       	rjmp	.-26     	; 0x7fe <malloc+0xbc>
				 * entry, and note down the size of
				 * the new chunk before returning it
				 * to the caller.
				 */
				cp = (char *)fp1;
				s -= len;
     818:	80 1b       	sub	r24, r16
     81a:	91 0b       	sbc	r25, r17
				cp += s;
				fp2 = (struct __freelist *)cp;
				fp2->sz = len;
     81c:	e7 01       	movw	r28, r14
     81e:	c8 0f       	add	r28, r24
     820:	d9 1f       	adc	r29, r25
     822:	09 93       	st	Y+, r16
     824:	19 93       	st	Y+, r17
				fp1->sz = s - sizeof(size_t);
     826:	02 97       	sbiw	r24, 0x02	; 2
     828:	f7 01       	movw	r30, r14
     82a:	91 83       	std	Z+1, r25	; 0x01
     82c:	80 83       	st	Z, r24
     82e:	33 c0       	rjmp	.+102    	; 0x896 <malloc+0x154>
	 * Under Unix, the "break value" was the end of the data
	 * segment as dynamically requested from the operating system.
	 * Since we don't have an operating system, just make sure
	 * that we don't collide with the stack.
	 */
	if (__brkval == 0)
     830:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <__brkval>
     834:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <__brkval+0x1>
     838:	89 2b       	or	r24, r25
     83a:	41 f4       	brne	.+16     	; 0x84c <malloc+0x10a>
		__brkval = __malloc_heap_start;
     83c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__malloc_heap_start>
     840:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <__malloc_heap_start+0x1>
     844:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <__brkval+0x1>
     848:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <__brkval>
	cp = __malloc_heap_end;
     84c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
     850:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__data_start+0x1>
	if (cp == 0)
     854:	00 97       	sbiw	r24, 0x00	; 0
     856:	41 f4       	brne	.+16     	; 0x868 <malloc+0x126>
		cp = STACK_POINTER() - __malloc_margin;
     858:	8d b7       	in	r24, 0x3d	; 61
     85a:	9e b7       	in	r25, 0x3e	; 62
     85c:	20 91 64 00 	lds	r18, 0x0064	; 0x800064 <__malloc_margin>
     860:	30 91 65 00 	lds	r19, 0x0065	; 0x800065 <__malloc_margin+0x1>
     864:	82 1b       	sub	r24, r18
     866:	93 0b       	sbc	r25, r19
	avail = cp - __brkval;
     868:	c0 91 4c 01 	lds	r28, 0x014C	; 0x80014c <__brkval>
     86c:	d0 91 4d 01 	lds	r29, 0x014D	; 0x80014d <__brkval+0x1>
     870:	8c 1b       	sub	r24, r28
     872:	9d 0b       	sbc	r25, r29
	/*
	 * Both tests below are needed to catch the case len >= 0xfffe.
	 */
	if (avail >= len && avail >= len + sizeof(size_t)) {
     874:	80 17       	cp	r24, r16
     876:	91 07       	cpc	r25, r17
     878:	a0 f0       	brcs	.+40     	; 0x8a2 <malloc+0x160>
     87a:	98 01       	movw	r18, r16
     87c:	2e 5f       	subi	r18, 0xFE	; 254
     87e:	3f 4f       	sbci	r19, 0xFF	; 255
     880:	82 17       	cp	r24, r18
     882:	93 07       	cpc	r25, r19
     884:	70 f0       	brcs	.+28     	; 0x8a2 <malloc+0x160>
		fp1 = (struct __freelist *)__brkval;
		__brkval += len + sizeof(size_t);
     886:	2c 0f       	add	r18, r28
     888:	3d 1f       	adc	r19, r29
     88a:	30 93 4d 01 	sts	0x014D, r19	; 0x80014d <__brkval+0x1>
     88e:	20 93 4c 01 	sts	0x014C, r18	; 0x80014c <__brkval>
		fp1->sz = len;
     892:	09 93       	st	Y+, r16
     894:	19 93       	st	Y+, r17
		PostSemaphore(&MallocBlocker,0);
     896:	60 e0       	ldi	r22, 0x00	; 0
     898:	70 e0       	ldi	r23, 0x00	; 0
     89a:	8e e4       	ldi	r24, 0x4E	; 78
     89c:	91 e0       	ldi	r25, 0x01	; 1
     89e:	37 d4       	rcall	.+2158   	; 0x110e <PostSemaphore>
		return &(fp1->nx);
     8a0:	07 c0       	rjmp	.+14     	; 0x8b0 <malloc+0x16e>
	}
	/*
	 * Step 4: There's no help, just fail. :-/
	 */
	 PostSemaphore(&MallocBlocker,0);
     8a2:	60 e0       	ldi	r22, 0x00	; 0
     8a4:	70 e0       	ldi	r23, 0x00	; 0
     8a6:	8e e4       	ldi	r24, 0x4E	; 78
     8a8:	91 e0       	ldi	r25, 0x01	; 1
     8aa:	31 d4       	rcall	.+2146   	; 0x110e <PostSemaphore>
	return 0;
     8ac:	c0 e0       	ldi	r28, 0x00	; 0
     8ae:	d0 e0       	ldi	r29, 0x00	; 0
}
     8b0:	ce 01       	movw	r24, r28
     8b2:	df 91       	pop	r29
     8b4:	cf 91       	pop	r28
     8b6:	1f 91       	pop	r17
     8b8:	0f 91       	pop	r16
     8ba:	ff 90       	pop	r15
     8bc:	ef 90       	pop	r14
     8be:	08 95       	ret

000008c0 <free>:
		free is thread safe.
	parameters:
		p.....pointer to memory block to free
**************************************************/
void free(void *p)
{
     8c0:	cf 93       	push	r28
     8c2:	df 93       	push	r29
	struct __freelist *fp1, *fp2, *fpnew;
	char *cp1, *cp2, *cpnew;

	/* ISO C says free(NULL) must be a no-op */
	if (p == 0)
     8c4:	00 97       	sbiw	r24, 0x00	; 0
     8c6:	09 f4       	brne	.+2      	; 0x8ca <free+0xa>
     8c8:	61 c0       	rjmp	.+194    	; 0x98c <free+0xcc>
     8ca:	ec 01       	movw	r28, r24
		return;

	PendSemaphore(&MallocBlocker,0);
     8cc:	60 e0       	ldi	r22, 0x00	; 0
     8ce:	70 e0       	ldi	r23, 0x00	; 0
     8d0:	8e e4       	ldi	r24, 0x4E	; 78
     8d2:	91 e0       	ldi	r25, 0x01	; 1
     8d4:	bc d3       	rcall	.+1912   	; 0x104e <PendSemaphore>
	cpnew = p;
	cpnew -= sizeof(size_t);
     8d6:	fe 01       	movw	r30, r28
     8d8:	32 97       	sbiw	r30, 0x02	; 2
	fpnew = (struct __freelist *)cpnew;
	fpnew->nx = 0;
     8da:	13 82       	std	Z+3, r1	; 0x03
     8dc:	12 82       	std	Z+2, r1	; 0x02

	/*
	 * Trivial case first: if there's no freelist yet, our entry
	 * will be the only one on it.
	 */
	if (__flp == 0) {
     8de:	a0 91 79 00 	lds	r26, 0x0079	; 0x800079 <__flp>
     8e2:	b0 91 7a 00 	lds	r27, 0x007A	; 0x80007a <__flp+0x1>
     8e6:	10 97       	sbiw	r26, 0x00	; 0
     8e8:	49 f1       	breq	.+82     	; 0x93c <free+0x7c>
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	90 e0       	ldi	r25, 0x00	; 0
	 * if possible.
	 */
	for (fp1 = __flp, fp2 = 0;
	     fp1;
	     fp2 = fp1, fp1 = fp1->nx) {
		if (fp1 < fpnew)
     8ee:	ae 17       	cp	r26, r30
     8f0:	bf 07       	cpc	r27, r31
     8f2:	50 f4       	brcc	.+20     	; 0x908 <free+0x48>
	 * freelist.  Try to aggregate the chunk with adjacent chunks
	 * if possible.
	 */
	for (fp1 = __flp, fp2 = 0;
	     fp1;
	     fp2 = fp1, fp1 = fp1->nx) {
     8f4:	12 96       	adiw	r26, 0x02	; 2
     8f6:	2d 91       	ld	r18, X+
     8f8:	3c 91       	ld	r19, X
     8fa:	13 97       	sbiw	r26, 0x03	; 3
     8fc:	cd 01       	movw	r24, r26
	/*
	 * Now, find the position where our new entry belongs onto the
	 * freelist.  Try to aggregate the chunk with adjacent chunks
	 * if possible.
	 */
	for (fp1 = __flp, fp2 = 0;
     8fe:	21 15       	cp	r18, r1
     900:	31 05       	cpc	r19, r1
     902:	09 f1       	breq	.+66     	; 0x946 <free+0x86>
     904:	d9 01       	movw	r26, r18
     906:	f3 cf       	rjmp	.-26     	; 0x8ee <free+0x2e>
	     fp1;
	     fp2 = fp1, fp1 = fp1->nx) {
		if (fp1 < fpnew)
			continue;
		cp1 = (char *)fp1;
		fpnew->nx = fp1;
     908:	b3 83       	std	Z+3, r27	; 0x03
     90a:	a2 83       	std	Z+2, r26	; 0x02
		if ((char *)&(fpnew->nx) + fpnew->sz == cp1) {
     90c:	40 81       	ld	r20, Z
     90e:	51 81       	ldd	r21, Z+1	; 0x01
     910:	c4 0f       	add	r28, r20
     912:	d5 1f       	adc	r29, r21
     914:	ac 17       	cp	r26, r28
     916:	bd 07       	cpc	r27, r29
     918:	79 f4       	brne	.+30     	; 0x938 <free+0x78>
			/* upper chunk adjacent, assimilate it */
			fpnew->sz += fp1->sz + sizeof(size_t);
     91a:	2d 91       	ld	r18, X+
     91c:	3c 91       	ld	r19, X
     91e:	11 97       	sbiw	r26, 0x01	; 1
     920:	24 0f       	add	r18, r20
     922:	35 1f       	adc	r19, r21
     924:	2e 5f       	subi	r18, 0xFE	; 254
     926:	3f 4f       	sbci	r19, 0xFF	; 255
     928:	31 83       	std	Z+1, r19	; 0x01
     92a:	20 83       	st	Z, r18
			fpnew->nx = fp1->nx;
     92c:	12 96       	adiw	r26, 0x02	; 2
     92e:	2d 91       	ld	r18, X+
     930:	3c 91       	ld	r19, X
     932:	13 97       	sbiw	r26, 0x03	; 3
     934:	33 83       	std	Z+3, r19	; 0x03
     936:	22 83       	std	Z+2, r18	; 0x02
		}
		if (fp2 == 0) {
     938:	00 97       	sbiw	r24, 0x00	; 0
     93a:	29 f4       	brne	.+10     	; 0x946 <free+0x86>
			/* new head of freelist */
			__flp = fpnew;
     93c:	f0 93 7a 00 	sts	0x007A, r31	; 0x80007a <__flp+0x1>
     940:	e0 93 79 00 	sts	0x0079, r30	; 0x800079 <__flp>
     944:	1c c0       	rjmp	.+56     	; 0x97e <free+0xbe>
	 * Note that we get here either if we hit the "break" above,
	 * or if we fell off the end of the loop.  The latter means
	 * we've got a new topmost chunk.  Either way, try aggregating
	 * with the lower chunk if possible.
	 */
	fp2->nx = fpnew;
     946:	dc 01       	movw	r26, r24
     948:	13 96       	adiw	r26, 0x03	; 3
     94a:	fc 93       	st	X, r31
     94c:	ee 93       	st	-X, r30
     94e:	12 97       	sbiw	r26, 0x02	; 2
	cp2 = (char *)&(fp2->nx);
	if (cp2 + fp2->sz == cpnew) {
     950:	4d 91       	ld	r20, X+
     952:	5d 91       	ld	r21, X+
     954:	a4 0f       	add	r26, r20
     956:	b5 1f       	adc	r27, r21
     958:	ea 17       	cp	r30, r26
     95a:	fb 07       	cpc	r31, r27
     95c:	81 f4       	brne	.+32     	; 0x97e <free+0xbe>
		/* lower junk adjacent, merge */
		fp2->sz += fpnew->sz + sizeof(size_t);
     95e:	20 81       	ld	r18, Z
     960:	31 81       	ldd	r19, Z+1	; 0x01
     962:	24 0f       	add	r18, r20
     964:	35 1f       	adc	r19, r21
     966:	2e 5f       	subi	r18, 0xFE	; 254
     968:	3f 4f       	sbci	r19, 0xFF	; 255
     96a:	dc 01       	movw	r26, r24
     96c:	11 96       	adiw	r26, 0x01	; 1
     96e:	3c 93       	st	X, r19
     970:	2e 93       	st	-X, r18
		fp2->nx = fpnew->nx;
     972:	22 81       	ldd	r18, Z+2	; 0x02
     974:	33 81       	ldd	r19, Z+3	; 0x03
     976:	13 96       	adiw	r26, 0x03	; 3
     978:	3c 93       	st	X, r19
     97a:	2e 93       	st	-X, r18
     97c:	12 97       	sbiw	r26, 0x02	; 2
	}
	PostSemaphore(&MallocBlocker,0);
     97e:	60 e0       	ldi	r22, 0x00	; 0
     980:	70 e0       	ldi	r23, 0x00	; 0
     982:	8e e4       	ldi	r24, 0x4E	; 78
     984:	91 e0       	ldi	r25, 0x01	; 1
}
     986:	df 91       	pop	r29
     988:	cf 91       	pop	r28
	if (cp2 + fp2->sz == cpnew) {
		/* lower junk adjacent, merge */
		fp2->sz += fpnew->sz + sizeof(size_t);
		fp2->nx = fpnew->nx;
	}
	PostSemaphore(&MallocBlocker,0);
     98a:	c1 c3       	rjmp	.+1922   	; 0x110e <PostSemaphore>
}
     98c:	df 91       	pop	r29
     98e:	cf 91       	pop	r28
     990:	08 95       	ret

00000992 <OS_InitMalloc>:
// If start == 0, use default value
// If end == 0, use default value
//--------------------------------------------------------------------

void OS_InitMalloc(char *start, char *end)
{
     992:	0f 93       	push	r16
     994:	1f 93       	push	r17
     996:	cf 93       	push	r28
     998:	df 93       	push	r29
     99a:	8c 01       	movw	r16, r24
     99c:	eb 01       	movw	r28, r22
	CreateSemaphore(&MallocBlocker,1,SEMAPHORE_MODE_BLOCKING);
     99e:	40 e0       	ldi	r20, 0x00	; 0
     9a0:	50 e0       	ldi	r21, 0x00	; 0
     9a2:	61 e0       	ldi	r22, 0x01	; 1
     9a4:	70 e0       	ldi	r23, 0x00	; 0
     9a6:	8e e4       	ldi	r24, 0x4E	; 78
     9a8:	91 e0       	ldi	r25, 0x01	; 1
     9aa:	a0 db       	rcall	.-2240   	; 0xec <CreateSemaphore>
	if(start) __malloc_heap_start = start;
     9ac:	01 15       	cp	r16, r1
     9ae:	11 05       	cpc	r17, r1
     9b0:	21 f0       	breq	.+8      	; 0x9ba <OS_InitMalloc+0x28>
     9b2:	10 93 63 00 	sts	0x0063, r17	; 0x800063 <__malloc_heap_start+0x1>
     9b6:	00 93 62 00 	sts	0x0062, r16	; 0x800062 <__malloc_heap_start>
	if(end) __malloc_heap_end = end;
     9ba:	20 97       	sbiw	r28, 0x00	; 0
     9bc:	21 f0       	breq	.+8      	; 0x9c6 <OS_InitMalloc+0x34>
     9be:	d0 93 61 00 	sts	0x0061, r29	; 0x800061 <__data_start+0x1>
     9c2:	c0 93 60 00 	sts	0x0060, r28	; 0x800060 <__data_start>
}
     9c6:	df 91       	pop	r29
     9c8:	cf 91       	pop	r28
     9ca:	1f 91       	pop	r17
     9cc:	0f 91       	pop	r16
     9ce:	08 95       	ret

000009d0 <MqInit>:
	return value:
		pointer to new message queue
**********************************************/

MESSAGE_QUEUE * MqInit(int size)
{
     9d0:	0f 93       	push	r16
     9d2:	1f 93       	push	r17
     9d4:	cf 93       	push	r28
     9d6:	df 93       	push	r29
     9d8:	8c 01       	movw	r16, r24
	char *buffer = malloc(sizeof(MESSAGE_QUEUE) + size * sizeof(MSG*) );
     9da:	06 96       	adiw	r24, 0x06	; 6
     9dc:	88 0f       	add	r24, r24
     9de:	99 1f       	adc	r25, r25
     9e0:	b0 de       	rcall	.-672    	; 0x742 <malloc>
     9e2:	ec 01       	movw	r28, r24
	MESSAGE_QUEUE *rv = (MESSAGE_QUEUE *)buffer;
	MSG **pM = (MSG **)(&buffer[sizeof(MESSAGE_QUEUE)]);
	rv->Head = 0;
     9e4:	1b 82       	std	Y+3, r1	; 0x03
     9e6:	1a 82       	std	Y+2, r1	; 0x02
	rv->Tail = 0;
     9e8:	1d 82       	std	Y+5, r1	; 0x05
     9ea:	1c 82       	std	Y+4, r1	; 0x04
	rv->nMsg = 0;
     9ec:	1f 82       	std	Y+7, r1	; 0x07
     9ee:	1e 82       	std	Y+6, r1	; 0x06
	rv->b = pM;
     9f0:	0c 96       	adiw	r24, 0x0c	; 12
     9f2:	9b 87       	std	Y+11, r25	; 0x0b
     9f4:	8a 87       	std	Y+10, r24	; 0x0a
	rv->Size = size;
     9f6:	19 87       	std	Y+9, r17	; 0x09
     9f8:	08 87       	std	Y+8, r16	; 0x08
	rv->Sem = NewSemaphore(0,SEMAPHORE_MODE_BLOCKING);
     9fa:	60 e0       	ldi	r22, 0x00	; 0
     9fc:	70 e0       	ldi	r23, 0x00	; 0
     9fe:	80 e0       	ldi	r24, 0x00	; 0
     a00:	90 e0       	ldi	r25, 0x00	; 0
     a02:	a1 db       	rcall	.-2238   	; 0x146 <NewSemaphore>
     a04:	99 83       	std	Y+1, r25	; 0x01
     a06:	88 83       	st	Y, r24
	return rv;
}
     a08:	ce 01       	movw	r24, r28
     a0a:	df 91       	pop	r29
     a0c:	cf 91       	pop	r28
     a0e:	1f 91       	pop	r17
     a10:	0f 91       	pop	r16
     a12:	08 95       	ret

00000a14 <MqPut>:
		mq.....pointer to the message queue
		m......pointer to message to send
*********************************************/

void MqPut(MESSAGE_QUEUE *mq,MSG *m)
{
     a14:	ff 92       	push	r15
     a16:	0f 93       	push	r16
     a18:	1f 93       	push	r17
     a1a:	cf 93       	push	r28
     a1c:	df 93       	push	r29
	char sr=0;

	if(mq)	//are we live?
     a1e:	00 97       	sbiw	r24, 0x00	; 0
     a20:	e9 f1       	breq	.+122    	; 0xa9c <MqPut+0x88>
     a22:	8b 01       	movw	r16, r22
     a24:	ec 01       	movw	r28, r24
	{
		if(!InterruptCount)sr = Disable();		//enter critical section
     a26:	80 91 a8 00 	lds	r24, 0x00A8	; 0x8000a8 <InterruptCount>
     a2a:	90 91 a9 00 	lds	r25, 0x00A9	; 0x8000a9 <InterruptCount+0x1>
     a2e:	89 2b       	or	r24, r25
     a30:	19 f4       	brne	.+6      	; 0xa38 <MqPut+0x24>
     a32:	2d db       	rcall	.-2470   	; 0x8e <Disable>
     a34:	f8 2e       	mov	r15, r24
     a36:	01 c0       	rjmp	.+2      	; 0xa3a <MqPut+0x26>
		m......pointer to message to send
*********************************************/

void MqPut(MESSAGE_QUEUE *mq,MSG *m)
{
	char sr=0;
     a38:	f1 2c       	mov	r15, r1

	if(mq)	//are we live?
	{
		if(!InterruptCount)sr = Disable();		//enter critical section
		if(mq->nMsg < mq->Size)	//is there room?
     a3a:	2e 81       	ldd	r18, Y+6	; 0x06
     a3c:	3f 81       	ldd	r19, Y+7	; 0x07
     a3e:	68 85       	ldd	r22, Y+8	; 0x08
     a40:	79 85       	ldd	r23, Y+9	; 0x09
     a42:	26 17       	cp	r18, r22
     a44:	37 07       	cpc	r19, r23
     a46:	ec f4       	brge	.+58     	; 0xa82 <MqPut+0x6e>
		{
			mq->b[mq->Head++] = m;	//put message into queue
     a48:	ea 85       	ldd	r30, Y+10	; 0x0a
     a4a:	fb 85       	ldd	r31, Y+11	; 0x0b
     a4c:	8a 81       	ldd	r24, Y+2	; 0x02
     a4e:	9b 81       	ldd	r25, Y+3	; 0x03
     a50:	ac 01       	movw	r20, r24
     a52:	4f 5f       	subi	r20, 0xFF	; 255
     a54:	5f 4f       	sbci	r21, 0xFF	; 255
     a56:	5b 83       	std	Y+3, r21	; 0x03
     a58:	4a 83       	std	Y+2, r20	; 0x02
     a5a:	88 0f       	add	r24, r24
     a5c:	99 1f       	adc	r25, r25
     a5e:	e8 0f       	add	r30, r24
     a60:	f9 1f       	adc	r31, r25
     a62:	11 83       	std	Z+1, r17	; 0x01
     a64:	00 83       	st	Z, r16
			if(mq->Head == mq->Size)
     a66:	64 17       	cp	r22, r20
     a68:	75 07       	cpc	r23, r21
     a6a:	11 f4       	brne	.+4      	; 0xa70 <MqPut+0x5c>
				mq->Head = 0;	//wrap head pointer
     a6c:	1b 82       	std	Y+3, r1	; 0x03
     a6e:	1a 82       	std	Y+2, r1	; 0x02
			mq->nMsg++;			//increment number of messages
     a70:	2f 5f       	subi	r18, 0xFF	; 255
     a72:	3f 4f       	sbci	r19, 0xFF	; 255
     a74:	3f 83       	std	Y+7, r19	; 0x07
     a76:	2e 83       	std	Y+6, r18	; 0x06
			PostSemaphore(mq->Sem,0);
     a78:	60 e0       	ldi	r22, 0x00	; 0
     a7a:	70 e0       	ldi	r23, 0x00	; 0
     a7c:	88 81       	ld	r24, Y
     a7e:	99 81       	ldd	r25, Y+1	; 0x01
     a80:	46 d3       	rcall	.+1676   	; 0x110e <PostSemaphore>
		}
		if(!InterruptCount)Enable(sr);			//exit critical section
     a82:	80 91 a8 00 	lds	r24, 0x00A8	; 0x8000a8 <InterruptCount>
     a86:	90 91 a9 00 	lds	r25, 0x00A9	; 0x8000a9 <InterruptCount+0x1>
     a8a:	89 2b       	or	r24, r25
     a8c:	39 f4       	brne	.+14     	; 0xa9c <MqPut+0x88>
     a8e:	8f 2d       	mov	r24, r15
	}
}
     a90:	df 91       	pop	r29
     a92:	cf 91       	pop	r28
     a94:	1f 91       	pop	r17
     a96:	0f 91       	pop	r16
     a98:	ff 90       	pop	r15
			if(mq->Head == mq->Size)
				mq->Head = 0;	//wrap head pointer
			mq->nMsg++;			//increment number of messages
			PostSemaphore(mq->Sem,0);
		}
		if(!InterruptCount)Enable(sr);			//exit critical section
     a9a:	fd ca       	rjmp	.-2566   	; 0x96 <Enable>
	}
}
     a9c:	df 91       	pop	r29
     a9e:	cf 91       	pop	r28
     aa0:	1f 91       	pop	r17
     aa2:	0f 91       	pop	r16
     aa4:	ff 90       	pop	r15
     aa6:	08 95       	ret

00000aa8 <MqGet>:
		mq.....pointer to message queue
	return value:
		pointer to a message block
************************************************/
MSG *MqGet(MESSAGE_QUEUE *mq)
{
     aa8:	0f 93       	push	r16
     aaa:	1f 93       	push	r17
     aac:	cf 93       	push	r28
     aae:	df 93       	push	r29
	char sr;
	MSG *retval = 0;

	if(mq)
     ab0:	00 97       	sbiw	r24, 0x00	; 0
     ab2:	29 f1       	breq	.+74     	; 0xafe <MqGet+0x56>
     ab4:	ec 01       	movw	r28, r24
	{
		PendSemaphore(mq->Sem,0);		//wait for message
     ab6:	60 e0       	ldi	r22, 0x00	; 0
     ab8:	70 e0       	ldi	r23, 0x00	; 0
     aba:	88 81       	ld	r24, Y
     abc:	99 81       	ldd	r25, Y+1	; 0x01
     abe:	c7 d2       	rcall	.+1422   	; 0x104e <PendSemaphore>
		sr = Disable();				//endter critical section
     ac0:	e6 da       	rcall	.-2612   	; 0x8e <Disable>
		retval = mq->b[mq->Tail++];	//remove message from queue
     ac2:	ea 85       	ldd	r30, Y+10	; 0x0a
     ac4:	fb 85       	ldd	r31, Y+11	; 0x0b
     ac6:	2c 81       	ldd	r18, Y+4	; 0x04
     ac8:	3d 81       	ldd	r19, Y+5	; 0x05
     aca:	a9 01       	movw	r20, r18
     acc:	4f 5f       	subi	r20, 0xFF	; 255
     ace:	5f 4f       	sbci	r21, 0xFF	; 255
     ad0:	5d 83       	std	Y+5, r21	; 0x05
     ad2:	4c 83       	std	Y+4, r20	; 0x04
     ad4:	22 0f       	add	r18, r18
     ad6:	33 1f       	adc	r19, r19
     ad8:	e2 0f       	add	r30, r18
     ada:	f3 1f       	adc	r31, r19
     adc:	00 81       	ld	r16, Z
     ade:	11 81       	ldd	r17, Z+1	; 0x01
		if(mq->Tail == mq->Size)	//are we at the end of the line
     ae0:	28 85       	ldd	r18, Y+8	; 0x08
     ae2:	39 85       	ldd	r19, Y+9	; 0x09
     ae4:	42 17       	cp	r20, r18
     ae6:	53 07       	cpc	r21, r19
     ae8:	11 f4       	brne	.+4      	; 0xaee <MqGet+0x46>
			mq->Tail = 0;			//wrap tail pointer
     aea:	1d 82       	std	Y+5, r1	; 0x05
     aec:	1c 82       	std	Y+4, r1	; 0x04
		mq->nMsg--;					//decrement number of messages in queue
     aee:	2e 81       	ldd	r18, Y+6	; 0x06
     af0:	3f 81       	ldd	r19, Y+7	; 0x07
     af2:	21 50       	subi	r18, 0x01	; 1
     af4:	31 09       	sbc	r19, r1
     af6:	3f 83       	std	Y+7, r19	; 0x07
     af8:	2e 83       	std	Y+6, r18	; 0x06
		Enable(sr);
     afa:	cd da       	rcall	.-2662   	; 0x96 <Enable>
     afc:	02 c0       	rjmp	.+4      	; 0xb02 <MqGet+0x5a>
		pointer to a message block
************************************************/
MSG *MqGet(MESSAGE_QUEUE *mq)
{
	char sr;
	MSG *retval = 0;
     afe:	00 e0       	ldi	r16, 0x00	; 0
     b00:	10 e0       	ldi	r17, 0x00	; 0
			mq->Tail = 0;			//wrap tail pointer
		mq->nMsg--;					//decrement number of messages in queue
		Enable(sr);
	}
	return retval;
}
     b02:	c8 01       	movw	r24, r16
     b04:	df 91       	pop	r29
     b06:	cf 91       	pop	r28
     b08:	1f 91       	pop	r17
     b0a:	0f 91       	pop	r16
     b0c:	08 95       	ret

00000b0e <NewMSG>:
		NULL on fail
		Pointer to Message Block on success
************************************************/

MSG *NewMSG(int payloadSize)
{
     b0e:	cf 93       	push	r28
     b10:	df 93       	push	r29
     b12:	ec 01       	movw	r28, r24
	MSG *retval = 0;

	if((retval = (MSG *)malloc(sizeof(MSG) + payloadSize)) != NULL)
     b14:	0d 96       	adiw	r24, 0x0d	; 13
     b16:	15 de       	rcall	.-982    	; 0x742 <malloc>
     b18:	00 97       	sbiw	r24, 0x00	; 0
     b1a:	99 f0       	breq	.+38     	; 0xb42 <NewMSG+0x34>
	{
		MsgAllocCount++;
     b1c:	20 91 7b 00 	lds	r18, 0x007B	; 0x80007b <MsgAllocCount>
     b20:	30 91 7c 00 	lds	r19, 0x007C	; 0x80007c <MsgAllocCount+0x1>
     b24:	2f 5f       	subi	r18, 0xFF	; 255
     b26:	3f 4f       	sbci	r19, 0xFF	; 255
     b28:	30 93 7c 00 	sts	0x007C, r19	; 0x80007c <MsgAllocCount+0x1>
     b2c:	20 93 7b 00 	sts	0x007B, r18	; 0x80007b <MsgAllocCount>
		retval->MaxPayload = payloadSize;
     b30:	fc 01       	movw	r30, r24
     b32:	d5 83       	std	Z+5, r29	; 0x05
     b34:	c4 83       	std	Z+4, r28	; 0x04
		retval->ReplyHandle = NULL;
     b36:	11 86       	std	Z+9, r1	; 0x09
     b38:	10 86       	std	Z+8, r1	; 0x08
		retval->PayloadSize = 0;
     b3a:	13 82       	std	Z+3, r1	; 0x03
     b3c:	12 82       	std	Z+2, r1	; 0x02
		retval->next = 0;
     b3e:	13 86       	std	Z+11, r1	; 0x0b
     b40:	12 86       	std	Z+10, r1	; 0x0a
		retval->PayloadSize = 0;
	}
	return retval;
}
     b42:	df 91       	pop	r29
     b44:	cf 91       	pop	r28
     b46:	08 95       	ret

00000b48 <InitMidiParseDesc>:
		SendData(data,SPIPORT_PITCHBEND);
	}
}

void ActionController(unsigned char chan,unsigned char Num,unsigned char val)
{
     b48:	fc 01       	movw	r30, r24
     b4a:	12 82       	std	Z+2, r1	; 0x02
     b4c:	11 82       	std	Z+1, r1	; 0x01
     b4e:	15 82       	std	Z+5, r1	; 0x05
     b50:	17 82       	std	Z+7, r1	; 0x07
     b52:	16 82       	std	Z+6, r1	; 0x06
     b54:	10 82       	st	Z, r1
     b56:	13 82       	std	Z+3, r1	; 0x03
     b58:	14 82       	std	Z+4, r1	; 0x04
     b5a:	13 86       	std	Z+11, r1	; 0x0b
     b5c:	12 86       	std	Z+10, r1	; 0x0a
     b5e:	08 95       	ret

00000b60 <ActionSysEx>:
     b60:	cf 93       	push	r28
     b62:	df 93       	push	r29
     b64:	ec 01       	movw	r28, r24
     b66:	1f 82       	std	Y+7, r1	; 0x07
     b68:	1e 82       	std	Y+6, r1	; 0x06
     b6a:	80 e8       	ldi	r24, 0x80	; 128
     b6c:	90 e0       	ldi	r25, 0x00	; 0
     b6e:	e9 dd       	rcall	.-1070   	; 0x742 <malloc>
     b70:	9b 87       	std	Y+11, r25	; 0x0b
     b72:	8a 87       	std	Y+10, r24	; 0x0a
     b74:	df 91       	pop	r29
     b76:	cf 91       	pop	r28
     b78:	08 95       	ret

00000b7a <ActionSysExData>:
     b7a:	fc 01       	movw	r30, r24
     b7c:	26 81       	ldd	r18, Z+6	; 0x06
     b7e:	37 81       	ldd	r19, Z+7	; 0x07
     b80:	20 38       	cpi	r18, 0x80	; 128
     b82:	31 05       	cpc	r19, r1
     b84:	58 f4       	brcc	.+22     	; 0xb9c <ActionSysExData+0x22>
     b86:	82 85       	ldd	r24, Z+10	; 0x0a
     b88:	93 85       	ldd	r25, Z+11	; 0x0b
     b8a:	a9 01       	movw	r20, r18
     b8c:	4f 5f       	subi	r20, 0xFF	; 255
     b8e:	5f 4f       	sbci	r21, 0xFF	; 255
     b90:	57 83       	std	Z+7, r21	; 0x07
     b92:	46 83       	std	Z+6, r20	; 0x06
     b94:	fc 01       	movw	r30, r24
     b96:	e2 0f       	add	r30, r18
     b98:	f3 1f       	adc	r31, r19
     b9a:	60 83       	st	Z, r22
     b9c:	08 95       	ret

00000b9e <ActionSysExEnd>:
     b9e:	0f 93       	push	r16
     ba0:	1f 93       	push	r17
     ba2:	cf 93       	push	r28
     ba4:	df 93       	push	r29
     ba6:	1f 92       	push	r1
     ba8:	cd b7       	in	r28, 0x3d	; 61
     baa:	de b7       	in	r29, 0x3e	; 62
     bac:	8c 01       	movw	r16, r24
     bae:	dc 01       	movw	r26, r24
     bb0:	1a 96       	adiw	r26, 0x0a	; 10
     bb2:	ed 91       	ld	r30, X+
     bb4:	fc 91       	ld	r31, X
     bb6:	1b 97       	sbiw	r26, 0x0b	; 11
     bb8:	80 81       	ld	r24, Z
     bba:	8d 37       	cpi	r24, 0x7D	; 125
     bbc:	09 f0       	breq	.+2      	; 0xbc0 <ActionSysExEnd+0x22>
     bbe:	95 c0       	rjmp	.+298    	; 0xcea <ActionSysExEnd+0x14c>
     bc0:	81 81       	ldd	r24, Z+1	; 0x01
     bc2:	84 30       	cpi	r24, 0x04	; 4
     bc4:	09 f4       	brne	.+2      	; 0xbc8 <ActionSysExEnd+0x2a>
     bc6:	57 c0       	rjmp	.+174    	; 0xc76 <ActionSysExEnd+0xd8>
     bc8:	88 f4       	brcc	.+34     	; 0xbec <ActionSysExEnd+0x4e>
     bca:	81 30       	cpi	r24, 0x01	; 1
     bcc:	09 f4       	brne	.+2      	; 0xbd0 <ActionSysExEnd+0x32>
     bce:	4f c0       	rjmp	.+158    	; 0xc6e <ActionSysExEnd+0xd0>
     bd0:	83 30       	cpi	r24, 0x03	; 3
     bd2:	09 f0       	breq	.+2      	; 0xbd6 <ActionSysExEnd+0x38>
     bd4:	8a c0       	rjmp	.+276    	; 0xcea <ActionSysExEnd+0x14c>
     bd6:	80 91 7d 00 	lds	r24, 0x007D	; 0x80007d <MidiChan>
     bda:	89 83       	std	Y+1, r24	; 0x01
     bdc:	43 e0       	ldi	r20, 0x03	; 3
     bde:	50 e0       	ldi	r21, 0x00	; 0
     be0:	61 e0       	ldi	r22, 0x01	; 1
     be2:	70 e0       	ldi	r23, 0x00	; 0
     be4:	ce 01       	movw	r24, r28
     be6:	01 96       	adiw	r24, 0x01	; 1
     be8:	3a d4       	rcall	.+2164   	; 0x145e <SendSysEx>
     bea:	7f c0       	rjmp	.+254    	; 0xcea <ActionSysExEnd+0x14c>
     bec:	88 30       	cpi	r24, 0x08	; 8
     bee:	09 f4       	brne	.+2      	; 0xbf2 <ActionSysExEnd+0x54>
     bf0:	49 c0       	rjmp	.+146    	; 0xc84 <ActionSysExEnd+0xe6>
     bf2:	89 30       	cpi	r24, 0x09	; 9
     bf4:	09 f4       	brne	.+2      	; 0xbf8 <ActionSysExEnd+0x5a>
     bf6:	61 c0       	rjmp	.+194    	; 0xcba <ActionSysExEnd+0x11c>
     bf8:	85 30       	cpi	r24, 0x05	; 5
     bfa:	09 f0       	breq	.+2      	; 0xbfe <ActionSysExEnd+0x60>
     bfc:	76 c0       	rjmp	.+236    	; 0xcea <ActionSysExEnd+0x14c>
     bfe:	88 e0       	ldi	r24, 0x08	; 8
     c00:	90 e0       	ldi	r25, 0x00	; 0
     c02:	85 df       	rcall	.-246    	; 0xb0e <NewMSG>
     c04:	fc 01       	movw	r30, r24
     c06:	83 e0       	ldi	r24, 0x03	; 3
     c08:	90 e0       	ldi	r25, 0x00	; 0
     c0a:	91 83       	std	Z+1, r25	; 0x01
     c0c:	80 83       	st	Z, r24
     c0e:	d8 01       	movw	r26, r16
     c10:	1a 96       	adiw	r26, 0x0a	; 10
     c12:	6d 91       	ld	r22, X+
     c14:	7c 91       	ld	r23, X
     c16:	1b 97       	sbiw	r26, 0x0b	; 11
     c18:	db 01       	movw	r26, r22
     c1a:	12 96       	adiw	r26, 0x02	; 2
     c1c:	8c 91       	ld	r24, X
     c1e:	12 97       	sbiw	r26, 0x02	; 2
     c20:	90 e0       	ldi	r25, 0x00	; 0
     c22:	95 87       	std	Z+13, r25	; 0x0d
     c24:	84 87       	std	Z+12, r24	; 0x0c
     c26:	13 96       	adiw	r26, 0x03	; 3
     c28:	8c 91       	ld	r24, X
     c2a:	13 97       	sbiw	r26, 0x03	; 3
     c2c:	90 e0       	ldi	r25, 0x00	; 0
     c2e:	97 87       	std	Z+15, r25	; 0x0f
     c30:	86 87       	std	Z+14, r24	; 0x0e
     c32:	14 96       	adiw	r26, 0x04	; 4
     c34:	8c 91       	ld	r24, X
     c36:	14 97       	sbiw	r26, 0x04	; 4
     c38:	90 e0       	ldi	r25, 0x00	; 0
     c3a:	91 8b       	std	Z+17, r25	; 0x11
     c3c:	80 8b       	std	Z+16, r24	; 0x10
     c3e:	15 96       	adiw	r26, 0x05	; 5
     c40:	2c 91       	ld	r18, X
     c42:	b0 e8       	ldi	r27, 0x80	; 128
     c44:	2b 9f       	mul	r18, r27
     c46:	90 01       	movw	r18, r0
     c48:	11 24       	eor	r1, r1
     c4a:	82 2b       	or	r24, r18
     c4c:	93 2b       	or	r25, r19
     c4e:	91 8b       	std	Z+17, r25	; 0x11
     c50:	80 8b       	std	Z+16, r24	; 0x10
     c52:	db 01       	movw	r26, r22
     c54:	16 96       	adiw	r26, 0x06	; 6
     c56:	8c 91       	ld	r24, X
     c58:	83 8b       	std	Z+19, r24	; 0x13
     c5a:	d8 01       	movw	r26, r16
     c5c:	1a 96       	adiw	r26, 0x0a	; 10
     c5e:	8d 91       	ld	r24, X+
     c60:	9c 91       	ld	r25, X
     c62:	1b 97       	sbiw	r26, 0x0b	; 11
     c64:	dc 01       	movw	r26, r24
     c66:	17 96       	adiw	r26, 0x07	; 7
     c68:	8c 91       	ld	r24, X
     c6a:	82 8b       	std	Z+18, r24	; 0x12
     c6c:	24 c0       	rjmp	.+72     	; 0xcb6 <ActionSysExEnd+0x118>
     c6e:	82 81       	ldd	r24, Z+2	; 0x02
     c70:	80 93 7d 00 	sts	0x007D, r24	; 0x80007d <MidiChan>
     c74:	3a c0       	rjmp	.+116    	; 0xcea <ActionSysExEnd+0x14c>
     c76:	84 e0       	ldi	r24, 0x04	; 4
     c78:	90 e0       	ldi	r25, 0x00	; 0
     c7a:	49 df       	rcall	.-366    	; 0xb0e <NewMSG>
     c7c:	fc 01       	movw	r30, r24
     c7e:	82 e0       	ldi	r24, 0x02	; 2
     c80:	90 e0       	ldi	r25, 0x00	; 0
     c82:	06 c0       	rjmp	.+12     	; 0xc90 <ActionSysExEnd+0xf2>
     c84:	84 e0       	ldi	r24, 0x04	; 4
     c86:	90 e0       	ldi	r25, 0x00	; 0
     c88:	42 df       	rcall	.-380    	; 0xb0e <NewMSG>
     c8a:	fc 01       	movw	r30, r24
     c8c:	87 e0       	ldi	r24, 0x07	; 7
     c8e:	90 e0       	ldi	r25, 0x00	; 0
     c90:	91 83       	std	Z+1, r25	; 0x01
     c92:	80 83       	st	Z, r24
     c94:	d8 01       	movw	r26, r16
     c96:	1a 96       	adiw	r26, 0x0a	; 10
     c98:	2d 91       	ld	r18, X+
     c9a:	3c 91       	ld	r19, X
     c9c:	1b 97       	sbiw	r26, 0x0b	; 11
     c9e:	d9 01       	movw	r26, r18
     ca0:	12 96       	adiw	r26, 0x02	; 2
     ca2:	8c 91       	ld	r24, X
     ca4:	12 97       	sbiw	r26, 0x02	; 2
     ca6:	90 e0       	ldi	r25, 0x00	; 0
     ca8:	95 87       	std	Z+13, r25	; 0x0d
     caa:	84 87       	std	Z+12, r24	; 0x0c
     cac:	13 96       	adiw	r26, 0x03	; 3
     cae:	8c 91       	ld	r24, X
     cb0:	90 e0       	ldi	r25, 0x00	; 0
     cb2:	97 87       	std	Z+15, r25	; 0x0f
     cb4:	86 87       	std	Z+14, r24	; 0x0e
     cb6:	bf 01       	movw	r22, r30
     cb8:	13 c0       	rjmp	.+38     	; 0xce0 <ActionSysExEnd+0x142>
     cba:	84 e0       	ldi	r24, 0x04	; 4
     cbc:	90 e0       	ldi	r25, 0x00	; 0
     cbe:	27 df       	rcall	.-434    	; 0xb0e <NewMSG>
     cc0:	28 e0       	ldi	r18, 0x08	; 8
     cc2:	30 e0       	ldi	r19, 0x00	; 0
     cc4:	fc 01       	movw	r30, r24
     cc6:	31 83       	std	Z+1, r19	; 0x01
     cc8:	20 83       	st	Z, r18
     cca:	d8 01       	movw	r26, r16
     ccc:	1a 96       	adiw	r26, 0x0a	; 10
     cce:	ed 91       	ld	r30, X+
     cd0:	fc 91       	ld	r31, X
     cd2:	1b 97       	sbiw	r26, 0x0b	; 11
     cd4:	22 81       	ldd	r18, Z+2	; 0x02
     cd6:	30 e0       	ldi	r19, 0x00	; 0
     cd8:	fc 01       	movw	r30, r24
     cda:	35 87       	std	Z+13, r19	; 0x0d
     cdc:	24 87       	std	Z+12, r18	; 0x0c
     cde:	bc 01       	movw	r22, r24
     ce0:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <pSeqMsg>
     ce4:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <pSeqMsg+0x1>
     ce8:	95 de       	rcall	.-726    	; 0xa14 <MqPut>
     cea:	d8 01       	movw	r26, r16
     cec:	1a 96       	adiw	r26, 0x0a	; 10
     cee:	8d 91       	ld	r24, X+
     cf0:	9c 91       	ld	r25, X
     cf2:	1b 97       	sbiw	r26, 0x0b	; 11
     cf4:	e5 dd       	rcall	.-1078   	; 0x8c0 <free>
     cf6:	f8 01       	movw	r30, r16
     cf8:	17 82       	std	Z+7, r1	; 0x07
     cfa:	16 82       	std	Z+6, r1	; 0x06
     cfc:	0f 90       	pop	r0
     cfe:	df 91       	pop	r29
     d00:	cf 91       	pop	r28
     d02:	1f 91       	pop	r17
     d04:	0f 91       	pop	r16
     d06:	08 95       	ret

00000d08 <ActionSysRTClock>:
     d08:	80 e0       	ldi	r24, 0x00	; 0
     d0a:	90 e0       	ldi	r25, 0x00	; 0
     d0c:	00 df       	rcall	.-512    	; 0xb0e <NewMSG>
     d0e:	26 e0       	ldi	r18, 0x06	; 6
     d10:	30 e0       	ldi	r19, 0x00	; 0
     d12:	fc 01       	movw	r30, r24
     d14:	31 83       	std	Z+1, r19	; 0x01
     d16:	20 83       	st	Z, r18
     d18:	bc 01       	movw	r22, r24
     d1a:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <pSeqMsg>
     d1e:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <pSeqMsg+0x1>
     d22:	78 de       	rcall	.-784    	; 0xa14 <MqPut>
     d24:	83 e0       	ldi	r24, 0x03	; 3
     d26:	bb d9       	rcall	.-3210   	; 0x9e <SetGatePort>
     d28:	60 e0       	ldi	r22, 0x00	; 0
     d2a:	70 e0       	ldi	r23, 0x00	; 0
     d2c:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <pSemClock>
     d30:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <pSemClock+0x1>
     d34:	ec c1       	rjmp	.+984    	; 0x110e <PostSemaphore>

00000d36 <ActionSysRTStart>:
     d36:	80 e0       	ldi	r24, 0x00	; 0
     d38:	90 e0       	ldi	r25, 0x00	; 0
     d3a:	e9 de       	rcall	.-558    	; 0xb0e <NewMSG>
     d3c:	fc 01       	movw	r30, r24
     d3e:	11 82       	std	Z+1, r1	; 0x01
     d40:	10 82       	st	Z, r1
     d42:	bc 01       	movw	r22, r24
     d44:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <pSeqMsg>
     d48:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <pSeqMsg+0x1>
     d4c:	63 de       	rcall	.-826    	; 0xa14 <MqPut>
     d4e:	82 e0       	ldi	r24, 0x02	; 2
     d50:	a6 c9       	rjmp	.-3252   	; 0x9e <SetGatePort>

00000d52 <ActionSysRTContinue>:
     d52:	80 e0       	ldi	r24, 0x00	; 0
     d54:	90 e0       	ldi	r25, 0x00	; 0
     d56:	db de       	rcall	.-586    	; 0xb0e <NewMSG>
     d58:	29 e0       	ldi	r18, 0x09	; 9
     d5a:	30 e0       	ldi	r19, 0x00	; 0
     d5c:	fc 01       	movw	r30, r24
     d5e:	31 83       	std	Z+1, r19	; 0x01
     d60:	20 83       	st	Z, r18
     d62:	bc 01       	movw	r22, r24
     d64:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <pSeqMsg>
     d68:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <pSeqMsg+0x1>
     d6c:	53 ce       	rjmp	.-858    	; 0xa14 <MqPut>

00000d6e <ActionSysRTStop>:
     d6e:	80 e0       	ldi	r24, 0x00	; 0
     d70:	90 e0       	ldi	r25, 0x00	; 0
     d72:	cd de       	rcall	.-614    	; 0xb0e <NewMSG>
     d74:	21 e0       	ldi	r18, 0x01	; 1
     d76:	30 e0       	ldi	r19, 0x00	; 0
     d78:	fc 01       	movw	r30, r24
     d7a:	31 83       	std	Z+1, r19	; 0x01
     d7c:	20 83       	st	Z, r18
     d7e:	bc 01       	movw	r22, r24
     d80:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <pSeqMsg>
     d84:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <pSeqMsg+0x1>
     d88:	45 de       	rcall	.-886    	; 0xa14 <MqPut>
     d8a:	82 e0       	ldi	r24, 0x02	; 2
     d8c:	9b c9       	rjmp	.-3274   	; 0xc4 <ClearGatePort>

00000d8e <ActionSysRTReset>:
     d8e:	81 e0       	ldi	r24, 0x01	; 1
     d90:	86 d9       	rcall	.-3316   	; 0x9e <SetGatePort>
     d92:	60 e0       	ldi	r22, 0x00	; 0
     d94:	70 e0       	ldi	r23, 0x00	; 0
     d96:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <pSemReset>
     d9a:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <pSemReset+0x1>
     d9e:	b7 c1       	rjmp	.+878    	; 0x110e <PostSemaphore>

00000da0 <ActionNoteOff>:
     da0:	cf 93       	push	r28
     da2:	90 91 7d 00 	lds	r25, 0x007D	; 0x80007d <MidiChan>
     da6:	98 13       	cpse	r25, r24
     da8:	13 c0       	rjmp	.+38     	; 0xdd0 <ActionNoteOff+0x30>
     daa:	c4 2f       	mov	r28, r20
     dac:	86 2f       	mov	r24, r22
     dae:	60 e0       	ldi	r22, 0x00	; 0
     db0:	70 e0       	ldi	r23, 0x00	; 0
     db2:	20 e2       	ldi	r18, 0x20	; 32
     db4:	82 9f       	mul	r24, r18
     db6:	c0 01       	movw	r24, r0
     db8:	11 24       	eor	r1, r1
     dba:	6e d5       	rcall	.+2780   	; 0x1898 <SendData>
     dbc:	61 e0       	ldi	r22, 0x01	; 1
     dbe:	70 e0       	ldi	r23, 0x00	; 0
     dc0:	20 e2       	ldi	r18, 0x20	; 32
     dc2:	c2 9f       	mul	r28, r18
     dc4:	c0 01       	movw	r24, r0
     dc6:	11 24       	eor	r1, r1
     dc8:	67 d5       	rcall	.+2766   	; 0x1898 <SendData>
     dca:	80 e0       	ldi	r24, 0x00	; 0
     dcc:	cf 91       	pop	r28
     dce:	7a c9       	rjmp	.-3340   	; 0xc4 <ClearGatePort>
     dd0:	cf 91       	pop	r28
     dd2:	08 95       	ret

00000dd4 <ActionNoteOn>:
     dd4:	cf 93       	push	r28
     dd6:	90 91 7d 00 	lds	r25, 0x007D	; 0x80007d <MidiChan>
     dda:	98 13       	cpse	r25, r24
     ddc:	18 c0       	rjmp	.+48     	; 0xe0e <ActionNoteOn+0x3a>
     dde:	c4 2f       	mov	r28, r20
     de0:	86 2f       	mov	r24, r22
     de2:	60 e0       	ldi	r22, 0x00	; 0
     de4:	70 e0       	ldi	r23, 0x00	; 0
     de6:	20 e2       	ldi	r18, 0x20	; 32
     de8:	82 9f       	mul	r24, r18
     dea:	c0 01       	movw	r24, r0
     dec:	11 24       	eor	r1, r1
     dee:	54 d5       	rcall	.+2728   	; 0x1898 <SendData>
     df0:	c1 11       	cpse	r28, r1
     df2:	03 c0       	rjmp	.+6      	; 0xdfa <ActionNoteOn+0x26>
     df4:	80 e0       	ldi	r24, 0x00	; 0
     df6:	cf 91       	pop	r28
     df8:	65 c9       	rjmp	.-3382   	; 0xc4 <ClearGatePort>
     dfa:	61 e0       	ldi	r22, 0x01	; 1
     dfc:	70 e0       	ldi	r23, 0x00	; 0
     dfe:	20 e2       	ldi	r18, 0x20	; 32
     e00:	c2 9f       	mul	r28, r18
     e02:	c0 01       	movw	r24, r0
     e04:	11 24       	eor	r1, r1
     e06:	48 d5       	rcall	.+2704   	; 0x1898 <SendData>
     e08:	80 e0       	ldi	r24, 0x00	; 0
     e0a:	cf 91       	pop	r28
     e0c:	48 c9       	rjmp	.-3440   	; 0x9e <SetGatePort>
     e0e:	cf 91       	pop	r28
     e10:	08 95       	ret

00000e12 <ActionAfterTouch>:
     e12:	90 91 7d 00 	lds	r25, 0x007D	; 0x80007d <MidiChan>
     e16:	98 13       	cpse	r25, r24
     e18:	07 c0       	rjmp	.+14     	; 0xe28 <ActionAfterTouch+0x16>
     e1a:	62 e0       	ldi	r22, 0x02	; 2
     e1c:	70 e0       	ldi	r23, 0x00	; 0
     e1e:	20 e2       	ldi	r18, 0x20	; 32
     e20:	42 9f       	mul	r20, r18
     e22:	c0 01       	movw	r24, r0
     e24:	11 24       	eor	r1, r1
     e26:	38 c5       	rjmp	.+2672   	; 0x1898 <SendData>
     e28:	08 95       	ret

00000e2a <ActionChanPressure>:
     e2a:	96 2f       	mov	r25, r22
     e2c:	20 91 7d 00 	lds	r18, 0x007D	; 0x80007d <MidiChan>
     e30:	28 13       	cpse	r18, r24
     e32:	07 c0       	rjmp	.+14     	; 0xe42 <ActionChanPressure+0x18>
     e34:	62 e0       	ldi	r22, 0x02	; 2
     e36:	70 e0       	ldi	r23, 0x00	; 0
     e38:	20 e2       	ldi	r18, 0x20	; 32
     e3a:	92 9f       	mul	r25, r18
     e3c:	c0 01       	movw	r24, r0
     e3e:	11 24       	eor	r1, r1
     e40:	2b c5       	rjmp	.+2646   	; 0x1898 <SendData>
     e42:	08 95       	ret

00000e44 <ActionPitchWheel>:
     e44:	9b 01       	movw	r18, r22
     e46:	90 91 7d 00 	lds	r25, 0x007D	; 0x80007d <MidiChan>
     e4a:	98 13       	cpse	r25, r24
     e4c:	04 c0       	rjmp	.+8      	; 0xe56 <ActionPitchWheel+0x12>
     e4e:	63 e0       	ldi	r22, 0x03	; 3
     e50:	70 e0       	ldi	r23, 0x00	; 0
     e52:	c9 01       	movw	r24, r18
     e54:	21 c5       	rjmp	.+2626   	; 0x1898 <SendData>
     e56:	08 95       	ret

00000e58 <ParseMidi>:

}

int ParseMidi(MIDIPARSE_D *pMp, unsigned char c)
{
     e58:	cf 93       	push	r28
     e5a:	df 93       	push	r29
     e5c:	ec 01       	movw	r28, r24
     e5e:	46 2f       	mov	r20, r22
	//	c.......a byte of midi data
	//
	// returns:
	//	0
	//-----------------------------------------
	if(c & (unsigned char)0x80)	//is it a command?
     e60:	67 ff       	sbrs	r22, 7
     e62:	34 c0       	rjmp	.+104    	; 0xecc <ParseMidi+0x74>
	{
		if(c < (unsigned char)0xf0)
     e64:	60 3f       	cpi	r22, 0xF0	; 240
     e66:	38 f4       	brcc	.+14     	; 0xe76 <ParseMidi+0x1e>
		{
			//process this stuff, dispose of everything else
			pMp->cmd = (unsigned char)(c & (unsigned char)0xf0);
     e68:	86 2f       	mov	r24, r22
     e6a:	80 7f       	andi	r24, 0xF0	; 240
     e6c:	89 83       	std	Y+1, r24	; 0x01
			pMp->chan = (unsigned char)(c & 0x0f);
     e6e:	e6 2f       	mov	r30, r22
     e70:	ef 70       	andi	r30, 0x0F	; 15
     e72:	ea 83       	std	Y+2, r30	; 0x02
     e74:	b0 c0       	rjmp	.+352    	; 0xfd6 <ParseMidi+0x17e>
			pMp->state = NOTE0;
		}
		else	//process system commands
		{
			switch(c)
     e76:	50 e0       	ldi	r21, 0x00	; 0
     e78:	fa 01       	movw	r30, r20
     e7a:	e0 5f       	subi	r30, 0xF0	; 240
     e7c:	f1 09       	sbc	r31, r1
     e7e:	e0 31       	cpi	r30, 0x10	; 16
     e80:	f1 05       	cpc	r31, r1
     e82:	08 f0       	brcs	.+2      	; 0xe86 <ParseMidi+0x2e>
     e84:	bc c0       	rjmp	.+376    	; 0xffe <ParseMidi+0x1a6>
     e86:	ef 5e       	subi	r30, 0xEF	; 239
     e88:	ff 4f       	sbci	r31, 0xFF	; 255
     e8a:	09 94       	ijmp
			{
				case SYSEX:	//n bytes defined by command
                   	pMp->state = SYSEX_STATE;
     e8c:	83 e0       	ldi	r24, 0x03	; 3
     e8e:	8d 83       	std	Y+5, r24	; 0x05
                    pMp->cmd = SYSEX;
     e90:	80 ef       	ldi	r24, 0xF0	; 240
     e92:	89 83       	std	Y+1, r24	; 0x01
					ActionSysEx(pMp);
     e94:	ce 01       	movw	r24, r28
     e96:	64 de       	rcall	.-824    	; 0xb60 <ActionSysEx>
					break;
     e98:	b2 c0       	rjmp	.+356    	; 0xffe <ParseMidi+0x1a6>
				case SYSCOM_MTCQUARTERFRAME:		//2 bytes
					pMp->cmd = SYSCOM_MTCQUARTERFRAME;
     e9a:	81 ef       	ldi	r24, 0xF1	; 241
     e9c:	04 c0       	rjmp	.+8      	; 0xea6 <ParseMidi+0x4e>
					pMp->state = SYSCOM_STATE;
					break;
				case SYSCOMSONGPOS:		//3 bytes
					pMp->cmd = SYSCOMSONGPOS;
     e9e:	82 ef       	ldi	r24, 0xF2	; 242
     ea0:	89 83       	std	Y+1, r24	; 0x01
     ea2:	99 c0       	rjmp	.+306    	; 0xfd6 <ParseMidi+0x17e>
					pMp->state = NOTE0;
					break;
				case SYSCOMSONGSEL:		//2 bytes
					pMp->cmd = SYSCOMSONGSEL;
     ea4:	83 ef       	ldi	r24, 0xF3	; 243
     ea6:	89 83       	std	Y+1, r24	; 0x01
					pMp->state = SYSCOM_STATE;
     ea8:	84 e0       	ldi	r24, 0x04	; 4
     eaa:	96 c0       	rjmp	.+300    	; 0xfd8 <ParseMidi+0x180>
					break;
				case SYSCOMTUNEREQ:		//1 byte
					ActionSysComTuneReq();
					break;
				case SYSEXEND:			//1 byte
                   	pMp->state = IDLE;
     eac:	1d 82       	std	Y+5, r1	; 0x05
                    pMp->cmd = SYSEXEND;
     eae:	87 ef       	ldi	r24, 0xF7	; 247
     eb0:	89 83       	std	Y+1, r24	; 0x01
					ActionSysExEnd(pMp);
     eb2:	ce 01       	movw	r24, r28
     eb4:	74 de       	rcall	.-792    	; 0xb9e <ActionSysExEnd>
					break;
     eb6:	a3 c0       	rjmp	.+326    	; 0xffe <ParseMidi+0x1a6>
				case SYSRTCLOCK:		//1 byte
					ActionSysRTClock();
     eb8:	27 df       	rcall	.-434    	; 0xd08 <ActionSysRTClock>
					break;
     eba:	a1 c0       	rjmp	.+322    	; 0xffe <ParseMidi+0x1a6>
				case SYSRTUNDEF:
					ActionSysRTUndef();
					break;
				case SYSRTSTART:		//1 byte
					ActionSysRTStart();
     ebc:	3c df       	rcall	.-392    	; 0xd36 <ActionSysRTStart>
					break;
     ebe:	9f c0       	rjmp	.+318    	; 0xffe <ParseMidi+0x1a6>
				case SYSRTCONTINUE:		//1 byte
					ActionSysRTContinue();
     ec0:	48 df       	rcall	.-368    	; 0xd52 <ActionSysRTContinue>
					break;
     ec2:	9d c0       	rjmp	.+314    	; 0xffe <ParseMidi+0x1a6>
				case SYSRTSTOP:			//1 byte
					ActionSysRTStop();
     ec4:	54 df       	rcall	.-344    	; 0xd6e <ActionSysRTStop>
					break;
     ec6:	9b c0       	rjmp	.+310    	; 0xffe <ParseMidi+0x1a6>
					break;
				case SYSRTACTIVESEN:	//1 byte
					ActionSysRTActiveSense();
					break;
				case SYSRTRESET:		//1 byte
					ActionSysRTReset();
     ec8:	62 df       	rcall	.-316    	; 0xd8e <ActionSysRTReset>
					break;
     eca:	99 c0       	rjmp	.+306    	; 0xffe <ParseMidi+0x1a6>
	else	// 	then it must be data
	{
		/*	we must handle the case of running status...so we need to keep track of
		**  which data byte we are on
		*/
		switch(pMp->cmd)	//what was the last command?
     ecc:	89 81       	ldd	r24, Y+1	; 0x01
     ece:	80 3d       	cpi	r24, 0xD0	; 208
     ed0:	09 f4       	brne	.+2      	; 0xed4 <ParseMidi+0x7c>
     ed2:	4d c0       	rjmp	.+154    	; 0xf6e <ParseMidi+0x116>
     ed4:	78 f4       	brcc	.+30     	; 0xef4 <ParseMidi+0x9c>
     ed6:	80 3a       	cpi	r24, 0xA0	; 160
     ed8:	d9 f1       	breq	.+118    	; 0xf50 <ParseMidi+0xf8>
     eda:	28 f4       	brcc	.+10     	; 0xee6 <ParseMidi+0x8e>
     edc:	80 38       	cpi	r24, 0x80	; 128
     ede:	f1 f0       	breq	.+60     	; 0xf1c <ParseMidi+0xc4>
     ee0:	80 39       	cpi	r24, 0x90	; 144
     ee2:	29 f1       	breq	.+74     	; 0xf2e <ParseMidi+0xd6>
     ee4:	8c c0       	rjmp	.+280    	; 0xffe <ParseMidi+0x1a6>
     ee6:	80 3b       	cpi	r24, 0xB0	; 176
     ee8:	09 f4       	brne	.+2      	; 0xeec <ParseMidi+0x94>
     eea:	44 c0       	rjmp	.+136    	; 0xf74 <ParseMidi+0x11c>
     eec:	80 3c       	cpi	r24, 0xC0	; 192
     eee:	09 f4       	brne	.+2      	; 0xef2 <ParseMidi+0x9a>
     ef0:	72 c0       	rjmp	.+228    	; 0xfd6 <ParseMidi+0x17e>
     ef2:	85 c0       	rjmp	.+266    	; 0xffe <ParseMidi+0x1a6>
     ef4:	81 3f       	cpi	r24, 0xF1	; 241
     ef6:	09 f4       	brne	.+2      	; 0xefa <ParseMidi+0xa2>
     ef8:	81 c0       	rjmp	.+258    	; 0xffc <ParseMidi+0x1a4>
     efa:	48 f4       	brcc	.+18     	; 0xf0e <ParseMidi+0xb6>
     efc:	80 3e       	cpi	r24, 0xE0	; 224
     efe:	09 f4       	brne	.+2      	; 0xf02 <ParseMidi+0xaa>
     f00:	48 c0       	rjmp	.+144    	; 0xf92 <ParseMidi+0x13a>
     f02:	80 3f       	cpi	r24, 0xF0	; 240
     f04:	09 f0       	breq	.+2      	; 0xf08 <ParseMidi+0xb0>
     f06:	7b c0       	rjmp	.+246    	; 0xffe <ParseMidi+0x1a6>
			case PATCH:			//last command was patch change 2 bytes
				pMp->state = NOTE0;
				ActionProgramChange(pMp->chan,c);
				break;
			case SYSEX:		//1 byte...This is where we pass of sysex data
				ActionSysExData(pMp,c);
     f08:	ce 01       	movw	r24, r28
     f0a:	37 de       	rcall	.-914    	; 0xb7a <ActionSysExData>
               	break;
     f0c:	78 c0       	rjmp	.+240    	; 0xffe <ParseMidi+0x1a6>
	else	// 	then it must be data
	{
		/*	we must handle the case of running status...so we need to keep track of
		**  which data byte we are on
		*/
		switch(pMp->cmd)	//what was the last command?
     f0e:	82 3f       	cpi	r24, 0xF2	; 242
     f10:	09 f4       	brne	.+2      	; 0xf14 <ParseMidi+0xbc>
     f12:	58 c0       	rjmp	.+176    	; 0xfc4 <ParseMidi+0x16c>
     f14:	83 3f       	cpi	r24, 0xF3	; 243
     f16:	09 f4       	brne	.+2      	; 0xf1a <ParseMidi+0xc2>
     f18:	71 c0       	rjmp	.+226    	; 0xffc <ParseMidi+0x1a4>
     f1a:	71 c0       	rjmp	.+226    	; 0xffe <ParseMidi+0x1a6>
		{
			case NOTEOFF:	//last command was note off 3 bytes
				switch(pMp->state)
     f1c:	8d 81       	ldd	r24, Y+5	; 0x05
     f1e:	81 30       	cpi	r24, 0x01	; 1
     f20:	21 f1       	breq	.+72     	; 0xf6a <ParseMidi+0x112>
     f22:	82 30       	cpi	r24, 0x02	; 2
     f24:	09 f0       	breq	.+2      	; 0xf28 <ParseMidi+0xd0>
     f26:	6b c0       	rjmp	.+214    	; 0xffe <ParseMidi+0x1a6>
					case NOTE0:
						pMp->nextnote = c;
						pMp->state = NOTE1;
						break;
					case NOTE1:
						pMp->currentnote = pMp->nextnote;
     f28:	6b 81       	ldd	r22, Y+3	; 0x03
     f2a:	6c 83       	std	Y+4, r22	; 0x04
     f2c:	0e c0       	rjmp	.+28     	; 0xf4a <ParseMidi+0xf2>
						pMp->state = NOTE0;
						break;
				}
				break;
			case NOTEON:	// last command was note on 3 bytes
				switch(pMp->state)
     f2e:	8d 81       	ldd	r24, Y+5	; 0x05
     f30:	81 30       	cpi	r24, 0x01	; 1
     f32:	d9 f0       	breq	.+54     	; 0xf6a <ParseMidi+0x112>
     f34:	82 30       	cpi	r24, 0x02	; 2
     f36:	09 f0       	breq	.+2      	; 0xf3a <ParseMidi+0xe2>
     f38:	62 c0       	rjmp	.+196    	; 0xffe <ParseMidi+0x1a6>
					case NOTE0:
						pMp->nextnote = c;
						pMp->state = NOTE1;
						break;
					case NOTE1:
						pMp->currentnote = pMp->nextnote;
     f3a:	6b 81       	ldd	r22, Y+3	; 0x03
     f3c:	6c 83       	std	Y+4, r22	; 0x04
						if(c > 0)
     f3e:	44 23       	and	r20, r20
     f40:	19 f0       	breq	.+6      	; 0xf48 <ParseMidi+0xf0>
							ActionNoteOn(pMp->chan,pMp->currentnote,c);
     f42:	8a 81       	ldd	r24, Y+2	; 0x02
     f44:	47 df       	rcall	.-370    	; 0xdd4 <ActionNoteOn>
     f46:	47 c0       	rjmp	.+142    	; 0xfd6 <ParseMidi+0x17e>
						else
							ActionNoteOff(pMp->chan,pMp->nextnote,c);
     f48:	40 e0       	ldi	r20, 0x00	; 0
     f4a:	8a 81       	ldd	r24, Y+2	; 0x02
     f4c:	29 df       	rcall	.-430    	; 0xda0 <ActionNoteOff>
     f4e:	43 c0       	rjmp	.+134    	; 0xfd6 <ParseMidi+0x17e>
					default:
						break;
				}
				break;
			case NOTEPRES:	// last command was note pressure  3 bytes
				switch(pMp->state)
     f50:	8d 81       	ldd	r24, Y+5	; 0x05
     f52:	81 30       	cpi	r24, 0x01	; 1
     f54:	51 f0       	breq	.+20     	; 0xf6a <ParseMidi+0x112>
     f56:	82 30       	cpi	r24, 0x02	; 2
     f58:	09 f0       	breq	.+2      	; 0xf5c <ParseMidi+0x104>
     f5a:	51 c0       	rjmp	.+162    	; 0xffe <ParseMidi+0x1a6>
					case NOTE0:
						pMp->nextnote = c;
						pMp->state = NOTE1;
						break;
					case NOTE1:
						pMp->state = NOTE0;
     f5c:	81 e0       	ldi	r24, 0x01	; 1
     f5e:	8d 83       	std	Y+5, r24	; 0x05
						pMp->currentnote = pMp->nextnote;
     f60:	6b 81       	ldd	r22, Y+3	; 0x03
     f62:	6c 83       	std	Y+4, r22	; 0x04
						ActionAfterTouch(pMp->chan,pMp->currentnote,c);
     f64:	8a 81       	ldd	r24, Y+2	; 0x02
     f66:	55 df       	rcall	.-342    	; 0xe12 <ActionAfterTouch>
						break;
     f68:	4a c0       	rjmp	.+148    	; 0xffe <ParseMidi+0x1a6>
				break;
			case NOTEPRES:	// last command was note pressure  3 bytes
				switch(pMp->state)
				{
					case NOTE0:
						pMp->nextnote = c;
     f6a:	4b 83       	std	Y+3, r20	; 0x03
     f6c:	32 c0       	rjmp	.+100    	; 0xfd2 <ParseMidi+0x17a>
						ActionAfterTouch(pMp->chan,pMp->currentnote,c);
						break;
				}
				break;
			case CHANPRES:		//last command was channel pressuren 2 bytes
				ActionChanPressure(pMp->chan,c);
     f6e:	8a 81       	ldd	r24, Y+2	; 0x02
     f70:	5c df       	rcall	.-328    	; 0xe2a <ActionChanPressure>
				break;
     f72:	45 c0       	rjmp	.+138    	; 0xffe <ParseMidi+0x1a6>
			case CONTROL:			//control change 3 bytes
				switch(pMp->state)
     f74:	8d 81       	ldd	r24, Y+5	; 0x05
     f76:	81 30       	cpi	r24, 0x01	; 1
     f78:	41 f0       	breq	.+16     	; 0xf8a <ParseMidi+0x132>
     f7a:	82 30       	cpi	r24, 0x02	; 2
     f7c:	09 f0       	breq	.+2      	; 0xf80 <ParseMidi+0x128>
     f7e:	3f c0       	rjmp	.+126    	; 0xffe <ParseMidi+0x1a6>
					case NOTE0:
						pMp->state = NOTE1;
						pMp->nextnote = c;
						break;
					case NOTE1:
						pMp->state = NOTE0;
     f80:	81 e0       	ldi	r24, 0x01	; 1
     f82:	8d 83       	std	Y+5, r24	; 0x05
						pMp->currentnote = pMp->nextnote;
     f84:	8b 81       	ldd	r24, Y+3	; 0x03
     f86:	8c 83       	std	Y+4, r24	; 0x04
     f88:	3a c0       	rjmp	.+116    	; 0xffe <ParseMidi+0x1a6>
				break;
			case CONTROL:			//control change 3 bytes
				switch(pMp->state)
				{
					case NOTE0:
						pMp->state = NOTE1;
     f8a:	82 e0       	ldi	r24, 0x02	; 2
     f8c:	8d 83       	std	Y+5, r24	; 0x05
						pMp->nextnote = c;
     f8e:	6b 83       	std	Y+3, r22	; 0x03
						break;
     f90:	36 c0       	rjmp	.+108    	; 0xffe <ParseMidi+0x1a6>
						ActionController(pMp->chan,pMp->currentnote,c);
						break;
				}
				break;
			case WHEEL:			//last command was pitch wheel change 3 bytes
				switch(pMp->state)
     f92:	8d 81       	ldd	r24, Y+5	; 0x05
     f94:	81 30       	cpi	r24, 0x01	; 1
     f96:	c9 f0       	breq	.+50     	; 0xfca <ParseMidi+0x172>
     f98:	82 30       	cpi	r24, 0x02	; 2
     f9a:	89 f5       	brne	.+98     	; 0xffe <ParseMidi+0x1a6>
						pMp->v = ((int)c);
						pMp->state = NOTE1;
						break;
					case NOTE1:	// most significant byte
						pMp->v |= ((unsigned)c)<<7;
						pMp->v >>= 2;	//12 bits;
     f9c:	80 e8       	ldi	r24, 0x80	; 128
     f9e:	68 9f       	mul	r22, r24
     fa0:	f0 01       	movw	r30, r0
     fa2:	11 24       	eor	r1, r1
     fa4:	68 85       	ldd	r22, Y+8	; 0x08
     fa6:	79 85       	ldd	r23, Y+9	; 0x09
     fa8:	e6 2b       	or	r30, r22
     faa:	f7 2b       	or	r31, r23
     fac:	bf 01       	movw	r22, r30
     fae:	76 95       	lsr	r23
     fb0:	67 95       	ror	r22
     fb2:	76 95       	lsr	r23
     fb4:	67 95       	ror	r22
     fb6:	79 87       	std	Y+9, r23	; 0x09
     fb8:	68 87       	std	Y+8, r22	; 0x08
						pMp->state = NOTE0;
     fba:	81 e0       	ldi	r24, 0x01	; 1
     fbc:	8d 83       	std	Y+5, r24	; 0x05
						ActionPitchWheel(pMp->chan,pMp->v);
     fbe:	8a 81       	ldd	r24, Y+2	; 0x02
     fc0:	41 df       	rcall	.-382    	; 0xe44 <ActionPitchWheel>
						break;
     fc2:	1d c0       	rjmp	.+58     	; 0xffe <ParseMidi+0x1a6>
			case SYSCOM_MTCQUARTERFRAME:
				pMp->state = IDLE;
				ActionMTCQuarterFrameMessage(c);
				break;
			case SYSCOMSONGPOS:
				switch(pMp->state)
     fc4:	8d 81       	ldd	r24, Y+5	; 0x05
     fc6:	81 30       	cpi	r24, 0x01	; 1
     fc8:	49 f4       	brne	.+18     	; 0xfdc <ParseMidi+0x184>
				break;
			case WHEEL:			//last command was pitch wheel change 3 bytes
				switch(pMp->state)
				{
					case NOTE0:	// least significant byte
						pMp->v = ((int)c);
     fca:	e4 2f       	mov	r30, r20
     fcc:	f0 e0       	ldi	r31, 0x00	; 0
     fce:	f9 87       	std	Y+9, r31	; 0x09
     fd0:	e8 87       	std	Y+8, r30	; 0x08
						pMp->state = NOTE1;
     fd2:	82 e0       	ldi	r24, 0x02	; 2
     fd4:	01 c0       	rjmp	.+2      	; 0xfd8 <ParseMidi+0x180>
						ActionPitchWheel(pMp->chan,pMp->v);
						break;
				}
				break;
			case PATCH:			//last command was patch change 2 bytes
				pMp->state = NOTE0;
     fd6:	81 e0       	ldi	r24, 0x01	; 1
     fd8:	8d 83       	std	Y+5, r24	; 0x05
     fda:	11 c0       	rjmp	.+34     	; 0xffe <ParseMidi+0x1a6>
			case SYSCOM_MTCQUARTERFRAME:
				pMp->state = IDLE;
				ActionMTCQuarterFrameMessage(c);
				break;
			case SYSCOMSONGPOS:
				switch(pMp->state)
     fdc:	82 30       	cpi	r24, 0x02	; 2
     fde:	79 f4       	brne	.+30     	; 0xffe <ParseMidi+0x1a6>
						pMp->v = ((int)c);
						pMp->state = NOTE1;
						break;
					case NOTE1:
						pMp->v |= ((int)c)<<7;
						pMp->v <<= 2;	//12 bits;
     fe0:	80 e8       	ldi	r24, 0x80	; 128
     fe2:	68 9f       	mul	r22, r24
     fe4:	f0 01       	movw	r30, r0
     fe6:	11 24       	eor	r1, r1
     fe8:	48 85       	ldd	r20, Y+8	; 0x08
     fea:	59 85       	ldd	r21, Y+9	; 0x09
     fec:	e4 2b       	or	r30, r20
     fee:	f5 2b       	or	r31, r21
     ff0:	ee 0f       	add	r30, r30
     ff2:	ff 1f       	adc	r31, r31
     ff4:	ee 0f       	add	r30, r30
     ff6:	ff 1f       	adc	r31, r31
     ff8:	f9 87       	std	Y+9, r31	; 0x09
     ffa:	e8 87       	std	Y+8, r30	; 0x08
						ActionSysComSongPos(pMp->v);
						break;
				}
				break;
			case SYSCOMSONGSEL:
				pMp->state = IDLE;
     ffc:	1d 82       	std	Y+5, r1	; 0x05
				ActionSysComSongSel(c);
				break;
		}	//end of switch(cmd)
	}	//end of if(c & 0x080)
	return 0;
}
     ffe:	80 e0       	ldi	r24, 0x00	; 0
    1000:	90 e0       	ldi	r25, 0x00	; 0
    1002:	df 91       	pop	r29
    1004:	cf 91       	pop	r28
    1006:	08 95       	ret

00001008 <PriorityCompare>:
//		positive....priority of s1 > s2
//		negative....priority of s1 < s2
//----------------------------------------------------------------------
//
static int PriorityCompare(void **s1, void **s2)
{
    1008:	cf 93       	push	r28
    100a:	df 93       	push	r29
	int r;

	//check priority levels
	if( (r = ((TCB *)*s1)->priority - ((TCB *)*s2)->priority) != 0)
    100c:	dc 01       	movw	r26, r24
    100e:	ed 91       	ld	r30, X+
    1010:	fc 91       	ld	r31, X
    1012:	eb 01       	movw	r28, r22
    1014:	a8 81       	ld	r26, Y
    1016:	b9 81       	ldd	r27, Y+1	; 0x01
    1018:	86 81       	ldd	r24, Z+6	; 0x06
    101a:	97 81       	ldd	r25, Z+7	; 0x07
    101c:	16 96       	adiw	r26, 0x06	; 6
    101e:	2d 91       	ld	r18, X+
    1020:	3c 91       	ld	r19, X
    1022:	17 97       	sbiw	r26, 0x07	; 7
    1024:	82 1b       	sub	r24, r18
    1026:	93 0b       	sbc	r25, r19
    1028:	41 f4       	brne	.+16     	; 0x103a <PriorityCompare+0x32>
		return r;
	//if priority levels are the same, then check time stamps
	return (int)(((TCB *)*s2)->TimeStamp - ((TCB *)*s1)->TimeStamp);
    102a:	1c 96       	adiw	r26, 0x0c	; 12
    102c:	8d 91       	ld	r24, X+
    102e:	9c 91       	ld	r25, X
    1030:	1d 97       	sbiw	r26, 0x0d	; 13
    1032:	24 85       	ldd	r18, Z+12	; 0x0c
    1034:	35 85       	ldd	r19, Z+13	; 0x0d
    1036:	82 1b       	sub	r24, r18
    1038:	93 0b       	sbc	r25, r19
}
    103a:	df 91       	pop	r29
    103c:	cf 91       	pop	r28
    103e:	08 95       	ret

00001040 <OSInit>:
//	parameters:
//		none
//---------------------------------------------------------------------------
void OSInit(void)
{
	CreatePriorityQueue(&ActiveTasks,32,PriorityCompare);
    1040:	44 e0       	ldi	r20, 0x04	; 4
    1042:	58 e0       	ldi	r21, 0x08	; 8
    1044:	60 e2       	ldi	r22, 0x20	; 32
    1046:	70 e0       	ldi	r23, 0x00	; 0
    1048:	88 e9       	ldi	r24, 0x98	; 152
    104a:	90 e0       	ldi	r25, 0x00	; 0
    104c:	1c c1       	rjmp	.+568    	; 0x1286 <CreatePriorityQueue>

0000104e <PendSemaphore>:
**	Inidicates status of operation.  0 or positive is normal,
**		negative is error
**************************************************************************/

int PendSemaphore(SEMAPHORE *e, int Timeout)	//wait for semaphore availiable
{
    104e:	ef 92       	push	r14
    1050:	ff 92       	push	r15
    1052:	1f 93       	push	r17
    1054:	cf 93       	push	r28
    1056:	df 93       	push	r29
    1058:	ec 01       	movw	r28, r24
    105a:	7b 01       	movw	r14, r22
	char sr;
	int retval;
	sr = Disable();
    105c:	18 d8       	rcall	.-4048   	; 0x8e <Disable>
    105e:	18 2f       	mov	r17, r24
	if(e->EventCount > 0)	/*	is resource availiable?	*/
    1060:	2a 85       	ldd	r18, Y+10	; 0x0a
    1062:	3b 85       	ldd	r19, Y+11	; 0x0b
    1064:	c9 01       	movw	r24, r18
    1066:	01 97       	sbiw	r24, 0x01	; 1
	{
		/*	yes	*/
		--e->EventCount;
    1068:	9b 87       	std	Y+11, r25	; 0x0b
    106a:	8a 87       	std	Y+10, r24	; 0x0a
int PendSemaphore(SEMAPHORE *e, int Timeout)	//wait for semaphore availiable
{
	char sr;
	int retval;
	sr = Disable();
	if(e->EventCount > 0)	/*	is resource availiable?	*/
    106c:	12 16       	cp	r1, r18
    106e:	13 06       	cpc	r1, r19
    1070:	2c f4       	brge	.+10     	; 0x107c <PendSemaphore+0x2e>
	{
		/*	yes	*/
		--e->EventCount;
		Enable(sr);
    1072:	81 2f       	mov	r24, r17
    1074:	10 d8       	rcall	.-4064   	; 0x96 <Enable>
		retval = EVENT_NOERROR;	//everything is peachy
    1076:	80 e0       	ldi	r24, 0x00	; 0
    1078:	90 e0       	ldi	r25, 0x00	; 0
    107a:	43 c0       	rjmp	.+134    	; 0x1102 <PendSemaphore+0xb4>
	}
	else
	{
		/*	no	*/
		--e->EventCount;
		if(!e->task_head)		//make linked list of waiting tasks
    107c:	88 81       	ld	r24, Y
    107e:	99 81       	ldd	r25, Y+1	; 0x01
    1080:	e0 91 a2 00 	lds	r30, 0x00A2	; 0x8000a2 <pCurrentTask>
    1084:	f0 91 a3 00 	lds	r31, 0x00A3	; 0x8000a3 <pCurrentTask+0x1>
    1088:	89 2b       	or	r24, r25
    108a:	19 f4       	brne	.+6      	; 0x1092 <PendSemaphore+0x44>
			e->task_head = pCurrentTask;
    108c:	f9 83       	std	Y+1, r31	; 0x01
    108e:	e8 83       	st	Y, r30
    1090:	06 c0       	rjmp	.+12     	; 0x109e <PendSemaphore+0x50>
		else
			e->task_tail->next = pCurrentTask;
    1092:	aa 81       	ldd	r26, Y+2	; 0x02
    1094:	bb 81       	ldd	r27, Y+3	; 0x03
    1096:	55 96       	adiw	r26, 0x15	; 21
    1098:	fc 93       	st	X, r31
    109a:	ee 93       	st	-X, r30
    109c:	54 97       	sbiw	r26, 0x14	; 20
		e->task_tail = pCurrentTask;
    109e:	fb 83       	std	Y+3, r31	; 0x03
    10a0:	ea 83       	std	Y+2, r30	; 0x02
		pCurrentTask->status = EVENT_NOERROR;
    10a2:	11 86       	std	Z+9, r1	; 0x09
    10a4:	10 86       	std	Z+8, r1	; 0x08
		if(e->SemaphoreMode)
    10a6:	88 85       	ldd	r24, Y+8	; 0x08
    10a8:	99 85       	ldd	r25, Y+9	; 0x09
    10aa:	89 2b       	or	r24, r25
    10ac:	11 f0       	breq	.+4      	; 0x10b2 <PendSemaphore+0x64>
			pCurrentTask->timeout = Timeout;
    10ae:	f1 8a       	std	Z+17, r15	; 0x11
    10b0:	e0 8a       	std	Z+16, r14	; 0x10

		//swap out current task
		//Update the time stamp on current task
		pCurrentTask->TimeStamp = TStamp;
    10b2:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <TStamp>
    10b6:	90 91 61 01 	lds	r25, 0x0161	; 0x800161 <TStamp+0x1>
    10ba:	95 87       	std	Z+13, r25	; 0x0d
    10bc:	84 87       	std	Z+12, r24	; 0x0c
		//get highest priority task from queue
		if(Delete(&ActiveTasks,(void **)&pNextTask))	
    10be:	66 ea       	ldi	r22, 0xA6	; 166
    10c0:	70 e0       	ldi	r23, 0x00	; 0
    10c2:	88 e9       	ldi	r24, 0x98	; 152
    10c4:	90 e0       	ldi	r25, 0x00	; 0
    10c6:	53 d1       	rcall	.+678    	; 0x136e <Delete>
    10c8:	89 2b       	or	r24, r25
    10ca:	59 f0       	breq	.+22     	; 0x10e2 <PendSemaphore+0x94>
		{
			//increment swaps on new task
			pNextTask->TcbSwaps++;
    10cc:	e0 91 a6 00 	lds	r30, 0x00A6	; 0x8000a6 <pNextTask>
    10d0:	f0 91 a7 00 	lds	r31, 0x00A7	; 0x8000a7 <pNextTask+0x1>
    10d4:	86 85       	ldd	r24, Z+14	; 0x0e
    10d6:	97 85       	ldd	r25, Z+15	; 0x0f
    10d8:	01 96       	adiw	r24, 0x01	; 1
    10da:	97 87       	std	Z+15, r25	; 0x0f
    10dc:	86 87       	std	Z+14, r24	; 0x0e
			DoSwap();		//do context swap
    10de:	5f d9       	rcall	.-3394   	; 0x39e <DoSwap>
    10e0:	08 c0       	rjmp	.+16     	; 0x10f2 <PendSemaphore+0xa4>
		}
		else
		{
			//there were no tasks in the queue
			//set status to error and return
			pCurrentTask->status = EVENT_NOTASKS;
    10e2:	e0 91 a2 00 	lds	r30, 0x00A2	; 0x8000a2 <pCurrentTask>
    10e6:	f0 91 a3 00 	lds	r31, 0x00A3	; 0x8000a3 <pCurrentTask+0x1>
    10ea:	8f ef       	ldi	r24, 0xFF	; 255
    10ec:	9f ef       	ldi	r25, 0xFF	; 255
    10ee:	91 87       	std	Z+9, r25	; 0x09
    10f0:	80 87       	std	Z+8, r24	; 0x08
		}
		//-----------------------
		// Pend is over, check status
		//-----------------------

		Enable(sr);
    10f2:	81 2f       	mov	r24, r17
    10f4:	d0 d7       	rcall	.+4000   	; 0x2096 <__TEXT_REGION_LENGTH__+0x96>
		retval = pCurrentTask->status;	//return this value
    10f6:	e0 91 a2 00 	lds	r30, 0x00A2	; 0x8000a2 <pCurrentTask>
    10fa:	f0 91 a3 00 	lds	r31, 0x00A3	; 0x8000a3 <pCurrentTask+0x1>
    10fe:	80 85       	ldd	r24, Z+8	; 0x08
    1100:	91 85       	ldd	r25, Z+9	; 0x09
	}
	return retval;
}
    1102:	df 91       	pop	r29
    1104:	cf 91       	pop	r28
    1106:	1f 91       	pop	r17
    1108:	ff 90       	pop	r15
    110a:	ef 90       	pop	r14
    110c:	08 95       	ret

0000110e <PostSemaphore>:
**
** return value: 0 = No Error, negative indicates error
***************************************************************************/

int PostSemaphore(SEMAPHORE *e, int Value)	//signal semaphore availiable
{
    110e:	ef 92       	push	r14
    1110:	ff 92       	push	r15
    1112:	1f 93       	push	r17
    1114:	cf 93       	push	r28
    1116:	df 93       	push	r29
    1118:	ec 01       	movw	r28, r24
    111a:	7b 01       	movw	r14, r22
	char sr=0;
	//------------------------------
	// do not disable IRQ if inside
	// of an interrupt routine
	//------------------------------
	if(!InterruptCount)sr = Disable();
    111c:	80 91 a8 00 	lds	r24, 0x00A8	; 0x8000a8 <InterruptCount>
    1120:	90 91 a9 00 	lds	r25, 0x00A9	; 0x8000a9 <InterruptCount+0x1>
    1124:	89 2b       	or	r24, r25
    1126:	19 f4       	brne	.+6      	; 0x112e <PostSemaphore+0x20>
    1128:	b2 d7       	rcall	.+3940   	; 0x208e <__TEXT_REGION_LENGTH__+0x8e>
    112a:	18 2f       	mov	r17, r24
    112c:	01 c0       	rjmp	.+2      	; 0x1130 <PostSemaphore+0x22>
***************************************************************************/

int PostSemaphore(SEMAPHORE *e, int Value)	//signal semaphore availiable
{
	TCB *t;
	char sr=0;
    112e:	10 e0       	ldi	r17, 0x00	; 0
	//------------------------------
	// do not disable IRQ if inside
	// of an interrupt routine
	//------------------------------
	if(!InterruptCount)sr = Disable();
	if(e->EventCount < 32766)	//is it going to overflow??
    1130:	8a 85       	ldd	r24, Y+10	; 0x0a
    1132:	9b 85       	ldd	r25, Y+11	; 0x0b
    1134:	8e 3f       	cpi	r24, 0xFE	; 254
    1136:	2f e7       	ldi	r18, 0x7F	; 127
    1138:	92 07       	cpc	r25, r18
    113a:	64 f5       	brge	.+88     	; 0x1194 <PostSemaphore+0x86>
    113c:	9c 01       	movw	r18, r24
    113e:	2f 5f       	subi	r18, 0xFF	; 255
    1140:	3f 4f       	sbci	r19, 0xFF	; 255
	{
		if(e->EventCount >= 0)	//increment semaphore
		{
			++e->EventCount;
    1142:	3b 87       	std	Y+11, r19	; 0x0b
    1144:	2a 87       	std	Y+10, r18	; 0x0a
	// of an interrupt routine
	//------------------------------
	if(!InterruptCount)sr = Disable();
	if(e->EventCount < 32766)	//is it going to overflow??
	{
		if(e->EventCount >= 0)	//increment semaphore
    1146:	97 ff       	sbrs	r25, 7
    1148:	1c c0       	rjmp	.+56     	; 0x1182 <PostSemaphore+0x74>
			if(!InterruptCount)Enable(sr);
		}
		else
		{
			++e->EventCount;
			if(e->task_head)				//is there really a task waiting?
    114a:	e8 81       	ld	r30, Y
    114c:	f9 81       	ldd	r31, Y+1	; 0x01
    114e:	30 97       	sbiw	r30, 0x00	; 0
    1150:	c1 f0       	breq	.+48     	; 0x1182 <PostSemaphore+0x74>
			{
				t = e->task_head;		//get first task in
				e->task_head = t->next;       //remove from list
    1152:	84 89       	ldd	r24, Z+20	; 0x14
    1154:	95 89       	ldd	r25, Z+21	; 0x15
    1156:	99 83       	std	Y+1, r25	; 0x01
    1158:	88 83       	st	Y, r24
				t->next = (TCB *)0;
    115a:	15 8a       	std	Z+21, r1	; 0x15
    115c:	14 8a       	std	Z+20, r1	; 0x14
				t->status = Value;			//return this value
    115e:	f1 86       	std	Z+9, r15	; 0x09
    1160:	e0 86       	std	Z+8, r14	; 0x08
				Insert(&ActiveTasks,t);	//put task back onto active list
    1162:	bf 01       	movw	r22, r30
    1164:	88 e9       	ldi	r24, 0x98	; 152
    1166:	90 e0       	ldi	r25, 0x00	; 0
    1168:	a3 d0       	rcall	.+326    	; 0x12b0 <Insert>
				if(!InterruptCount)Enable(sr);
    116a:	80 91 a8 00 	lds	r24, 0x00A8	; 0x8000a8 <InterruptCount>
    116e:	90 91 a9 00 	lds	r25, 0x00A9	; 0x8000a9 <InterruptCount+0x1>
    1172:	89 2b       	or	r24, r25
    1174:	11 f4       	brne	.+4      	; 0x117a <PostSemaphore+0x6c>
    1176:	81 2f       	mov	r24, r17
    1178:	8e d7       	rcall	.+3868   	; 0x2096 <__TEXT_REGION_LENGTH__+0x96>
				Yield();
    117a:	01 d6       	rcall	.+3074   	; 0x1d7e <Yield>
			else
			{
				if(!InterruptCount)Enable(sr);
			}
		}
		return EVENT_NOERROR;
    117c:	c0 e0       	ldi	r28, 0x00	; 0
    117e:	d0 e0       	ldi	r29, 0x00	; 0
    1180:	13 c0       	rjmp	.+38     	; 0x11a8 <PostSemaphore+0x9a>
				if(!InterruptCount)Enable(sr);
				Yield();
			}
			else
			{
				if(!InterruptCount)Enable(sr);
    1182:	c0 91 a8 00 	lds	r28, 0x00A8	; 0x8000a8 <InterruptCount>
    1186:	d0 91 a9 00 	lds	r29, 0x00A9	; 0x8000a9 <InterruptCount+0x1>
    118a:	20 97       	sbiw	r28, 0x00	; 0
    118c:	b9 f7       	brne	.-18     	; 0x117c <PostSemaphore+0x6e>
    118e:	81 2f       	mov	r24, r17
    1190:	82 d7       	rcall	.+3844   	; 0x2096 <__TEXT_REGION_LENGTH__+0x96>
    1192:	0a c0       	rjmp	.+20     	; 0x11a8 <PostSemaphore+0x9a>
		}
		return EVENT_NOERROR;
	}
	else
	{
		if(!InterruptCount)Enable(sr);
    1194:	80 91 a8 00 	lds	r24, 0x00A8	; 0x8000a8 <InterruptCount>
    1198:	90 91 a9 00 	lds	r25, 0x00A9	; 0x8000a9 <InterruptCount+0x1>
    119c:	89 2b       	or	r24, r25
    119e:	11 f4       	brne	.+4      	; 0x11a4 <PostSemaphore+0x96>
    11a0:	81 2f       	mov	r24, r17
    11a2:	79 d7       	rcall	.+3826   	; 0x2096 <__TEXT_REGION_LENGTH__+0x96>
		return(EVENT_OVERFLOW);
    11a4:	ce ef       	ldi	r28, 0xFE	; 254
    11a6:	df ef       	ldi	r29, 0xFF	; 255
	}
}
    11a8:	ce 01       	movw	r24, r28
    11aa:	df 91       	pop	r29
    11ac:	cf 91       	pop	r28
    11ae:	1f 91       	pop	r17
    11b0:	ff 90       	pop	r15
    11b2:	ef 90       	pop	r14
    11b4:	08 95       	ret

000011b6 <ReheapDown>:
**	parameters:
**		pQ.......pointer to the priority queue
**
***********************************************/
static void ReheapDown(PRIORITYQUEUE* pQ)
{
    11b6:	6f 92       	push	r6
    11b8:	7f 92       	push	r7
    11ba:	8f 92       	push	r8
    11bc:	9f 92       	push	r9
    11be:	af 92       	push	r10
    11c0:	bf 92       	push	r11
    11c2:	cf 92       	push	r12
    11c4:	df 92       	push	r13
    11c6:	ef 92       	push	r14
    11c8:	ff 92       	push	r15
    11ca:	0f 93       	push	r16
    11cc:	1f 93       	push	r17
    11ce:	cf 93       	push	r28
    11d0:	df 93       	push	r29
    11d2:	6c 01       	movw	r12, r24
	void **ppParent;	//pointer to parent
	void **ppChild;   //pointer to child
	void **ppSibling;	//pointer to sibling
	void **ppHeap;	//pointer to m_ppHeap

	ppHeap = pQ->m_ppHeap;
    11d4:	dc 01       	movw	r26, r24
    11d6:	18 96       	adiw	r26, 0x08	; 8
    11d8:	6d 90       	ld	r6, X+
    11da:	7c 90       	ld	r7, X
    11dc:	19 97       	sbiw	r26, 0x09	; 9
	for(parent=0,child=1;child < pQ->m_nItems;)
    11de:	ee 24       	eor	r14, r14
    11e0:	e3 94       	inc	r14
    11e2:	f1 2c       	mov	r15, r1
    11e4:	00 e0       	ldi	r16, 0x00	; 0
    11e6:	10 e0       	ldi	r17, 0x00	; 0
    11e8:	d6 01       	movw	r26, r12
    11ea:	12 96       	adiw	r26, 0x02	; 2
    11ec:	8d 91       	ld	r24, X+
    11ee:	9c 91       	ld	r25, X
    11f0:	13 97       	sbiw	r26, 0x03	; 3
    11f2:	e8 16       	cp	r14, r24
    11f4:	f9 06       	cpc	r15, r25
    11f6:	c4 f5       	brge	.+112    	; 0x1268 <ReheapDown+0xb2>
	{
		//----------------------------------
		// get pointer to parent and child nodes
		//----------------------------------
		ppParent = &ppHeap[parent];
    11f8:	00 0f       	add	r16, r16
    11fa:	11 1f       	adc	r17, r17
    11fc:	06 0d       	add	r16, r6
    11fe:	17 1d       	adc	r17, r7
		ppChild = &ppHeap[child];
    1200:	e7 01       	movw	r28, r14
    1202:	cc 0f       	add	r28, r28
    1204:	dd 1f       	adc	r29, r29
    1206:	c6 0d       	add	r28, r6
    1208:	d7 1d       	adc	r29, r7
		//-----------------------------------
		// is there a possible sibling to
		// the child node?
		//------------------------------------
		if(child + 1 < pQ->m_nItems)
    120a:	57 01       	movw	r10, r14
    120c:	bf ef       	ldi	r27, 0xFF	; 255
    120e:	ab 1a       	sub	r10, r27
    1210:	bb 0a       	sbc	r11, r27
    1212:	a8 16       	cp	r10, r24
    1214:	b9 06       	cpc	r11, r25
    1216:	74 f4       	brge	.+28     	; 0x1234 <ReheapDown+0x7e>
		{
			//---------------------------------
			// get a pointer to the sibling
			//---------------------------------
			ppSibling = ppChild + 1;
    1218:	4e 01       	movw	r8, r28
    121a:	e2 e0       	ldi	r30, 0x02	; 2
    121c:	8e 0e       	add	r8, r30
    121e:	91 1c       	adc	r9, r1
			//---------------------------------
			// is priority of child less than
			// that of the sibling?
			//---------------------------------
			if((*pQ->m_Cmp)(ppChild,ppSibling) < 0)
    1220:	d6 01       	movw	r26, r12
    1222:	ed 91       	ld	r30, X+
    1224:	fc 91       	ld	r31, X
    1226:	b4 01       	movw	r22, r8
    1228:	ce 01       	movw	r24, r28
    122a:	09 95       	icall
    122c:	97 ff       	sbrs	r25, 7
    122e:	02 c0       	rjmp	.+4      	; 0x1234 <ReheapDown+0x7e>
			{
				//--------------------------------
				// make the child equal to sibling
				//---------------------------------
				ppChild = ppSibling;
    1230:	e4 01       	movw	r28, r8
			ppSibling = ppChild + 1;
			//---------------------------------
			// is priority of child less than
			// that of the sibling?
			//---------------------------------
			if((*pQ->m_Cmp)(ppChild,ppSibling) < 0)
    1232:	75 01       	movw	r14, r10
		//-------------------------------------
		// if the priority of the parent is
		// greater than or equal to the child
		// we are done, break out of the loop
		//------------------------------------
		if((*pQ->m_Cmp)(ppParent,ppChild) >= 0)
    1234:	d6 01       	movw	r26, r12
    1236:	ed 91       	ld	r30, X+
    1238:	fc 91       	ld	r31, X
    123a:	be 01       	movw	r22, r28
    123c:	c8 01       	movw	r24, r16
    123e:	09 95       	icall
    1240:	97 ff       	sbrs	r25, 7
    1242:	12 c0       	rjmp	.+36     	; 0x1268 <ReheapDown+0xb2>

static void swap(void **ppS1,void **ppS2)
{
	void *pTemp;

	pTemp = *ppS1;
    1244:	f8 01       	movw	r30, r16
    1246:	80 81       	ld	r24, Z
    1248:	91 81       	ldd	r25, Z+1	; 0x01
	*ppS1 = *ppS2;
    124a:	28 81       	ld	r18, Y
    124c:	39 81       	ldd	r19, Y+1	; 0x01
    124e:	31 83       	std	Z+1, r19	; 0x01
    1250:	20 83       	st	Z, r18
	*ppS2 = pTemp;
    1252:	99 83       	std	Y+1, r25	; 0x01
    1254:	88 83       	st	Y, r24
		//----------------------------------
		parent = child;
		//----------------------------------
		// calculate new child index
		//----------------------------------
		child = LEFTCHILD(parent);
    1256:	c7 01       	movw	r24, r14
    1258:	88 0f       	add	r24, r24
    125a:	99 1f       	adc	r25, r25
		//----------------------------------
		swap(ppParent,ppChild);
		//----------------------------------
		// new parent is the child
		//----------------------------------
		parent = child;
    125c:	87 01       	movw	r16, r14
		//----------------------------------
		// calculate new child index
		//----------------------------------
		child = LEFTCHILD(parent);
    125e:	9c 01       	movw	r18, r24
    1260:	2f 5f       	subi	r18, 0xFF	; 255
    1262:	3f 4f       	sbci	r19, 0xFF	; 255
    1264:	79 01       	movw	r14, r18
    1266:	c0 cf       	rjmp	.-128    	; 0x11e8 <ReheapDown+0x32>
	}	//end of for loop
}
    1268:	df 91       	pop	r29
    126a:	cf 91       	pop	r28
    126c:	1f 91       	pop	r17
    126e:	0f 91       	pop	r16
    1270:	ff 90       	pop	r15
    1272:	ef 90       	pop	r14
    1274:	df 90       	pop	r13
    1276:	cf 90       	pop	r12
    1278:	bf 90       	pop	r11
    127a:	af 90       	pop	r10
    127c:	9f 90       	pop	r9
    127e:	8f 90       	pop	r8
    1280:	7f 90       	pop	r7
    1282:	6f 90       	pop	r6
    1284:	08 95       	ret

00001286 <CreatePriorityQueue>:
// these.
//
//---------------------------------------------------------
//
void CreatePriorityQueue(PRIORITYQUEUE *q,int ne,int (*c)(void **,void **))
{
    1286:	cf 93       	push	r28
    1288:	df 93       	push	r29
    128a:	ec 01       	movw	r28, r24
	q->m_Cmp = c;
    128c:	59 83       	std	Y+1, r21	; 0x01
    128e:	48 83       	st	Y, r20
	q->m_nItems = 0;
    1290:	1b 82       	std	Y+3, r1	; 0x03
    1292:	1a 82       	std	Y+2, r1	; 0x02
	q->m_Maxitems = ne;
    1294:	7d 83       	std	Y+5, r23	; 0x05
    1296:	6c 83       	std	Y+4, r22	; 0x04
	q->m_ppHeap = (void **)malloc(sizeof(void *) * ne);
    1298:	cb 01       	movw	r24, r22
    129a:	88 0f       	add	r24, r24
    129c:	99 1f       	adc	r25, r25
    129e:	51 da       	rcall	.-2910   	; 0x742 <malloc>
    12a0:	99 87       	std	Y+9, r25	; 0x09
    12a2:	88 87       	std	Y+8, r24	; 0x08
    q->m_ppBottom = &q->m_ppHeap[-1];
    12a4:	02 97       	sbiw	r24, 0x02	; 2
    12a6:	9f 83       	std	Y+7, r25	; 0x07
    12a8:	8e 83       	std	Y+6, r24	; 0x06
}
    12aa:	df 91       	pop	r29
    12ac:	cf 91       	pop	r28
    12ae:	08 95       	ret

000012b0 <Insert>:
//		space available in queue
//
//---------------------------------------------------------
//
int Insert(PRIORITYQUEUE* pQ,void *item)
{
    12b0:	af 92       	push	r10
    12b2:	bf 92       	push	r11
    12b4:	cf 92       	push	r12
    12b6:	df 92       	push	r13
    12b8:	ef 92       	push	r14
    12ba:	ff 92       	push	r15
    12bc:	0f 93       	push	r16
    12be:	1f 93       	push	r17
    12c0:	cf 93       	push	r28
    12c2:	df 93       	push	r29
	int space_avail;

	space_avail = pQ->m_Maxitems - pQ->m_nItems;
    12c4:	dc 01       	movw	r26, r24
    12c6:	12 96       	adiw	r26, 0x02	; 2
    12c8:	2d 91       	ld	r18, X+
    12ca:	3c 91       	ld	r19, X
    12cc:	13 97       	sbiw	r26, 0x03	; 3
    12ce:	14 96       	adiw	r26, 0x04	; 4
    12d0:	cd 90       	ld	r12, X+
    12d2:	dc 90       	ld	r13, X
    12d4:	15 97       	sbiw	r26, 0x05	; 5
    12d6:	c2 1a       	sub	r12, r18
    12d8:	d3 0a       	sbc	r13, r19
	if((space_avail) > 0)
    12da:	1c 14       	cp	r1, r12
    12dc:	1d 04       	cpc	r1, r13
    12de:	dc f5       	brge	.+118    	; 0x1356 <Insert+0xa6>
    12e0:	8c 01       	movw	r16, r24
	{
		++pQ->m_nItems;
    12e2:	c9 01       	movw	r24, r18
    12e4:	01 96       	adiw	r24, 0x01	; 1
    12e6:	fd 01       	movw	r30, r26
    12e8:	93 83       	std	Z+3, r25	; 0x03
    12ea:	82 83       	std	Z+2, r24	; 0x02
		*(++pQ->m_ppBottom) = item;
    12ec:	06 80       	ldd	r0, Z+6	; 0x06
    12ee:	f7 81       	ldd	r31, Z+7	; 0x07
    12f0:	e0 2d       	mov	r30, r0
    12f2:	cf 01       	movw	r24, r30
    12f4:	02 96       	adiw	r24, 0x02	; 2
    12f6:	17 96       	adiw	r26, 0x07	; 7
    12f8:	9c 93       	st	X, r25
    12fa:	8e 93       	st	-X, r24
    12fc:	16 97       	sbiw	r26, 0x06	; 6
    12fe:	73 83       	std	Z+3, r23	; 0x03
    1300:	62 83       	std	Z+2, r22	; 0x02
	//-------------------------
	// Index of parent node
	// Keep looping while
	// parent is valid (>= 0)
	//-------------------------
	while(child > 0)
    1302:	12 16       	cp	r1, r18
    1304:	13 06       	cpc	r1, r19
    1306:	3c f5       	brge	.+78     	; 0x1356 <Insert+0xa6>
	{
		parent = PARENT(child);
    1308:	59 01       	movw	r10, r18
    130a:	b1 e0       	ldi	r27, 0x01	; 1
    130c:	ab 1a       	sub	r10, r27
    130e:	b1 08       	sbc	r11, r1
    1310:	b5 94       	asr	r11
    1312:	a7 94       	ror	r10
		//-----------------------------
		// get pointers to parent
		// and child nodes
		//------------------------------
		ppChild = &pQ->m_ppHeap[child];
    1314:	f8 01       	movw	r30, r16
    1316:	80 85       	ldd	r24, Z+8	; 0x08
    1318:	91 85       	ldd	r25, Z+9	; 0x09
    131a:	22 0f       	add	r18, r18
    131c:	33 1f       	adc	r19, r19
    131e:	ec 01       	movw	r28, r24
    1320:	c2 0f       	add	r28, r18
    1322:	d3 1f       	adc	r29, r19
		ppParent = &pQ->m_ppHeap[parent];
    1324:	75 01       	movw	r14, r10
    1326:	ee 0c       	add	r14, r14
    1328:	ff 1c       	adc	r15, r15
    132a:	e8 0e       	add	r14, r24
    132c:	f9 1e       	adc	r15, r25
		// If the priority of the parent
		// is greater than or equal to
		// the priority of the child,
		// we are done, break from the loop
		//---------------------------------
		if( (*pQ->m_Cmp)(ppParent,ppChild) >= 0)
    132e:	01 90       	ld	r0, Z+
    1330:	f0 81       	ld	r31, Z
    1332:	e0 2d       	mov	r30, r0
    1334:	be 01       	movw	r22, r28
    1336:	c7 01       	movw	r24, r14
    1338:	09 95       	icall
    133a:	97 ff       	sbrs	r25, 7
    133c:	0c c0       	rjmp	.+24     	; 0x1356 <Insert+0xa6>

static void swap(void **ppS1,void **ppS2)
{
	void *pTemp;

	pTemp = *ppS1;
    133e:	d7 01       	movw	r26, r14
    1340:	8d 91       	ld	r24, X+
    1342:	9c 91       	ld	r25, X
    1344:	11 97       	sbiw	r26, 0x01	; 1
	*ppS1 = *ppS2;
    1346:	28 81       	ld	r18, Y
    1348:	39 81       	ldd	r19, Y+1	; 0x01
    134a:	2d 93       	st	X+, r18
    134c:	3c 93       	st	X, r19
	*ppS2 = pTemp;
    134e:	99 83       	std	Y+1, r25	; 0x01
    1350:	88 83       	st	Y, r24
		//----------------------------------
		swap(ppParent,ppChild);
		//----------------------------------
		// the new parent is the child
		//----------------------------------
		child = parent;
    1352:	95 01       	movw	r18, r10
    1354:	d6 cf       	rjmp	.-84     	; 0x1302 <Insert+0x52>
		++pQ->m_nItems;
		*(++pQ->m_ppBottom) = item;
		ReheapUp(pQ);
	}
	return space_avail;
}
    1356:	c6 01       	movw	r24, r12
    1358:	df 91       	pop	r29
    135a:	cf 91       	pop	r28
    135c:	1f 91       	pop	r17
    135e:	0f 91       	pop	r16
    1360:	ff 90       	pop	r15
    1362:	ef 90       	pop	r14
    1364:	df 90       	pop	r13
    1366:	cf 90       	pop	r12
    1368:	bf 90       	pop	r11
    136a:	af 90       	pop	r10
    136c:	08 95       	ret

0000136e <Delete>:
// return value:
//		returns slots in use in the queue
//---------------------------------------------------------

int Delete(PRIORITYQUEUE* pQ,void **target)
{
    136e:	cf 93       	push	r28
    1370:	df 93       	push	r29
	int SlotsInUse;

	if((SlotsInUse = pQ->m_nItems) > 0)
    1372:	dc 01       	movw	r26, r24
    1374:	12 96       	adiw	r26, 0x02	; 2
    1376:	cd 91       	ld	r28, X+
    1378:	dc 91       	ld	r29, X
    137a:	13 97       	sbiw	r26, 0x03	; 3
    137c:	1c 16       	cp	r1, r28
    137e:	1d 06       	cpc	r1, r29
    1380:	ec f4       	brge	.+58     	; 0x13bc <Delete+0x4e>
    1382:	fc 01       	movw	r30, r24
	{
		*target = *pQ->m_ppHeap;		//get item from top of m_ppHeap
    1384:	80 85       	ldd	r24, Z+8	; 0x08
    1386:	91 85       	ldd	r25, Z+9	; 0x09
    1388:	dc 01       	movw	r26, r24
    138a:	8d 91       	ld	r24, X+
    138c:	9c 91       	ld	r25, X
    138e:	db 01       	movw	r26, r22
    1390:	8d 93       	st	X+, r24
    1392:	9c 93       	st	X, r25
		*pQ->m_ppHeap = *pQ->m_ppBottom--;
    1394:	80 85       	ldd	r24, Z+8	; 0x08
    1396:	91 85       	ldd	r25, Z+9	; 0x09
    1398:	a6 81       	ldd	r26, Z+6	; 0x06
    139a:	b7 81       	ldd	r27, Z+7	; 0x07
    139c:	9d 01       	movw	r18, r26
    139e:	22 50       	subi	r18, 0x02	; 2
    13a0:	31 09       	sbc	r19, r1
    13a2:	37 83       	std	Z+7, r19	; 0x07
    13a4:	26 83       	std	Z+6, r18	; 0x06
    13a6:	2d 91       	ld	r18, X+
    13a8:	3c 91       	ld	r19, X
    13aa:	dc 01       	movw	r26, r24
    13ac:	2d 93       	st	X+, r18
    13ae:	3c 93       	st	X, r19
		--pQ->m_nItems;
    13b0:	ce 01       	movw	r24, r28
    13b2:	01 97       	sbiw	r24, 0x01	; 1
    13b4:	93 83       	std	Z+3, r25	; 0x03
    13b6:	82 83       	std	Z+2, r24	; 0x02
		ReheapDown(pQ);
    13b8:	cf 01       	movw	r24, r30
    13ba:	fd de       	rcall	.-518    	; 0x11b6 <ReheapDown>
	}
	return SlotsInUse;
}
    13bc:	ce 01       	movw	r24, r28
    13be:	df 91       	pop	r29
    13c0:	cf 91       	pop	r28
    13c2:	08 95       	ret

000013c4 <Replace>:
//	return value:
//		returns number of slots in use
//-----------------------------------------------------------

int Replace(PRIORITYQUEUE* pQ,void **target,void *item)
{
    13c4:	cf 92       	push	r12
    13c6:	df 92       	push	r13
    13c8:	ef 92       	push	r14
    13ca:	ff 92       	push	r15
    13cc:	0f 93       	push	r16
    13ce:	1f 93       	push	r17
    13d0:	cf 93       	push	r28
    13d2:	df 93       	push	r29
    13d4:	00 d0       	rcall	.+0      	; 0x13d6 <Replace+0x12>
    13d6:	cd b7       	in	r28, 0x3d	; 61
    13d8:	de b7       	in	r29, 0x3e	; 62
    13da:	5a 83       	std	Y+2, r21	; 0x02
    13dc:	49 83       	std	Y+1, r20	; 0x01
	int SlotsInUse;

	if((SlotsInUse = pQ->m_nItems) > 0)
    13de:	dc 01       	movw	r26, r24
    13e0:	12 96       	adiw	r26, 0x02	; 2
    13e2:	ed 90       	ld	r14, X+
    13e4:	fc 90       	ld	r15, X
    13e6:	13 97       	sbiw	r26, 0x03	; 3
    13e8:	1e 14       	cp	r1, r14
    13ea:	1f 04       	cpc	r1, r15
    13ec:	3c f5       	brge	.+78     	; 0x143c <Replace+0x78>
    13ee:	6b 01       	movw	r12, r22
    13f0:	8c 01       	movw	r16, r24
	{
		if ((*pQ->m_Cmp)(&item,pQ->m_ppHeap) > 0)	//only replace if priority is less
    13f2:	fc 01       	movw	r30, r24
    13f4:	60 85       	ldd	r22, Z+8	; 0x08
    13f6:	71 85       	ldd	r23, Z+9	; 0x09
    13f8:	01 90       	ld	r0, Z+
    13fa:	f0 81       	ld	r31, Z
    13fc:	e0 2d       	mov	r30, r0
    13fe:	ce 01       	movw	r24, r28
    1400:	01 96       	adiw	r24, 0x01	; 1
    1402:	09 95       	icall
    1404:	29 81       	ldd	r18, Y+1	; 0x01
    1406:	3a 81       	ldd	r19, Y+2	; 0x02
    1408:	18 16       	cp	r1, r24
    140a:	19 06       	cpc	r1, r25
    140c:	24 f4       	brge	.+8      	; 0x1416 <Replace+0x52>
		{
			*target = item;		//item is higher priority
    140e:	d6 01       	movw	r26, r12
    1410:	2d 93       	st	X+, r18
    1412:	3c 93       	st	X, r19
    1414:	18 c0       	rjmp	.+48     	; 0x1446 <Replace+0x82>
		}
		else
		{
			*target = *pQ->m_ppHeap;
    1416:	d8 01       	movw	r26, r16
    1418:	18 96       	adiw	r26, 0x08	; 8
    141a:	ed 91       	ld	r30, X+
    141c:	fc 91       	ld	r31, X
    141e:	19 97       	sbiw	r26, 0x09	; 9
    1420:	80 81       	ld	r24, Z
    1422:	91 81       	ldd	r25, Z+1	; 0x01
    1424:	f6 01       	movw	r30, r12
    1426:	91 83       	std	Z+1, r25	; 0x01
    1428:	80 83       	st	Z, r24
			*pQ->m_ppHeap = item;
    142a:	18 96       	adiw	r26, 0x08	; 8
    142c:	ed 91       	ld	r30, X+
    142e:	fc 91       	ld	r31, X
    1430:	19 97       	sbiw	r26, 0x09	; 9
    1432:	31 83       	std	Z+1, r19	; 0x01
    1434:	20 83       	st	Z, r18
			ReheapDown(pQ);
    1436:	c8 01       	movw	r24, r16
    1438:	be de       	rcall	.-644    	; 0x11b6 <ReheapDown>
    143a:	05 c0       	rjmp	.+10     	; 0x1446 <Replace+0x82>
		}
	}
	else
		*target = item;
    143c:	89 81       	ldd	r24, Y+1	; 0x01
    143e:	9a 81       	ldd	r25, Y+2	; 0x02
    1440:	db 01       	movw	r26, r22
    1442:	8d 93       	st	X+, r24
    1444:	9c 93       	st	X, r25
	return SlotsInUse;
}
    1446:	c7 01       	movw	r24, r14
    1448:	0f 90       	pop	r0
    144a:	0f 90       	pop	r0
    144c:	df 91       	pop	r29
    144e:	cf 91       	pop	r28
    1450:	1f 91       	pop	r17
    1452:	0f 91       	pop	r16
    1454:	ff 90       	pop	r15
    1456:	ef 90       	pop	r14
    1458:	df 90       	pop	r13
    145a:	cf 90       	pop	r12
    145c:	08 95       	ret

0000145e <SendSysEx>:
 MESSAGE_QUEUE *pSeqMsg;

 void DumpByte(char b)
 {
	SendSysEx(&b,1,SYSEX_CMD_DUMP);
 }
    145e:	ef 92       	push	r14
    1460:	ff 92       	push	r15
    1462:	0f 93       	push	r16
    1464:	1f 93       	push	r17
    1466:	cf 93       	push	r28
    1468:	df 93       	push	r29
    146a:	8c 01       	movw	r16, r24
    146c:	7b 01       	movw	r14, r22
    146e:	ea 01       	movw	r28, r20
    1470:	80 ef       	ldi	r24, 0xF0	; 240
    1472:	90 e0       	ldi	r25, 0x00	; 0
    1474:	89 d3       	rcall	.+1810   	; 0x1b88 <USART_PutC>
    1476:	8d e7       	ldi	r24, 0x7D	; 125
    1478:	90 e0       	ldi	r25, 0x00	; 0
    147a:	86 d3       	rcall	.+1804   	; 0x1b88 <USART_PutC>
    147c:	ce 01       	movw	r24, r28
    147e:	84 d3       	rcall	.+1800   	; 0x1b88 <USART_PutC>
    1480:	e8 01       	movw	r28, r16
    1482:	ce 01       	movw	r24, r28
    1484:	80 1b       	sub	r24, r16
    1486:	91 0b       	sbc	r25, r17
    1488:	8e 15       	cp	r24, r14
    148a:	9f 05       	cpc	r25, r15
    148c:	24 f4       	brge	.+8      	; 0x1496 <SendSysEx+0x38>
    148e:	89 91       	ld	r24, Y+
    1490:	90 e0       	ldi	r25, 0x00	; 0
    1492:	7a d3       	rcall	.+1780   	; 0x1b88 <USART_PutC>
    1494:	f6 cf       	rjmp	.-20     	; 0x1482 <SendSysEx+0x24>
    1496:	87 ef       	ldi	r24, 0xF7	; 247
    1498:	90 e0       	ldi	r25, 0x00	; 0
    149a:	df 91       	pop	r29
    149c:	cf 91       	pop	r28
    149e:	1f 91       	pop	r17
    14a0:	0f 91       	pop	r16
    14a2:	ff 90       	pop	r15
    14a4:	ef 90       	pop	r14
    14a6:	70 c3       	rjmp	.+1760   	; 0x1b88 <USART_PutC>

000014a8 <SendCurrentStep>:

 void SendCurrentStep(int SeqID,int EventID)
 {
    14a8:	0f 93       	push	r16
    14aa:	1f 93       	push	r17
    14ac:	cf 93       	push	r28
    14ae:	df 93       	push	r29
    14b0:	08 2f       	mov	r16, r24
    14b2:	16 2f       	mov	r17, r22
	char *b = malloc(32);
    14b4:	80 e2       	ldi	r24, 0x20	; 32
    14b6:	90 e0       	ldi	r25, 0x00	; 0
    14b8:	44 d9       	rcall	.-3448   	; 0x742 <malloc>
    14ba:	ec 01       	movw	r28, r24
	b[0] = SeqID;
    14bc:	08 83       	st	Y, r16
	b[1] = EventID;
    14be:	19 83       	std	Y+1, r17	; 0x01
	SendSysEx(b,2,SYSEX_CMD_STEP);
    14c0:	4a e0       	ldi	r20, 0x0A	; 10
    14c2:	50 e0       	ldi	r21, 0x00	; 0
    14c4:	62 e0       	ldi	r22, 0x02	; 2
    14c6:	70 e0       	ldi	r23, 0x00	; 0
    14c8:	ca df       	rcall	.-108    	; 0x145e <SendSysEx>
	free(b);
    14ca:	ce 01       	movw	r24, r28
 }
    14cc:	df 91       	pop	r29
    14ce:	cf 91       	pop	r28
    14d0:	1f 91       	pop	r17
    14d2:	0f 91       	pop	r16
 {
	char *b = malloc(32);
	b[0] = SeqID;
	b[1] = EventID;
	SendSysEx(b,2,SYSEX_CMD_STEP);
	free(b);
    14d4:	f5 c9       	rjmp	.-3094   	; 0x8c0 <free>

000014d6 <SeqTask>:
	}c;
	SEQ **ppSequencers;
	MSG *pMSG=0;
	int Start=0;
	SEQ_EVENT *pE;
	char *buff = malloc(256);
    14d6:	80 e0       	ldi	r24, 0x00	; 0
    14d8:	91 e0       	ldi	r25, 0x01	; 1
    14da:	33 d9       	rcall	.-3482   	; 0x742 <malloc>
    14dc:	8c 01       	movw	r16, r24

	//****************************************
	//		Initialize local variables
	//****************************************
	ppSequencers = (SEQ **)malloc(sizeof(SEQ *) * 4);
    14de:	88 e0       	ldi	r24, 0x08	; 8
    14e0:	90 e0       	ldi	r25, 0x00	; 0
    14e2:	2f d9       	rcall	.-3490   	; 0x742 <malloc>
    14e4:	6c 01       	movw	r12, r24
    14e6:	ec 01       	movw	r28, r24
    14e8:	e4 e0       	ldi	r30, 0x04	; 4
    14ea:	9e 2e       	mov	r9, r30
	{
		ClearGatePort(GATE_SEQ0+i);	//reset the gate
		//allocate a sequencer
		ppSequencers[i] = malloc(sizeof(SEQ));
		//set the number of step to 8
		ppSequencers[i]->m_nSteps = 8;
    14ec:	f8 e0       	ldi	r31, 0x08	; 8
    14ee:	ef 2e       	mov	r14, r31
    14f0:	f1 2c       	mov	r15, r1
		ppSequencers[i]->m_pSteps = malloc(sizeof(SEQ_EVENT) * 8);
		//initialize all events to default value
		for(j=0;j<8;++j)
		{
			pE = ppSequencers[i]->m_pSteps;
			pE[j].m_Count = pE[j].m_Ticks = 24;
    14f2:	a8 e1       	ldi	r26, 0x18	; 24
    14f4:	8a 2e       	mov	r8, r26
			pE[j].m_GateFlags = 16+2;
    14f6:	b2 e1       	ldi	r27, 0x12	; 18
    14f8:	7b 2e       	mov	r7, r27
	//		Initialize local variables
	//****************************************
	ppSequencers = (SEQ **)malloc(sizeof(SEQ *) * 4);
	for(i=0;i<4;++i)
	{
		ClearGatePort(GATE_SEQ0+i);	//reset the gate
    14fa:	89 2d       	mov	r24, r9
    14fc:	e3 d5       	rcall	.+3014   	; 0x20c4 <__TEXT_REGION_LENGTH__+0xc4>
		//allocate a sequencer
		ppSequencers[i] = malloc(sizeof(SEQ));
    14fe:	86 e0       	ldi	r24, 0x06	; 6
    1500:	90 e0       	ldi	r25, 0x00	; 0
    1502:	1f d9       	rcall	.-3522   	; 0x742 <malloc>
    1504:	5c 01       	movw	r10, r24
    1506:	89 93       	st	Y+, r24
    1508:	99 93       	st	Y+, r25
		//set the number of step to 8
		ppSequencers[i]->m_nSteps = 8;
    150a:	dc 01       	movw	r26, r24
    150c:	11 96       	adiw	r26, 0x01	; 1
    150e:	fc 92       	st	X, r15
    1510:	ee 92       	st	-X, r14
		ppSequencers[i]->m_CurPos = 0;
    1512:	13 96       	adiw	r26, 0x03	; 3
    1514:	1c 92       	st	X, r1
    1516:	1e 92       	st	-X, r1
    1518:	12 97       	sbiw	r26, 0x02	; 2
		//allocate sequencer events
		ppSequencers[i]->m_pSteps = malloc(sizeof(SEQ_EVENT) * 8);
    151a:	88 e2       	ldi	r24, 0x28	; 40
    151c:	90 e0       	ldi	r25, 0x00	; 0
    151e:	11 d9       	rcall	.-3550   	; 0x742 <malloc>
    1520:	f5 01       	movw	r30, r10
    1522:	84 83       	std	Z+4, r24	; 0x04
    1524:	95 83       	std	Z+5, r25	; 0x05
    1526:	fc 01       	movw	r30, r24
    1528:	88 96       	adiw	r24, 0x28	; 40
		//initialize all events to default value
		for(j=0;j<8;++j)
		{
			pE = ppSequencers[i]->m_pSteps;
			pE[j].m_Count = pE[j].m_Ticks = 24;
    152a:	83 82       	std	Z+3, r8	; 0x03
    152c:	84 82       	std	Z+4, r8	; 0x04
			pE[j].m_GateFlags = 16+2;
    152e:	72 82       	std	Z+2, r7	; 0x02
			pE[j].m_v = 0;
    1530:	11 82       	std	Z+1, r1	; 0x01
    1532:	10 82       	st	Z, r1
    1534:	35 96       	adiw	r30, 0x05	; 5
		ppSequencers[i]->m_nSteps = 8;
		ppSequencers[i]->m_CurPos = 0;
		//allocate sequencer events
		ppSequencers[i]->m_pSteps = malloc(sizeof(SEQ_EVENT) * 8);
		//initialize all events to default value
		for(j=0;j<8;++j)
    1536:	8e 17       	cp	r24, r30
    1538:	9f 07       	cpc	r25, r31
    153a:	b9 f7       	brne	.-18     	; 0x152a <SeqTask+0x54>
    153c:	93 94       	inc	r9

	//****************************************
	//		Initialize local variables
	//****************************************
	ppSequencers = (SEQ **)malloc(sizeof(SEQ *) * 4);
	for(i=0;i<4;++i)
    153e:	f8 e0       	ldi	r31, 0x08	; 8
    1540:	9f 12       	cpse	r9, r31
    1542:	db cf       	rjmp	.-74     	; 0x14fa <SeqTask+0x24>
    1544:	e1 2c       	mov	r14, r1
    1546:	f1 2c       	mov	r15, r1
	{
		//***************************
		// wait on message queue
		// for a command
		//***************************
		pMSG = MqGet(pSeqMsg);
    1548:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <pSeqMsg>
    154c:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <pSeqMsg+0x1>
    1550:	ab da       	rcall	.-2730   	; 0xaa8 <MqGet>
    1552:	ec 01       	movw	r28, r24
		// get a pointer to the payload
		c.m_pVoid = pMSG->Payload;
		//decode message command
		switch(pMSG->MsgCmd)
    1554:	e8 81       	ld	r30, Y
    1556:	f9 81       	ldd	r31, Y+1	; 0x01
    1558:	ea 30       	cpi	r30, 0x0A	; 10
    155a:	f1 05       	cpc	r31, r1
    155c:	08 f0       	brcs	.+2      	; 0x1560 <SeqTask+0x8a>
    155e:	01 c1       	rjmp	.+514    	; 0x1762 <SeqTask+0x28c>
    1560:	ef 5d       	subi	r30, 0xDF	; 223
    1562:	ff 4f       	sbci	r31, 0xFF	; 255
    1564:	09 94       	ijmp
						pE[j].m_Count = pE[j].m_Ticks;
					}
				}
				break;
			case SEQMSG_STOP:
				Start = 0;	//sequencer is stopped
    1566:	e1 2c       	mov	r14, r1
    1568:	f1 2c       	mov	r15, r1
    156a:	fb c0       	rjmp	.+502    	; 0x1762 <SeqTask+0x28c>
		//***************************
		pMSG = MqGet(pSeqMsg);
		// get a pointer to the payload
		c.m_pVoid = pMSG->Payload;
		//decode message command
		switch(pMSG->MsgCmd)
    156c:	76 01       	movw	r14, r12
    156e:	74 e0       	ldi	r23, 0x04	; 4
    1570:	b7 2e       	mov	r11, r23
		{
			case SEQMSG_START:
				Start = 1;	//sequencer is running
				for(i=0;i<4;++i)
				{
					ClearGatePort(GATE_SEQ0+i);	//reset the gate
    1572:	8b 2d       	mov	r24, r11
    1574:	a7 d5       	rcall	.+2894   	; 0x20c4 <__TEXT_REGION_LENGTH__+0xc4>
					ppSequencers[i]->m_CurPos = 0;
    1576:	d7 01       	movw	r26, r14
    1578:	ed 91       	ld	r30, X+
    157a:	fd 91       	ld	r31, X+
    157c:	7d 01       	movw	r14, r26
    157e:	13 82       	std	Z+3, r1	; 0x03
    1580:	12 82       	std	Z+2, r1	; 0x02
					for(j=0;j<8;++j)
					{
						pE = ppSequencers[i]->m_pSteps;
    1582:	04 80       	ldd	r0, Z+4	; 0x04
    1584:	f5 81       	ldd	r31, Z+5	; 0x05
    1586:	e0 2d       	mov	r30, r0
    1588:	cf 01       	movw	r24, r30
    158a:	88 96       	adiw	r24, 0x28	; 40
						pE[j].m_Count = pE[j].m_Ticks;
    158c:	23 81       	ldd	r18, Z+3	; 0x03
    158e:	24 83       	std	Z+4, r18	; 0x04
    1590:	35 96       	adiw	r30, 0x05	; 5
				Start = 1;	//sequencer is running
				for(i=0;i<4;++i)
				{
					ClearGatePort(GATE_SEQ0+i);	//reset the gate
					ppSequencers[i]->m_CurPos = 0;
					for(j=0;j<8;++j)
    1592:	8e 17       	cp	r24, r30
    1594:	9f 07       	cpc	r25, r31
    1596:	d1 f7       	brne	.-12     	; 0x158c <SeqTask+0xb6>
    1598:	b3 94       	inc	r11
		//decode message command
		switch(pMSG->MsgCmd)
		{
			case SEQMSG_START:
				Start = 1;	//sequencer is running
				for(i=0;i<4;++i)
    159a:	b8 e0       	ldi	r27, 0x08	; 8
    159c:	bb 12       	cpse	r11, r27
    159e:	e9 cf       	rjmp	.-46     	; 0x1572 <SeqTask+0x9c>
    15a0:	dd c0       	rjmp	.+442    	; 0x175c <SeqTask+0x286>
				//	Get the data associated
				// with an Event as determined
				// by the sequencer ID and
				// the Event ID
				//------------------------
				pE = &ppSequencers[c.m_pGetEvent->m_SeqID]->m_pSteps[c.m_pGetEvent->m_EventID];
    15a2:	8c 85       	ldd	r24, Y+12	; 0x0c
    15a4:	9d 85       	ldd	r25, Y+13	; 0x0d
    15a6:	fc 01       	movw	r30, r24
    15a8:	ee 0f       	add	r30, r30
    15aa:	ff 1f       	adc	r31, r31
    15ac:	ec 0d       	add	r30, r12
    15ae:	fd 1d       	adc	r31, r13
    15b0:	01 90       	ld	r0, Z+
    15b2:	f0 81       	ld	r31, Z
    15b4:	e0 2d       	mov	r30, r0
    15b6:	4e 85       	ldd	r20, Y+14	; 0x0e
    15b8:	5f 85       	ldd	r21, Y+15	; 0x0f
    15ba:	65 e0       	ldi	r22, 0x05	; 5
    15bc:	64 9f       	mul	r22, r20
    15be:	90 01       	movw	r18, r0
    15c0:	65 9f       	mul	r22, r21
    15c2:	30 0d       	add	r19, r0
    15c4:	11 24       	eor	r1, r1
    15c6:	04 80       	ldd	r0, Z+4	; 0x04
    15c8:	f5 81       	ldd	r31, Z+5	; 0x05
    15ca:	e0 2d       	mov	r30, r0
    15cc:	e2 0f       	add	r30, r18
    15ce:	f3 1f       	adc	r31, r19
				buff[0] = c.m_pGetEvent->m_SeqID;
    15d0:	d8 01       	movw	r26, r16
    15d2:	8c 93       	st	X, r24
				buff[1] = c.m_pGetEvent->m_EventID;
    15d4:	8e 85       	ldd	r24, Y+14	; 0x0e
    15d6:	11 96       	adiw	r26, 0x01	; 1
    15d8:	8c 93       	st	X, r24
    15da:	11 97       	sbiw	r26, 0x01	; 1
				buff[2] = LO7(pE->m_v);
    15dc:	80 81       	ld	r24, Z
    15de:	8f 77       	andi	r24, 0x7F	; 127
    15e0:	12 96       	adiw	r26, 0x02	; 2
    15e2:	8c 93       	st	X, r24
    15e4:	12 97       	sbiw	r26, 0x02	; 2
				buff[3] = HI7(pE->m_v);
    15e6:	80 81       	ld	r24, Z
    15e8:	91 81       	ldd	r25, Z+1	; 0x01
    15ea:	88 0f       	add	r24, r24
    15ec:	89 2f       	mov	r24, r25
    15ee:	88 1f       	adc	r24, r24
    15f0:	99 0b       	sbc	r25, r25
    15f2:	91 95       	neg	r25
    15f4:	8f 77       	andi	r24, 0x7F	; 127
    15f6:	13 96       	adiw	r26, 0x03	; 3
    15f8:	8c 93       	st	X, r24
    15fa:	13 97       	sbiw	r26, 0x03	; 3
				buff[4] = pE->m_Ticks;
    15fc:	83 81       	ldd	r24, Z+3	; 0x03
    15fe:	14 96       	adiw	r26, 0x04	; 4
    1600:	8c 93       	st	X, r24
    1602:	14 97       	sbiw	r26, 0x04	; 4
				buff[5] = pE->m_GateFlags;
    1604:	82 81       	ldd	r24, Z+2	; 0x02
    1606:	15 96       	adiw	r26, 0x05	; 5
    1608:	8c 93       	st	X, r24
				SendSysEx(buff,6,SYSEX_CMD_GETEVENT);
    160a:	44 e0       	ldi	r20, 0x04	; 4
    160c:	50 e0       	ldi	r21, 0x00	; 0
    160e:	66 e0       	ldi	r22, 0x06	; 6
    1610:	70 e0       	ldi	r23, 0x00	; 0
    1612:	9f c0       	rjmp	.+318    	; 0x1752 <SeqTask+0x27c>
				break;
			case SEQMSG_SETEVENT:
				pE = &ppSequencers[c.m_pSetEvent->m_SeqID]->m_pSteps[c.m_pSetEvent->m_EventID];
    1614:	ec 85       	ldd	r30, Y+12	; 0x0c
    1616:	fd 85       	ldd	r31, Y+13	; 0x0d
    1618:	ee 0f       	add	r30, r30
    161a:	ff 1f       	adc	r31, r31
    161c:	ec 0d       	add	r30, r12
    161e:	fd 1d       	adc	r31, r13
    1620:	01 90       	ld	r0, Z+
    1622:	f0 81       	ld	r31, Z
    1624:	e0 2d       	mov	r30, r0
    1626:	2e 85       	ldd	r18, Y+14	; 0x0e
    1628:	3f 85       	ldd	r19, Y+15	; 0x0f
    162a:	b5 e0       	ldi	r27, 0x05	; 5
    162c:	b2 9f       	mul	r27, r18
    162e:	c0 01       	movw	r24, r0
    1630:	b3 9f       	mul	r27, r19
    1632:	90 0d       	add	r25, r0
    1634:	11 24       	eor	r1, r1
    1636:	04 80       	ldd	r0, Z+4	; 0x04
    1638:	f5 81       	ldd	r31, Z+5	; 0x05
    163a:	e0 2d       	mov	r30, r0
    163c:	e8 0f       	add	r30, r24
    163e:	f9 1f       	adc	r31, r25
				pE->m_v = c.m_pSetEvent->m_v;
    1640:	88 89       	ldd	r24, Y+16	; 0x10
    1642:	99 89       	ldd	r25, Y+17	; 0x11
    1644:	91 83       	std	Z+1, r25	; 0x01
    1646:	80 83       	st	Z, r24
				pE->m_Ticks = c.m_pSetEvent->m_Ticks;
    1648:	8b 89       	ldd	r24, Y+19	; 0x13
    164a:	83 83       	std	Z+3, r24	; 0x03
				pE->m_Count = pE->m_Ticks;
    164c:	84 83       	std	Z+4, r24	; 0x04
				pE->m_GateFlags = c.m_pSetEvent->m_GateFlags;
    164e:	8a 89       	ldd	r24, Y+18	; 0x12
    1650:	82 83       	std	Z+2, r24	; 0x02
				break;
    1652:	87 c0       	rjmp	.+270    	; 0x1762 <SeqTask+0x28c>
			case SEQMSG_DELEVENT:
				break;
			case SEQMSG_ADDEVENT:
				break;
			case SEQMSG_TICK:
				if(Start)
    1654:	e1 14       	cp	r14, r1
    1656:	f1 04       	cpc	r15, r1
    1658:	09 f4       	brne	.+2      	; 0x165c <SeqTask+0x186>
    165a:	83 c0       	rjmp	.+262    	; 0x1762 <SeqTask+0x28c>
    165c:	16 01       	movw	r2, r12
    165e:	34 e0       	ldi	r19, 0x04	; 4
    1660:	a3 2e       	mov	r10, r19
    1662:	b1 2c       	mov	r11, r1
    1664:	25 01       	movw	r4, r10
    1666:	e4 e0       	ldi	r30, 0x04	; 4
    1668:	4e 1a       	sub	r4, r30
    166a:	51 08       	sbc	r5, r1
				{
					for(i=0;i<4;++i)
					{
						if(ppSequencers[i]->m_pSteps)
    166c:	d1 01       	movw	r26, r2
    166e:	8d 90       	ld	r8, X+
    1670:	9d 90       	ld	r9, X+
    1672:	1d 01       	movw	r2, r26
    1674:	f4 01       	movw	r30, r8
    1676:	84 81       	ldd	r24, Z+4	; 0x04
    1678:	95 81       	ldd	r25, Z+5	; 0x05
    167a:	00 97       	sbiw	r24, 0x00	; 0
    167c:	b1 f1       	breq	.+108    	; 0x16ea <SeqTask+0x214>
						{
							pE = &ppSequencers[i]->m_pSteps[ppSequencers[i]->m_CurPos];
    167e:	62 80       	ldd	r6, Z+2	; 0x02
    1680:	73 80       	ldd	r7, Z+3	; 0x03
    1682:	f5 e0       	ldi	r31, 0x05	; 5
    1684:	f6 9d       	mul	r31, r6
    1686:	70 01       	movw	r14, r0
    1688:	f7 9d       	mul	r31, r7
    168a:	f0 0c       	add	r15, r0
    168c:	11 24       	eor	r1, r1
    168e:	e8 0e       	add	r14, r24
    1690:	f9 1e       	adc	r15, r25
							if(pE->m_Count == pE->m_Ticks)
    1692:	d7 01       	movw	r26, r14
    1694:	14 96       	adiw	r26, 0x04	; 4
    1696:	9c 91       	ld	r25, X
    1698:	14 97       	sbiw	r26, 0x04	; 4
    169a:	13 96       	adiw	r26, 0x03	; 3
    169c:	8c 91       	ld	r24, X
    169e:	13 97       	sbiw	r26, 0x03	; 3
    16a0:	98 13       	cpse	r25, r24
    16a2:	09 c0       	rjmp	.+18     	; 0x16b6 <SeqTask+0x1e0>
							{
								SendData(pE->m_v,SPIPORT_SEQ0 + i);
    16a4:	b5 01       	movw	r22, r10
    16a6:	8d 91       	ld	r24, X+
    16a8:	9c 91       	ld	r25, X
    16aa:	f6 d0       	rcall	.+492    	; 0x1898 <SendData>
								SetGatePort(GATE_SEQ0 + i);
    16ac:	8a 2d       	mov	r24, r10
    16ae:	f7 d4       	rcall	.+2542   	; 0x209e <__TEXT_REGION_LENGTH__+0x9e>
								SendCurrentStep(i,ppSequencers[i]->m_CurPos);
    16b0:	b3 01       	movw	r22, r6
    16b2:	c2 01       	movw	r24, r4
    16b4:	f9 de       	rcall	.-526    	; 0x14a8 <SendCurrentStep>
							}
							pE->m_Count--;
    16b6:	f7 01       	movw	r30, r14
    16b8:	84 81       	ldd	r24, Z+4	; 0x04
    16ba:	81 50       	subi	r24, 0x01	; 1
    16bc:	84 83       	std	Z+4, r24	; 0x04
							if (pE->m_Count == 8)
    16be:	88 30       	cpi	r24, 0x08	; 8
    16c0:	19 f4       	brne	.+6      	; 0x16c8 <SeqTask+0x1f2>
							{
								ClearGatePort(GATE_SEQ0+i);
    16c2:	8a 2d       	mov	r24, r10
    16c4:	ff d4       	rcall	.+2558   	; 0x20c4 <__TEXT_REGION_LENGTH__+0xc4>
    16c6:	11 c0       	rjmp	.+34     	; 0x16ea <SeqTask+0x214>
							}
							else if(pE->m_Count == 0)
    16c8:	81 11       	cpse	r24, r1
    16ca:	0f c0       	rjmp	.+30     	; 0x16ea <SeqTask+0x214>
							{
								pE->m_Count = pE->m_Ticks;
    16cc:	83 81       	ldd	r24, Z+3	; 0x03
    16ce:	84 83       	std	Z+4, r24	; 0x04
								ppSequencers[i]->m_CurPos++;
    16d0:	bf ef       	ldi	r27, 0xFF	; 255
    16d2:	6b 1a       	sub	r6, r27
    16d4:	7b 0a       	sbc	r7, r27
    16d6:	f4 01       	movw	r30, r8
    16d8:	73 82       	std	Z+3, r7	; 0x03
    16da:	62 82       	std	Z+2, r6	; 0x02
								if(ppSequencers[i]->m_CurPos == ppSequencers[i]->m_nSteps)
    16dc:	80 81       	ld	r24, Z
    16de:	91 81       	ldd	r25, Z+1	; 0x01
    16e0:	68 16       	cp	r6, r24
    16e2:	79 06       	cpc	r7, r25
    16e4:	11 f4       	brne	.+4      	; 0x16ea <SeqTask+0x214>
									ppSequencers[i]->m_CurPos = 0;
    16e6:	13 82       	std	Z+3, r1	; 0x03
    16e8:	12 82       	std	Z+2, r1	; 0x02
    16ea:	ff ef       	ldi	r31, 0xFF	; 255
    16ec:	af 1a       	sub	r10, r31
    16ee:	bf 0a       	sbc	r11, r31
			case SEQMSG_ADDEVENT:
				break;
			case SEQMSG_TICK:
				if(Start)
				{
					for(i=0;i<4;++i)
    16f0:	28 e0       	ldi	r18, 0x08	; 8
    16f2:	a2 16       	cp	r10, r18
    16f4:	b1 04       	cpc	r11, r1
    16f6:	09 f0       	breq	.+2      	; 0x16fa <SeqTask+0x224>
    16f8:	b5 cf       	rjmp	.-150    	; 0x1664 <SeqTask+0x18e>
    16fa:	30 c0       	rjmp	.+96     	; 0x175c <SeqTask+0x286>
						}
					}
				}
				break;
			case SEQMSG_CREATE:
				ppSequencers[c.m_Create->m_SeqID]->m_nSteps = c.m_Create->m_Size;
    16fc:	ec 85       	ldd	r30, Y+12	; 0x0c
    16fe:	fd 85       	ldd	r31, Y+13	; 0x0d
    1700:	ee 0f       	add	r30, r30
    1702:	ff 1f       	adc	r31, r31
    1704:	ec 0d       	add	r30, r12
    1706:	fd 1d       	adc	r31, r13
    1708:	a0 80       	ld	r10, Z
    170a:	b1 80       	ldd	r11, Z+1	; 0x01
    170c:	8e 85       	ldd	r24, Y+14	; 0x0e
    170e:	9f 85       	ldd	r25, Y+15	; 0x0f
    1710:	d5 01       	movw	r26, r10
    1712:	8d 93       	st	X+, r24
    1714:	9c 93       	st	X, r25
				ppSequencers[c.m_Create->m_SeqID]->m_pSteps = (SEQ_EVENT *)malloc(sizeof(SEQ_EVENT) * c.m_Create->m_Size);
    1716:	25 e0       	ldi	r18, 0x05	; 5
    1718:	fc 01       	movw	r30, r24
    171a:	2e 9f       	mul	r18, r30
    171c:	c0 01       	movw	r24, r0
    171e:	2f 9f       	mul	r18, r31
    1720:	90 0d       	add	r25, r0
    1722:	11 24       	eor	r1, r1
    1724:	0e d8       	rcall	.-4068   	; 0x742 <malloc>
    1726:	d5 01       	movw	r26, r10
    1728:	15 96       	adiw	r26, 0x05	; 5
    172a:	9c 93       	st	X, r25
    172c:	8e 93       	st	-X, r24
    172e:	14 97       	sbiw	r26, 0x04	; 4
				break;
    1730:	18 c0       	rjmp	.+48     	; 0x1762 <SeqTask+0x28c>
			case SEQMSG_GET_NEVENTS:
				buff[0] = ppSequencers[c.m_pSetEvent->m_SeqID]->m_nSteps;
    1732:	ec 85       	ldd	r30, Y+12	; 0x0c
    1734:	fd 85       	ldd	r31, Y+13	; 0x0d
    1736:	ee 0f       	add	r30, r30
    1738:	ff 1f       	adc	r31, r31
    173a:	ec 0d       	add	r30, r12
    173c:	fd 1d       	adc	r31, r13
    173e:	01 90       	ld	r0, Z+
    1740:	f0 81       	ld	r31, Z
    1742:	e0 2d       	mov	r30, r0
    1744:	80 81       	ld	r24, Z
    1746:	f8 01       	movw	r30, r16
    1748:	80 83       	st	Z, r24
				SendSysEx(buff,1,SYSEX_CMD_GETNEVENTS);
    174a:	49 e0       	ldi	r20, 0x09	; 9
    174c:	50 e0       	ldi	r21, 0x00	; 0
    174e:	61 e0       	ldi	r22, 0x01	; 1
    1750:	70 e0       	ldi	r23, 0x00	; 0
    1752:	c8 01       	movw	r24, r16
    1754:	84 de       	rcall	.-760    	; 0x145e <SendSysEx>
				break;
    1756:	05 c0       	rjmp	.+10     	; 0x1762 <SeqTask+0x28c>
			case SEQMSG_CONTINUE:
				Start = 1;
				SetGatePort(GATE_STARTSTOP);
    1758:	82 e0       	ldi	r24, 0x02	; 2
    175a:	a1 d4       	rcall	.+2370   	; 0x209e <__TEXT_REGION_LENGTH__+0x9e>
			case SEQMSG_GET_NEVENTS:
				buff[0] = ppSequencers[c.m_pSetEvent->m_SeqID]->m_nSteps;
				SendSysEx(buff,1,SYSEX_CMD_GETNEVENTS);
				break;
			case SEQMSG_CONTINUE:
				Start = 1;
    175c:	ee 24       	eor	r14, r14
    175e:	e3 94       	inc	r14
    1760:	f1 2c       	mov	r15, r1
				SetGatePort(GATE_STARTSTOP);
				break;
		}
		free(pMSG);
    1762:	ce 01       	movw	r24, r28
    1764:	ad d8       	rcall	.-3750   	; 0x8c0 <free>
	}
    1766:	f0 ce       	rjmp	.-544    	; 0x1548 <SeqTask+0x72>

00001768 <InitSeq>:
 }

 void InitSeq(void)
 {
	pSeqMsg = MqInit(64);
    1768:	80 e4       	ldi	r24, 0x40	; 64
    176a:	90 e0       	ldi	r25, 0x00	; 0
    176c:	31 d9       	rcall	.-3486   	; 0x9d0 <MqInit>
    176e:	90 93 5d 01 	sts	0x015D, r25	; 0x80015d <pSeqMsg+0x1>
    1772:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <pSeqMsg>
	pSeqTaskTCB = NewTask(SeqTask,512,2,0);
    1776:	20 e0       	ldi	r18, 0x00	; 0
    1778:	30 e0       	ldi	r19, 0x00	; 0
    177a:	42 e0       	ldi	r20, 0x02	; 2
    177c:	50 e0       	ldi	r21, 0x00	; 0
    177e:	60 e0       	ldi	r22, 0x00	; 0
    1780:	72 e0       	ldi	r23, 0x02	; 2
    1782:	8b e6       	ldi	r24, 0x6B	; 107
    1784:	9a e0       	ldi	r25, 0x0A	; 10
    1786:	e9 d5       	rcall	.+3026   	; 0x235a <__TEXT_REGION_LENGTH__+0x35a>
    1788:	90 93 5b 01 	sts	0x015B, r25	; 0x80015b <pSeqTaskTCB+0x1>
    178c:	80 93 5a 01 	sts	0x015A, r24	; 0x80015a <pSeqTaskTCB>
	Insert(&ActiveTasks,pSeqTaskTCB);
    1790:	bc 01       	movw	r22, r24
    1792:	88 e9       	ldi	r24, 0x98	; 152
    1794:	90 e0       	ldi	r25, 0x00	; 0
    1796:	8c cd       	rjmp	.-1256   	; 0x12b0 <Insert>

00001798 <InitSPI>:
** This routine initializes the SPI port and gets it ready for use
**
*******************************************************************************/
void InitSPI(void)
{
	DDRB |= 0xb0;	/*	set SS pin to output	*/
    1798:	87 b3       	in	r24, 0x17	; 23
    179a:	80 6b       	ori	r24, 0xB0	; 176
    179c:	87 bb       	out	0x17, r24	; 23
	SPCR = SPI_SPCR_SPE | SPI_SPCR_CPHA | SPI_SPCR_MSTR | SPI_SPCR_CPOL;	/*	enable SPI port	*/	
    179e:	8c e5       	ldi	r24, 0x5C	; 92
    17a0:	8d b9       	out	0x0d, r24	; 13
    17a2:	08 95       	ret

000017a4 <PortFull>:

int PortFull(void)
{
	char a;
	int retval=0;
	a = SPSR;
    17a4:	8e b1       	in	r24, 0x0e	; 14
	if(a & 0x80) retval = 1;
	return retval;
    17a6:	08 2e       	mov	r0, r24
    17a8:	00 0c       	add	r0, r0
    17aa:	99 0b       	sbc	r25, r25
}
    17ac:	89 2f       	mov	r24, r25
    17ae:	88 1f       	adc	r24, r24
    17b0:	88 27       	eor	r24, r24
    17b2:	88 1f       	adc	r24, r24
    17b4:	90 e0       	ldi	r25, 0x00	; 0
    17b6:	08 95       	ret

000017b8 <__vector_8>:


void SPI_STC_vect(void)  __attribute__ ((naked));
void SPI_STC_vect(void)
{
	SAVE_IRQ();
    17b8:	ff 93       	push	r31
    17ba:	ff b7       	in	r31, 0x3f	; 63
    17bc:	f0 68       	ori	r31, 0x80	; 128
    17be:	ff 93       	push	r31
    17c0:	ef 93       	push	r30
    17c2:	df 93       	push	r29
    17c4:	cf 93       	push	r28
    17c6:	bf 93       	push	r27
    17c8:	af 93       	push	r26
    17ca:	9f 93       	push	r25
    17cc:	8f 93       	push	r24
    17ce:	7f 93       	push	r23
    17d0:	6f 93       	push	r22
    17d2:	5f 93       	push	r21
    17d4:	4f 93       	push	r20
    17d6:	3f 93       	push	r19
    17d8:	2f 93       	push	r18
    17da:	1f 93       	push	r17
    17dc:	0f 93       	push	r16
    17de:	ff 92       	push	r15
    17e0:	ef 92       	push	r14
    17e2:	df 92       	push	r13
    17e4:	cf 92       	push	r12
    17e6:	bf 92       	push	r11
    17e8:	af 92       	push	r10
    17ea:	9f 92       	push	r9
    17ec:	8f 92       	push	r8
    17ee:	7f 92       	push	r7
    17f0:	6f 92       	push	r6
    17f2:	5f 92       	push	r5
    17f4:	4f 92       	push	r4
    17f6:	3f 92       	push	r3
    17f8:	2f 92       	push	r2
    17fa:	1f 92       	push	r1
    17fc:	11 24       	eor	r1, r1
    17fe:	0f 92       	push	r0
	if(pSPIbuff->m_nChars == 0)
    1800:	e0 91 5e 01 	lds	r30, 0x015E	; 0x80015e <pSPIbuff>
    1804:	f0 91 5f 01 	lds	r31, 0x015F	; 0x80015f <pSPIbuff+0x1>
    1808:	86 81       	ldd	r24, Z+6	; 0x06
    180a:	97 81       	ldd	r25, Z+7	; 0x07
    180c:	89 2b       	or	r24, r25
    180e:	01 f1       	breq	.+64     	; 0x1850 <__vector_8+0x98>
	{

	}
	else
	{
		SPDR = pSPIbuff->m_buff[pSPIbuff->m_tail++];
    1810:	20 81       	ld	r18, Z
    1812:	31 81       	ldd	r19, Z+1	; 0x01
    1814:	84 81       	ldd	r24, Z+4	; 0x04
    1816:	95 81       	ldd	r25, Z+5	; 0x05
    1818:	ac 01       	movw	r20, r24
    181a:	4f 5f       	subi	r20, 0xFF	; 255
    181c:	5f 4f       	sbci	r21, 0xFF	; 255
    181e:	55 83       	std	Z+5, r21	; 0x05
    1820:	44 83       	std	Z+4, r20	; 0x04
    1822:	f9 01       	movw	r30, r18
    1824:	e8 0f       	add	r30, r24
    1826:	f9 1f       	adc	r31, r25
    1828:	80 81       	ld	r24, Z
    182a:	8f b9       	out	0x0f, r24	; 15
		if(pSPIbuff->m_tail == pSPIbuff->m_Bsize)
    182c:	e0 91 5e 01 	lds	r30, 0x015E	; 0x80015e <pSPIbuff>
    1830:	f0 91 5f 01 	lds	r31, 0x015F	; 0x80015f <pSPIbuff+0x1>
    1834:	24 81       	ldd	r18, Z+4	; 0x04
    1836:	35 81       	ldd	r19, Z+5	; 0x05
    1838:	80 85       	ldd	r24, Z+8	; 0x08
    183a:	91 85       	ldd	r25, Z+9	; 0x09
    183c:	28 17       	cp	r18, r24
    183e:	39 07       	cpc	r19, r25
    1840:	11 f4       	brne	.+4      	; 0x1846 <__vector_8+0x8e>
			pSPIbuff->m_tail = 0;
    1842:	15 82       	std	Z+5, r1	; 0x05
    1844:	14 82       	std	Z+4, r1	; 0x04
		pSPIbuff->m_nChars--;
    1846:	86 81       	ldd	r24, Z+6	; 0x06
    1848:	97 81       	ldd	r25, Z+7	; 0x07
    184a:	01 97       	sbiw	r24, 0x01	; 1
    184c:	97 83       	std	Z+7, r25	; 0x07
    184e:	86 83       	std	Z+6, r24	; 0x06
	}
	RESTORE_IRQ();
    1850:	0f 90       	pop	r0
    1852:	1f 90       	pop	r1
    1854:	2f 90       	pop	r2
    1856:	3f 90       	pop	r3
    1858:	4f 90       	pop	r4
    185a:	5f 90       	pop	r5
    185c:	6f 90       	pop	r6
    185e:	7f 90       	pop	r7
    1860:	8f 90       	pop	r8
    1862:	9f 90       	pop	r9
    1864:	af 90       	pop	r10
    1866:	bf 90       	pop	r11
    1868:	cf 90       	pop	r12
    186a:	df 90       	pop	r13
    186c:	ef 90       	pop	r14
    186e:	ff 90       	pop	r15
    1870:	0f 91       	pop	r16
    1872:	1f 91       	pop	r17
    1874:	2f 91       	pop	r18
    1876:	3f 91       	pop	r19
    1878:	4f 91       	pop	r20
    187a:	5f 91       	pop	r21
    187c:	6f 91       	pop	r22
    187e:	7f 91       	pop	r23
    1880:	8f 91       	pop	r24
    1882:	9f 91       	pop	r25
    1884:	af 91       	pop	r26
    1886:	bf 91       	pop	r27
    1888:	cf 91       	pop	r28
    188a:	df 91       	pop	r29
    188c:	ef 91       	pop	r30
    188e:	ff 91       	pop	r31
    1890:	ff 77       	andi	r31, 0x7F	; 127
    1892:	ff bf       	out	0x3f, r31	; 63
    1894:	ff 91       	pop	r31
    1896:	18 95       	reti

00001898 <SendData>:
}

void SendData(int d,int port)
{
    1898:	1f 93       	push	r17
    189a:	cf 93       	push	r28
    189c:	df 93       	push	r29
    189e:	18 2f       	mov	r17, r24
    18a0:	eb 01       	movw	r28, r22
		char b[2];
	}convert;
	convert.v = d;


	SPDR = convert.b[1];	/*	get MSB of data	*/
    18a2:	9f b9       	out	0x0f, r25	; 15
	while(!PortFull());		/*	wait for data to be transmitted	*/
    18a4:	7f df       	rcall	.-258    	; 0x17a4 <PortFull>
    18a6:	89 2b       	or	r24, r25
    18a8:	e9 f3       	breq	.-6      	; 0x18a4 <SendData+0xc>
	SPDR = convert.b[0];	/*	get LSB of data	*/
    18aa:	1f b9       	out	0x0f, r17	; 15
	while(!PortFull());		/*	wait for data to be transmitted	*/
    18ac:	7b df       	rcall	.-266    	; 0x17a4 <PortFull>
    18ae:	89 2b       	or	r24, r25
    18b0:	e9 f3       	breq	.-6      	; 0x18ac <SendData+0x14>
	*((volatile char *)DacLUT[port]) = 0;	//dummy write to load DAC	*/	
    18b2:	cc 0f       	add	r28, r28
    18b4:	dd 1f       	adc	r29, r29
    18b6:	ca 59       	subi	r28, 0x9A	; 154
    18b8:	df 4f       	sbci	r29, 0xFF	; 255
    18ba:	e8 81       	ld	r30, Y
    18bc:	f9 81       	ldd	r31, Y+1	; 0x01
    18be:	10 82       	st	Z, r1
}
    18c0:	df 91       	pop	r29
    18c2:	cf 91       	pop	r28
    18c4:	1f 91       	pop	r17
    18c6:	08 95       	ret

000018c8 <StartOS>:
	// Remove task from priorty queue
	// Restore its context
	// and then jump to the first task using
	// return from subroutine
	//---------------------------------------
	Delete(&ActiveTasks,(void **)&pNextTask);
    18c8:	66 ea       	ldi	r22, 0xA6	; 166
    18ca:	70 e0       	ldi	r23, 0x00	; 0
    18cc:	88 e9       	ldi	r24, 0x98	; 152
    18ce:	90 e0       	ldi	r25, 0x00	; 0
    18d0:	4e dd       	rcall	.-1380   	; 0x136e <Delete>
	pCurrentTask = pNextTask;
    18d2:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <pNextTask>
    18d6:	90 91 a7 00 	lds	r25, 0x00A7	; 0x8000a7 <pNextTask+0x1>
    18da:	90 93 a3 00 	sts	0x00A3, r25	; 0x8000a3 <pCurrentTask+0x1>
    18de:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <pCurrentTask>
	RESTORE_CONTEXT();
    18e2:	a0 91 a6 00 	lds	r26, 0x00A6	; 0x8000a6 <pNextTask>
    18e6:	b0 91 a7 00 	lds	r27, 0x00A7	; 0x8000a7 <pNextTask+0x1>
    18ea:	cd 91       	ld	r28, X+
    18ec:	cd bf       	out	0x3d, r28	; 61
    18ee:	dd 91       	ld	r29, X+
    18f0:	de bf       	out	0x3e, r29	; 62
    18f2:	0f 90       	pop	r0
    18f4:	1f 90       	pop	r1
    18f6:	2f 90       	pop	r2
    18f8:	3f 90       	pop	r3
    18fa:	4f 90       	pop	r4
    18fc:	5f 90       	pop	r5
    18fe:	6f 90       	pop	r6
    1900:	7f 90       	pop	r7
    1902:	8f 90       	pop	r8
    1904:	9f 90       	pop	r9
    1906:	af 90       	pop	r10
    1908:	bf 90       	pop	r11
    190a:	cf 90       	pop	r12
    190c:	df 90       	pop	r13
    190e:	ef 90       	pop	r14
    1910:	ff 90       	pop	r15
    1912:	0f 91       	pop	r16
    1914:	1f 91       	pop	r17
    1916:	2f 91       	pop	r18
    1918:	3f 91       	pop	r19
    191a:	4f 91       	pop	r20
    191c:	5f 91       	pop	r21
    191e:	6f 91       	pop	r22
    1920:	7f 91       	pop	r23
    1922:	8f 91       	pop	r24
    1924:	9f 91       	pop	r25
    1926:	af 91       	pop	r26
    1928:	bf 91       	pop	r27
    192a:	cf 91       	pop	r28
    192c:	df 91       	pop	r29
    192e:	ef 91       	pop	r30
    1930:	ff 91       	pop	r31
    1932:	f7 fd       	sbrc	r31, 7
    1934:	03 c0       	rjmp	.+6      	; 0x193c <irqen>
    1936:	ff bf       	out	0x3f, r31	; 63
    1938:	ff 91       	pop	r31
    193a:	08 95       	ret

0000193c <irqen>:
    193c:	ff 77       	andi	r31, 0x7F	; 127
    193e:	ff bf       	out	0x3f, r31	; 63
    1940:	ff 91       	pop	r31
    1942:	18 95       	reti

00001944 <TimeDelay>:
// return value:
//	returns non zero value if something happened out of the ordinary
//--------------------------------------------------------------------------

int TimeDelay(int mSec)
{
    1944:	0f 93       	push	r16
    1946:	1f 93       	push	r17
    1948:	cf 93       	push	r28
    194a:	df 93       	push	r29
    194c:	8c 01       	movw	r16, r24
	int retval;
	SEMAPHORE *e;					//pointer to event control block for semaphore

	e = NewSemaphore(0,SEMAPHORE_MODE_TIMEOUT);	//create semaphore
    194e:	61 e0       	ldi	r22, 0x01	; 1
    1950:	70 e0       	ldi	r23, 0x00	; 0
    1952:	80 e0       	ldi	r24, 0x00	; 0
    1954:	90 e0       	ldi	r25, 0x00	; 0
    1956:	f7 d3       	rcall	.+2030   	; 0x2146 <__TEXT_REGION_LENGTH__+0x146>
    1958:	ec 01       	movw	r28, r24
	retval = PendSemaphore(e,mSec);	//pend for time delay period
    195a:	b8 01       	movw	r22, r16
    195c:	78 db       	rcall	.-2320   	; 0x104e <PendSemaphore>
    195e:	8c 01       	movw	r16, r24
	DeleteSemaphore(e);				//return semaphore back to pool
    1960:	ce 01       	movw	r24, r28
    1962:	1b d4       	rcall	.+2102   	; 0x219a <__TEXT_REGION_LENGTH__+0x19a>
	return retval;					//exit
}
    1964:	c8 01       	movw	r24, r16
    1966:	df 91       	pop	r29
    1968:	cf 91       	pop	r28
    196a:	1f 91       	pop	r17
    196c:	0f 91       	pop	r16
    196e:	08 95       	ret

00001970 <TimerTicker>:
**  Control Blocks looking for timed out events.                      **
**                                                                    **
***********************************************************************/

void TimerTicker(void)
{
    1970:	ef 92       	push	r14
    1972:	ff 92       	push	r15
    1974:	0f 93       	push	r16
    1976:	1f 93       	push	r17
    1978:	cf 93       	push	r28
    197a:	df 93       	push	r29
	TCB *t,**prev;

	//------------------------------
	// Increment the time stamp
	//------------------------------
	++TStamp;
    197c:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <TStamp>
    1980:	90 91 61 01 	lds	r25, 0x0161	; 0x800161 <TStamp+0x1>
    1984:	01 96       	adiw	r24, 0x01	; 1
    1986:	90 93 61 01 	sts	0x0161, r25	; 0x800161 <TStamp+0x1>
    198a:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <TStamp>
	// gone to zero, put the tasks that
	// are waiting on those semaphores
	// back into the queue so that they
	// can execute.
	//-----------------------------------
	for(e = pTimeoutList;e;e=e->Tnext)	//go through whole list
    198e:	00 91 96 00 	lds	r16, 0x0096	; 0x800096 <pTimeoutList>
    1992:	10 91 97 00 	lds	r17, 0x0097	; 0x800097 <pTimeoutList+0x1>
			if(t->timeout > 0)	//if less than zero, infinite timeout
			{
				if( --(t->timeout) <= 0)	//decrement timeout counter
				{
					e->EventCount++;		//fake a post
					t->status = EVENT_TIMEOUT;	//event caused by semaphore
    1996:	8d ef       	ldi	r24, 0xFD	; 253
    1998:	e8 2e       	mov	r14, r24
    199a:	ff 24       	eor	r15, r15
    199c:	fa 94       	dec	r15
	// gone to zero, put the tasks that
	// are waiting on those semaphores
	// back into the queue so that they
	// can execute.
	//-----------------------------------
	for(e = pTimeoutList;e;e=e->Tnext)	//go through whole list
    199e:	01 15       	cp	r16, r1
    19a0:	11 05       	cpc	r17, r1
    19a2:	79 f1       	breq	.+94     	; 0x1a02 <TimerTicker+0x92>
	{
		for(prev = &(e->task_head),t = e->task_head;t;)
    19a4:	f8 01       	movw	r30, r16
    19a6:	c0 81       	ld	r28, Z
    19a8:	d1 81       	ldd	r29, Z+1	; 0x01
    19aa:	20 97       	sbiw	r28, 0x00	; 0
    19ac:	31 f1       	breq	.+76     	; 0x19fa <TimerTicker+0x8a>
		{
			if(t->timeout > 0)	//if less than zero, infinite timeout
    19ae:	88 89       	ldd	r24, Y+16	; 0x10
    19b0:	99 89       	ldd	r25, Y+17	; 0x11
    19b2:	18 16       	cp	r1, r24
    19b4:	19 06       	cpc	r1, r25
    19b6:	dc f4       	brge	.+54     	; 0x19ee <TimerTicker+0x7e>
			{
				if( --(t->timeout) <= 0)	//decrement timeout counter
    19b8:	01 97       	sbiw	r24, 0x01	; 1
    19ba:	99 8b       	std	Y+17, r25	; 0x11
    19bc:	88 8b       	std	Y+16, r24	; 0x10
    19be:	89 2b       	or	r24, r25
    19c0:	b1 f4       	brne	.+44     	; 0x19ee <TimerTicker+0x7e>
				{
					e->EventCount++;		//fake a post
    19c2:	d8 01       	movw	r26, r16
    19c4:	1a 96       	adiw	r26, 0x0a	; 10
    19c6:	8d 91       	ld	r24, X+
    19c8:	9c 91       	ld	r25, X
    19ca:	1b 97       	sbiw	r26, 0x0b	; 11
    19cc:	01 96       	adiw	r24, 0x01	; 1
    19ce:	1b 96       	adiw	r26, 0x0b	; 11
    19d0:	9c 93       	st	X, r25
    19d2:	8e 93       	st	-X, r24
    19d4:	1a 97       	sbiw	r26, 0x0a	; 10
					t->status = EVENT_TIMEOUT;	//event caused by semaphore
    19d6:	f9 86       	std	Y+9, r15	; 0x09
    19d8:	e8 86       	std	Y+8, r14	; 0x08
					*prev = t->next;	//remove t from list
    19da:	8c 89       	ldd	r24, Y+20	; 0x14
    19dc:	9d 89       	ldd	r25, Y+21	; 0x15
    19de:	91 83       	std	Z+1, r25	; 0x01
    19e0:	80 83       	st	Z, r24
					t->next = 0;
    19e2:	1d 8a       	std	Y+21, r1	; 0x15
    19e4:	1c 8a       	std	Y+20, r1	; 0x14
					Insert(&ActiveTasks,t);//put it back in queue
    19e6:	be 01       	movw	r22, r28
    19e8:	88 e9       	ldi	r24, 0x98	; 152
    19ea:	90 e0       	ldi	r25, 0x00	; 0
    19ec:	61 dc       	rcall	.-1854   	; 0x12b0 <Insert>
				}
			}
			prev = &(t->next);
    19ee:	fe 01       	movw	r30, r28
    19f0:	74 96       	adiw	r30, 0x14	; 20
			t = t->next;
    19f2:	0c 88       	ldd	r0, Y+20	; 0x14
    19f4:	dd 89       	ldd	r29, Y+21	; 0x15
    19f6:	c0 2d       	mov	r28, r0
    19f8:	d8 cf       	rjmp	.-80     	; 0x19aa <TimerTicker+0x3a>
	// gone to zero, put the tasks that
	// are waiting on those semaphores
	// back into the queue so that they
	// can execute.
	//-----------------------------------
	for(e = pTimeoutList;e;e=e->Tnext)	//go through whole list
    19fa:	f8 01       	movw	r30, r16
    19fc:	04 81       	ldd	r16, Z+4	; 0x04
    19fe:	15 81       	ldd	r17, Z+5	; 0x05
    1a00:	ce cf       	rjmp	.-100    	; 0x199e <TimerTicker+0x2e>
			}
			prev = &(t->next);
			t = t->next;
		}
	}
}
    1a02:	df 91       	pop	r29
    1a04:	cf 91       	pop	r28
    1a06:	1f 91       	pop	r17
    1a08:	0f 91       	pop	r16
    1a0a:	ff 90       	pop	r15
    1a0c:	ef 90       	pop	r14
    1a0e:	08 95       	ret

00001a10 <__vector_9>:
//	USART_Status
//*************************************************
int USART_Status(void)
{
	return RxDesc.m_nChar;
}
    1a10:	ff 93       	push	r31
    1a12:	ff b7       	in	r31, 0x3f	; 63
    1a14:	f0 68       	ori	r31, 0x80	; 128
    1a16:	ff 93       	push	r31
    1a18:	ef 93       	push	r30
    1a1a:	df 93       	push	r29
    1a1c:	cf 93       	push	r28
    1a1e:	bf 93       	push	r27
    1a20:	af 93       	push	r26
    1a22:	9f 93       	push	r25
    1a24:	8f 93       	push	r24
    1a26:	7f 93       	push	r23
    1a28:	6f 93       	push	r22
    1a2a:	5f 93       	push	r21
    1a2c:	4f 93       	push	r20
    1a2e:	3f 93       	push	r19
    1a30:	2f 93       	push	r18
    1a32:	1f 93       	push	r17
    1a34:	0f 93       	push	r16
    1a36:	ff 92       	push	r15
    1a38:	ef 92       	push	r14
    1a3a:	df 92       	push	r13
    1a3c:	cf 92       	push	r12
    1a3e:	bf 92       	push	r11
    1a40:	af 92       	push	r10
    1a42:	9f 92       	push	r9
    1a44:	8f 92       	push	r8
    1a46:	7f 92       	push	r7
    1a48:	6f 92       	push	r6
    1a4a:	5f 92       	push	r5
    1a4c:	4f 92       	push	r4
    1a4e:	3f 92       	push	r3
    1a50:	2f 92       	push	r2
    1a52:	1f 92       	push	r1
    1a54:	11 24       	eor	r1, r1
    1a56:	0f 92       	push	r0
    1a58:	77 d5       	rcall	.+2798   	; 0x2548 <__TEXT_REGION_LENGTH__+0x548>
    1a5a:	20 91 94 00 	lds	r18, 0x0094	; 0x800094 <RxDesc+0xa>
    1a5e:	30 91 95 00 	lds	r19, 0x0095	; 0x800095 <RxDesc+0xb>
    1a62:	80 91 8e 00 	lds	r24, 0x008E	; 0x80008e <RxDesc+0x4>
    1a66:	90 91 8f 00 	lds	r25, 0x008F	; 0x80008f <RxDesc+0x5>
    1a6a:	28 17       	cp	r18, r24
    1a6c:	39 07       	cpc	r19, r25
    1a6e:	7c f5       	brge	.+94     	; 0x1ace <__vector_9+0xbe>
    1a70:	60 e0       	ldi	r22, 0x00	; 0
    1a72:	70 e0       	ldi	r23, 0x00	; 0
    1a74:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <RxDesc>
    1a78:	90 91 8b 00 	lds	r25, 0x008B	; 0x80008b <RxDesc+0x1>
    1a7c:	48 db       	rcall	.-2416   	; 0x110e <PostSemaphore>
    1a7e:	60 91 8c 00 	lds	r22, 0x008C	; 0x80008c <RxDesc+0x2>
    1a82:	70 91 8d 00 	lds	r23, 0x008D	; 0x80008d <RxDesc+0x3>
    1a86:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <RxDesc+0x6>
    1a8a:	90 91 91 00 	lds	r25, 0x0091	; 0x800091 <RxDesc+0x7>
    1a8e:	9c 01       	movw	r18, r24
    1a90:	2f 5f       	subi	r18, 0xFF	; 255
    1a92:	3f 4f       	sbci	r19, 0xFF	; 255
    1a94:	30 93 91 00 	sts	0x0091, r19	; 0x800091 <RxDesc+0x7>
    1a98:	20 93 90 00 	sts	0x0090, r18	; 0x800090 <RxDesc+0x6>
    1a9c:	4c b1       	in	r20, 0x0c	; 12
    1a9e:	fb 01       	movw	r30, r22
    1aa0:	e8 0f       	add	r30, r24
    1aa2:	f9 1f       	adc	r31, r25
    1aa4:	40 83       	st	Z, r20
    1aa6:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <RxDesc+0xa>
    1aaa:	90 91 95 00 	lds	r25, 0x0095	; 0x800095 <RxDesc+0xb>
    1aae:	01 96       	adiw	r24, 0x01	; 1
    1ab0:	90 93 95 00 	sts	0x0095, r25	; 0x800095 <RxDesc+0xb>
    1ab4:	80 93 94 00 	sts	0x0094, r24	; 0x800094 <RxDesc+0xa>
    1ab8:	80 91 8e 00 	lds	r24, 0x008E	; 0x80008e <RxDesc+0x4>
    1abc:	90 91 8f 00 	lds	r25, 0x008F	; 0x80008f <RxDesc+0x5>
    1ac0:	28 17       	cp	r18, r24
    1ac2:	39 07       	cpc	r19, r25
    1ac4:	21 f4       	brne	.+8      	; 0x1ace <__vector_9+0xbe>
    1ac6:	10 92 91 00 	sts	0x0091, r1	; 0x800091 <RxDesc+0x7>
    1aca:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <RxDesc+0x6>
    1ace:	cc d4       	rcall	.+2456   	; 0x2468 <__TEXT_REGION_LENGTH__+0x468>
    1ad0:	0f 90       	pop	r0
    1ad2:	1f 90       	pop	r1
    1ad4:	2f 90       	pop	r2
    1ad6:	3f 90       	pop	r3
    1ad8:	4f 90       	pop	r4
    1ada:	5f 90       	pop	r5
    1adc:	6f 90       	pop	r6
    1ade:	7f 90       	pop	r7
    1ae0:	8f 90       	pop	r8
    1ae2:	9f 90       	pop	r9
    1ae4:	af 90       	pop	r10
    1ae6:	bf 90       	pop	r11
    1ae8:	cf 90       	pop	r12
    1aea:	df 90       	pop	r13
    1aec:	ef 90       	pop	r14
    1aee:	ff 90       	pop	r15
    1af0:	0f 91       	pop	r16
    1af2:	1f 91       	pop	r17
    1af4:	2f 91       	pop	r18
    1af6:	3f 91       	pop	r19
    1af8:	4f 91       	pop	r20
    1afa:	5f 91       	pop	r21
    1afc:	6f 91       	pop	r22
    1afe:	7f 91       	pop	r23
    1b00:	8f 91       	pop	r24
    1b02:	9f 91       	pop	r25
    1b04:	af 91       	pop	r26
    1b06:	bf 91       	pop	r27
    1b08:	cf 91       	pop	r28
    1b0a:	df 91       	pop	r29
    1b0c:	ef 91       	pop	r30
    1b0e:	ff 91       	pop	r31
    1b10:	ff 77       	andi	r31, 0x7F	; 127
    1b12:	ff bf       	out	0x3f, r31	; 63
    1b14:	ff 91       	pop	r31
    1b16:	18 95       	reti

00001b18 <USART_GetC>:
//***************************************************
//	USART_GetC
//		Get a character from the uart
//***************************************************
int USART_GetC(void)
{
    1b18:	cf 93       	push	r28
    1b1a:	df 93       	push	r29
	//-------------------------
	// if there are no chars
	// waiting for us, pend
	// until there are
	//-------------------------
	PendSemaphore(RxDesc.m_pSem,0);
    1b1c:	60 e0       	ldi	r22, 0x00	; 0
    1b1e:	70 e0       	ldi	r23, 0x00	; 0
    1b20:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <RxDesc>
    1b24:	90 91 8b 00 	lds	r25, 0x008B	; 0x80008b <RxDesc+0x1>
    1b28:	92 da       	rcall	.-2780   	; 0x104e <PendSemaphore>
	sr = Disable();	//enter critical section
    1b2a:	b1 d2       	rcall	.+1378   	; 0x208e <__TEXT_REGION_LENGTH__+0x8e>
	c = RxDesc.m_pBuffer[RxDesc.m_Tail++];
    1b2c:	60 91 8c 00 	lds	r22, 0x008C	; 0x80008c <RxDesc+0x2>
    1b30:	70 91 8d 00 	lds	r23, 0x008D	; 0x80008d <RxDesc+0x3>
    1b34:	20 91 92 00 	lds	r18, 0x0092	; 0x800092 <RxDesc+0x8>
    1b38:	30 91 93 00 	lds	r19, 0x0093	; 0x800093 <RxDesc+0x9>
    1b3c:	a9 01       	movw	r20, r18
    1b3e:	4f 5f       	subi	r20, 0xFF	; 255
    1b40:	5f 4f       	sbci	r21, 0xFF	; 255
    1b42:	50 93 93 00 	sts	0x0093, r21	; 0x800093 <RxDesc+0x9>
    1b46:	40 93 92 00 	sts	0x0092, r20	; 0x800092 <RxDesc+0x8>
    1b4a:	fb 01       	movw	r30, r22
    1b4c:	e2 0f       	add	r30, r18
    1b4e:	f3 1f       	adc	r31, r19
    1b50:	c0 81       	ld	r28, Z
    1b52:	d0 e0       	ldi	r29, 0x00	; 0
	RxDesc.m_nChar--;
    1b54:	20 91 94 00 	lds	r18, 0x0094	; 0x800094 <RxDesc+0xa>
    1b58:	30 91 95 00 	lds	r19, 0x0095	; 0x800095 <RxDesc+0xb>
    1b5c:	21 50       	subi	r18, 0x01	; 1
    1b5e:	31 09       	sbc	r19, r1
    1b60:	30 93 95 00 	sts	0x0095, r19	; 0x800095 <RxDesc+0xb>
    1b64:	20 93 94 00 	sts	0x0094, r18	; 0x800094 <RxDesc+0xa>
	if(RxDesc.m_Tail == RxDesc.m_Size)
    1b68:	20 91 8e 00 	lds	r18, 0x008E	; 0x80008e <RxDesc+0x4>
    1b6c:	30 91 8f 00 	lds	r19, 0x008F	; 0x80008f <RxDesc+0x5>
    1b70:	42 17       	cp	r20, r18
    1b72:	53 07       	cpc	r21, r19
    1b74:	21 f4       	brne	.+8      	; 0x1b7e <USART_GetC+0x66>
		RxDesc.m_Tail = 0;
    1b76:	10 92 93 00 	sts	0x0093, r1	; 0x800093 <RxDesc+0x9>
    1b7a:	10 92 92 00 	sts	0x0092, r1	; 0x800092 <RxDesc+0x8>
	Enable(sr);
    1b7e:	8b d2       	rcall	.+1302   	; 0x2096 <__TEXT_REGION_LENGTH__+0x96>
	return c;
}
    1b80:	ce 01       	movw	r24, r28
    1b82:	df 91       	pop	r29
    1b84:	cf 91       	pop	r28
    1b86:	08 95       	ret

00001b88 <USART_PutC>:
//
// Parameters:
//		c......character to output to Uart
//**********************************************
void USART_PutC(int c)
{
    1b88:	cf 93       	push	r28
    1b8a:	c8 2f       	mov	r28, r24
	char sr;

	PendSemaphore(TxDesc.m_pSem,0);
    1b8c:	60 e0       	ldi	r22, 0x00	; 0
    1b8e:	70 e0       	ldi	r23, 0x00	; 0
    1b90:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <TxDesc>
    1b94:	90 91 7f 00 	lds	r25, 0x007F	; 0x80007f <TxDesc+0x1>
    1b98:	5a da       	rcall	.-2892   	; 0x104e <PendSemaphore>
	sr = Disable();
    1b9a:	79 d2       	rcall	.+1266   	; 0x208e <__TEXT_REGION_LENGTH__+0x8e>
	TxDesc.m_pBuffer[TxDesc.m_Head++] = c;
    1b9c:	60 91 80 00 	lds	r22, 0x0080	; 0x800080 <TxDesc+0x2>
    1ba0:	70 91 81 00 	lds	r23, 0x0081	; 0x800081 <TxDesc+0x3>
    1ba4:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <TxDesc+0x6>
    1ba8:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <TxDesc+0x7>
    1bac:	a9 01       	movw	r20, r18
    1bae:	4f 5f       	subi	r20, 0xFF	; 255
    1bb0:	5f 4f       	sbci	r21, 0xFF	; 255
    1bb2:	50 93 85 00 	sts	0x0085, r21	; 0x800085 <TxDesc+0x7>
    1bb6:	40 93 84 00 	sts	0x0084, r20	; 0x800084 <TxDesc+0x6>
    1bba:	fb 01       	movw	r30, r22
    1bbc:	e2 0f       	add	r30, r18
    1bbe:	f3 1f       	adc	r31, r19
    1bc0:	c0 83       	st	Z, r28
	if(TxDesc.m_Head == TxDesc.m_Size) TxDesc.m_Head = 0;
    1bc2:	20 91 82 00 	lds	r18, 0x0082	; 0x800082 <TxDesc+0x4>
    1bc6:	30 91 83 00 	lds	r19, 0x0083	; 0x800083 <TxDesc+0x5>
    1bca:	42 17       	cp	r20, r18
    1bcc:	53 07       	cpc	r21, r19
    1bce:	21 f4       	brne	.+8      	; 0x1bd8 <USART_PutC+0x50>
    1bd0:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <TxDesc+0x7>
    1bd4:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <TxDesc+0x6>
	TxDesc.m_nChar++;
    1bd8:	20 91 88 00 	lds	r18, 0x0088	; 0x800088 <TxDesc+0xa>
    1bdc:	30 91 89 00 	lds	r19, 0x0089	; 0x800089 <TxDesc+0xb>
    1be0:	2f 5f       	subi	r18, 0xFF	; 255
    1be2:	3f 4f       	sbci	r19, 0xFF	; 255
    1be4:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <TxDesc+0xb>
    1be8:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <TxDesc+0xa>
}

void UART_TXirq(char en)
{
	if(en)
		UCSRB |= BIT(UDRIE);
    1bec:	55 9a       	sbi	0x0a, 5	; 10
	TxDesc.m_pBuffer[TxDesc.m_Head++] = c;
	if(TxDesc.m_Head == TxDesc.m_Size) TxDesc.m_Head = 0;
	TxDesc.m_nChar++;
	UART_TXirq(1);
	Enable(sr);
}
    1bee:	cf 91       	pop	r28
	sr = Disable();
	TxDesc.m_pBuffer[TxDesc.m_Head++] = c;
	if(TxDesc.m_Head == TxDesc.m_Size) TxDesc.m_Head = 0;
	TxDesc.m_nChar++;
	UART_TXirq(1);
	Enable(sr);
    1bf0:	52 c2       	rjmp	.+1188   	; 0x2096 <__TEXT_REGION_LENGTH__+0x96>

00001bf2 <UART_TXirq>:
}

void UART_TXirq(char en)
{
	if(en)
    1bf2:	88 23       	and	r24, r24
    1bf4:	11 f0       	breq	.+4      	; 0x1bfa <UART_TXirq+0x8>
		UCSRB |= BIT(UDRIE);
    1bf6:	55 9a       	sbi	0x0a, 5	; 10
    1bf8:	08 95       	ret
	else
		UCSRB &= ~BIT(UDRIE);
    1bfa:	55 98       	cbi	0x0a, 5	; 10
    1bfc:	08 95       	ret

00001bfe <__vector_10>:
//*************************************************

void USART_UDRE_vect(void) __attribute__ ((naked));
void USART_UDRE_vect(void)
{
	SAVE_IRQ();		//save context
    1bfe:	ff 93       	push	r31
    1c00:	ff b7       	in	r31, 0x3f	; 63
    1c02:	f0 68       	ori	r31, 0x80	; 128
    1c04:	ff 93       	push	r31
    1c06:	ef 93       	push	r30
    1c08:	df 93       	push	r29
    1c0a:	cf 93       	push	r28
    1c0c:	bf 93       	push	r27
    1c0e:	af 93       	push	r26
    1c10:	9f 93       	push	r25
    1c12:	8f 93       	push	r24
    1c14:	7f 93       	push	r23
    1c16:	6f 93       	push	r22
    1c18:	5f 93       	push	r21
    1c1a:	4f 93       	push	r20
    1c1c:	3f 93       	push	r19
    1c1e:	2f 93       	push	r18
    1c20:	1f 93       	push	r17
    1c22:	0f 93       	push	r16
    1c24:	ff 92       	push	r15
    1c26:	ef 92       	push	r14
    1c28:	df 92       	push	r13
    1c2a:	cf 92       	push	r12
    1c2c:	bf 92       	push	r11
    1c2e:	af 92       	push	r10
    1c30:	9f 92       	push	r9
    1c32:	8f 92       	push	r8
    1c34:	7f 92       	push	r7
    1c36:	6f 92       	push	r6
    1c38:	5f 92       	push	r5
    1c3a:	4f 92       	push	r4
    1c3c:	3f 92       	push	r3
    1c3e:	2f 92       	push	r2
    1c40:	1f 92       	push	r1
    1c42:	11 24       	eor	r1, r1
    1c44:	0f 92       	push	r0
	EnterInterrupt();
    1c46:	80 d4       	rcall	.+2304   	; 0x2548 <__TEXT_REGION_LENGTH__+0x548>
	PostSemaphore(TxDesc.m_pSem,0);	//increment semaphore count
    1c48:	60 e0       	ldi	r22, 0x00	; 0
    1c4a:	70 e0       	ldi	r23, 0x00	; 0
    1c4c:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <TxDesc>
    1c50:	90 91 7f 00 	lds	r25, 0x007F	; 0x80007f <TxDesc+0x1>
    1c54:	5c da       	rcall	.-2888   	; 0x110e <PostSemaphore>
									//this indicates the free space of the buffer
	UDR = TxDesc.m_pBuffer[TxDesc.m_Tail++];;	//send data
    1c56:	20 91 80 00 	lds	r18, 0x0080	; 0x800080 <TxDesc+0x2>
    1c5a:	30 91 81 00 	lds	r19, 0x0081	; 0x800081 <TxDesc+0x3>
    1c5e:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <TxDesc+0x8>
    1c62:	90 91 87 00 	lds	r25, 0x0087	; 0x800087 <TxDesc+0x9>
    1c66:	ac 01       	movw	r20, r24
    1c68:	4f 5f       	subi	r20, 0xFF	; 255
    1c6a:	5f 4f       	sbci	r21, 0xFF	; 255
    1c6c:	50 93 87 00 	sts	0x0087, r21	; 0x800087 <TxDesc+0x9>
    1c70:	40 93 86 00 	sts	0x0086, r20	; 0x800086 <TxDesc+0x8>
    1c74:	f9 01       	movw	r30, r18
    1c76:	e8 0f       	add	r30, r24
    1c78:	f9 1f       	adc	r31, r25
    1c7a:	80 81       	ld	r24, Z
    1c7c:	8c b9       	out	0x0c, r24	; 12
	TxDesc.m_nChar--;	//decrement number of chars in buffer
    1c7e:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <TxDesc+0xa>
    1c82:	90 91 89 00 	lds	r25, 0x0089	; 0x800089 <TxDesc+0xb>
    1c86:	01 97       	sbiw	r24, 0x01	; 1
    1c88:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <TxDesc+0xb>
    1c8c:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <TxDesc+0xa>
	if(TxDesc.m_nChar == 0) UART_TXirq(0);	//disable interrupt if no chars
    1c90:	89 2b       	or	r24, r25
    1c92:	11 f4       	brne	.+4      	; 0x1c98 <__vector_10+0x9a>
    1c94:	80 e0       	ldi	r24, 0x00	; 0
    1c96:	ad df       	rcall	.-166    	; 0x1bf2 <UART_TXirq>
	if(TxDesc.m_Tail == TxDesc.m_Size) TxDesc.m_Tail = 0;	//update tail pointer
    1c98:	20 91 86 00 	lds	r18, 0x0086	; 0x800086 <TxDesc+0x8>
    1c9c:	30 91 87 00 	lds	r19, 0x0087	; 0x800087 <TxDesc+0x9>
    1ca0:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <TxDesc+0x4>
    1ca4:	90 91 83 00 	lds	r25, 0x0083	; 0x800083 <TxDesc+0x5>
    1ca8:	28 17       	cp	r18, r24
    1caa:	39 07       	cpc	r19, r25
    1cac:	21 f4       	brne	.+8      	; 0x1cb6 <__vector_10+0xb8>
    1cae:	10 92 87 00 	sts	0x0087, r1	; 0x800087 <TxDesc+0x9>
    1cb2:	10 92 86 00 	sts	0x0086, r1	; 0x800086 <TxDesc+0x8>
	ExitInterrupt();
    1cb6:	d8 d3       	rcall	.+1968   	; 0x2468 <__TEXT_REGION_LENGTH__+0x468>
	RESTORE_IRQ();
    1cb8:	0f 90       	pop	r0
    1cba:	1f 90       	pop	r1
    1cbc:	2f 90       	pop	r2
    1cbe:	3f 90       	pop	r3
    1cc0:	4f 90       	pop	r4
    1cc2:	5f 90       	pop	r5
    1cc4:	6f 90       	pop	r6
    1cc6:	7f 90       	pop	r7
    1cc8:	8f 90       	pop	r8
    1cca:	9f 90       	pop	r9
    1ccc:	af 90       	pop	r10
    1cce:	bf 90       	pop	r11
    1cd0:	cf 90       	pop	r12
    1cd2:	df 90       	pop	r13
    1cd4:	ef 90       	pop	r14
    1cd6:	ff 90       	pop	r15
    1cd8:	0f 91       	pop	r16
    1cda:	1f 91       	pop	r17
    1cdc:	2f 91       	pop	r18
    1cde:	3f 91       	pop	r19
    1ce0:	4f 91       	pop	r20
    1ce2:	5f 91       	pop	r21
    1ce4:	6f 91       	pop	r22
    1ce6:	7f 91       	pop	r23
    1ce8:	8f 91       	pop	r24
    1cea:	9f 91       	pop	r25
    1cec:	af 91       	pop	r26
    1cee:	bf 91       	pop	r27
    1cf0:	cf 91       	pop	r28
    1cf2:	df 91       	pop	r29
    1cf4:	ef 91       	pop	r30
    1cf6:	ff 91       	pop	r31
    1cf8:	ff 77       	andi	r31, 0x7F	; 127
    1cfa:	ff bf       	out	0x3f, r31	; 63
    1cfc:	ff 91       	pop	r31
    1cfe:	18 95       	reti

00001d00 <USART_Init>:
	else
		UCSRB &= ~BIT(UDRIE);
}

void USART_Init(void)
{
    1d00:	0f 93       	push	r16
    1d02:	1f 93       	push	r17
    1d04:	cf 93       	push	r28
    1d06:	df 93       	push	r29
	//---------------------------------------
	// Transmit descriptor
	//---------------------------------------
	 TxDesc.m_pBuffer = malloc(UART_BUFFSIZE);
    1d08:	80 e8       	ldi	r24, 0x80	; 128
    1d0a:	90 e0       	ldi	r25, 0x00	; 0
    1d0c:	1a d5       	rcall	.+2612   	; 0x2742 <__TEXT_REGION_LENGTH__+0x742>
    1d0e:	ce e7       	ldi	r28, 0x7E	; 126
    1d10:	d0 e0       	ldi	r29, 0x00	; 0
    1d12:	9b 83       	std	Y+3, r25	; 0x03
    1d14:	8a 83       	std	Y+2, r24	; 0x02
	 TxDesc.m_Head = 0;
    1d16:	1f 82       	std	Y+7, r1	; 0x07
    1d18:	1e 82       	std	Y+6, r1	; 0x06
	 TxDesc.m_Tail = 0;
    1d1a:	19 86       	std	Y+9, r1	; 0x09
    1d1c:	18 86       	std	Y+8, r1	; 0x08
	 TxDesc.m_nChar = 0;
    1d1e:	1b 86       	std	Y+11, r1	; 0x0b
    1d20:	1a 86       	std	Y+10, r1	; 0x0a
	 TxDesc.m_Size = UART_BUFFSIZE;
    1d22:	00 e8       	ldi	r16, 0x80	; 128
    1d24:	10 e0       	ldi	r17, 0x00	; 0
    1d26:	1d 83       	std	Y+5, r17	; 0x05
    1d28:	0c 83       	std	Y+4, r16	; 0x04
	 TxDesc.m_pSem = NewSemaphore(UART_BUFFSIZE,SEMAPHORE_MODE_BLOCKING);
    1d2a:	60 e0       	ldi	r22, 0x00	; 0
    1d2c:	70 e0       	ldi	r23, 0x00	; 0
    1d2e:	80 e8       	ldi	r24, 0x80	; 128
    1d30:	90 e0       	ldi	r25, 0x00	; 0
    1d32:	09 d2       	rcall	.+1042   	; 0x2146 <__TEXT_REGION_LENGTH__+0x146>
    1d34:	99 83       	std	Y+1, r25	; 0x01
    1d36:	88 83       	st	Y, r24
	 //---------------------------------------
	 // Receive Descriptor
	 //---------------------------------------
	 RxDesc.m_pBuffer = malloc(UART_BUFFSIZE);
    1d38:	80 e8       	ldi	r24, 0x80	; 128
    1d3a:	90 e0       	ldi	r25, 0x00	; 0
    1d3c:	02 d5       	rcall	.+2564   	; 0x2742 <__TEXT_REGION_LENGTH__+0x742>
    1d3e:	ca e8       	ldi	r28, 0x8A	; 138
    1d40:	d0 e0       	ldi	r29, 0x00	; 0
    1d42:	9b 83       	std	Y+3, r25	; 0x03
    1d44:	8a 83       	std	Y+2, r24	; 0x02
	 RxDesc.m_Head = 0;
    1d46:	1f 82       	std	Y+7, r1	; 0x07
    1d48:	1e 82       	std	Y+6, r1	; 0x06
	 RxDesc.m_Tail = 0;
    1d4a:	19 86       	std	Y+9, r1	; 0x09
    1d4c:	18 86       	std	Y+8, r1	; 0x08
	 RxDesc.m_nChar = 0;
    1d4e:	1b 86       	std	Y+11, r1	; 0x0b
    1d50:	1a 86       	std	Y+10, r1	; 0x0a
	 RxDesc.m_pSem = NewSemaphore(0,SEMAPHORE_MODE_BLOCKING);
    1d52:	60 e0       	ldi	r22, 0x00	; 0
    1d54:	70 e0       	ldi	r23, 0x00	; 0
    1d56:	80 e0       	ldi	r24, 0x00	; 0
    1d58:	90 e0       	ldi	r25, 0x00	; 0
    1d5a:	f5 d1       	rcall	.+1002   	; 0x2146 <__TEXT_REGION_LENGTH__+0x146>
    1d5c:	99 83       	std	Y+1, r25	; 0x01
    1d5e:	88 83       	st	Y, r24
	 RxDesc.m_Size = UART_BUFFSIZE;
    1d60:	1d 83       	std	Y+5, r17	; 0x05
    1d62:	0c 83       	std	Y+4, r16	; 0x04
	 //---------------------------------
	 // Set Baud Rate
	 // UBRR = Fosc/(16 * Baud) - 1
	 //---------------------------------
	 UBRRH = 0;
    1d64:	10 bc       	out	0x20, r1	; 32
	 UBRRL = BAUD_MIDI; // 8000000/(16 * 31250) - 1
    1d66:	8f e0       	ldi	r24, 0x0F	; 15
    1d68:	89 b9       	out	0x09, r24	; 9
	 UCSRA = 0;
    1d6a:	1b b8       	out	0x0b, r1	; 11
	 //----------------------------------
	 // Enable TX and RX interrupt
	 //----------------------------------
	 UCSRB = BIT(RXCIE) | BIT(RXEN) | BIT(TXEN);
    1d6c:	88 e9       	ldi	r24, 0x98	; 152
    1d6e:	8a b9       	out	0x0a, r24	; 10
	 //----------------------------------
	 // 8 Bits, No parity
	 //----------------------------------
	 UCSRC = 0x80 | BIT(UCSZ1) | BIT(UCSZ0);
    1d70:	86 e8       	ldi	r24, 0x86	; 134
    1d72:	80 bd       	out	0x20, r24	; 32
}
    1d74:	df 91       	pop	r29
    1d76:	cf 91       	pop	r28
    1d78:	1f 91       	pop	r17
    1d7a:	0f 91       	pop	r16
    1d7c:	08 95       	ret

00001d7e <Yield>:
** are in an interrupt
** routine
*********************************************************************/

void Yield(void)
{
    1d7e:	cf 93       	push	r28
	char sr;

	// Do not yield if at the interrupt level
	if(!InterruptCount)
    1d80:	80 91 a8 00 	lds	r24, 0x00A8	; 0x8000a8 <InterruptCount>
    1d84:	90 91 a9 00 	lds	r25, 0x00A9	; 0x8000a9 <InterruptCount+0x1>
    1d88:	89 2b       	or	r24, r25
    1d8a:	f9 f4       	brne	.+62     	; 0x1dca <Yield+0x4c>
	{
		sr = Disable();
    1d8c:	80 d1       	rcall	.+768    	; 0x208e <__TEXT_REGION_LENGTH__+0x8e>
    1d8e:	c8 2f       	mov	r28, r24
		//update the time stamp in current task
		pCurrentTask->TimeStamp = TStamp;
    1d90:	40 91 a2 00 	lds	r20, 0x00A2	; 0x8000a2 <pCurrentTask>
    1d94:	50 91 a3 00 	lds	r21, 0x00A3	; 0x8000a3 <pCurrentTask+0x1>
    1d98:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <TStamp>
    1d9c:	90 91 61 01 	lds	r25, 0x0161	; 0x800161 <TStamp+0x1>
    1da0:	fa 01       	movw	r30, r20
    1da2:	95 87       	std	Z+13, r25	; 0x0d
    1da4:	84 87       	std	Z+12, r24	; 0x0c
		//Insert current task back into queue
		//and get a new task
		Replace(&ActiveTasks,(void **)&pNextTask,(void *)pCurrentTask);
    1da6:	66 ea       	ldi	r22, 0xA6	; 166
    1da8:	70 e0       	ldi	r23, 0x00	; 0
    1daa:	88 e9       	ldi	r24, 0x98	; 152
    1dac:	90 e0       	ldi	r25, 0x00	; 0
    1dae:	0a db       	rcall	.-2540   	; 0x13c4 <Replace>
		//increment task swaps
		pNextTask->TcbSwaps++;
    1db0:	e0 91 a6 00 	lds	r30, 0x00A6	; 0x8000a6 <pNextTask>
    1db4:	f0 91 a7 00 	lds	r31, 0x00A7	; 0x8000a7 <pNextTask+0x1>
    1db8:	86 85       	ldd	r24, Z+14	; 0x0e
    1dba:	97 85       	ldd	r25, Z+15	; 0x0f
    1dbc:	01 96       	adiw	r24, 0x01	; 1
    1dbe:	97 87       	std	Z+15, r25	; 0x0f
    1dc0:	86 87       	std	Z+14, r24	; 0x0e
		//swap tasks
		DoSwap();
    1dc2:	ed d2       	rcall	.+1498   	; 0x239e <__TEXT_REGION_LENGTH__+0x39e>
		Enable(sr);
    1dc4:	8c 2f       	mov	r24, r28
	}
}
    1dc6:	cf 91       	pop	r28
		Replace(&ActiveTasks,(void **)&pNextTask,(void *)pCurrentTask);
		//increment task swaps
		pNextTask->TcbSwaps++;
		//swap tasks
		DoSwap();
		Enable(sr);
    1dc8:	66 c1       	rjmp	.+716    	; 0x2096 <__TEXT_REGION_LENGTH__+0x96>
	}
}
    1dca:	cf 91       	pop	r28
    1dcc:	08 95       	ret

00001dce <_exit>:
    1dce:	f8 94       	cli

00001dd0 <__stop_program>:
    1dd0:	ff cf       	rjmp	.-2      	; 0x1dd0 <__stop_program>
