
500-1110_Sequencer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  0000123c  000012d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000123c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000007e  0080010e  0080010e  000012de  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000012de  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001310  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002b8  00000000  00000000  00001350  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003bbf  00000000  00000000  00001608  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001882  00000000  00000000  000051c7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000183c  00000000  00000000  00006a49  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000638  00000000  00000000  00008288  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000008b2  00000000  00000000  000088c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002441  00000000  00000000  00009172  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001b8  00000000  00000000  0000b5b3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 3c 00 	jmp	0x78	; 0x78 <__ctors_end>
       4:	0c 94 4f 03 	jmp	0x69e	; 0x69e <__vector_1>
       8:	0c 94 a1 03 	jmp	0x742	; 0x742 <__vector_2>
       c:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      10:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      14:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      18:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      1c:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      20:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      24:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      28:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      2c:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      30:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      34:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      38:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      3c:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      40:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      44:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      48:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      4c:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      50:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      54:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      58:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      5c:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      60:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      64:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      68:	fb 03       	fmulsu	r23, r19
      6a:	ff 03       	fmulsu	r23, r23
      6c:	04 04       	cpc	r0, r4
      6e:	0a 04       	cpc	r0, r10
      70:	10 04       	cpc	r1, r0
      72:	15 04       	cpc	r1, r5
      74:	1b 04       	cpc	r1, r11
      76:	21 04       	cpc	r2, r1

00000078 <__ctors_end>:
      78:	11 24       	eor	r1, r1
      7a:	1f be       	out	0x3f, r1	; 63
      7c:	cf ef       	ldi	r28, 0xFF	; 255
      7e:	d8 e0       	ldi	r29, 0x08	; 8
      80:	de bf       	out	0x3e, r29	; 62
      82:	cd bf       	out	0x3d, r28	; 61

00000084 <__do_copy_data>:
      84:	11 e0       	ldi	r17, 0x01	; 1
      86:	a0 e0       	ldi	r26, 0x00	; 0
      88:	b1 e0       	ldi	r27, 0x01	; 1
      8a:	ec e3       	ldi	r30, 0x3C	; 60
      8c:	f2 e1       	ldi	r31, 0x12	; 18
      8e:	02 c0       	rjmp	.+4      	; 0x94 <__do_copy_data+0x10>
      90:	05 90       	lpm	r0, Z+
      92:	0d 92       	st	X+, r0
      94:	ae 30       	cpi	r26, 0x0E	; 14
      96:	b1 07       	cpc	r27, r17
      98:	d9 f7       	brne	.-10     	; 0x90 <__do_copy_data+0xc>

0000009a <__do_clear_bss>:
      9a:	21 e0       	ldi	r18, 0x01	; 1
      9c:	ae e0       	ldi	r26, 0x0E	; 14
      9e:	b1 e0       	ldi	r27, 0x01	; 1
      a0:	01 c0       	rjmp	.+2      	; 0xa4 <.do_clear_bss_start>

000000a2 <.do_clear_bss_loop>:
      a2:	1d 92       	st	X+, r1

000000a4 <.do_clear_bss_start>:
      a4:	ac 38       	cpi	r26, 0x8C	; 140
      a6:	b2 07       	cpc	r27, r18
      a8:	e1 f7       	brne	.-8      	; 0xa2 <.do_clear_bss_loop>
      aa:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <main>
      ae:	0c 94 1c 09 	jmp	0x1238	; 0x1238 <_exit>

000000b2 <__bad_interrupt>:
      b2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b6 <Disable>:
	.global Disable
	.global Enable

Disable:

	in	r24,_SFR_IO_ADDR(SREG)		;get status register
      b6:	8f b7       	in	r24, 0x3f	; 63
	cli								;disable interrupt
      b8:	f8 94       	cli
	andi r24,0x80					;strip off interrupt bit
      ba:	80 78       	andi	r24, 0x80	; 128
	ret
      bc:	08 95       	ret

000000be <Enable>:

Enable:
	in r25,_SFR_IO_ADDR(SREG)	;get the status register
      be:	9f b7       	in	r25, 0x3f	; 63
	or r25,r24					;set bits in status reg
      c0:	98 2b       	or	r25, r24
	out _SFR_IO_ADDR(SREG),r25	;save new status register
      c2:	9f bf       	out	0x3f, r25	; 63
	ret
      c4:	08 95       	ret

000000c6 <CreateBQ>:
		pBQ......pointer to byte queue object
		b........pointer to data buffer
		size.....size of data buffer in bytes
*************************************************/
void CreateBQ(BQ *pBQ,char *b,unsigned size)
{
      c6:	fc 01       	movw	r30, r24
	pBQ->task_h = NULL;	//no waiting tasks
      c8:	11 82       	std	Z+1, r1	; 0x01
      ca:	10 82       	st	Z, r1
	pBQ->pBfr = b;		//set buffer
      cc:	73 87       	std	Z+11, r23	; 0x0b
      ce:	62 87       	std	Z+10, r22	; 0x0a
	pBQ->Size = size;	//set size
      d0:	51 87       	std	Z+9, r21	; 0x09
      d2:	40 87       	std	Z+8, r20	; 0x08
	pBQ->Head = 0;		//head pointer zero
      d4:	15 82       	std	Z+5, r1	; 0x05
      d6:	14 82       	std	Z+4, r1	; 0x04
	pBQ->Tail = 0;		//tail pointer zero
      d8:	17 82       	std	Z+7, r1	; 0x07
      da:	16 82       	std	Z+6, r1	; 0x06
	pBQ->nChar = 0;		//number of chars zero
      dc:	13 82       	std	Z+3, r1	; 0x03
      de:	12 82       	std	Z+2, r1	; 0x02
      e0:	08 95       	ret

000000e2 <BQget>:
}

int BQget(BQ *pBQ)
{
      e2:	ff 92       	push	r15
      e4:	0f 93       	push	r16
      e6:	1f 93       	push	r17
      e8:	cf 93       	push	r28
      ea:	df 93       	push	r29
      ec:	ec 01       	movw	r28, r24
	//	suspends task if there are no characters to get
	//******************************************************
	char sr;
	int retval;

	sr = Disable();
      ee:	0e 94 5b 00 	call	0xb6	; 0xb6 <Disable>
      f2:	f8 2e       	mov	r15, r24
	if(pBQ->nChar)	//are there any characters to get?
      f4:	2a 81       	ldd	r18, Y+2	; 0x02
      f6:	3b 81       	ldd	r19, Y+3	; 0x03
      f8:	21 15       	cp	r18, r1
      fa:	31 05       	cpc	r19, r1
      fc:	e9 f0       	breq	.+58     	; 0x138 <BQget+0x56>
		//-------------------------------------
		// Get Character from Buffer
		// Check Head pointer for Wrap
		// Increment number of chars in buffer
		//------------------------------------
		retval = (int)((unsigned char)pBQ->pBfr[pBQ->Head++]);
      fe:	6a 85       	ldd	r22, Y+10	; 0x0a
     100:	7b 85       	ldd	r23, Y+11	; 0x0b
     102:	8c 81       	ldd	r24, Y+4	; 0x04
     104:	9d 81       	ldd	r25, Y+5	; 0x05
     106:	ac 01       	movw	r20, r24
     108:	4f 5f       	subi	r20, 0xFF	; 255
     10a:	5f 4f       	sbci	r21, 0xFF	; 255
     10c:	5d 83       	std	Y+5, r21	; 0x05
     10e:	4c 83       	std	Y+4, r20	; 0x04
     110:	fb 01       	movw	r30, r22
     112:	e8 0f       	add	r30, r24
     114:	f9 1f       	adc	r31, r25
     116:	00 81       	ld	r16, Z
     118:	10 e0       	ldi	r17, 0x00	; 0
		if(pBQ->Head == pBQ->Size) pBQ->Head = 0;
     11a:	88 85       	ldd	r24, Y+8	; 0x08
     11c:	99 85       	ldd	r25, Y+9	; 0x09
     11e:	48 17       	cp	r20, r24
     120:	59 07       	cpc	r21, r25
     122:	11 f4       	brne	.+4      	; 0x128 <BQget+0x46>
     124:	1d 82       	std	Y+5, r1	; 0x05
     126:	1c 82       	std	Y+4, r1	; 0x04
		pBQ->nChar--;
     128:	21 50       	subi	r18, 0x01	; 1
     12a:	31 09       	sbc	r19, r1
     12c:	3b 83       	std	Y+3, r19	; 0x03
     12e:	2a 83       	std	Y+2, r18	; 0x02
		Enable(sr);
     130:	8f 2d       	mov	r24, r15
     132:	0e 94 5f 00 	call	0xbe	; 0xbe <Enable>
     136:	4d c0       	rjmp	.+154    	; 0x1d2 <BQget+0xf0>
	}
	else			//no, suspend task
	{
		pBQ->task_h = pCurrentTask;
     138:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <pCurrentTask>
     13c:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <pCurrentTask+0x1>
     140:	99 83       	std	Y+1, r25	; 0x01
     142:	88 83       	st	Y, r24
		pCurrentTask->status = EVENT_NOERROR;
     144:	e0 91 1a 01 	lds	r30, 0x011A	; 0x80011a <pCurrentTask>
     148:	f0 91 1b 01 	lds	r31, 0x011B	; 0x80011b <pCurrentTask+0x1>
     14c:	11 86       	std	Z+9, r1	; 0x09
     14e:	10 86       	std	Z+8, r1	; 0x08
		//---------------------------------
		//swap out current task
		//---------------------------------
		pCurrentTask->TimeStamp = TStamp;
     150:	80 91 8a 01 	lds	r24, 0x018A	; 0x80018a <TStamp>
     154:	90 91 8b 01 	lds	r25, 0x018B	; 0x80018b <TStamp+0x1>
     158:	95 87       	std	Z+13, r25	; 0x0d
     15a:	84 87       	std	Z+12, r24	; 0x0c
		if(Delete(&ActiveTasks,(void **)&pNextTask))	//get highest priority task
     15c:	6e e1       	ldi	r22, 0x1E	; 30
     15e:	71 e0       	ldi	r23, 0x01	; 1
     160:	80 e1       	ldi	r24, 0x10	; 16
     162:	91 e0       	ldi	r25, 0x01	; 1
     164:	0e 94 29 08 	call	0x1052	; 0x1052 <Delete>
     168:	89 2b       	or	r24, r25
     16a:	31 f1       	breq	.+76     	; 0x1b8 <BQget+0xd6>
		{
			pNextTask->TcbSwaps++;
     16c:	e0 91 1e 01 	lds	r30, 0x011E	; 0x80011e <pNextTask>
     170:	f0 91 1f 01 	lds	r31, 0x011F	; 0x80011f <pNextTask+0x1>
     174:	86 85       	ldd	r24, Z+14	; 0x0e
     176:	97 85       	ldd	r25, Z+15	; 0x0f
     178:	01 96       	adiw	r24, 0x01	; 1
     17a:	97 87       	std	Z+15, r25	; 0x0f
     17c:	86 87       	std	Z+14, r24	; 0x0e
			DoSwap();                    //do context swap
     17e:	0e 94 50 02 	call	0x4a0	; 0x4a0 <DoSwap>
			retval = (int)((unsigned char)pBQ->pBfr[pBQ->Head++]);
     182:	4a 85       	ldd	r20, Y+10	; 0x0a
     184:	5b 85       	ldd	r21, Y+11	; 0x0b
     186:	8c 81       	ldd	r24, Y+4	; 0x04
     188:	9d 81       	ldd	r25, Y+5	; 0x05
     18a:	9c 01       	movw	r18, r24
     18c:	2f 5f       	subi	r18, 0xFF	; 255
     18e:	3f 4f       	sbci	r19, 0xFF	; 255
     190:	3d 83       	std	Y+5, r19	; 0x05
     192:	2c 83       	std	Y+4, r18	; 0x04
     194:	fa 01       	movw	r30, r20
     196:	e8 0f       	add	r30, r24
     198:	f9 1f       	adc	r31, r25
     19a:	00 81       	ld	r16, Z
     19c:	10 e0       	ldi	r17, 0x00	; 0
			if(pBQ->Head == pBQ->Size) pBQ->Head = 0;
     19e:	88 85       	ldd	r24, Y+8	; 0x08
     1a0:	99 85       	ldd	r25, Y+9	; 0x09
     1a2:	28 17       	cp	r18, r24
     1a4:	39 07       	cpc	r19, r25
     1a6:	11 f4       	brne	.+4      	; 0x1ac <BQget+0xca>
     1a8:	1d 82       	std	Y+5, r1	; 0x05
     1aa:	1c 82       	std	Y+4, r1	; 0x04
			pBQ->nChar--;
     1ac:	8a 81       	ldd	r24, Y+2	; 0x02
     1ae:	9b 81       	ldd	r25, Y+3	; 0x03
     1b0:	01 97       	sbiw	r24, 0x01	; 1
     1b2:	9b 83       	std	Y+3, r25	; 0x03
     1b4:	8a 83       	std	Y+2, r24	; 0x02
     1b6:	0a c0       	rjmp	.+20     	; 0x1cc <BQget+0xea>
		}
		else
		{
			pCurrentTask->status = EVENT_NOTASKS;
     1b8:	e0 91 1a 01 	lds	r30, 0x011A	; 0x80011a <pCurrentTask>
     1bc:	f0 91 1b 01 	lds	r31, 0x011B	; 0x80011b <pCurrentTask+0x1>
     1c0:	8f ef       	ldi	r24, 0xFF	; 255
     1c2:	9f ef       	ldi	r25, 0xFF	; 255
     1c4:	91 87       	std	Z+9, r25	; 0x09
     1c6:	80 87       	std	Z+8, r24	; 0x08
			retval = pCurrentTask->status;
     1c8:	0f ef       	ldi	r16, 0xFF	; 255
     1ca:	1f ef       	ldi	r17, 0xFF	; 255
		}
		Enable(sr);
     1cc:	8f 2d       	mov	r24, r15
     1ce:	0e 94 5f 00 	call	0xbe	; 0xbe <Enable>
	}
	return retval;
}
     1d2:	c8 01       	movw	r24, r16
     1d4:	df 91       	pop	r29
     1d6:	cf 91       	pop	r28
     1d8:	1f 91       	pop	r17
     1da:	0f 91       	pop	r16
     1dc:	ff 90       	pop	r15
     1de:	08 95       	ret

000001e0 <BQPut>:

int BQPut(BQ *pBQ,int c)
{
     1e0:	ff 92       	push	r15
     1e2:	0f 93       	push	r16
     1e4:	1f 93       	push	r17
     1e6:	cf 93       	push	r28
     1e8:	df 93       	push	r29
     1ea:	ec 01       	movw	r28, r24
     1ec:	16 2f       	mov	r17, r22
	//	negative value on fail
	//--------------------------------------
	char sr=0;
	int retval = EVENT_NOERROR;

	if(!InterruptCount)sr = Disable();		//just in case we are at task level
     1ee:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <InterruptCount>
     1f2:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <InterruptCount+0x1>
     1f6:	89 2b       	or	r24, r25
     1f8:	21 f4       	brne	.+8      	; 0x202 <BQPut+0x22>
     1fa:	0e 94 5b 00 	call	0xb6	; 0xb6 <Disable>
     1fe:	f8 2e       	mov	r15, r24
     200:	01 c0       	rjmp	.+2      	; 0x204 <BQPut+0x24>
	//
	// return value:
	//	0 on success
	//	negative value on fail
	//--------------------------------------
	char sr=0;
     202:	f1 2c       	mov	r15, r1
	if(!InterruptCount)sr = Disable();		//just in case we are at task level
	//------------------------------------------
	// check to see if there is enough room
	// in the byte queue to add the byte
	//-----------------------------------------
	if(pBQ->nChar < pBQ->Size)	//any place for a character?
     204:	2a 81       	ldd	r18, Y+2	; 0x02
     206:	3b 81       	ldd	r19, Y+3	; 0x03
     208:	88 85       	ldd	r24, Y+8	; 0x08
     20a:	99 85       	ldd	r25, Y+9	; 0x09
     20c:	28 17       	cp	r18, r24
     20e:	39 07       	cpc	r19, r25
     210:	f0 f4       	brcc	.+60     	; 0x24e <BQPut+0x6e>
	{
		//add byte and increment tail pointer
		pBQ->pBfr[pBQ->Tail++] = (char)c;
     212:	2a 85       	ldd	r18, Y+10	; 0x0a
     214:	3b 85       	ldd	r19, Y+11	; 0x0b
     216:	8e 81       	ldd	r24, Y+6	; 0x06
     218:	9f 81       	ldd	r25, Y+7	; 0x07
     21a:	ac 01       	movw	r20, r24
     21c:	4f 5f       	subi	r20, 0xFF	; 255
     21e:	5f 4f       	sbci	r21, 0xFF	; 255
     220:	5f 83       	std	Y+7, r21	; 0x07
     222:	4e 83       	std	Y+6, r20	; 0x06
     224:	f9 01       	movw	r30, r18
     226:	e8 0f       	add	r30, r24
     228:	f9 1f       	adc	r31, r25
     22a:	10 83       	st	Z, r17
		//check tail pointer to see if it needs to wrap
		if(pBQ->Tail == pBQ->Size) pBQ->Tail = 0;
     22c:	2e 81       	ldd	r18, Y+6	; 0x06
     22e:	3f 81       	ldd	r19, Y+7	; 0x07
     230:	88 85       	ldd	r24, Y+8	; 0x08
     232:	99 85       	ldd	r25, Y+9	; 0x09
     234:	28 17       	cp	r18, r24
     236:	39 07       	cpc	r19, r25
     238:	11 f4       	brne	.+4      	; 0x23e <BQPut+0x5e>
     23a:	1f 82       	std	Y+7, r1	; 0x07
     23c:	1e 82       	std	Y+6, r1	; 0x06
		//increment number of characters in buffer
		pBQ->nChar++;
     23e:	8a 81       	ldd	r24, Y+2	; 0x02
     240:	9b 81       	ldd	r25, Y+3	; 0x03
     242:	01 96       	adiw	r24, 0x01	; 1
     244:	9b 83       	std	Y+3, r25	; 0x03
     246:	8a 83       	std	Y+2, r24	; 0x02
	// return value:
	//	0 on success
	//	negative value on fail
	//--------------------------------------
	char sr=0;
	int retval = EVENT_NOERROR;
     248:	00 e0       	ldi	r16, 0x00	; 0
     24a:	10 e0       	ldi	r17, 0x00	; 0
     24c:	02 c0       	rjmp	.+4      	; 0x252 <BQPut+0x72>
		//increment number of characters in buffer
		pBQ->nChar++;
	}
	else
	{
		retval = EVENT_OVERFLOW;
     24e:	0e ef       	ldi	r16, 0xFE	; 254
     250:	1f ef       	ldi	r17, 0xFF	; 255
	}
	if(pBQ->task_h)	//is there a task pending?
     252:	e8 81       	ld	r30, Y
     254:	f9 81       	ldd	r31, Y+1	; 0x01
     256:	30 97       	sbiw	r30, 0x00	; 0
     258:	b1 f0       	breq	.+44     	; 0x286 <BQPut+0xa6>
	{
		pBQ->task_h->status = retval;	//set its status to retval
     25a:	11 87       	std	Z+9, r17	; 0x09
     25c:	00 87       	std	Z+8, r16	; 0x08
		Insert(&ActiveTasks,pBQ->task_h);	//put task back onto active list
     25e:	68 81       	ld	r22, Y
     260:	79 81       	ldd	r23, Y+1	; 0x01
     262:	80 e1       	ldi	r24, 0x10	; 16
     264:	91 e0       	ldi	r25, 0x01	; 1
     266:	0e 94 be 07 	call	0xf7c	; 0xf7c <Insert>
		pBQ->task_h = NULL;
     26a:	19 82       	std	Y+1, r1	; 0x01
     26c:	18 82       	st	Y, r1
		if(!InterruptCount)Enable(sr);	//enable interrupts
     26e:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <InterruptCount>
     272:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <InterruptCount+0x1>
     276:	89 2b       	or	r24, r25
     278:	19 f4       	brne	.+6      	; 0x280 <BQPut+0xa0>
     27a:	8f 2d       	mov	r24, r15
     27c:	0e 94 5f 00 	call	0xbe	; 0xbe <Enable>
		Yield();	//if we are at task level...we will yeild
     280:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <Yield>
     284:	09 c0       	rjmp	.+18     	; 0x298 <BQPut+0xb8>
	}
	else
		if(!InterruptCount)Enable(sr);
     286:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <InterruptCount>
     28a:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <InterruptCount+0x1>
     28e:	89 2b       	or	r24, r25
     290:	19 f4       	brne	.+6      	; 0x298 <BQPut+0xb8>
     292:	8f 2d       	mov	r24, r15
     294:	0e 94 5f 00 	call	0xbe	; 0xbe <Enable>
	return retval;
}
     298:	c8 01       	movw	r24, r16
     29a:	df 91       	pop	r29
     29c:	cf 91       	pop	r28
     29e:	1f 91       	pop	r17
     2a0:	0f 91       	pop	r16
     2a2:	ff 90       	pop	r15
     2a4:	08 95       	ret

000002a6 <CreateSemaphore>:
**	n............name of semaphore (DEBUG only)                           **
**                                                                        **
***************************************************************************/

void CreateSemaphore(SEMAPHORE *pSem,int InitCount,int Mode,char *n)
{
     2a6:	cf 93       	push	r28
     2a8:	df 93       	push	r29
     2aa:	ec 01       	movw	r28, r24
	char sr;

	pSem->EventCount = InitCount;	//set initial count
     2ac:	7b 87       	std	Y+11, r23	; 0x0b
     2ae:	6a 87       	std	Y+10, r22	; 0x0a
	pSem->SemaphoreMode = Mode;	//set mode
     2b0:	59 87       	std	Y+9, r21	; 0x09
     2b2:	48 87       	std	Y+8, r20	; 0x08
	if(n)
     2b4:	21 15       	cp	r18, r1
     2b6:	31 05       	cpc	r19, r1
     2b8:	21 f0       	breq	.+8      	; 0x2c2 <CreateSemaphore+0x1c>
		strcpy(pSem->name,n);			//copy name in
     2ba:	b9 01       	movw	r22, r18
     2bc:	0c 96       	adiw	r24, 0x0c	; 12
     2be:	0e 94 15 09 	call	0x122a	; 0x122a <strcpy>
	pSem->task_head = 0;				//no tasks waiting
     2c2:	19 82       	std	Y+1, r1	; 0x01
     2c4:	18 82       	st	Y, r1
	pSem->task_tail = 0;				//no tasks waiting
     2c6:	1b 82       	std	Y+3, r1	; 0x03
     2c8:	1a 82       	std	Y+2, r1	; 0x02
	//-------------------------------------------------------
	// if Mode==SEMAPHORE_MODE_TIMEOUT, then put this
	// semaphore into timeout list
	//-------------------------------------------------------
	// enter critical section, disable interrupts
	sr = Disable();
     2ca:	0e 94 5b 00 	call	0xb6	; 0xb6 <Disable>
	if(pSem->SemaphoreMode == SEMAPHORE_MODE_TIMEOUT)
     2ce:	28 85       	ldd	r18, Y+8	; 0x08
     2d0:	39 85       	ldd	r19, Y+9	; 0x09
     2d2:	21 30       	cpi	r18, 0x01	; 1
     2d4:	31 05       	cpc	r19, r1
     2d6:	c9 f4       	brne	.+50     	; 0x30a <CreateSemaphore+0x64>
	{
		if(pTimeoutList)	//is the list already started?
     2d8:	e0 91 0e 01 	lds	r30, 0x010E	; 0x80010e <__data_end>
     2dc:	f0 91 0f 01 	lds	r31, 0x010F	; 0x80010f <__data_end+0x1>
     2e0:	30 97       	sbiw	r30, 0x00	; 0
     2e2:	59 f0       	breq	.+22     	; 0x2fa <CreateSemaphore+0x54>
		{
			pSem->Tnext = pTimeoutList;	//make current head next in line
     2e4:	fd 83       	std	Y+5, r31	; 0x05
     2e6:	ec 83       	std	Y+4, r30	; 0x04
			pSem->Tprev = 0;			//these is no previous entry
     2e8:	1f 82       	std	Y+7, r1	; 0x07
     2ea:	1e 82       	std	Y+6, r1	; 0x06
			pTimeoutList->Tprev = pSem;	//this will be prev for next entry
     2ec:	d7 83       	std	Z+7, r29	; 0x07
     2ee:	c6 83       	std	Z+6, r28	; 0x06
			pTimeoutList = pSem;			//this is now the new head of list
     2f0:	d0 93 0f 01 	sts	0x010F, r29	; 0x80010f <__data_end+0x1>
     2f4:	c0 93 0e 01 	sts	0x010E, r28	; 0x80010e <__data_end>
     2f8:	08 c0       	rjmp	.+16     	; 0x30a <CreateSemaphore+0x64>
		}
		else			//no start list
		{
			pTimeoutList = pSem;	//set timeout list
     2fa:	d0 93 0f 01 	sts	0x010F, r29	; 0x80010f <__data_end+0x1>
     2fe:	c0 93 0e 01 	sts	0x010E, r28	; 0x80010e <__data_end>
			pSem->Tnext = 0;
     302:	1d 82       	std	Y+5, r1	; 0x05
     304:	1c 82       	std	Y+4, r1	; 0x04
			pSem->Tprev = 0;
     306:	1f 82       	std	Y+7, r1	; 0x07
     308:	1e 82       	std	Y+6, r1	; 0x06
		}
	}
	//exit critical section, enable IRQ
	Enable(sr);	//restore interrupts
     30a:	0e 94 5f 00 	call	0xbe	; 0xbe <Enable>
}
     30e:	df 91       	pop	r29
     310:	cf 91       	pop	r28
     312:	08 95       	ret

00000314 <CreateTask>:
**	arg.............argument to be passed to function...it chan either be 
**  a value, or a pointer to some data
***************************************************************************************/

void CreateTask(TCB *t, void (*task)(void *), int stacksize,int priority,char *name,void *arg)
{
     314:	6f 92       	push	r6
     316:	7f 92       	push	r7
     318:	8f 92       	push	r8
     31a:	9f 92       	push	r9
     31c:	af 92       	push	r10
     31e:	bf 92       	push	r11
     320:	cf 92       	push	r12
     322:	df 92       	push	r13
     324:	ef 92       	push	r14
     326:	ff 92       	push	r15
     328:	0f 93       	push	r16
     32a:	1f 93       	push	r17
     32c:	cf 93       	push	r28
     32e:	df 93       	push	r29
     330:	6c 01       	movw	r12, r24
     332:	66 2e       	mov	r6, r22
     334:	77 2e       	mov	r7, r23
     336:	ea 01       	movw	r28, r20
     338:	49 01       	movw	r8, r18
		pointer to block of ram to use as stack on success
		OR NULL on fail
*********************************************************/
static void *AllocStack(size_t len)
{
	return malloc(len);
     33a:	ca 01       	movw	r24, r20
     33c:	0e 94 22 05 	call	0xa44	; 0xa44 <malloc>
     340:	5c 01       	movw	r10, r24

	stack = AllocStack(stacksize);
	//set all stack locations with an
	//arbitrary value to make DEBUG
	// much easier.
	for(i=0;i<stacksize;++i) stack[i] = 0xcd;
     342:	1c 16       	cp	r1, r28
     344:	1d 06       	cpc	r1, r29
     346:	4c f4       	brge	.+18     	; 0x35a <CreateTask+0x46>
     348:	fc 01       	movw	r30, r24
     34a:	9c 01       	movw	r18, r24
     34c:	2c 0f       	add	r18, r28
     34e:	3d 1f       	adc	r19, r29
     350:	8d ec       	ldi	r24, 0xCD	; 205
     352:	81 93       	st	Z+, r24
     354:	e2 17       	cp	r30, r18
     356:	f3 07       	cpc	r31, r19
     358:	e1 f7       	brne	.-8      	; 0x352 <CreateTask+0x3e>
	//enter critical section, Disable IRQ
	sr = Disable();
     35a:	0e 94 5b 00 	call	0xb6	; 0xb6 <Disable>
	if(t)
     35e:	c1 14       	cp	r12, r1
     360:	d1 04       	cpc	r13, r1
     362:	09 f4       	brne	.+2      	; 0x366 <CreateTask+0x52>
     364:	8c c0       	rjmp	.+280    	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
	{
		//initialize TCB member variables
		t->TcbSwaps = 0;
     366:	d6 01       	movw	r26, r12
     368:	1f 96       	adiw	r26, 0x0f	; 15
     36a:	1c 92       	st	X, r1
     36c:	1e 92       	st	-X, r1
     36e:	1e 97       	sbiw	r26, 0x0e	; 14
		t->stacksize = stacksize;
     370:	15 96       	adiw	r26, 0x05	; 5
     372:	dc 93       	st	X, r29
     374:	ce 93       	st	-X, r28
     376:	14 97       	sbiw	r26, 0x04	; 4
		t->priority = priority;
     378:	17 96       	adiw	r26, 0x07	; 7
     37a:	9c 92       	st	X, r9
     37c:	8e 92       	st	-X, r8
     37e:	16 97       	sbiw	r26, 0x06	; 6
		t->TimeStamp = 0;
     380:	1d 96       	adiw	r26, 0x0d	; 13
     382:	1c 92       	st	X, r1
     384:	1e 92       	st	-X, r1
     386:	1c 97       	sbiw	r26, 0x0c	; 12
		t->name = name;
     388:	53 96       	adiw	r26, 0x13	; 19
     38a:	1c 93       	st	X, r17
     38c:	0e 93       	st	-X, r16
     38e:	52 97       	sbiw	r26, 0x12	; 18
		t->stacktop = stack;
     390:	13 96       	adiw	r26, 0x03	; 3
     392:	bc 92       	st	X, r11
     394:	ae 92       	st	-X, r10
     396:	12 97       	sbiw	r26, 0x02	; 2
		t->next = (TCB *)0;
     398:	55 96       	adiw	r26, 0x15	; 21
     39a:	1c 92       	st	X, r1
     39c:	1e 92       	st	-X, r1
     39e:	54 97       	sbiw	r26, 0x14	; 20
		t->list = (TCB *)0;
     3a0:	57 96       	adiw	r26, 0x17	; 23
     3a2:	1c 92       	st	X, r1
     3a4:	1e 92       	st	-X, r1
     3a6:	56 97       	sbiw	r26, 0x16	; 22
		stk = stack + stacksize-1;
     3a8:	fe 01       	movw	r30, r28
     3aa:	31 97       	sbiw	r30, 0x01	; 1
     3ac:	ea 0d       	add	r30, r10
     3ae:	fb 1d       	adc	r31, r11
		//Initialize the stack
		*stk-- = (char)LO( (unsigned)task);/*	return address	*/
     3b0:	60 82       	st	Z, r6
		*stk-- = (char)HI( (unsigned)task);
     3b2:	df 01       	movw	r26, r30
     3b4:	11 97       	sbiw	r26, 0x01	; 1
     3b6:	7c 92       	st	X, r7
		*stk-- = 31;		/*	r31 = 0	*/
     3b8:	11 97       	sbiw	r26, 0x01	; 1
     3ba:	9f e1       	ldi	r25, 0x1F	; 31
     3bc:	9c 93       	st	X, r25
		*stk-- = 0x80;	/*	SREG Interrupts enabled	*/
     3be:	11 97       	sbiw	r26, 0x01	; 1
     3c0:	90 e8       	ldi	r25, 0x80	; 128
     3c2:	9c 93       	st	X, r25
		*stk-- = 30;		/*	r30 = 0	*/
     3c4:	11 97       	sbiw	r26, 0x01	; 1
     3c6:	9e e1       	ldi	r25, 0x1E	; 30
     3c8:	9c 93       	st	X, r25
		*stk-- = 29;		/*	r29 = 0	*/
     3ca:	11 97       	sbiw	r26, 0x01	; 1
     3cc:	9d e1       	ldi	r25, 0x1D	; 29
     3ce:	9c 93       	st	X, r25
		*stk-- = 28;		/*	r28 = 0	*/
     3d0:	11 97       	sbiw	r26, 0x01	; 1
     3d2:	9c e1       	ldi	r25, 0x1C	; 28
     3d4:	9c 93       	st	X, r25
		*stk-- = 27;		/*	r27 = 0	*/
     3d6:	11 97       	sbiw	r26, 0x01	; 1
     3d8:	9b e1       	ldi	r25, 0x1B	; 27
     3da:	9c 93       	st	X, r25
		*stk-- = 26;		/*	r26 = 0	*/
     3dc:	11 97       	sbiw	r26, 0x01	; 1
     3de:	9a e1       	ldi	r25, 0x1A	; 26
     3e0:	9c 93       	st	X, r25
		*stk-- = (char)HI( (unsigned)arg);		/*	r25 = 0	*/
     3e2:	11 97       	sbiw	r26, 0x01	; 1
     3e4:	fc 92       	st	X, r15
		*stk-- = (char)LO( (unsigned)arg);		/*	r24 = 0	*/
     3e6:	11 97       	sbiw	r26, 0x01	; 1
     3e8:	ec 92       	st	X, r14
		*stk-- = 23;		/*	r23 = 0	*/
     3ea:	11 97       	sbiw	r26, 0x01	; 1
     3ec:	97 e1       	ldi	r25, 0x17	; 23
     3ee:	9c 93       	st	X, r25
		*stk-- = 22;		/*	r22 = 0	*/
     3f0:	11 97       	sbiw	r26, 0x01	; 1
     3f2:	96 e1       	ldi	r25, 0x16	; 22
     3f4:	9c 93       	st	X, r25
		*stk-- = 21;		/*	r21 = 0	*/
     3f6:	11 97       	sbiw	r26, 0x01	; 1
     3f8:	95 e1       	ldi	r25, 0x15	; 21
     3fa:	9c 93       	st	X, r25
		*stk-- = 20;		/*	r20 = 0	*/
     3fc:	11 97       	sbiw	r26, 0x01	; 1
     3fe:	94 e1       	ldi	r25, 0x14	; 20
     400:	9c 93       	st	X, r25
		*stk-- = 19;		/*	r19 	*/
     402:	11 97       	sbiw	r26, 0x01	; 1
     404:	93 e1       	ldi	r25, 0x13	; 19
     406:	9c 93       	st	X, r25
		*stk-- = 18;		/*	r18 	*/
     408:	11 97       	sbiw	r26, 0x01	; 1
     40a:	92 e1       	ldi	r25, 0x12	; 18
     40c:	9c 93       	st	X, r25
		*stk-- = 17;		/*	r17 	*/
     40e:	11 97       	sbiw	r26, 0x01	; 1
     410:	91 e1       	ldi	r25, 0x11	; 17
     412:	9c 93       	st	X, r25
		*stk-- = 16;		/*	r16 	*/
     414:	11 97       	sbiw	r26, 0x01	; 1
     416:	90 e1       	ldi	r25, 0x10	; 16
     418:	9c 93       	st	X, r25
		*stk-- = 15;		/*	r15 	*/
     41a:	11 97       	sbiw	r26, 0x01	; 1
     41c:	9f e0       	ldi	r25, 0x0F	; 15
     41e:	9c 93       	st	X, r25
		*stk-- = 14;		/*	r14 	*/
     420:	11 97       	sbiw	r26, 0x01	; 1
     422:	9e e0       	ldi	r25, 0x0E	; 14
     424:	9c 93       	st	X, r25
		*stk-- = 13;		/*	r13 	*/
     426:	11 97       	sbiw	r26, 0x01	; 1
     428:	9d e0       	ldi	r25, 0x0D	; 13
     42a:	9c 93       	st	X, r25
		*stk-- = 12;		/*	r12 	*/
     42c:	11 97       	sbiw	r26, 0x01	; 1
     42e:	9c e0       	ldi	r25, 0x0C	; 12
     430:	9c 93       	st	X, r25
		*stk-- = 11;		/*	r11 	*/
     432:	11 97       	sbiw	r26, 0x01	; 1
     434:	9b e0       	ldi	r25, 0x0B	; 11
     436:	9c 93       	st	X, r25
		*stk-- = 10;		/*	r10 	*/
     438:	11 97       	sbiw	r26, 0x01	; 1
     43a:	9a e0       	ldi	r25, 0x0A	; 10
     43c:	9c 93       	st	X, r25
		*stk-- = 9;			/*	r9 		*/
     43e:	11 97       	sbiw	r26, 0x01	; 1
     440:	99 e0       	ldi	r25, 0x09	; 9
     442:	9c 93       	st	X, r25
		*stk-- = 8;			/*	r8 		*/
     444:	11 97       	sbiw	r26, 0x01	; 1
     446:	98 e0       	ldi	r25, 0x08	; 8
     448:	9c 93       	st	X, r25
		*stk-- = 7;			/*	r7 		*/
     44a:	11 97       	sbiw	r26, 0x01	; 1
     44c:	97 e0       	ldi	r25, 0x07	; 7
     44e:	9c 93       	st	X, r25
		*stk-- = 6;			/*	r6 		*/
     450:	11 97       	sbiw	r26, 0x01	; 1
     452:	96 e0       	ldi	r25, 0x06	; 6
     454:	9c 93       	st	X, r25
		*stk-- = 5;			/*	r5 		*/
     456:	11 97       	sbiw	r26, 0x01	; 1
     458:	95 e0       	ldi	r25, 0x05	; 5
     45a:	9c 93       	st	X, r25
		*stk-- = 4;			/*	r4 		*/
     45c:	11 97       	sbiw	r26, 0x01	; 1
     45e:	94 e0       	ldi	r25, 0x04	; 4
     460:	9c 93       	st	X, r25
		*stk-- = 3;			/*	r3 		*/
     462:	11 97       	sbiw	r26, 0x01	; 1
     464:	93 e0       	ldi	r25, 0x03	; 3
     466:	9c 93       	st	X, r25
		*stk-- = 2;			/*	r2 		*/
     468:	11 97       	sbiw	r26, 0x01	; 1
     46a:	92 e0       	ldi	r25, 0x02	; 2
     46c:	9c 93       	st	X, r25
		*stk-- = 0;			/*	r1 must be ZERO 	*/
     46e:	11 97       	sbiw	r26, 0x01	; 1
     470:	1c 92       	st	X, r1
		*stk-- = 0;			/*	r0 		*/
     472:	11 97       	sbiw	r26, 0x01	; 1
     474:	1c 92       	st	X, r1
     476:	b3 97       	sbiw	r30, 0x23	; 35
		t->stack = stk;
     478:	d6 01       	movw	r26, r12
     47a:	ed 93       	st	X+, r30
     47c:	fc 93       	st	X, r31
	}
	//exit critical section, enable IRQ
	Enable(sr);
     47e:	0e 94 5f 00 	call	0xbe	; 0xbe <Enable>
}
     482:	df 91       	pop	r29
     484:	cf 91       	pop	r28
     486:	1f 91       	pop	r17
     488:	0f 91       	pop	r16
     48a:	ff 90       	pop	r15
     48c:	ef 90       	pop	r14
     48e:	df 90       	pop	r13
     490:	cf 90       	pop	r12
     492:	bf 90       	pop	r11
     494:	af 90       	pop	r10
     496:	9f 90       	pop	r9
     498:	8f 90       	pop	r8
     49a:	7f 90       	pop	r7
     49c:	6f 90       	pop	r6
     49e:	08 95       	ret

000004a0 <DoSwap>:
		This function does a context swap
*******************************************/
void DoSwap(void) __attribute__ ( ( naked ) );
void DoSwap(void)
{
	SAVE_CONTEXT();		//save the context of the current task
     4a0:	ff 93       	push	r31
     4a2:	ff b7       	in	r31, 0x3f	; 63
     4a4:	f8 94       	cli
     4a6:	ff 93       	push	r31
     4a8:	ef 93       	push	r30
     4aa:	df 93       	push	r29
     4ac:	cf 93       	push	r28
     4ae:	bf 93       	push	r27
     4b0:	af 93       	push	r26
     4b2:	9f 93       	push	r25
     4b4:	8f 93       	push	r24
     4b6:	7f 93       	push	r23
     4b8:	6f 93       	push	r22
     4ba:	5f 93       	push	r21
     4bc:	4f 93       	push	r20
     4be:	3f 93       	push	r19
     4c0:	2f 93       	push	r18
     4c2:	1f 93       	push	r17
     4c4:	0f 93       	push	r16
     4c6:	ff 92       	push	r15
     4c8:	ef 92       	push	r14
     4ca:	df 92       	push	r13
     4cc:	cf 92       	push	r12
     4ce:	bf 92       	push	r11
     4d0:	af 92       	push	r10
     4d2:	9f 92       	push	r9
     4d4:	8f 92       	push	r8
     4d6:	7f 92       	push	r7
     4d8:	6f 92       	push	r6
     4da:	5f 92       	push	r5
     4dc:	4f 92       	push	r4
     4de:	3f 92       	push	r3
     4e0:	2f 92       	push	r2
     4e2:	1f 92       	push	r1
     4e4:	11 24       	eor	r1, r1
     4e6:	0f 92       	push	r0
     4e8:	a0 91 1a 01 	lds	r26, 0x011A	; 0x80011a <pCurrentTask>
     4ec:	b0 91 1b 01 	lds	r27, 0x011B	; 0x80011b <pCurrentTask+0x1>
     4f0:	0d b6       	in	r0, 0x3d	; 61
     4f2:	0d 92       	st	X+, r0
     4f4:	0e b6       	in	r0, 0x3e	; 62
     4f6:	0d 92       	st	X+, r0
	pCurrentTask = pNextTask;	//set current task to next task
     4f8:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <pNextTask>
     4fc:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <pNextTask+0x1>
     500:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <pCurrentTask+0x1>
     504:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <pCurrentTask>
	RESTORE_CONTEXT();		//restore context of new task
     508:	a0 91 1e 01 	lds	r26, 0x011E	; 0x80011e <pNextTask>
     50c:	b0 91 1f 01 	lds	r27, 0x011F	; 0x80011f <pNextTask+0x1>
     510:	cd 91       	ld	r28, X+
     512:	cd bf       	out	0x3d, r28	; 61
     514:	dd 91       	ld	r29, X+
     516:	de bf       	out	0x3e, r29	; 62
     518:	0f 90       	pop	r0
     51a:	1f 90       	pop	r1
     51c:	2f 90       	pop	r2
     51e:	3f 90       	pop	r3
     520:	4f 90       	pop	r4
     522:	5f 90       	pop	r5
     524:	6f 90       	pop	r6
     526:	7f 90       	pop	r7
     528:	8f 90       	pop	r8
     52a:	9f 90       	pop	r9
     52c:	af 90       	pop	r10
     52e:	bf 90       	pop	r11
     530:	cf 90       	pop	r12
     532:	df 90       	pop	r13
     534:	ef 90       	pop	r14
     536:	ff 90       	pop	r15
     538:	0f 91       	pop	r16
     53a:	1f 91       	pop	r17
     53c:	2f 91       	pop	r18
     53e:	3f 91       	pop	r19
     540:	4f 91       	pop	r20
     542:	5f 91       	pop	r21
     544:	6f 91       	pop	r22
     546:	7f 91       	pop	r23
     548:	8f 91       	pop	r24
     54a:	9f 91       	pop	r25
     54c:	af 91       	pop	r26
     54e:	bf 91       	pop	r27
     550:	cf 91       	pop	r28
     552:	df 91       	pop	r29
     554:	ef 91       	pop	r30
     556:	ff 91       	pop	r31
     558:	f7 fd       	sbrc	r31, 7
     55a:	03 c0       	rjmp	.+6      	; 0x562 <irqen>
     55c:	ff bf       	out	0x3f, r31	; 63
     55e:	ff 91       	pop	r31
     560:	08 95       	ret

00000562 <irqen>:
     562:	ff 77       	andi	r31, 0x7F	; 127
     564:	ff bf       	out	0x3f, r31	; 63
     566:	ff 91       	pop	r31
     568:	18 95       	reti

0000056a <ExitInterrupt>:
************************************************************************/

void ExitInterrupt(void)
{
	//decrement Interrupt level
	--InterruptCount;
     56a:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <InterruptCount>
     56e:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <InterruptCount+0x1>
     572:	01 97       	sbiw	r24, 0x01	; 1
     574:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <InterruptCount+0x1>
     578:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <InterruptCount>
	//don't swap if nested or
	//if multitasking is blocked
	if(!InterruptCount)	
     57c:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <InterruptCount>
     580:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <InterruptCount+0x1>
     584:	89 2b       	or	r24, r25
     586:	09 f0       	breq	.+2      	; 0x58a <ExitInterrupt+0x20>
     588:	60 c0       	rjmp	.+192    	; 0x64a <irqen+0x8>
	{
		//Update the time stamp in the current task
		pCurrentTask->TimeStamp = TStamp;
     58a:	40 91 1a 01 	lds	r20, 0x011A	; 0x80011a <pCurrentTask>
     58e:	50 91 1b 01 	lds	r21, 0x011B	; 0x80011b <pCurrentTask+0x1>
     592:	80 91 8a 01 	lds	r24, 0x018A	; 0x80018a <TStamp>
     596:	90 91 8b 01 	lds	r25, 0x018B	; 0x80018b <TStamp+0x1>
     59a:	fa 01       	movw	r30, r20
     59c:	95 87       	std	Z+13, r25	; 0x0d
     59e:	84 87       	std	Z+12, r24	; 0x0c
		//get the next task and put the current
		//task back into the priority queue
		Replace(&ActiveTasks,(void **)&pNextTask,pCurrentTask);
     5a0:	6e e1       	ldi	r22, 0x1E	; 30
     5a2:	71 e0       	ldi	r23, 0x01	; 1
     5a4:	80 e1       	ldi	r24, 0x10	; 16
     5a6:	91 e0       	ldi	r25, 0x01	; 1
     5a8:	0e 94 55 08 	call	0x10aa	; 0x10aa <Replace>
		//check to see if we got the same task back
		if(pNextTask != pCurrentTask)
     5ac:	e0 91 1e 01 	lds	r30, 0x011E	; 0x80011e <pNextTask>
     5b0:	f0 91 1f 01 	lds	r31, 0x011F	; 0x80011f <pNextTask+0x1>
     5b4:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <pCurrentTask>
     5b8:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <pCurrentTask+0x1>
     5bc:	e8 17       	cp	r30, r24
     5be:	f9 07       	cpc	r31, r25
     5c0:	09 f4       	brne	.+2      	; 0x5c4 <ExitInterrupt+0x5a>
     5c2:	43 c0       	rjmp	.+134    	; 0x64a <irqen+0x8>
		{
			//increment the swap counter
			pNextTask->TcbSwaps++;
     5c4:	86 85       	ldd	r24, Z+14	; 0x0e
     5c6:	97 85       	ldd	r25, Z+15	; 0x0f
     5c8:	01 96       	adiw	r24, 0x01	; 1
     5ca:	97 87       	std	Z+15, r25	; 0x0f
     5cc:	86 87       	std	Z+14, r24	; 0x0e
			// the size of the stack
			// ignore return address on
			// stack to 
			// Exit Interrupt
			//-----------------------------
			asm volatile (
     5ce:	9e b7       	in	r25, 0x3e	; 62
     5d0:	8d b7       	in	r24, 0x3d	; 61
     5d2:	02 96       	adiw	r24, 0x02	; 2
     5d4:	a0 91 1a 01 	lds	r26, 0x011A	; 0x80011a <pCurrentTask>
     5d8:	b0 91 1b 01 	lds	r27, 0x011B	; 0x80011b <pCurrentTask+0x1>
     5dc:	8d 93       	st	X+, r24
     5de:	9d 93       	st	X+, r25
			"lds	r26, pCurrentTask		\n\t"	//get address of current task
			"lds	r27, pCurrentTask + 1	\n\t"
			"st		x+, r24					\n\t"	//save stack pointer in TCB
			"st		x+, r25					\n\t"
			);
			pCurrentTask = pNextTask;	//update current task
     5e0:	f0 93 1b 01 	sts	0x011B, r31	; 0x80011b <pCurrentTask+0x1>
     5e4:	e0 93 1a 01 	sts	0x011A, r30	; 0x80011a <pCurrentTask>
			RESTORE_CONTEXT();		//restore next task context
     5e8:	a0 91 1e 01 	lds	r26, 0x011E	; 0x80011e <pNextTask>
     5ec:	b0 91 1f 01 	lds	r27, 0x011F	; 0x80011f <pNextTask+0x1>
     5f0:	cd 91       	ld	r28, X+
     5f2:	cd bf       	out	0x3d, r28	; 61
     5f4:	dd 91       	ld	r29, X+
     5f6:	de bf       	out	0x3e, r29	; 62
     5f8:	0f 90       	pop	r0
     5fa:	1f 90       	pop	r1
     5fc:	2f 90       	pop	r2
     5fe:	3f 90       	pop	r3
     600:	4f 90       	pop	r4
     602:	5f 90       	pop	r5
     604:	6f 90       	pop	r6
     606:	7f 90       	pop	r7
     608:	8f 90       	pop	r8
     60a:	9f 90       	pop	r9
     60c:	af 90       	pop	r10
     60e:	bf 90       	pop	r11
     610:	cf 90       	pop	r12
     612:	df 90       	pop	r13
     614:	ef 90       	pop	r14
     616:	ff 90       	pop	r15
     618:	0f 91       	pop	r16
     61a:	1f 91       	pop	r17
     61c:	2f 91       	pop	r18
     61e:	3f 91       	pop	r19
     620:	4f 91       	pop	r20
     622:	5f 91       	pop	r21
     624:	6f 91       	pop	r22
     626:	7f 91       	pop	r23
     628:	8f 91       	pop	r24
     62a:	9f 91       	pop	r25
     62c:	af 91       	pop	r26
     62e:	bf 91       	pop	r27
     630:	cf 91       	pop	r28
     632:	df 91       	pop	r29
     634:	ef 91       	pop	r30
     636:	ff 91       	pop	r31
     638:	f7 fd       	sbrc	r31, 7
     63a:	03 c0       	rjmp	.+6      	; 0x642 <irqen>
     63c:	ff bf       	out	0x3f, r31	; 63
     63e:	ff 91       	pop	r31
     640:	08 95       	ret

00000642 <irqen>:
     642:	ff 77       	andi	r31, 0x7F	; 127
     644:	ff bf       	out	0x3f, r31	; 63
     646:	ff 91       	pop	r31
     648:	18 95       	reti
     64a:	08 95       	ret

0000064c <EnterInterrupt>:
}

void EnterInterrupt(void)
{
	//Increment interrupt level
	++InterruptCount;
     64c:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <InterruptCount>
     650:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <InterruptCount+0x1>
     654:	01 96       	adiw	r24, 0x01	; 1
     656:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <InterruptCount+0x1>
     65a:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <InterruptCount>
     65e:	08 95       	ret

00000660 <IdleTask>:
		blocking object).
************************************************/
void IdleTask(void *arg) __attribute__((noreturn));
void IdleTask(void *arg)
{
	int DownBeatState = 0;
     660:	80 e0       	ldi	r24, 0x00	; 0
     662:	90 e0       	ldi	r25, 0x00	; 0
		}
		else
		{
			if(DownBeatState == 1)
			{
				DownBeatState = 0;
     664:	00 e0       	ldi	r16, 0x00	; 0
     666:	10 e0       	ldi	r17, 0x00	; 0
	{
		if(PORTD & BIT(PORTD_DOWNBEAT))
		{
			if(DownBeatState == 0)
			{
				DownBeatState = 1;
     668:	d1 e0       	ldi	r29, 0x01	; 1
     66a:	c0 e0       	ldi	r28, 0x00	; 0
void IdleTask(void *arg)
{
	int DownBeatState = 0;
	while(1)
	{
		if(PORTD & BIT(PORTD_DOWNBEAT))
     66c:	5c 9b       	sbis	0x0b, 4	; 11
     66e:	0b c0       	rjmp	.+22     	; 0x686 <IdleTask+0x26>
		{
			if(DownBeatState == 0)
     670:	00 97       	sbiw	r24, 0x00	; 0
     672:	e1 f7       	brne	.-8      	; 0x66c <IdleTask+0xc>
			{
				DownBeatState = 1;
				BQPut(&SeqMessage,MSG_DOWNBEAT_TRUE);
     674:	63 e0       	ldi	r22, 0x03	; 3
     676:	70 e0       	ldi	r23, 0x00	; 0
     678:	8a e5       	ldi	r24, 0x5A	; 90
     67a:	91 e0       	ldi	r25, 0x01	; 1
     67c:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <BQPut>
	{
		if(PORTD & BIT(PORTD_DOWNBEAT))
		{
			if(DownBeatState == 0)
			{
				DownBeatState = 1;
     680:	8d 2f       	mov	r24, r29
     682:	9c 2f       	mov	r25, r28
     684:	f3 cf       	rjmp	.-26     	; 0x66c <IdleTask+0xc>
				BQPut(&SeqMessage,MSG_DOWNBEAT_TRUE);
			}
		}
		else
		{
			if(DownBeatState == 1)
     686:	81 30       	cpi	r24, 0x01	; 1
     688:	91 05       	cpc	r25, r1
     68a:	81 f7       	brne	.-32     	; 0x66c <IdleTask+0xc>
			{
				DownBeatState = 0;
				BQPut(&SeqMessage,MSG_DOWNBEAT_FALSE);
     68c:	64 e0       	ldi	r22, 0x04	; 4
     68e:	70 e0       	ldi	r23, 0x00	; 0
     690:	8a e5       	ldi	r24, 0x5A	; 90
     692:	91 e0       	ldi	r25, 0x01	; 1
     694:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <BQPut>
		}
		else
		{
			if(DownBeatState == 1)
			{
				DownBeatState = 0;
     698:	80 2f       	mov	r24, r16
     69a:	91 2f       	mov	r25, r17
     69c:	e7 cf       	rjmp	.-50     	; 0x66c <IdleTask+0xc>

0000069e <__vector_1>:
*****************************************/

void INT0_vect() __attribute__((naked));
void INT0_vect()
{
	SAVE_IRQ();
     69e:	ff 93       	push	r31
     6a0:	ff b7       	in	r31, 0x3f	; 63
     6a2:	f0 68       	ori	r31, 0x80	; 128
     6a4:	ff 93       	push	r31
     6a6:	ef 93       	push	r30
     6a8:	df 93       	push	r29
     6aa:	cf 93       	push	r28
     6ac:	bf 93       	push	r27
     6ae:	af 93       	push	r26
     6b0:	9f 93       	push	r25
     6b2:	8f 93       	push	r24
     6b4:	7f 93       	push	r23
     6b6:	6f 93       	push	r22
     6b8:	5f 93       	push	r21
     6ba:	4f 93       	push	r20
     6bc:	3f 93       	push	r19
     6be:	2f 93       	push	r18
     6c0:	1f 93       	push	r17
     6c2:	0f 93       	push	r16
     6c4:	ff 92       	push	r15
     6c6:	ef 92       	push	r14
     6c8:	df 92       	push	r13
     6ca:	cf 92       	push	r12
     6cc:	bf 92       	push	r11
     6ce:	af 92       	push	r10
     6d0:	9f 92       	push	r9
     6d2:	8f 92       	push	r8
     6d4:	7f 92       	push	r7
     6d6:	6f 92       	push	r6
     6d8:	5f 92       	push	r5
     6da:	4f 92       	push	r4
     6dc:	3f 92       	push	r3
     6de:	2f 92       	push	r2
     6e0:	1f 92       	push	r1
     6e2:	11 24       	eor	r1, r1
     6e4:	0f 92       	push	r0
	EnterInterrupt();
     6e6:	0e 94 26 03 	call	0x64c	; 0x64c <EnterInterrupt>
	BQPut(&SeqMessage,MSG_CLOCK);
     6ea:	61 e0       	ldi	r22, 0x01	; 1
     6ec:	70 e0       	ldi	r23, 0x00	; 0
     6ee:	8a e5       	ldi	r24, 0x5A	; 90
     6f0:	91 e0       	ldi	r25, 0x01	; 1
     6f2:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <BQPut>
	ExitInterrupt();
     6f6:	0e 94 b5 02 	call	0x56a	; 0x56a <ExitInterrupt>
	RESTORE_IRQ();
     6fa:	0f 90       	pop	r0
     6fc:	1f 90       	pop	r1
     6fe:	2f 90       	pop	r2
     700:	3f 90       	pop	r3
     702:	4f 90       	pop	r4
     704:	5f 90       	pop	r5
     706:	6f 90       	pop	r6
     708:	7f 90       	pop	r7
     70a:	8f 90       	pop	r8
     70c:	9f 90       	pop	r9
     70e:	af 90       	pop	r10
     710:	bf 90       	pop	r11
     712:	cf 90       	pop	r12
     714:	df 90       	pop	r13
     716:	ef 90       	pop	r14
     718:	ff 90       	pop	r15
     71a:	0f 91       	pop	r16
     71c:	1f 91       	pop	r17
     71e:	2f 91       	pop	r18
     720:	3f 91       	pop	r19
     722:	4f 91       	pop	r20
     724:	5f 91       	pop	r21
     726:	6f 91       	pop	r22
     728:	7f 91       	pop	r23
     72a:	8f 91       	pop	r24
     72c:	9f 91       	pop	r25
     72e:	af 91       	pop	r26
     730:	bf 91       	pop	r27
     732:	cf 91       	pop	r28
     734:	df 91       	pop	r29
     736:	ef 91       	pop	r30
     738:	ff 91       	pop	r31
     73a:	ff 77       	andi	r31, 0x7F	; 127
     73c:	ff bf       	out	0x3f, r31	; 63
     73e:	ff 91       	pop	r31
     740:	18 95       	reti

00000742 <__vector_2>:
*****************************************/

void INT1_vect() __attribute__((naked));
void INT1_vect()
{
	SAVE_IRQ();
     742:	ff 93       	push	r31
     744:	ff b7       	in	r31, 0x3f	; 63
     746:	f0 68       	ori	r31, 0x80	; 128
     748:	ff 93       	push	r31
     74a:	ef 93       	push	r30
     74c:	df 93       	push	r29
     74e:	cf 93       	push	r28
     750:	bf 93       	push	r27
     752:	af 93       	push	r26
     754:	9f 93       	push	r25
     756:	8f 93       	push	r24
     758:	7f 93       	push	r23
     75a:	6f 93       	push	r22
     75c:	5f 93       	push	r21
     75e:	4f 93       	push	r20
     760:	3f 93       	push	r19
     762:	2f 93       	push	r18
     764:	1f 93       	push	r17
     766:	0f 93       	push	r16
     768:	ff 92       	push	r15
     76a:	ef 92       	push	r14
     76c:	df 92       	push	r13
     76e:	cf 92       	push	r12
     770:	bf 92       	push	r11
     772:	af 92       	push	r10
     774:	9f 92       	push	r9
     776:	8f 92       	push	r8
     778:	7f 92       	push	r7
     77a:	6f 92       	push	r6
     77c:	5f 92       	push	r5
     77e:	4f 92       	push	r4
     780:	3f 92       	push	r3
     782:	2f 92       	push	r2
     784:	1f 92       	push	r1
     786:	11 24       	eor	r1, r1
     788:	0f 92       	push	r0
	EnterInterrupt();
     78a:	0e 94 26 03 	call	0x64c	; 0x64c <EnterInterrupt>
	BQPut(&SeqMessage,MSG_TRIG);
     78e:	62 e0       	ldi	r22, 0x02	; 2
     790:	70 e0       	ldi	r23, 0x00	; 0
     792:	8a e5       	ldi	r24, 0x5A	; 90
     794:	91 e0       	ldi	r25, 0x01	; 1
     796:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <BQPut>
	ExitInterrupt();
     79a:	0e 94 b5 02 	call	0x56a	; 0x56a <ExitInterrupt>
	RESTORE_IRQ();
     79e:	0f 90       	pop	r0
     7a0:	1f 90       	pop	r1
     7a2:	2f 90       	pop	r2
     7a4:	3f 90       	pop	r3
     7a6:	4f 90       	pop	r4
     7a8:	5f 90       	pop	r5
     7aa:	6f 90       	pop	r6
     7ac:	7f 90       	pop	r7
     7ae:	8f 90       	pop	r8
     7b0:	9f 90       	pop	r9
     7b2:	af 90       	pop	r10
     7b4:	bf 90       	pop	r11
     7b6:	cf 90       	pop	r12
     7b8:	df 90       	pop	r13
     7ba:	ef 90       	pop	r14
     7bc:	ff 90       	pop	r15
     7be:	0f 91       	pop	r16
     7c0:	1f 91       	pop	r17
     7c2:	2f 91       	pop	r18
     7c4:	3f 91       	pop	r19
     7c6:	4f 91       	pop	r20
     7c8:	5f 91       	pop	r21
     7ca:	6f 91       	pop	r22
     7cc:	7f 91       	pop	r23
     7ce:	8f 91       	pop	r24
     7d0:	9f 91       	pop	r25
     7d2:	af 91       	pop	r26
     7d4:	bf 91       	pop	r27
     7d6:	cf 91       	pop	r28
     7d8:	df 91       	pop	r29
     7da:	ef 91       	pop	r30
     7dc:	ff 91       	pop	r31
     7de:	ff 77       	andi	r31, 0x7F	; 127
     7e0:	ff bf       	out	0x3f, r31	; 63
     7e2:	ff 91       	pop	r31
     7e4:	18 95       	reti

000007e6 <GetGateEnable>:

int GetGateEnable(int i)
{
	int rV = 0;

	switch(i)
     7e6:	88 30       	cpi	r24, 0x08	; 8
     7e8:	91 05       	cpc	r25, r1
     7ea:	a8 f5       	brcc	.+106    	; 0x856 <__DATA_REGION_LENGTH__+0x56>
     7ec:	fc 01       	movw	r30, r24
     7ee:	ec 5c       	subi	r30, 0xCC	; 204
     7f0:	ff 4f       	sbci	r31, 0xFF	; 255
     7f2:	0c 94 0f 09 	jmp	0x121e	; 0x121e <__tablejump2__>
	{
		case 0:
			if(PORTC & BIT(PORTC_SWITCH0))
     7f6:	88 b1       	in	r24, 0x08	; 8
	RESTORE_IRQ();
}

int GetGateEnable(int i)
{
	int rV = 0;
     7f8:	81 70       	andi	r24, 0x01	; 1
     7fa:	90 e0       	ldi	r25, 0x00	; 0
     7fc:	08 95       	ret
		case 0:
			if(PORTC & BIT(PORTC_SWITCH0))
				rV = 1;
			break;
		case 1:
			if(PORTC & BIT(PORTC_SWITCH1))
     7fe:	88 b1       	in	r24, 0x08	; 8
	RESTORE_IRQ();
}

int GetGateEnable(int i)
{
	int rV = 0;
     800:	86 95       	lsr	r24
     802:	81 70       	andi	r24, 0x01	; 1
     804:	90 e0       	ldi	r25, 0x00	; 0
     806:	08 95       	ret
		case 1:
			if(PORTC & BIT(PORTC_SWITCH1))
				rV = 1;
			break;
		case 2:
			if(PORTC & BIT(PORTC_SWITCH2))
     808:	88 b1       	in	r24, 0x08	; 8
	RESTORE_IRQ();
}

int GetGateEnable(int i)
{
	int rV = 0;
     80a:	82 fb       	bst	r24, 2
     80c:	88 27       	eor	r24, r24
     80e:	80 f9       	bld	r24, 0
     810:	90 e0       	ldi	r25, 0x00	; 0
     812:	08 95       	ret
		case 2:
			if(PORTC & BIT(PORTC_SWITCH2))
				rV = 1;
			break;
		case 3:
			if(PORTC & BIT(PORTC_SWITCH3))
     814:	88 b1       	in	r24, 0x08	; 8
	RESTORE_IRQ();
}

int GetGateEnable(int i)
{
	int rV = 0;
     816:	83 fb       	bst	r24, 3
     818:	88 27       	eor	r24, r24
     81a:	80 f9       	bld	r24, 0
     81c:	90 e0       	ldi	r25, 0x00	; 0
     81e:	08 95       	ret
		case 3:
			if(PORTC & BIT(PORTC_SWITCH3))
				rV = 1;
			break;
		case 4:
			if(PORTC & BIT(PORTC_SWITCH4))
     820:	88 b1       	in	r24, 0x08	; 8
	RESTORE_IRQ();
}

int GetGateEnable(int i)
{
	int rV = 0;
     822:	82 95       	swap	r24
     824:	81 70       	andi	r24, 0x01	; 1
     826:	90 e0       	ldi	r25, 0x00	; 0
     828:	08 95       	ret
		case 4:
			if(PORTC & BIT(PORTC_SWITCH4))
				rV = 1;
			break;
		case 5:
			if(PORTC & BIT(PORTC_SWITCH5))
     82a:	88 b1       	in	r24, 0x08	; 8
	RESTORE_IRQ();
}

int GetGateEnable(int i)
{
	int rV = 0;
     82c:	85 fb       	bst	r24, 5
     82e:	88 27       	eor	r24, r24
     830:	80 f9       	bld	r24, 0
     832:	90 e0       	ldi	r25, 0x00	; 0
     834:	08 95       	ret
		case 5:
			if(PORTC & BIT(PORTC_SWITCH5))
				rV = 1;
			break;
		case 6:
			if(PORTD & BIT(PORTD_SWITCH6))
     836:	8b b1       	in	r24, 0x0b	; 11
	RESTORE_IRQ();
}

int GetGateEnable(int i)
{
	int rV = 0;
     838:	86 fb       	bst	r24, 6
     83a:	88 27       	eor	r24, r24
     83c:	80 f9       	bld	r24, 0
     83e:	90 e0       	ldi	r25, 0x00	; 0
     840:	08 95       	ret
		case 6:
			if(PORTD & BIT(PORTD_SWITCH6))
				rV = 1;
			break;
		case 7:
			if(PORTD & BIT(PORTD_SWITCH7))
     842:	8b b1       	in	r24, 0x0b	; 11
	RESTORE_IRQ();
}

int GetGateEnable(int i)
{
	int rV = 0;
     844:	08 2e       	mov	r0, r24
     846:	00 0c       	add	r0, r0
     848:	99 0b       	sbc	r25, r25
     84a:	89 2f       	mov	r24, r25
     84c:	88 1f       	adc	r24, r24
     84e:	88 27       	eor	r24, r24
     850:	88 1f       	adc	r24, r24
     852:	90 e0       	ldi	r25, 0x00	; 0
     854:	08 95       	ret
     856:	80 e0       	ldi	r24, 0x00	; 0
     858:	90 e0       	ldi	r25, 0x00	; 0
			if(PORTD & BIT(PORTD_SWITCH7))
				rV = 1;
			break;
	}
	return rV;
}
     85a:	08 95       	ret

0000085c <SetArmed>:

void SetArmed(int v)
{
	if(v)
     85c:	89 2b       	or	r24, r25
     85e:	11 f0       	breq	.+4      	; 0x864 <SetArmed+0x8>
		PORTD |= BIT(PORTD_ARM);
     860:	5d 9a       	sbi	0x0b, 5	; 11
     862:	08 95       	ret
	else
		PORTD &= ~BIT(PORTD_ARM);
     864:	5d 98       	cbi	0x0b, 5	; 11
     866:	08 95       	ret

00000868 <SetGate>:
}

void SetGate(int v)
{
	if(v)
     868:	89 2b       	or	r24, r25
     86a:	11 f0       	breq	.+4      	; 0x870 <SetGate+0x8>
		PORTD |= BIT(PORTD_GATE);
     86c:	58 9a       	sbi	0x0b, 0	; 11
     86e:	08 95       	ret
	else
		PORTD &= ~BIT(PORTD_GATE);
     870:	58 98       	cbi	0x0b, 0	; 11
     872:	08 95       	ret

00000874 <SetRun>:
}

void SetRun(int v)
{
	if(v)
     874:	89 2b       	or	r24, r25
     876:	11 f0       	breq	.+4      	; 0x87c <SetRun+0x8>
		PORTD |= BIT(PORTD_RUN);
     878:	59 9a       	sbi	0x0b, 1	; 11
     87a:	08 95       	ret
	else
		PORTD &= ~BIT(PORTD_RUN);
     87c:	59 98       	cbi	0x0b, 1	; 11
     87e:	08 95       	ret

00000880 <SetStep>:
}

void SetStep(int step)
{
	PORTB &= ~(BIT(PORTB_STEPSEL2) | BIT(PORTB_STEPSEL1) | BIT(PORTB_STEPSEL0));
     880:	95 b1       	in	r25, 0x05	; 5
     882:	98 7f       	andi	r25, 0xF8	; 248
     884:	95 b9       	out	0x05, r25	; 5
	PORTB |= step & (BIT(PORTB_STEPSEL2) | BIT(PORTB_STEPSEL1) | BIT(PORTB_STEPSEL0));
     886:	95 b1       	in	r25, 0x05	; 5
     888:	87 70       	andi	r24, 0x07	; 7
     88a:	98 2b       	or	r25, r24
     88c:	95 b9       	out	0x05, r25	; 5
     88e:	08 95       	ret

00000890 <SeqTask>:
	int Armed = 0;
	int SeqCount = 0;
	int Run = 0;
	int Gate = 0;

	SetGate(Gate);
     890:	80 e0       	ldi	r24, 0x00	; 0
     892:	90 e0       	ldi	r25, 0x00	; 0
     894:	0e 94 34 04 	call	0x868	; 0x868 <SetGate>
	SetRun(Run);
     898:	80 e0       	ldi	r24, 0x00	; 0
     89a:	90 e0       	ldi	r25, 0x00	; 0
     89c:	0e 94 3a 04 	call	0x874	; 0x874 <SetRun>
	SetArmed(Armed);
     8a0:	80 e0       	ldi	r24, 0x00	; 0
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	0e 94 2e 04 	call	0x85c	; 0x85c <SetArmed>
	SetStep(SeqCount);
     8a8:	80 e0       	ldi	r24, 0x00	; 0
     8aa:	90 e0       	ldi	r25, 0x00	; 0
     8ac:	0e 94 40 04 	call	0x880	; 0x880 <SetStep>
{
	int c;
	int DownBeat = 0;
	int Armed = 0;
	int SeqCount = 0;
	int Run = 0;
     8b0:	c1 2c       	mov	r12, r1
     8b2:	d1 2c       	mov	r13, r1
void SeqTask(void *arg)
{
	int c;
	int DownBeat = 0;
	int Armed = 0;
	int SeqCount = 0;
     8b4:	a1 2c       	mov	r10, r1
     8b6:	b1 2c       	mov	r11, r1
void SeqTask(void *arg) __attribute__((noreturn));
void SeqTask(void *arg)
{
	int c;
	int DownBeat = 0;
	int Armed = 0;
     8b8:	e1 2c       	mov	r14, r1
     8ba:	f1 2c       	mov	r15, r1

void SeqTask(void *arg) __attribute__((noreturn));
void SeqTask(void *arg)
{
	int c;
	int DownBeat = 0;
     8bc:	c0 e0       	ldi	r28, 0x00	; 0
     8be:	d0 e0       	ldi	r29, 0x00	; 0
				break;
			case MSG_DOWNBEAT_TRUE:
				DownBeat = 1;
				break;
			case MSG_DOWNBEAT_FALSE:
				DownBeat = 0;
     8c0:	00 e0       	ldi	r16, 0x00	; 0
     8c2:	10 e0       	ldi	r17, 0x00	; 0
	SetRun(Run);
	SetArmed(Armed);
	SetStep(SeqCount);
	while(1)
	{
		c = BQget(&SeqMessage);
     8c4:	8a e5       	ldi	r24, 0x5A	; 90
     8c6:	91 e0       	ldi	r25, 0x01	; 1
     8c8:	0e 94 71 00 	call	0xe2	; 0xe2 <BQget>
		switch(c)
     8cc:	82 30       	cpi	r24, 0x02	; 2
     8ce:	91 05       	cpc	r25, r1
     8d0:	09 f4       	brne	.+2      	; 0x8d4 <SeqTask+0x44>
     8d2:	76 c0       	rjmp	.+236    	; 0x9c0 <__stack+0xc1>
     8d4:	1c f4       	brge	.+6      	; 0x8dc <SeqTask+0x4c>
     8d6:	01 97       	sbiw	r24, 0x01	; 1
     8d8:	59 f0       	breq	.+22     	; 0x8f0 <SeqTask+0x60>
     8da:	f4 cf       	rjmp	.-24     	; 0x8c4 <SeqTask+0x34>
     8dc:	83 30       	cpi	r24, 0x03	; 3
     8de:	91 05       	cpc	r25, r1
     8e0:	21 f0       	breq	.+8      	; 0x8ea <SeqTask+0x5a>
     8e2:	04 97       	sbiw	r24, 0x04	; 4
     8e4:	09 f4       	brne	.+2      	; 0x8e8 <SeqTask+0x58>
     8e6:	74 c0       	rjmp	.+232    	; 0x9d0 <__stack+0xd1>
     8e8:	ed cf       	rjmp	.-38     	; 0x8c4 <SeqTask+0x34>
			case MSG_TRIG:
				Armed = 1;
				SetArmed(Armed);
				break;
			case MSG_DOWNBEAT_TRUE:
				DownBeat = 1;
     8ea:	c1 e0       	ldi	r28, 0x01	; 1
     8ec:	d0 e0       	ldi	r29, 0x00	; 0
     8ee:	ea cf       	rjmp	.-44     	; 0x8c4 <SeqTask+0x34>
	{
		c = BQget(&SeqMessage);
		switch(c)
		{
			case MSG_CLOCK:
				if(Armed)
     8f0:	e1 14       	cp	r14, r1
     8f2:	f1 04       	cpc	r15, r1
     8f4:	51 f1       	breq	.+84     	; 0x94a <__stack+0x4b>
				{
					Armed = 0;
					Run = 1;
					SetArmed(Armed);
     8f6:	80 2f       	mov	r24, r16
     8f8:	91 2f       	mov	r25, r17
     8fa:	0e 94 2e 04 	call	0x85c	; 0x85c <SetArmed>
					SetRun(Run);
     8fe:	81 e0       	ldi	r24, 0x01	; 1
     900:	90 e0       	ldi	r25, 0x00	; 0
     902:	0e 94 3a 04 	call	0x874	; 0x874 <SetRun>
					SeqCount = 0;
					SetStep(SeqCount);
     906:	80 2f       	mov	r24, r16
     908:	91 2f       	mov	r25, r17
     90a:	0e 94 40 04 	call	0x880	; 0x880 <SetStep>
					if(GetGateEnable(SeqCount))
     90e:	80 2f       	mov	r24, r16
     910:	91 2f       	mov	r25, r17
     912:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <GetGateEnable>
     916:	89 2b       	or	r24, r25
     918:	61 f0       	breq	.+24     	; 0x932 <__stack+0x33>
						SetGate(1);
     91a:	81 e0       	ldi	r24, 0x01	; 1
     91c:	90 e0       	ldi	r25, 0x00	; 0
     91e:	0e 94 34 04 	call	0x868	; 0x868 <SetGate>
		{
			case MSG_CLOCK:
				if(Armed)
				{
					Armed = 0;
					Run = 1;
     922:	cc 24       	eor	r12, r12
     924:	c3 94       	inc	r12
     926:	d1 2c       	mov	r13, r1
					SetArmed(Armed);
					SetRun(Run);
					SeqCount = 0;
     928:	a1 2c       	mov	r10, r1
     92a:	b1 2c       	mov	r11, r1
		switch(c)
		{
			case MSG_CLOCK:
				if(Armed)
				{
					Armed = 0;
     92c:	e0 2e       	mov	r14, r16
     92e:	f1 2e       	mov	r15, r17
     930:	c9 cf       	rjmp	.-110    	; 0x8c4 <SeqTask+0x34>
					SeqCount = 0;
					SetStep(SeqCount);
					if(GetGateEnable(SeqCount))
						SetGate(1);
					else
						SetGate(0);
     932:	80 2f       	mov	r24, r16
     934:	91 2f       	mov	r25, r17
     936:	0e 94 34 04 	call	0x868	; 0x868 <SetGate>
		{
			case MSG_CLOCK:
				if(Armed)
				{
					Armed = 0;
					Run = 1;
     93a:	cc 24       	eor	r12, r12
     93c:	c3 94       	inc	r12
     93e:	d1 2c       	mov	r13, r1
					SetArmed(Armed);
					SetRun(Run);
					SeqCount = 0;
     940:	a1 2c       	mov	r10, r1
     942:	b1 2c       	mov	r11, r1
		switch(c)
		{
			case MSG_CLOCK:
				if(Armed)
				{
					Armed = 0;
     944:	e0 2e       	mov	r14, r16
     946:	f1 2e       	mov	r15, r17
     948:	bd cf       	rjmp	.-134    	; 0x8c4 <SeqTask+0x34>
					if(GetGateEnable(SeqCount))
						SetGate(1);
					else
						SetGate(0);
				}
				else if (Run)
     94a:	c1 14       	cp	r12, r1
     94c:	d1 04       	cpc	r13, r1
     94e:	09 f4       	brne	.+2      	; 0x952 <__stack+0x53>
     950:	b9 cf       	rjmp	.-142    	; 0x8c4 <SeqTask+0x34>
				{
					SeqCount += 1;
					if(DownBeat)
     952:	20 97       	sbiw	r28, 0x00	; 0
     954:	89 f0       	breq	.+34     	; 0x978 <__stack+0x79>
					{
						SeqCount = 0;
						Run = 0;
						Gate = 0;
						SetRun(Run);
     956:	80 2f       	mov	r24, r16
     958:	91 2f       	mov	r25, r17
     95a:	0e 94 3a 04 	call	0x874	; 0x874 <SetRun>
						SetGate(Gate);
     95e:	80 2f       	mov	r24, r16
     960:	91 2f       	mov	r25, r17
     962:	0e 94 34 04 	call	0x868	; 0x868 <SetGate>
						SetStep(SeqCount);
     966:	80 2f       	mov	r24, r16
     968:	91 2f       	mov	r25, r17
     96a:	0e 94 40 04 	call	0x880	; 0x880 <SetStep>
				{
					SeqCount += 1;
					if(DownBeat)
					{
						SeqCount = 0;
						Run = 0;
     96e:	c0 2e       	mov	r12, r16
     970:	d1 2e       	mov	r13, r17
				else if (Run)
				{
					SeqCount += 1;
					if(DownBeat)
					{
						SeqCount = 0;
     972:	a1 2c       	mov	r10, r1
     974:	b1 2c       	mov	r11, r1
     976:	a6 cf       	rjmp	.-180    	; 0x8c4 <SeqTask+0x34>
					else
						SetGate(0);
				}
				else if (Run)
				{
					SeqCount += 1;
     978:	8f ef       	ldi	r24, 0xFF	; 255
     97a:	a8 1a       	sub	r10, r24
     97c:	b8 0a       	sbc	r11, r24
						Gate = 0;
						SetRun(Run);
						SetGate(Gate);
						SetStep(SeqCount);
					}
					else if(SeqCount < 8)
     97e:	88 e0       	ldi	r24, 0x08	; 8
     980:	a8 16       	cp	r10, r24
     982:	b1 04       	cpc	r11, r1
     984:	94 f4       	brge	.+36     	; 0x9aa <__stack+0xab>
					{
						SetStep(SeqCount);
     986:	c5 01       	movw	r24, r10
     988:	0e 94 40 04 	call	0x880	; 0x880 <SetStep>
						if(GetGateEnable(SeqCount))
     98c:	c5 01       	movw	r24, r10
     98e:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <GetGateEnable>
     992:	89 2b       	or	r24, r25
     994:	29 f0       	breq	.+10     	; 0x9a0 <__stack+0xa1>
							SetGate(1);
     996:	81 e0       	ldi	r24, 0x01	; 1
     998:	90 e0       	ldi	r25, 0x00	; 0
     99a:	0e 94 34 04 	call	0x868	; 0x868 <SetGate>
     99e:	92 cf       	rjmp	.-220    	; 0x8c4 <SeqTask+0x34>
						else
							SetGate(0);
     9a0:	80 2f       	mov	r24, r16
     9a2:	91 2f       	mov	r25, r17
     9a4:	0e 94 34 04 	call	0x868	; 0x868 <SetGate>
     9a8:	8d cf       	rjmp	.-230    	; 0x8c4 <SeqTask+0x34>
					}
					else
					{
						Run = 0;
						Gate = 0;
						SetGate(Gate);
     9aa:	80 2f       	mov	r24, r16
     9ac:	91 2f       	mov	r25, r17
     9ae:	0e 94 34 04 	call	0x868	; 0x868 <SetGate>
						SetRun(Run);
     9b2:	80 2f       	mov	r24, r16
     9b4:	91 2f       	mov	r25, r17
     9b6:	0e 94 3a 04 	call	0x874	; 0x874 <SetRun>
						else
							SetGate(0);
					}
					else
					{
						Run = 0;
     9ba:	c0 2e       	mov	r12, r16
     9bc:	d1 2e       	mov	r13, r17
     9be:	82 cf       	rjmp	.-252    	; 0x8c4 <SeqTask+0x34>
					}
				}
				break;
			case MSG_TRIG:
				Armed = 1;
				SetArmed(Armed);
     9c0:	81 e0       	ldi	r24, 0x01	; 1
     9c2:	90 e0       	ldi	r25, 0x00	; 0
     9c4:	0e 94 2e 04 	call	0x85c	; 0x85c <SetArmed>
						SetRun(Run);
					}
				}
				break;
			case MSG_TRIG:
				Armed = 1;
     9c8:	ee 24       	eor	r14, r14
     9ca:	e3 94       	inc	r14
     9cc:	f1 2c       	mov	r15, r1
				SetArmed(Armed);
				break;
     9ce:	7a cf       	rjmp	.-268    	; 0x8c4 <SeqTask+0x34>
			case MSG_DOWNBEAT_TRUE:
				DownBeat = 1;
				break;
			case MSG_DOWNBEAT_FALSE:
				DownBeat = 0;
     9d0:	c0 2f       	mov	r28, r16
     9d2:	d1 2f       	mov	r29, r17
				break;
     9d4:	77 cf       	rjmp	.-274    	; 0x8c4 <SeqTask+0x34>

000009d6 <main>:
	}
}

int main(void)
{
	OSInit();
     9d6:	0e 94 56 06 	call	0xcac	; 0xcac <OSInit>
	OS_InitMalloc(0,0);
     9da:	60 e0       	ldi	r22, 0x00	; 0
     9dc:	70 e0       	ldi	r23, 0x00	; 0
     9de:	80 e0       	ldi	r24, 0x00	; 0
     9e0:	90 e0       	ldi	r25, 0x00	; 0
     9e2:	0e 94 18 06 	call	0xc30	; 0xc30 <OS_InitMalloc>
	CreateTask(&TIdleTask,IdleTask,128,1,NULL,0);
     9e6:	e1 2c       	mov	r14, r1
     9e8:	f1 2c       	mov	r15, r1
     9ea:	00 e0       	ldi	r16, 0x00	; 0
     9ec:	10 e0       	ldi	r17, 0x00	; 0
     9ee:	21 e0       	ldi	r18, 0x01	; 1
     9f0:	30 e0       	ldi	r19, 0x00	; 0
     9f2:	40 e8       	ldi	r20, 0x80	; 128
     9f4:	50 e0       	ldi	r21, 0x00	; 0
     9f6:	60 e3       	ldi	r22, 0x30	; 48
     9f8:	73 e0       	ldi	r23, 0x03	; 3
     9fa:	8a e2       	ldi	r24, 0x2A	; 42
     9fc:	91 e0       	ldi	r25, 0x01	; 1
     9fe:	0e 94 8a 01 	call	0x314	; 0x314 <CreateTask>
	Insert(&ActiveTasks,&TIdleTask);
     a02:	6a e2       	ldi	r22, 0x2A	; 42
     a04:	71 e0       	ldi	r23, 0x01	; 1
     a06:	80 e1       	ldi	r24, 0x10	; 16
     a08:	91 e0       	ldi	r25, 0x01	; 1
     a0a:	0e 94 be 07 	call	0xf7c	; 0xf7c <Insert>
	CreateTask(&TSeqTask,SeqTask,128,10,NULL,0);
     a0e:	2a e0       	ldi	r18, 0x0A	; 10
     a10:	30 e0       	ldi	r19, 0x00	; 0
     a12:	40 e8       	ldi	r20, 0x80	; 128
     a14:	50 e0       	ldi	r21, 0x00	; 0
     a16:	68 e4       	ldi	r22, 0x48	; 72
     a18:	74 e0       	ldi	r23, 0x04	; 4
     a1a:	82 e4       	ldi	r24, 0x42	; 66
     a1c:	91 e0       	ldi	r25, 0x01	; 1
     a1e:	0e 94 8a 01 	call	0x314	; 0x314 <CreateTask>
	Insert(&ActiveTasks,&TSeqTask);
     a22:	62 e4       	ldi	r22, 0x42	; 66
     a24:	71 e0       	ldi	r23, 0x01	; 1
     a26:	80 e1       	ldi	r24, 0x10	; 16
     a28:	91 e0       	ldi	r25, 0x01	; 1
     a2a:	0e 94 be 07 	call	0xf7c	; 0xf7c <Insert>
	CreateBQ(&SeqMessage,MsgBuff,8);
     a2e:	48 e0       	ldi	r20, 0x08	; 8
     a30:	50 e0       	ldi	r21, 0x00	; 0
     a32:	62 e2       	ldi	r22, 0x22	; 34
     a34:	71 e0       	ldi	r23, 0x01	; 1
     a36:	8a e5       	ldi	r24, 0x5A	; 90
     a38:	91 e0       	ldi	r25, 0x01	; 1
     a3a:	0e 94 63 00 	call	0xc6	; 0xc6 <CreateBQ>
	StartOS();
     a3e:	0e 94 a5 08 	call	0x114a	; 0x114a <StartOS>
     a42:	ff cf       	rjmp	.-2      	; 0xa42 <main+0x6c>

00000a44 <malloc>:
		/* lower junk adjacent, merge */
		fp2->sz += fpnew->sz + sizeof(size_t);
		fp2->nx = fpnew->nx;
	}
	PostSemaphore(&MallocBlocker,0);
}
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	cf 93       	push	r28
     a4e:	df 93       	push	r29
     a50:	8c 01       	movw	r16, r24
     a52:	60 e0       	ldi	r22, 0x00	; 0
     a54:	70 e0       	ldi	r23, 0x00	; 0
     a56:	88 e6       	ldi	r24, 0x68	; 104
     a58:	91 e0       	ldi	r25, 0x01	; 1
     a5a:	0e 94 5f 06 	call	0xcbe	; 0xcbe <PendSemaphore>
     a5e:	02 30       	cpi	r16, 0x02	; 2
     a60:	11 05       	cpc	r17, r1
     a62:	10 f4       	brcc	.+4      	; 0xa68 <malloc+0x24>
     a64:	02 e0       	ldi	r16, 0x02	; 2
     a66:	10 e0       	ldi	r17, 0x00	; 0
     a68:	a0 91 88 01 	lds	r26, 0x0188	; 0x800188 <__flp>
     a6c:	b0 91 89 01 	lds	r27, 0x0189	; 0x800189 <__flp+0x1>
     a70:	10 97       	sbiw	r26, 0x00	; 0
     a72:	09 f4       	brne	.+2      	; 0xa76 <malloc+0x32>
     a74:	86 c0       	rjmp	.+268    	; 0xb82 <malloc+0x13e>
     a76:	4d 91       	ld	r20, X+
     a78:	5c 91       	ld	r21, X
     a7a:	11 97       	sbiw	r26, 0x01	; 1
     a7c:	04 17       	cp	r16, r20
     a7e:	15 07       	cpc	r17, r21
     a80:	91 f0       	breq	.+36     	; 0xaa6 <malloc+0x62>
     a82:	ca 01       	movw	r24, r20
     a84:	fd 01       	movw	r30, r26
     a86:	20 e0       	ldi	r18, 0x00	; 0
     a88:	30 e0       	ldi	r19, 0x00	; 0
     a8a:	1f c0       	rjmp	.+62     	; 0xaca <malloc+0x86>
     a8c:	88 81       	ld	r24, Y
     a8e:	99 81       	ldd	r25, Y+1	; 0x01
     a90:	08 17       	cp	r16, r24
     a92:	19 07       	cpc	r17, r25
     a94:	c9 f4       	brne	.+50     	; 0xac8 <malloc+0x84>
     a96:	30 97       	sbiw	r30, 0x00	; 0
     a98:	29 f0       	breq	.+10     	; 0xaa4 <malloc+0x60>
     a9a:	8a 81       	ldd	r24, Y+2	; 0x02
     a9c:	9b 81       	ldd	r25, Y+3	; 0x03
     a9e:	93 83       	std	Z+3, r25	; 0x03
     aa0:	82 83       	std	Z+2, r24	; 0x02
     aa2:	0a c0       	rjmp	.+20     	; 0xab8 <malloc+0x74>
     aa4:	de 01       	movw	r26, r28
     aa6:	12 96       	adiw	r26, 0x02	; 2
     aa8:	8d 91       	ld	r24, X+
     aaa:	9c 91       	ld	r25, X
     aac:	13 97       	sbiw	r26, 0x03	; 3
     aae:	90 93 89 01 	sts	0x0189, r25	; 0x800189 <__flp+0x1>
     ab2:	80 93 88 01 	sts	0x0188, r24	; 0x800188 <__flp>
     ab6:	ed 01       	movw	r28, r26
     ab8:	60 e0       	ldi	r22, 0x00	; 0
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	88 e6       	ldi	r24, 0x68	; 104
     abe:	91 e0       	ldi	r25, 0x01	; 1
     ac0:	0e 94 cc 06 	call	0xd98	; 0xd98 <PostSemaphore>
     ac4:	22 96       	adiw	r28, 0x02	; 2
     ac6:	ac c0       	rjmp	.+344    	; 0xc20 <malloc+0x1dc>
     ac8:	fe 01       	movw	r30, r28
     aca:	08 17       	cp	r16, r24
     acc:	19 07       	cpc	r17, r25
     ace:	48 f4       	brcc	.+18     	; 0xae2 <malloc+0x9e>
     ad0:	21 15       	cp	r18, r1
     ad2:	31 05       	cpc	r19, r1
     ad4:	29 f0       	breq	.+10     	; 0xae0 <malloc+0x9c>
     ad6:	82 17       	cp	r24, r18
     ad8:	93 07       	cpc	r25, r19
     ada:	18 f4       	brcc	.+6      	; 0xae2 <malloc+0x9e>
     adc:	9c 01       	movw	r18, r24
     ade:	01 c0       	rjmp	.+2      	; 0xae2 <malloc+0x9e>
     ae0:	9c 01       	movw	r18, r24
     ae2:	c2 81       	ldd	r28, Z+2	; 0x02
     ae4:	d3 81       	ldd	r29, Z+3	; 0x03
     ae6:	20 97       	sbiw	r28, 0x00	; 0
     ae8:	89 f6       	brne	.-94     	; 0xa8c <malloc+0x48>
     aea:	21 15       	cp	r18, r1
     aec:	31 05       	cpc	r19, r1
     aee:	09 f4       	brne	.+2      	; 0xaf2 <malloc+0xae>
     af0:	48 c0       	rjmp	.+144    	; 0xb82 <malloc+0x13e>
     af2:	c9 01       	movw	r24, r18
     af4:	80 1b       	sub	r24, r16
     af6:	91 0b       	sbc	r25, r17
     af8:	04 97       	sbiw	r24, 0x04	; 4
     afa:	08 f4       	brcc	.+2      	; 0xafe <malloc+0xba>
     afc:	8b c0       	rjmp	.+278    	; 0xc14 <malloc+0x1d0>
     afe:	8b c0       	rjmp	.+278    	; 0xc16 <malloc+0x1d2>
     b00:	f7 01       	movw	r30, r14
     b02:	80 81       	ld	r24, Z
     b04:	91 81       	ldd	r25, Z+1	; 0x01
     b06:	28 17       	cp	r18, r24
     b08:	39 07       	cpc	r19, r25
     b0a:	91 f5       	brne	.+100    	; 0xb70 <malloc+0x12c>
     b0c:	20 17       	cp	r18, r16
     b0e:	31 07       	cpc	r19, r17
     b10:	e1 f4       	brne	.+56     	; 0xb4a <malloc+0x106>
     b12:	10 97       	sbiw	r26, 0x00	; 0
     b14:	39 f0       	breq	.+14     	; 0xb24 <malloc+0xe0>
     b16:	82 81       	ldd	r24, Z+2	; 0x02
     b18:	93 81       	ldd	r25, Z+3	; 0x03
     b1a:	13 96       	adiw	r26, 0x03	; 3
     b1c:	9c 93       	st	X, r25
     b1e:	8e 93       	st	-X, r24
     b20:	12 97       	sbiw	r26, 0x02	; 2
     b22:	0a c0       	rjmp	.+20     	; 0xb38 <malloc+0xf4>
     b24:	d7 01       	movw	r26, r14
     b26:	12 96       	adiw	r26, 0x02	; 2
     b28:	8d 91       	ld	r24, X+
     b2a:	9c 91       	ld	r25, X
     b2c:	13 97       	sbiw	r26, 0x03	; 3
     b2e:	90 93 89 01 	sts	0x0189, r25	; 0x800189 <__flp+0x1>
     b32:	80 93 88 01 	sts	0x0188, r24	; 0x800188 <__flp>
     b36:	7d 01       	movw	r14, r26
     b38:	60 e0       	ldi	r22, 0x00	; 0
     b3a:	70 e0       	ldi	r23, 0x00	; 0
     b3c:	88 e6       	ldi	r24, 0x68	; 104
     b3e:	91 e0       	ldi	r25, 0x01	; 1
     b40:	0e 94 cc 06 	call	0xd98	; 0xd98 <PostSemaphore>
     b44:	e7 01       	movw	r28, r14
     b46:	22 96       	adiw	r28, 0x02	; 2
     b48:	6b c0       	rjmp	.+214    	; 0xc20 <malloc+0x1dc>
     b4a:	20 1b       	sub	r18, r16
     b4c:	31 0b       	sbc	r19, r17
     b4e:	e7 01       	movw	r28, r14
     b50:	c2 0f       	add	r28, r18
     b52:	d3 1f       	adc	r29, r19
     b54:	09 93       	st	Y+, r16
     b56:	19 93       	st	Y+, r17
     b58:	22 50       	subi	r18, 0x02	; 2
     b5a:	31 09       	sbc	r19, r1
     b5c:	f7 01       	movw	r30, r14
     b5e:	31 83       	std	Z+1, r19	; 0x01
     b60:	20 83       	st	Z, r18
     b62:	60 e0       	ldi	r22, 0x00	; 0
     b64:	70 e0       	ldi	r23, 0x00	; 0
     b66:	88 e6       	ldi	r24, 0x68	; 104
     b68:	91 e0       	ldi	r25, 0x01	; 1
     b6a:	0e 94 cc 06 	call	0xd98	; 0xd98 <PostSemaphore>
     b6e:	58 c0       	rjmp	.+176    	; 0xc20 <malloc+0x1dc>
     b70:	d7 01       	movw	r26, r14
     b72:	12 96       	adiw	r26, 0x02	; 2
     b74:	ed 90       	ld	r14, X+
     b76:	fc 90       	ld	r15, X
     b78:	13 97       	sbiw	r26, 0x03	; 3
     b7a:	e1 14       	cp	r14, r1
     b7c:	f1 04       	cpc	r15, r1
     b7e:	09 f0       	breq	.+2      	; 0xb82 <malloc+0x13e>
     b80:	bf cf       	rjmp	.-130    	; 0xb00 <malloc+0xbc>
     b82:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <__brkval>
     b86:	90 91 67 01 	lds	r25, 0x0167	; 0x800167 <__brkval+0x1>
     b8a:	89 2b       	or	r24, r25
     b8c:	41 f4       	brne	.+16     	; 0xb9e <malloc+0x15a>
     b8e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__malloc_heap_start>
     b92:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
     b96:	90 93 67 01 	sts	0x0167, r25	; 0x800167 <__brkval+0x1>
     b9a:	80 93 66 01 	sts	0x0166, r24	; 0x800166 <__brkval>
     b9e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     ba2:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     ba6:	00 97       	sbiw	r24, 0x00	; 0
     ba8:	41 f4       	brne	.+16     	; 0xbba <malloc+0x176>
     baa:	8d b7       	in	r24, 0x3d	; 61
     bac:	9e b7       	in	r25, 0x3e	; 62
     bae:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <__malloc_margin>
     bb2:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <__malloc_margin+0x1>
     bb6:	82 1b       	sub	r24, r18
     bb8:	93 0b       	sbc	r25, r19
     bba:	c0 91 66 01 	lds	r28, 0x0166	; 0x800166 <__brkval>
     bbe:	d0 91 67 01 	lds	r29, 0x0167	; 0x800167 <__brkval+0x1>
     bc2:	8c 1b       	sub	r24, r28
     bc4:	9d 0b       	sbc	r25, r29
     bc6:	80 17       	cp	r24, r16
     bc8:	91 07       	cpc	r25, r17
     bca:	a8 f0       	brcs	.+42     	; 0xbf6 <malloc+0x1b2>
     bcc:	98 01       	movw	r18, r16
     bce:	2e 5f       	subi	r18, 0xFE	; 254
     bd0:	3f 4f       	sbci	r19, 0xFF	; 255
     bd2:	82 17       	cp	r24, r18
     bd4:	93 07       	cpc	r25, r19
     bd6:	78 f0       	brcs	.+30     	; 0xbf6 <malloc+0x1b2>
     bd8:	2c 0f       	add	r18, r28
     bda:	3d 1f       	adc	r19, r29
     bdc:	30 93 67 01 	sts	0x0167, r19	; 0x800167 <__brkval+0x1>
     be0:	20 93 66 01 	sts	0x0166, r18	; 0x800166 <__brkval>
     be4:	09 93       	st	Y+, r16
     be6:	19 93       	st	Y+, r17
     be8:	60 e0       	ldi	r22, 0x00	; 0
     bea:	70 e0       	ldi	r23, 0x00	; 0
     bec:	88 e6       	ldi	r24, 0x68	; 104
     bee:	91 e0       	ldi	r25, 0x01	; 1
     bf0:	0e 94 cc 06 	call	0xd98	; 0xd98 <PostSemaphore>
     bf4:	15 c0       	rjmp	.+42     	; 0xc20 <malloc+0x1dc>
     bf6:	60 e0       	ldi	r22, 0x00	; 0
     bf8:	70 e0       	ldi	r23, 0x00	; 0
     bfa:	88 e6       	ldi	r24, 0x68	; 104
     bfc:	91 e0       	ldi	r25, 0x01	; 1
     bfe:	0e 94 cc 06 	call	0xd98	; 0xd98 <PostSemaphore>
     c02:	c0 e0       	ldi	r28, 0x00	; 0
     c04:	d0 e0       	ldi	r29, 0x00	; 0
     c06:	0c c0       	rjmp	.+24     	; 0xc20 <malloc+0x1dc>
     c08:	20 17       	cp	r18, r16
     c0a:	31 07       	cpc	r19, r17
     c0c:	09 f4       	brne	.+2      	; 0xc10 <malloc+0x1cc>
     c0e:	8b cf       	rjmp	.-234    	; 0xb26 <malloc+0xe2>
     c10:	7d 01       	movw	r14, r26
     c12:	9b cf       	rjmp	.-202    	; 0xb4a <malloc+0x106>
     c14:	89 01       	movw	r16, r18
     c16:	24 17       	cp	r18, r20
     c18:	35 07       	cpc	r19, r21
     c1a:	09 f0       	breq	.+2      	; 0xc1e <malloc+0x1da>
     c1c:	aa cf       	rjmp	.-172    	; 0xb72 <malloc+0x12e>
     c1e:	f4 cf       	rjmp	.-24     	; 0xc08 <malloc+0x1c4>
     c20:	ce 01       	movw	r24, r28
     c22:	df 91       	pop	r29
     c24:	cf 91       	pop	r28
     c26:	1f 91       	pop	r17
     c28:	0f 91       	pop	r16
     c2a:	ff 90       	pop	r15
     c2c:	ef 90       	pop	r14
     c2e:	08 95       	ret

00000c30 <OS_InitMalloc>:
// If start == 0, use default value
// If end == 0, use default value
//--------------------------------------------------------------------

void OS_InitMalloc(char *start, char *end)
{
     c30:	0f 93       	push	r16
     c32:	1f 93       	push	r17
     c34:	cf 93       	push	r28
     c36:	df 93       	push	r29
     c38:	8c 01       	movw	r16, r24
     c3a:	eb 01       	movw	r28, r22
	CreateSemaphore(&MallocBlocker,1,SEMAPHORE_MODE_BLOCKING,"Malloc");
     c3c:	26 e0       	ldi	r18, 0x06	; 6
     c3e:	31 e0       	ldi	r19, 0x01	; 1
     c40:	40 e0       	ldi	r20, 0x00	; 0
     c42:	50 e0       	ldi	r21, 0x00	; 0
     c44:	61 e0       	ldi	r22, 0x01	; 1
     c46:	70 e0       	ldi	r23, 0x00	; 0
     c48:	88 e6       	ldi	r24, 0x68	; 104
     c4a:	91 e0       	ldi	r25, 0x01	; 1
     c4c:	0e 94 53 01 	call	0x2a6	; 0x2a6 <CreateSemaphore>
	if(start) __malloc_heap_start = start;
     c50:	01 15       	cp	r16, r1
     c52:	11 05       	cpc	r17, r1
     c54:	21 f0       	breq	.+8      	; 0xc5e <OS_InitMalloc+0x2e>
     c56:	10 93 03 01 	sts	0x0103, r17	; 0x800103 <__malloc_heap_start+0x1>
     c5a:	00 93 02 01 	sts	0x0102, r16	; 0x800102 <__malloc_heap_start>
	if(end) __malloc_heap_end = end;
     c5e:	20 97       	sbiw	r28, 0x00	; 0
     c60:	21 f0       	breq	.+8      	; 0xc6a <OS_InitMalloc+0x3a>
     c62:	d0 93 01 01 	sts	0x0101, r29	; 0x800101 <__data_start+0x1>
     c66:	c0 93 00 01 	sts	0x0100, r28	; 0x800100 <__data_start>
}
     c6a:	df 91       	pop	r29
     c6c:	cf 91       	pop	r28
     c6e:	1f 91       	pop	r17
     c70:	0f 91       	pop	r16
     c72:	08 95       	ret

00000c74 <PriorityCompare>:
//		positive....priority of s1 > s2
//		negative....priority of s1 < s2
//----------------------------------------------------------------------
//
static int PriorityCompare(void **s1, void **s2)
{
     c74:	cf 93       	push	r28
     c76:	df 93       	push	r29
	int r;

	//check priority levels
	if( (r = ((TCB *)*s1)->priority - ((TCB *)*s2)->priority) != 0)
     c78:	dc 01       	movw	r26, r24
     c7a:	ed 91       	ld	r30, X+
     c7c:	fc 91       	ld	r31, X
     c7e:	eb 01       	movw	r28, r22
     c80:	a8 81       	ld	r26, Y
     c82:	b9 81       	ldd	r27, Y+1	; 0x01
     c84:	86 81       	ldd	r24, Z+6	; 0x06
     c86:	97 81       	ldd	r25, Z+7	; 0x07
     c88:	16 96       	adiw	r26, 0x06	; 6
     c8a:	2d 91       	ld	r18, X+
     c8c:	3c 91       	ld	r19, X
     c8e:	17 97       	sbiw	r26, 0x07	; 7
     c90:	82 1b       	sub	r24, r18
     c92:	93 0b       	sbc	r25, r19
     c94:	41 f4       	brne	.+16     	; 0xca6 <PriorityCompare+0x32>
		return r;
	//if priority levels are the same, then check time stamps
	return (int)(((TCB *)*s2)->TimeStamp - ((TCB *)*s1)->TimeStamp);
     c96:	1c 96       	adiw	r26, 0x0c	; 12
     c98:	8d 91       	ld	r24, X+
     c9a:	9c 91       	ld	r25, X
     c9c:	1d 97       	sbiw	r26, 0x0d	; 13
     c9e:	24 85       	ldd	r18, Z+12	; 0x0c
     ca0:	35 85       	ldd	r19, Z+13	; 0x0d
     ca2:	82 1b       	sub	r24, r18
     ca4:	93 0b       	sbc	r25, r19
}
     ca6:	df 91       	pop	r29
     ca8:	cf 91       	pop	r28
     caa:	08 95       	ret

00000cac <OSInit>:
//	parameters:
//		none
//---------------------------------------------------------------------------
void OSInit(void)
{
	CreatePriorityQueue(&ActiveTasks,16,PriorityCompare);
     cac:	4a e3       	ldi	r20, 0x3A	; 58
     cae:	56 e0       	ldi	r21, 0x06	; 6
     cb0:	60 e1       	ldi	r22, 0x10	; 16
     cb2:	70 e0       	ldi	r23, 0x00	; 0
     cb4:	80 e1       	ldi	r24, 0x10	; 16
     cb6:	91 e0       	ldi	r25, 0x01	; 1
     cb8:	0e 94 a8 07 	call	0xf50	; 0xf50 <CreatePriorityQueue>
     cbc:	08 95       	ret

00000cbe <PendSemaphore>:
**	Inidicates status of operation.  0 or positive is normal,
**		negative is error
**************************************************************************/

int PendSemaphore(SEMAPHORE *e, int Timeout)	//wait for semaphore availiable
{
     cbe:	ef 92       	push	r14
     cc0:	ff 92       	push	r15
     cc2:	1f 93       	push	r17
     cc4:	cf 93       	push	r28
     cc6:	df 93       	push	r29
     cc8:	ec 01       	movw	r28, r24
     cca:	7b 01       	movw	r14, r22
	char sr;
	int retval;
	sr = Disable();
     ccc:	0e 94 5b 00 	call	0xb6	; 0xb6 <Disable>
     cd0:	18 2f       	mov	r17, r24
	if(e->EventCount > 0)	/*	is resource availiable?	*/
     cd2:	8a 85       	ldd	r24, Y+10	; 0x0a
     cd4:	9b 85       	ldd	r25, Y+11	; 0x0b
     cd6:	18 16       	cp	r1, r24
     cd8:	19 06       	cpc	r1, r25
     cda:	4c f4       	brge	.+18     	; 0xcee <PendSemaphore+0x30>
	{
		/*	yes	*/
		--e->EventCount;
     cdc:	01 97       	sbiw	r24, 0x01	; 1
     cde:	9b 87       	std	Y+11, r25	; 0x0b
     ce0:	8a 87       	std	Y+10, r24	; 0x0a
		Enable(sr);
     ce2:	81 2f       	mov	r24, r17
     ce4:	0e 94 5f 00 	call	0xbe	; 0xbe <Enable>
		retval = EVENT_NOERROR;	//everything is peachy
     ce8:	80 e0       	ldi	r24, 0x00	; 0
     cea:	90 e0       	ldi	r25, 0x00	; 0
     cec:	4f c0       	rjmp	.+158    	; 0xd8c <PendSemaphore+0xce>
	}
	else
	{
		/*	no	*/
		--e->EventCount;
     cee:	01 97       	sbiw	r24, 0x01	; 1
     cf0:	9b 87       	std	Y+11, r25	; 0x0b
     cf2:	8a 87       	std	Y+10, r24	; 0x0a
		if(!e->task_head)		//make linked list of waiting tasks
     cf4:	88 81       	ld	r24, Y
     cf6:	99 81       	ldd	r25, Y+1	; 0x01
     cf8:	89 2b       	or	r24, r25
     cfa:	39 f4       	brne	.+14     	; 0xd0a <PendSemaphore+0x4c>
			e->task_head = pCurrentTask;
     cfc:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <pCurrentTask>
     d00:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <pCurrentTask+0x1>
     d04:	99 83       	std	Y+1, r25	; 0x01
     d06:	88 83       	st	Y, r24
     d08:	08 c0       	rjmp	.+16     	; 0xd1a <PendSemaphore+0x5c>
		else
			e->task_tail->next = pCurrentTask;
     d0a:	ea 81       	ldd	r30, Y+2	; 0x02
     d0c:	fb 81       	ldd	r31, Y+3	; 0x03
     d0e:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <pCurrentTask>
     d12:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <pCurrentTask+0x1>
     d16:	95 8b       	std	Z+21, r25	; 0x15
     d18:	84 8b       	std	Z+20, r24	; 0x14
		e->task_tail = pCurrentTask;
     d1a:	e0 91 1a 01 	lds	r30, 0x011A	; 0x80011a <pCurrentTask>
     d1e:	f0 91 1b 01 	lds	r31, 0x011B	; 0x80011b <pCurrentTask+0x1>
     d22:	fb 83       	std	Y+3, r31	; 0x03
     d24:	ea 83       	std	Y+2, r30	; 0x02
		pCurrentTask->status = EVENT_NOERROR;
     d26:	11 86       	std	Z+9, r1	; 0x09
     d28:	10 86       	std	Z+8, r1	; 0x08
		if(e->SemaphoreMode)
     d2a:	88 85       	ldd	r24, Y+8	; 0x08
     d2c:	99 85       	ldd	r25, Y+9	; 0x09
     d2e:	89 2b       	or	r24, r25
     d30:	11 f0       	breq	.+4      	; 0xd36 <PendSemaphore+0x78>
			pCurrentTask->timeout = Timeout;
     d32:	f1 8a       	std	Z+17, r15	; 0x11
     d34:	e0 8a       	std	Z+16, r14	; 0x10

		//swap out current task
		//Update the time stamp on current task
		pCurrentTask->TimeStamp = TStamp;
     d36:	80 91 8a 01 	lds	r24, 0x018A	; 0x80018a <TStamp>
     d3a:	90 91 8b 01 	lds	r25, 0x018B	; 0x80018b <TStamp+0x1>
     d3e:	95 87       	std	Z+13, r25	; 0x0d
     d40:	84 87       	std	Z+12, r24	; 0x0c
		//get highest priority task from queue
		if(Delete(&ActiveTasks,(void **)&pNextTask))	
     d42:	6e e1       	ldi	r22, 0x1E	; 30
     d44:	71 e0       	ldi	r23, 0x01	; 1
     d46:	80 e1       	ldi	r24, 0x10	; 16
     d48:	91 e0       	ldi	r25, 0x01	; 1
     d4a:	0e 94 29 08 	call	0x1052	; 0x1052 <Delete>
     d4e:	89 2b       	or	r24, r25
     d50:	61 f0       	breq	.+24     	; 0xd6a <PendSemaphore+0xac>
		{
			//increment swaps on new task
			pNextTask->TcbSwaps++;
     d52:	e0 91 1e 01 	lds	r30, 0x011E	; 0x80011e <pNextTask>
     d56:	f0 91 1f 01 	lds	r31, 0x011F	; 0x80011f <pNextTask+0x1>
     d5a:	86 85       	ldd	r24, Z+14	; 0x0e
     d5c:	97 85       	ldd	r25, Z+15	; 0x0f
     d5e:	01 96       	adiw	r24, 0x01	; 1
     d60:	97 87       	std	Z+15, r25	; 0x0f
     d62:	86 87       	std	Z+14, r24	; 0x0e
			DoSwap();		//do context swap
     d64:	0e 94 50 02 	call	0x4a0	; 0x4a0 <DoSwap>
     d68:	08 c0       	rjmp	.+16     	; 0xd7a <PendSemaphore+0xbc>
		}
		else
		{
			//there were no tasks in the queue
			//set status to error and return
			pCurrentTask->status = EVENT_NOTASKS;
     d6a:	e0 91 1a 01 	lds	r30, 0x011A	; 0x80011a <pCurrentTask>
     d6e:	f0 91 1b 01 	lds	r31, 0x011B	; 0x80011b <pCurrentTask+0x1>
     d72:	8f ef       	ldi	r24, 0xFF	; 255
     d74:	9f ef       	ldi	r25, 0xFF	; 255
     d76:	91 87       	std	Z+9, r25	; 0x09
     d78:	80 87       	std	Z+8, r24	; 0x08
		}
		//-----------------------
		// Pend is over, check status
		//-----------------------

		Enable(sr);
     d7a:	81 2f       	mov	r24, r17
     d7c:	0e 94 5f 00 	call	0xbe	; 0xbe <Enable>
		retval = pCurrentTask->status;	//return this value
     d80:	e0 91 1a 01 	lds	r30, 0x011A	; 0x80011a <pCurrentTask>
     d84:	f0 91 1b 01 	lds	r31, 0x011B	; 0x80011b <pCurrentTask+0x1>
     d88:	80 85       	ldd	r24, Z+8	; 0x08
     d8a:	91 85       	ldd	r25, Z+9	; 0x09
	}
	return retval;
}
     d8c:	df 91       	pop	r29
     d8e:	cf 91       	pop	r28
     d90:	1f 91       	pop	r17
     d92:	ff 90       	pop	r15
     d94:	ef 90       	pop	r14
     d96:	08 95       	ret

00000d98 <PostSemaphore>:
**
** return value: 0 = No Error, negative indicates error
***************************************************************************/

int PostSemaphore(SEMAPHORE *e, int Value)	//signal semaphore availiable
{
     d98:	ef 92       	push	r14
     d9a:	ff 92       	push	r15
     d9c:	1f 93       	push	r17
     d9e:	cf 93       	push	r28
     da0:	df 93       	push	r29
     da2:	ec 01       	movw	r28, r24
     da4:	7b 01       	movw	r14, r22
	char sr=0;
	//------------------------------
	// do not disable IRQ if inside
	// of an interrupt routine
	//------------------------------
	if(!InterruptCount)sr = Disable();
     da6:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <InterruptCount>
     daa:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <InterruptCount+0x1>
     dae:	89 2b       	or	r24, r25
     db0:	21 f4       	brne	.+8      	; 0xdba <PostSemaphore+0x22>
     db2:	0e 94 5b 00 	call	0xb6	; 0xb6 <Disable>
     db6:	18 2f       	mov	r17, r24
     db8:	01 c0       	rjmp	.+2      	; 0xdbc <PostSemaphore+0x24>
***************************************************************************/

int PostSemaphore(SEMAPHORE *e, int Value)	//signal semaphore availiable
{
	TCB *t;
	char sr=0;
     dba:	10 e0       	ldi	r17, 0x00	; 0
	//------------------------------
	// do not disable IRQ if inside
	// of an interrupt routine
	//------------------------------
	if(!InterruptCount)sr = Disable();
	if(e->EventCount < 32766)	//is it going to overflow??
     dbc:	8a 85       	ldd	r24, Y+10	; 0x0a
     dbe:	9b 85       	ldd	r25, Y+11	; 0x0b
     dc0:	8e 3f       	cpi	r24, 0xFE	; 254
     dc2:	2f e7       	ldi	r18, 0x7F	; 127
     dc4:	92 07       	cpc	r25, r18
     dc6:	dc f5       	brge	.+118    	; 0xe3e <PostSemaphore+0xa6>
	{
		if(e->EventCount >= 0)	//increment semaphore
     dc8:	99 23       	and	r25, r25
     dca:	6c f0       	brlt	.+26     	; 0xde6 <PostSemaphore+0x4e>
		{
			++e->EventCount;
     dcc:	01 96       	adiw	r24, 0x01	; 1
     dce:	9b 87       	std	Y+11, r25	; 0x0b
     dd0:	8a 87       	std	Y+10, r24	; 0x0a
			if(!InterruptCount)Enable(sr);
     dd2:	c0 91 20 01 	lds	r28, 0x0120	; 0x800120 <InterruptCount>
     dd6:	d0 91 21 01 	lds	r29, 0x0121	; 0x800121 <InterruptCount+0x1>
     dda:	20 97       	sbiw	r28, 0x00	; 0
     ddc:	e1 f5       	brne	.+120    	; 0xe56 <PostSemaphore+0xbe>
     dde:	81 2f       	mov	r24, r17
     de0:	0e 94 5f 00 	call	0xbe	; 0xbe <Enable>
     de4:	40 c0       	rjmp	.+128    	; 0xe66 <PostSemaphore+0xce>
		}
		else
		{
			++e->EventCount;
     de6:	01 96       	adiw	r24, 0x01	; 1
     de8:	9b 87       	std	Y+11, r25	; 0x0b
     dea:	8a 87       	std	Y+10, r24	; 0x0a
			if(e->task_head)				//is there really a task waiting?
     dec:	e8 81       	ld	r30, Y
     dee:	f9 81       	ldd	r31, Y+1	; 0x01
     df0:	30 97       	sbiw	r30, 0x00	; 0
     df2:	d9 f0       	breq	.+54     	; 0xe2a <PostSemaphore+0x92>
			{
				t = e->task_head;		//get first task in
				e->task_head = t->next;       //remove from list
     df4:	84 89       	ldd	r24, Z+20	; 0x14
     df6:	95 89       	ldd	r25, Z+21	; 0x15
     df8:	99 83       	std	Y+1, r25	; 0x01
     dfa:	88 83       	st	Y, r24
				t->next = (TCB *)0;
     dfc:	15 8a       	std	Z+21, r1	; 0x15
     dfe:	14 8a       	std	Z+20, r1	; 0x14
				t->status = Value;			//return this value
     e00:	f1 86       	std	Z+9, r15	; 0x09
     e02:	e0 86       	std	Z+8, r14	; 0x08
				Insert(&ActiveTasks,t);	//put task back onto active list
     e04:	bf 01       	movw	r22, r30
     e06:	80 e1       	ldi	r24, 0x10	; 16
     e08:	91 e0       	ldi	r25, 0x01	; 1
     e0a:	0e 94 be 07 	call	0xf7c	; 0xf7c <Insert>
				if(!InterruptCount)Enable(sr);
     e0e:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <InterruptCount>
     e12:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <InterruptCount+0x1>
     e16:	89 2b       	or	r24, r25
     e18:	19 f4       	brne	.+6      	; 0xe20 <PostSemaphore+0x88>
     e1a:	81 2f       	mov	r24, r17
     e1c:	0e 94 5f 00 	call	0xbe	; 0xbe <Enable>
				Yield();
     e20:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <Yield>
			else
			{
				if(!InterruptCount)Enable(sr);
			}
		}
		return EVENT_NOERROR;
     e24:	c0 e0       	ldi	r28, 0x00	; 0
     e26:	d0 e0       	ldi	r29, 0x00	; 0
     e28:	1e c0       	rjmp	.+60     	; 0xe66 <PostSemaphore+0xce>
				if(!InterruptCount)Enable(sr);
				Yield();
			}
			else
			{
				if(!InterruptCount)Enable(sr);
     e2a:	c0 91 20 01 	lds	r28, 0x0120	; 0x800120 <InterruptCount>
     e2e:	d0 91 21 01 	lds	r29, 0x0121	; 0x800121 <InterruptCount+0x1>
     e32:	20 97       	sbiw	r28, 0x00	; 0
     e34:	99 f4       	brne	.+38     	; 0xe5c <PostSemaphore+0xc4>
     e36:	81 2f       	mov	r24, r17
     e38:	0e 94 5f 00 	call	0xbe	; 0xbe <Enable>
     e3c:	14 c0       	rjmp	.+40     	; 0xe66 <PostSemaphore+0xce>
		}
		return EVENT_NOERROR;
	}
	else
	{
		if(!InterruptCount)Enable(sr);
     e3e:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <InterruptCount>
     e42:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <InterruptCount+0x1>
     e46:	89 2b       	or	r24, r25
     e48:	61 f4       	brne	.+24     	; 0xe62 <PostSemaphore+0xca>
     e4a:	81 2f       	mov	r24, r17
     e4c:	0e 94 5f 00 	call	0xbe	; 0xbe <Enable>
		return(EVENT_OVERFLOW);
     e50:	ce ef       	ldi	r28, 0xFE	; 254
     e52:	df ef       	ldi	r29, 0xFF	; 255
     e54:	08 c0       	rjmp	.+16     	; 0xe66 <PostSemaphore+0xce>
			else
			{
				if(!InterruptCount)Enable(sr);
			}
		}
		return EVENT_NOERROR;
     e56:	c0 e0       	ldi	r28, 0x00	; 0
     e58:	d0 e0       	ldi	r29, 0x00	; 0
     e5a:	05 c0       	rjmp	.+10     	; 0xe66 <PostSemaphore+0xce>
     e5c:	c0 e0       	ldi	r28, 0x00	; 0
     e5e:	d0 e0       	ldi	r29, 0x00	; 0
     e60:	02 c0       	rjmp	.+4      	; 0xe66 <PostSemaphore+0xce>
	}
	else
	{
		if(!InterruptCount)Enable(sr);
		return(EVENT_OVERFLOW);
     e62:	ce ef       	ldi	r28, 0xFE	; 254
     e64:	df ef       	ldi	r29, 0xFF	; 255
	}
}
     e66:	ce 01       	movw	r24, r28
     e68:	df 91       	pop	r29
     e6a:	cf 91       	pop	r28
     e6c:	1f 91       	pop	r17
     e6e:	ff 90       	pop	r15
     e70:	ef 90       	pop	r14
     e72:	08 95       	ret

00000e74 <ReheapDown>:
**	parameters:
**		pQ.......pointer to the priority queue
**
***********************************************/
static void ReheapDown(PRIORITYQUEUE* pQ)
{
     e74:	6f 92       	push	r6
     e76:	7f 92       	push	r7
     e78:	8f 92       	push	r8
     e7a:	9f 92       	push	r9
     e7c:	af 92       	push	r10
     e7e:	bf 92       	push	r11
     e80:	cf 92       	push	r12
     e82:	df 92       	push	r13
     e84:	ef 92       	push	r14
     e86:	ff 92       	push	r15
     e88:	0f 93       	push	r16
     e8a:	1f 93       	push	r17
     e8c:	cf 93       	push	r28
     e8e:	df 93       	push	r29
	void **ppParent;	//pointer to parent
	void **ppChild;   //pointer to child
	void **ppSibling;	//pointer to sibling
	void **ppHeap;	//pointer to m_ppHeap

	ppHeap = pQ->m_ppHeap;
     e90:	dc 01       	movw	r26, r24
     e92:	18 96       	adiw	r26, 0x08	; 8
     e94:	ad 90       	ld	r10, X+
     e96:	bc 90       	ld	r11, X
     e98:	19 97       	sbiw	r26, 0x09	; 9
	for(parent=0,child=1;child < pQ->m_nItems;)
     e9a:	12 96       	adiw	r26, 0x02	; 2
     e9c:	2d 91       	ld	r18, X+
     e9e:	3c 91       	ld	r19, X
     ea0:	13 97       	sbiw	r26, 0x03	; 3
     ea2:	22 30       	cpi	r18, 0x02	; 2
     ea4:	31 05       	cpc	r19, r1
     ea6:	0c f4       	brge	.+2      	; 0xeaa <ReheapDown+0x36>
     ea8:	44 c0       	rjmp	.+136    	; 0xf32 <ReheapDown+0xbe>
     eaa:	6c 01       	movw	r12, r24
     eac:	ee 24       	eor	r14, r14
     eae:	e3 94       	inc	r14
     eb0:	f1 2c       	mov	r15, r1
     eb2:	c0 e0       	ldi	r28, 0x00	; 0
     eb4:	d0 e0       	ldi	r29, 0x00	; 0
     eb6:	02 c0       	rjmp	.+4      	; 0xebc <ReheapDown+0x48>
		//----------------------------------
		swap(ppParent,ppChild);
		//----------------------------------
		// new parent is the child
		//----------------------------------
		parent = child;
     eb8:	e7 01       	movw	r28, r14
		//----------------------------------
		// calculate new child index
		//----------------------------------
		child = LEFTCHILD(parent);
     eba:	7c 01       	movw	r14, r24
	for(parent=0,child=1;child < pQ->m_nItems;)
	{
		//----------------------------------
		// get pointer to parent and child nodes
		//----------------------------------
		ppParent = &ppHeap[parent];
     ebc:	cc 0f       	add	r28, r28
     ebe:	dd 1f       	adc	r29, r29
     ec0:	ca 0d       	add	r28, r10
     ec2:	db 1d       	adc	r29, r11
		ppChild = &ppHeap[child];
     ec4:	87 01       	movw	r16, r14
     ec6:	00 0f       	add	r16, r16
     ec8:	11 1f       	adc	r17, r17
     eca:	0a 0d       	add	r16, r10
     ecc:	1b 1d       	adc	r17, r11
		//-----------------------------------
		// is there a possible sibling to
		// the child node?
		//------------------------------------
		if(child + 1 < pQ->m_nItems)
     ece:	37 01       	movw	r6, r14
     ed0:	bf ef       	ldi	r27, 0xFF	; 255
     ed2:	6b 1a       	sub	r6, r27
     ed4:	7b 0a       	sbc	r7, r27
     ed6:	62 16       	cp	r6, r18
     ed8:	73 06       	cpc	r7, r19
     eda:	74 f4       	brge	.+28     	; 0xef8 <ReheapDown+0x84>
		{
			//---------------------------------
			// get a pointer to the sibling
			//---------------------------------
			ppSibling = ppChild + 1;
     edc:	48 01       	movw	r8, r16
     ede:	e2 e0       	ldi	r30, 0x02	; 2
     ee0:	8e 0e       	add	r8, r30
     ee2:	91 1c       	adc	r9, r1
			//---------------------------------
			// is priority of child less than
			// that of the sibling?
			//---------------------------------
			if((*pQ->m_Cmp)(ppChild,ppSibling) < 0)
     ee4:	d6 01       	movw	r26, r12
     ee6:	ed 91       	ld	r30, X+
     ee8:	fc 91       	ld	r31, X
     eea:	b4 01       	movw	r22, r8
     eec:	c8 01       	movw	r24, r16
     eee:	09 95       	icall
     ef0:	99 23       	and	r25, r25
     ef2:	14 f4       	brge	.+4      	; 0xef8 <ReheapDown+0x84>
			{
				//--------------------------------
				// make the child equal to sibling
				//---------------------------------
				ppChild = ppSibling;
     ef4:	84 01       	movw	r16, r8
				//--------------------------------
				// make child index equal to that
				// of the sibling
				//--------------------------------
				child++;
     ef6:	73 01       	movw	r14, r6
		//-------------------------------------
		// if the priority of the parent is
		// greater than or equal to the child
		// we are done, break out of the loop
		//------------------------------------
		if((*pQ->m_Cmp)(ppParent,ppChild) >= 0)
     ef8:	d6 01       	movw	r26, r12
     efa:	ed 91       	ld	r30, X+
     efc:	fc 91       	ld	r31, X
     efe:	b8 01       	movw	r22, r16
     f00:	ce 01       	movw	r24, r28
     f02:	09 95       	icall
     f04:	99 23       	and	r25, r25
     f06:	ac f4       	brge	.+42     	; 0xf32 <ReheapDown+0xbe>

static void swap(void **ppS1,void **ppS2)
{
	void *pTemp;

	pTemp = *ppS1;
     f08:	88 81       	ld	r24, Y
     f0a:	99 81       	ldd	r25, Y+1	; 0x01
	*ppS1 = *ppS2;
     f0c:	f8 01       	movw	r30, r16
     f0e:	20 81       	ld	r18, Z
     f10:	31 81       	ldd	r19, Z+1	; 0x01
     f12:	39 83       	std	Y+1, r19	; 0x01
     f14:	28 83       	st	Y, r18
	*ppS2 = pTemp;
     f16:	91 83       	std	Z+1, r25	; 0x01
     f18:	80 83       	st	Z, r24
		//----------------------------------
		parent = child;
		//----------------------------------
		// calculate new child index
		//----------------------------------
		child = LEFTCHILD(parent);
     f1a:	c7 01       	movw	r24, r14
     f1c:	88 0f       	add	r24, r24
     f1e:	99 1f       	adc	r25, r25
     f20:	01 96       	adiw	r24, 0x01	; 1
	void **ppChild;   //pointer to child
	void **ppSibling;	//pointer to sibling
	void **ppHeap;	//pointer to m_ppHeap

	ppHeap = pQ->m_ppHeap;
	for(parent=0,child=1;child < pQ->m_nItems;)
     f22:	d6 01       	movw	r26, r12
     f24:	12 96       	adiw	r26, 0x02	; 2
     f26:	2d 91       	ld	r18, X+
     f28:	3c 91       	ld	r19, X
     f2a:	13 97       	sbiw	r26, 0x03	; 3
     f2c:	82 17       	cp	r24, r18
     f2e:	93 07       	cpc	r25, r19
     f30:	1c f2       	brlt	.-122    	; 0xeb8 <ReheapDown+0x44>
		//----------------------------------
		// calculate new child index
		//----------------------------------
		child = LEFTCHILD(parent);
	}	//end of for loop
}
     f32:	df 91       	pop	r29
     f34:	cf 91       	pop	r28
     f36:	1f 91       	pop	r17
     f38:	0f 91       	pop	r16
     f3a:	ff 90       	pop	r15
     f3c:	ef 90       	pop	r14
     f3e:	df 90       	pop	r13
     f40:	cf 90       	pop	r12
     f42:	bf 90       	pop	r11
     f44:	af 90       	pop	r10
     f46:	9f 90       	pop	r9
     f48:	8f 90       	pop	r8
     f4a:	7f 90       	pop	r7
     f4c:	6f 90       	pop	r6
     f4e:	08 95       	ret

00000f50 <CreatePriorityQueue>:
// these.
//
//---------------------------------------------------------
//
void CreatePriorityQueue(PRIORITYQUEUE *q,int ne,int (*c)(void **,void **))
{
     f50:	cf 93       	push	r28
     f52:	df 93       	push	r29
     f54:	ec 01       	movw	r28, r24
	q->m_Cmp = c;
     f56:	59 83       	std	Y+1, r21	; 0x01
     f58:	48 83       	st	Y, r20
	q->m_nItems = 0;
     f5a:	1b 82       	std	Y+3, r1	; 0x03
     f5c:	1a 82       	std	Y+2, r1	; 0x02
	q->m_Maxitems = ne;
     f5e:	7d 83       	std	Y+5, r23	; 0x05
     f60:	6c 83       	std	Y+4, r22	; 0x04
	q->m_ppHeap = (void **)malloc(sizeof(void *) * ne);
     f62:	cb 01       	movw	r24, r22
     f64:	88 0f       	add	r24, r24
     f66:	99 1f       	adc	r25, r25
     f68:	0e 94 22 05 	call	0xa44	; 0xa44 <malloc>
     f6c:	99 87       	std	Y+9, r25	; 0x09
     f6e:	88 87       	std	Y+8, r24	; 0x08
    q->m_ppBottom = &q->m_ppHeap[-1];
     f70:	02 97       	sbiw	r24, 0x02	; 2
     f72:	9f 83       	std	Y+7, r25	; 0x07
     f74:	8e 83       	std	Y+6, r24	; 0x06
}
     f76:	df 91       	pop	r29
     f78:	cf 91       	pop	r28
     f7a:	08 95       	ret

00000f7c <Insert>:
//		space available in queue
//
//---------------------------------------------------------
//
int Insert(PRIORITYQUEUE* pQ,void *item)
{
     f7c:	af 92       	push	r10
     f7e:	bf 92       	push	r11
     f80:	cf 92       	push	r12
     f82:	df 92       	push	r13
     f84:	ef 92       	push	r14
     f86:	ff 92       	push	r15
     f88:	0f 93       	push	r16
     f8a:	1f 93       	push	r17
     f8c:	cf 93       	push	r28
     f8e:	df 93       	push	r29
	int space_avail;

	space_avail = pQ->m_Maxitems - pQ->m_nItems;
     f90:	dc 01       	movw	r26, r24
     f92:	12 96       	adiw	r26, 0x02	; 2
     f94:	2d 91       	ld	r18, X+
     f96:	3c 91       	ld	r19, X
     f98:	13 97       	sbiw	r26, 0x03	; 3
     f9a:	14 96       	adiw	r26, 0x04	; 4
     f9c:	ed 90       	ld	r14, X+
     f9e:	fc 90       	ld	r15, X
     fa0:	15 97       	sbiw	r26, 0x05	; 5
     fa2:	e2 1a       	sub	r14, r18
     fa4:	f3 0a       	sbc	r15, r19
	if((space_avail) > 0)
     fa6:	1e 14       	cp	r1, r14
     fa8:	1f 04       	cpc	r1, r15
     faa:	0c f0       	brlt	.+2      	; 0xfae <Insert+0x32>
     fac:	46 c0       	rjmp	.+140    	; 0x103a <Insert+0xbe>
     fae:	8c 01       	movw	r16, r24
	{
		++pQ->m_nItems;
     fb0:	2f 5f       	subi	r18, 0xFF	; 255
     fb2:	3f 4f       	sbci	r19, 0xFF	; 255
     fb4:	fc 01       	movw	r30, r24
     fb6:	33 83       	std	Z+3, r19	; 0x03
     fb8:	22 83       	std	Z+2, r18	; 0x02
		*(++pQ->m_ppBottom) = item;
     fba:	06 80       	ldd	r0, Z+6	; 0x06
     fbc:	f7 81       	ldd	r31, Z+7	; 0x07
     fbe:	e0 2d       	mov	r30, r0
     fc0:	cf 01       	movw	r24, r30
     fc2:	02 96       	adiw	r24, 0x02	; 2
     fc4:	17 96       	adiw	r26, 0x07	; 7
     fc6:	9c 93       	st	X, r25
     fc8:	8e 93       	st	-X, r24
     fca:	16 97       	sbiw	r26, 0x06	; 6
     fcc:	73 83       	std	Z+3, r23	; 0x03
     fce:	62 83       	std	Z+2, r22	; 0x02
	void **ppChild;	//pointer to child

	//-------------------------
	// Index of child node
	//-------------------------
	child = pQ->m_nItems - 1;
     fd0:	12 96       	adiw	r26, 0x02	; 2
     fd2:	6d 91       	ld	r22, X+
     fd4:	7c 91       	ld	r23, X
     fd6:	13 97       	sbiw	r26, 0x03	; 3
     fd8:	61 50       	subi	r22, 0x01	; 1
     fda:	71 09       	sbc	r23, r1
	//-------------------------
	// Index of parent node
	// Keep looping while
	// parent is valid (>= 0)
	//-------------------------
	while(child > 0)
     fdc:	16 16       	cp	r1, r22
     fde:	17 06       	cpc	r1, r23
     fe0:	64 f5       	brge	.+88     	; 0x103a <Insert+0xbe>
	{
		parent = PARENT(child);
     fe2:	cb 01       	movw	r24, r22
     fe4:	01 97       	sbiw	r24, 0x01	; 1
     fe6:	6c 01       	movw	r12, r24
     fe8:	1a f4       	brpl	.+6      	; 0xff0 <Insert+0x74>
     fea:	bf ef       	ldi	r27, 0xFF	; 255
     fec:	cb 1a       	sub	r12, r27
     fee:	db 0a       	sbc	r13, r27
     ff0:	d5 94       	asr	r13
     ff2:	c7 94       	ror	r12
		//-----------------------------
		// get pointers to parent
		// and child nodes
		//------------------------------
		ppChild = &pQ->m_ppHeap[child];
     ff4:	f8 01       	movw	r30, r16
     ff6:	80 85       	ldd	r24, Z+8	; 0x08
     ff8:	91 85       	ldd	r25, Z+9	; 0x09
     ffa:	66 0f       	add	r22, r22
     ffc:	77 1f       	adc	r23, r23
     ffe:	ec 01       	movw	r28, r24
    1000:	c6 0f       	add	r28, r22
    1002:	d7 1f       	adc	r29, r23
		ppParent = &pQ->m_ppHeap[parent];
    1004:	56 01       	movw	r10, r12
    1006:	aa 0c       	add	r10, r10
    1008:	bb 1c       	adc	r11, r11
    100a:	a8 0e       	add	r10, r24
    100c:	b9 1e       	adc	r11, r25
		// If the priority of the parent
		// is greater than or equal to
		// the priority of the child,
		// we are done, break from the loop
		//---------------------------------
		if( (*pQ->m_Cmp)(ppParent,ppChild) >= 0)
    100e:	01 90       	ld	r0, Z+
    1010:	f0 81       	ld	r31, Z
    1012:	e0 2d       	mov	r30, r0
    1014:	be 01       	movw	r22, r28
    1016:	c5 01       	movw	r24, r10
    1018:	09 95       	icall
    101a:	99 23       	and	r25, r25
    101c:	74 f4       	brge	.+28     	; 0x103a <Insert+0xbe>

static void swap(void **ppS1,void **ppS2)
{
	void *pTemp;

	pTemp = *ppS1;
    101e:	d5 01       	movw	r26, r10
    1020:	8d 91       	ld	r24, X+
    1022:	9c 91       	ld	r25, X
    1024:	11 97       	sbiw	r26, 0x01	; 1
	*ppS1 = *ppS2;
    1026:	28 81       	ld	r18, Y
    1028:	39 81       	ldd	r19, Y+1	; 0x01
    102a:	2d 93       	st	X+, r18
    102c:	3c 93       	st	X, r19
	*ppS2 = pTemp;
    102e:	99 83       	std	Y+1, r25	; 0x01
    1030:	88 83       	st	Y, r24
		//----------------------------------
		swap(ppParent,ppChild);
		//----------------------------------
		// the new parent is the child
		//----------------------------------
		child = parent;
    1032:	b6 01       	movw	r22, r12
	//-------------------------
	// Index of parent node
	// Keep looping while
	// parent is valid (>= 0)
	//-------------------------
	while(child > 0)
    1034:	1c 14       	cp	r1, r12
    1036:	1d 04       	cpc	r1, r13
    1038:	a4 f2       	brlt	.-88     	; 0xfe2 <Insert+0x66>
		++pQ->m_nItems;
		*(++pQ->m_ppBottom) = item;
		ReheapUp(pQ);
	}
	return space_avail;
}
    103a:	c7 01       	movw	r24, r14
    103c:	df 91       	pop	r29
    103e:	cf 91       	pop	r28
    1040:	1f 91       	pop	r17
    1042:	0f 91       	pop	r16
    1044:	ff 90       	pop	r15
    1046:	ef 90       	pop	r14
    1048:	df 90       	pop	r13
    104a:	cf 90       	pop	r12
    104c:	bf 90       	pop	r11
    104e:	af 90       	pop	r10
    1050:	08 95       	ret

00001052 <Delete>:
// return value:
//		returns slots in use in the queue
//---------------------------------------------------------

int Delete(PRIORITYQUEUE* pQ,void **target)
{
    1052:	cf 93       	push	r28
    1054:	df 93       	push	r29
	int SlotsInUse;

	if((SlotsInUse = pQ->m_nItems) > 0)
    1056:	dc 01       	movw	r26, r24
    1058:	12 96       	adiw	r26, 0x02	; 2
    105a:	cd 91       	ld	r28, X+
    105c:	dc 91       	ld	r29, X
    105e:	13 97       	sbiw	r26, 0x03	; 3
    1060:	1c 16       	cp	r1, r28
    1062:	1d 06       	cpc	r1, r29
    1064:	f4 f4       	brge	.+60     	; 0x10a2 <Delete+0x50>
    1066:	fc 01       	movw	r30, r24
	{
		*target = *pQ->m_ppHeap;		//get item from top of m_ppHeap
    1068:	a0 85       	ldd	r26, Z+8	; 0x08
    106a:	b1 85       	ldd	r27, Z+9	; 0x09
    106c:	8d 91       	ld	r24, X+
    106e:	9c 91       	ld	r25, X
    1070:	db 01       	movw	r26, r22
    1072:	8d 93       	st	X+, r24
    1074:	9c 93       	st	X, r25
		*pQ->m_ppHeap = *pQ->m_ppBottom--;
    1076:	80 85       	ldd	r24, Z+8	; 0x08
    1078:	91 85       	ldd	r25, Z+9	; 0x09
    107a:	a6 81       	ldd	r26, Z+6	; 0x06
    107c:	b7 81       	ldd	r27, Z+7	; 0x07
    107e:	9d 01       	movw	r18, r26
    1080:	22 50       	subi	r18, 0x02	; 2
    1082:	31 09       	sbc	r19, r1
    1084:	37 83       	std	Z+7, r19	; 0x07
    1086:	26 83       	std	Z+6, r18	; 0x06
    1088:	2d 91       	ld	r18, X+
    108a:	3c 91       	ld	r19, X
    108c:	dc 01       	movw	r26, r24
    108e:	2d 93       	st	X+, r18
    1090:	3c 93       	st	X, r19
		--pQ->m_nItems;
    1092:	82 81       	ldd	r24, Z+2	; 0x02
    1094:	93 81       	ldd	r25, Z+3	; 0x03
    1096:	01 97       	sbiw	r24, 0x01	; 1
    1098:	93 83       	std	Z+3, r25	; 0x03
    109a:	82 83       	std	Z+2, r24	; 0x02
		ReheapDown(pQ);
    109c:	cf 01       	movw	r24, r30
    109e:	0e 94 3a 07 	call	0xe74	; 0xe74 <ReheapDown>
	}
	return SlotsInUse;
}
    10a2:	ce 01       	movw	r24, r28
    10a4:	df 91       	pop	r29
    10a6:	cf 91       	pop	r28
    10a8:	08 95       	ret

000010aa <Replace>:
//	return value:
//		returns number of slots in use
//-----------------------------------------------------------

int Replace(PRIORITYQUEUE* pQ,void **target,void *item)
{
    10aa:	cf 92       	push	r12
    10ac:	df 92       	push	r13
    10ae:	ef 92       	push	r14
    10b0:	ff 92       	push	r15
    10b2:	0f 93       	push	r16
    10b4:	1f 93       	push	r17
    10b6:	cf 93       	push	r28
    10b8:	df 93       	push	r29
    10ba:	00 d0       	rcall	.+0      	; 0x10bc <Replace+0x12>
    10bc:	cd b7       	in	r28, 0x3d	; 61
    10be:	de b7       	in	r29, 0x3e	; 62
    10c0:	5a 83       	std	Y+2, r21	; 0x02
    10c2:	49 83       	std	Y+1, r20	; 0x01
	int SlotsInUse;

	if((SlotsInUse = pQ->m_nItems) > 0)
    10c4:	dc 01       	movw	r26, r24
    10c6:	12 96       	adiw	r26, 0x02	; 2
    10c8:	cd 90       	ld	r12, X+
    10ca:	dc 90       	ld	r13, X
    10cc:	13 97       	sbiw	r26, 0x03	; 3
    10ce:	1c 14       	cp	r1, r12
    10d0:	1d 04       	cpc	r1, r13
    10d2:	54 f5       	brge	.+84     	; 0x1128 <Replace+0x7e>
    10d4:	7b 01       	movw	r14, r22
    10d6:	8c 01       	movw	r16, r24
	{
		if ((*pQ->m_Cmp)(&item,pQ->m_ppHeap) > 0)	//only replace if priority is less
    10d8:	fc 01       	movw	r30, r24
    10da:	60 85       	ldd	r22, Z+8	; 0x08
    10dc:	71 85       	ldd	r23, Z+9	; 0x09
    10de:	01 90       	ld	r0, Z+
    10e0:	f0 81       	ld	r31, Z
    10e2:	e0 2d       	mov	r30, r0
    10e4:	ce 01       	movw	r24, r28
    10e6:	01 96       	adiw	r24, 0x01	; 1
    10e8:	09 95       	icall
    10ea:	18 16       	cp	r1, r24
    10ec:	19 06       	cpc	r1, r25
    10ee:	34 f4       	brge	.+12     	; 0x10fc <Replace+0x52>
		{
			*target = item;		//item is higher priority
    10f0:	89 81       	ldd	r24, Y+1	; 0x01
    10f2:	9a 81       	ldd	r25, Y+2	; 0x02
    10f4:	d7 01       	movw	r26, r14
    10f6:	8d 93       	st	X+, r24
    10f8:	9c 93       	st	X, r25
    10fa:	1b c0       	rjmp	.+54     	; 0x1132 <Replace+0x88>
		}
		else
		{
			*target = *pQ->m_ppHeap;
    10fc:	d8 01       	movw	r26, r16
    10fe:	18 96       	adiw	r26, 0x08	; 8
    1100:	ed 91       	ld	r30, X+
    1102:	fc 91       	ld	r31, X
    1104:	19 97       	sbiw	r26, 0x09	; 9
    1106:	80 81       	ld	r24, Z
    1108:	91 81       	ldd	r25, Z+1	; 0x01
    110a:	f7 01       	movw	r30, r14
    110c:	91 83       	std	Z+1, r25	; 0x01
    110e:	80 83       	st	Z, r24
			*pQ->m_ppHeap = item;
    1110:	18 96       	adiw	r26, 0x08	; 8
    1112:	ed 91       	ld	r30, X+
    1114:	fc 91       	ld	r31, X
    1116:	19 97       	sbiw	r26, 0x09	; 9
    1118:	89 81       	ldd	r24, Y+1	; 0x01
    111a:	9a 81       	ldd	r25, Y+2	; 0x02
    111c:	91 83       	std	Z+1, r25	; 0x01
    111e:	80 83       	st	Z, r24
			ReheapDown(pQ);
    1120:	c8 01       	movw	r24, r16
    1122:	0e 94 3a 07 	call	0xe74	; 0xe74 <ReheapDown>
    1126:	05 c0       	rjmp	.+10     	; 0x1132 <Replace+0x88>
		}
	}
	else
		*target = item;
    1128:	89 81       	ldd	r24, Y+1	; 0x01
    112a:	9a 81       	ldd	r25, Y+2	; 0x02
    112c:	db 01       	movw	r26, r22
    112e:	8d 93       	st	X+, r24
    1130:	9c 93       	st	X, r25
	return SlotsInUse;
}
    1132:	c6 01       	movw	r24, r12
    1134:	0f 90       	pop	r0
    1136:	0f 90       	pop	r0
    1138:	df 91       	pop	r29
    113a:	cf 91       	pop	r28
    113c:	1f 91       	pop	r17
    113e:	0f 91       	pop	r16
    1140:	ff 90       	pop	r15
    1142:	ef 90       	pop	r14
    1144:	df 90       	pop	r13
    1146:	cf 90       	pop	r12
    1148:	08 95       	ret

0000114a <StartOS>:
	// Remove task from priorty queue
	// Restore its context
	// and then jump to the first task using
	// return from subroutine
	//---------------------------------------
	Delete(&ActiveTasks,(void **)&pNextTask);
    114a:	6e e1       	ldi	r22, 0x1E	; 30
    114c:	71 e0       	ldi	r23, 0x01	; 1
    114e:	80 e1       	ldi	r24, 0x10	; 16
    1150:	91 e0       	ldi	r25, 0x01	; 1
    1152:	0e 94 29 08 	call	0x1052	; 0x1052 <Delete>
	pCurrentTask = pNextTask;
    1156:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <pNextTask>
    115a:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <pNextTask+0x1>
    115e:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <pCurrentTask+0x1>
    1162:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <pCurrentTask>
	RESTORE_CONTEXT();
    1166:	a0 91 1e 01 	lds	r26, 0x011E	; 0x80011e <pNextTask>
    116a:	b0 91 1f 01 	lds	r27, 0x011F	; 0x80011f <pNextTask+0x1>
    116e:	cd 91       	ld	r28, X+
    1170:	cd bf       	out	0x3d, r28	; 61
    1172:	dd 91       	ld	r29, X+
    1174:	de bf       	out	0x3e, r29	; 62
    1176:	0f 90       	pop	r0
    1178:	1f 90       	pop	r1
    117a:	2f 90       	pop	r2
    117c:	3f 90       	pop	r3
    117e:	4f 90       	pop	r4
    1180:	5f 90       	pop	r5
    1182:	6f 90       	pop	r6
    1184:	7f 90       	pop	r7
    1186:	8f 90       	pop	r8
    1188:	9f 90       	pop	r9
    118a:	af 90       	pop	r10
    118c:	bf 90       	pop	r11
    118e:	cf 90       	pop	r12
    1190:	df 90       	pop	r13
    1192:	ef 90       	pop	r14
    1194:	ff 90       	pop	r15
    1196:	0f 91       	pop	r16
    1198:	1f 91       	pop	r17
    119a:	2f 91       	pop	r18
    119c:	3f 91       	pop	r19
    119e:	4f 91       	pop	r20
    11a0:	5f 91       	pop	r21
    11a2:	6f 91       	pop	r22
    11a4:	7f 91       	pop	r23
    11a6:	8f 91       	pop	r24
    11a8:	9f 91       	pop	r25
    11aa:	af 91       	pop	r26
    11ac:	bf 91       	pop	r27
    11ae:	cf 91       	pop	r28
    11b0:	df 91       	pop	r29
    11b2:	ef 91       	pop	r30
    11b4:	ff 91       	pop	r31
    11b6:	f7 fd       	sbrc	r31, 7
    11b8:	03 c0       	rjmp	.+6      	; 0x11c0 <irqen>
    11ba:	ff bf       	out	0x3f, r31	; 63
    11bc:	ff 91       	pop	r31
    11be:	08 95       	ret

000011c0 <irqen>:
    11c0:	ff 77       	andi	r31, 0x7F	; 127
    11c2:	ff bf       	out	0x3f, r31	; 63
    11c4:	ff 91       	pop	r31
    11c6:	18 95       	reti

000011c8 <Yield>:
** are in an interrupt
** routine
*********************************************************************/

void Yield(void)
{
    11c8:	cf 93       	push	r28
	char sr;

	// Do not yield if at the interrupt level
	if(!InterruptCount)
    11ca:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <InterruptCount>
    11ce:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <InterruptCount+0x1>
    11d2:	89 2b       	or	r24, r25
    11d4:	11 f5       	brne	.+68     	; 0x121a <Yield+0x52>
	{
		sr = Disable();
    11d6:	0e 94 5b 00 	call	0xb6	; 0xb6 <Disable>
    11da:	c8 2f       	mov	r28, r24
		//update the time stamp in current task
		pCurrentTask->TimeStamp = TStamp;
    11dc:	40 91 1a 01 	lds	r20, 0x011A	; 0x80011a <pCurrentTask>
    11e0:	50 91 1b 01 	lds	r21, 0x011B	; 0x80011b <pCurrentTask+0x1>
    11e4:	80 91 8a 01 	lds	r24, 0x018A	; 0x80018a <TStamp>
    11e8:	90 91 8b 01 	lds	r25, 0x018B	; 0x80018b <TStamp+0x1>
    11ec:	fa 01       	movw	r30, r20
    11ee:	95 87       	std	Z+13, r25	; 0x0d
    11f0:	84 87       	std	Z+12, r24	; 0x0c
		//Insert current task back into queue
		//and get a new task
		Replace(&ActiveTasks,(void **)&pNextTask,(void *)pCurrentTask);
    11f2:	6e e1       	ldi	r22, 0x1E	; 30
    11f4:	71 e0       	ldi	r23, 0x01	; 1
    11f6:	80 e1       	ldi	r24, 0x10	; 16
    11f8:	91 e0       	ldi	r25, 0x01	; 1
    11fa:	0e 94 55 08 	call	0x10aa	; 0x10aa <Replace>
		//increment task swaps
		pNextTask->TcbSwaps++;
    11fe:	e0 91 1e 01 	lds	r30, 0x011E	; 0x80011e <pNextTask>
    1202:	f0 91 1f 01 	lds	r31, 0x011F	; 0x80011f <pNextTask+0x1>
    1206:	86 85       	ldd	r24, Z+14	; 0x0e
    1208:	97 85       	ldd	r25, Z+15	; 0x0f
    120a:	01 96       	adiw	r24, 0x01	; 1
    120c:	97 87       	std	Z+15, r25	; 0x0f
    120e:	86 87       	std	Z+14, r24	; 0x0e
		//swap tasks
		DoSwap();
    1210:	0e 94 50 02 	call	0x4a0	; 0x4a0 <DoSwap>
		Enable(sr);
    1214:	8c 2f       	mov	r24, r28
    1216:	0e 94 5f 00 	call	0xbe	; 0xbe <Enable>
	}
}
    121a:	cf 91       	pop	r28
    121c:	08 95       	ret

0000121e <__tablejump2__>:
    121e:	ee 0f       	add	r30, r30
    1220:	ff 1f       	adc	r31, r31
    1222:	05 90       	lpm	r0, Z+
    1224:	f4 91       	lpm	r31, Z
    1226:	e0 2d       	mov	r30, r0
    1228:	09 94       	ijmp

0000122a <strcpy>:
    122a:	fb 01       	movw	r30, r22
    122c:	dc 01       	movw	r26, r24
    122e:	01 90       	ld	r0, Z+
    1230:	0d 92       	st	X+, r0
    1232:	00 20       	and	r0, r0
    1234:	e1 f7       	brne	.-8      	; 0x122e <strcpy+0x4>
    1236:	08 95       	ret

00001238 <_exit>:
    1238:	f8 94       	cli

0000123a <__stop_program>:
    123a:	ff cf       	rjmp	.-2      	; 0x123a <__stop_program>
