
200-2017Firmware.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001ca6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  00001ca6  00001d3a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000ee  00800066  00800066  00001d40  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001d40  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001d70  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000430  00000000  00000000  00001db0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000549b  00000000  00000000  000021e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001d3d  00000000  00000000  0000767b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000021e8  00000000  00000000  000093b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000098c  00000000  00000000  0000b5a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000c6e  00000000  00000000  0000bf2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002bf3  00000000  00000000  0000cb9a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000338  00000000  00000000  0000f78d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	28 c0       	rjmp	.+80     	; 0x52 <__ctors_end>
       2:	85 c3       	rjmp	.+1802   	; 0x70e <__vector_1>
       4:	d7 c3       	rjmp	.+1966   	; 0x7b4 <__vector_2>
       6:	40 c0       	rjmp	.+128    	; 0x88 <__bad_interrupt>
       8:	3f c0       	rjmp	.+126    	; 0x88 <__bad_interrupt>
       a:	3e c0       	rjmp	.+124    	; 0x88 <__bad_interrupt>
       c:	7e c4       	rjmp	.+2300   	; 0x90a <__vector_6>
       e:	27 c4       	rjmp	.+2126   	; 0x85e <__vector_7>
      10:	3b c0       	rjmp	.+118    	; 0x88 <__bad_interrupt>
      12:	58 cc       	rjmp	.-1872   	; 0xfffff8c4 <__eeprom_end+0xff7ef8c4>
      14:	5a cd       	rjmp	.-1356   	; 0xfffffaca <__eeprom_end+0xff7efaca>
      16:	38 c0       	rjmp	.+112    	; 0x88 <__bad_interrupt>
      18:	37 c0       	rjmp	.+110    	; 0x88 <__bad_interrupt>
      1a:	36 c0       	rjmp	.+108    	; 0x88 <__bad_interrupt>
      1c:	35 c0       	rjmp	.+106    	; 0x88 <__bad_interrupt>
      1e:	34 c0       	rjmp	.+104    	; 0x88 <__bad_interrupt>
      20:	33 c0       	rjmp	.+102    	; 0x88 <__bad_interrupt>
      22:	d7 c2       	rjmp	.+1454   	; 0x5d2 <DacOut+0xa4>
      24:	e1 c2       	rjmp	.+1474   	; 0x5e8 <DacOut+0xba>
      26:	e0 c2       	rjmp	.+1472   	; 0x5e8 <DacOut+0xba>
      28:	df c2       	rjmp	.+1470   	; 0x5e8 <DacOut+0xba>
      2a:	e0 c2       	rjmp	.+1472   	; 0x5ec <DacOut+0xbe>
      2c:	ea c2       	rjmp	.+1492   	; 0x602 <DacOut+0xd4>
      2e:	f4 c2       	rjmp	.+1512   	; 0x618 <DacOut+0xea>
      30:	fe c2       	rjmp	.+1532   	; 0x62e <DacOut+0x100>
      32:	bd c8       	rjmp	.-3718   	; 0xfffff1ae <__eeprom_end+0xff7ef1ae>
      34:	c3 c8       	rjmp	.-3706   	; 0xfffff1bc <__eeprom_end+0xff7ef1bc>
      36:	c4 c8       	rjmp	.-3704   	; 0xfffff1c0 <__eeprom_end+0xff7ef1c0>
      38:	c6 c8       	rjmp	.-3700   	; 0xfffff1c6 <__eeprom_end+0xff7ef1c6>
      3a:	70 c9       	rjmp	.-3360   	; 0xfffff31c <__eeprom_end+0xff7ef31c>
      3c:	6f c9       	rjmp	.-3362   	; 0xfffff31c <__eeprom_end+0xff7ef31c>
      3e:	6e c9       	rjmp	.-3364   	; 0xfffff31c <__eeprom_end+0xff7ef31c>
      40:	c6 c8       	rjmp	.-3700   	; 0xfffff1ce <__eeprom_end+0xff7ef1ce>
      42:	cb c8       	rjmp	.-3690   	; 0xfffff1da <__eeprom_end+0xff7ef1da>
      44:	6b c9       	rjmp	.-3370   	; 0xfffff31c <__eeprom_end+0xff7ef31c>
      46:	cb c8       	rjmp	.-3690   	; 0xfffff1de <__eeprom_end+0xff7ef1de>
      48:	ca c8       	rjmp	.-3692   	; 0xfffff1de <__eeprom_end+0xff7ef1de>
      4a:	cb c8       	rjmp	.-3690   	; 0xfffff1e2 <__eeprom_end+0xff7ef1e2>
      4c:	67 c9       	rjmp	.-3378   	; 0xfffff31c <__eeprom_end+0xff7ef31c>
      4e:	66 c9       	rjmp	.-3380   	; 0xfffff31c <__eeprom_end+0xff7ef31c>
      50:	ca c8       	rjmp	.-3692   	; 0xfffff1e6 <__eeprom_end+0xff7ef1e6>

00000052 <__ctors_end>:
      52:	11 24       	eor	r1, r1
      54:	1f be       	out	0x3f, r1	; 63
      56:	cf e5       	ldi	r28, 0x5F	; 95
      58:	d2 e0       	ldi	r29, 0x02	; 2
      5a:	de bf       	out	0x3e, r29	; 62
      5c:	cd bf       	out	0x3d, r28	; 61

0000005e <__do_copy_data>:
      5e:	10 e0       	ldi	r17, 0x00	; 0
      60:	a0 e6       	ldi	r26, 0x60	; 96
      62:	b0 e0       	ldi	r27, 0x00	; 0
      64:	e6 ea       	ldi	r30, 0xA6	; 166
      66:	fc e1       	ldi	r31, 0x1C	; 28
      68:	02 c0       	rjmp	.+4      	; 0x6e <__do_copy_data+0x10>
      6a:	05 90       	lpm	r0, Z+
      6c:	0d 92       	st	X+, r0
      6e:	a6 36       	cpi	r26, 0x66	; 102
      70:	b1 07       	cpc	r27, r17
      72:	d9 f7       	brne	.-10     	; 0x6a <__do_copy_data+0xc>

00000074 <__do_clear_bss>:
      74:	21 e0       	ldi	r18, 0x01	; 1
      76:	a6 e6       	ldi	r26, 0x66	; 102
      78:	b0 e0       	ldi	r27, 0x00	; 0
      7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
      7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
      7e:	a4 35       	cpi	r26, 0x54	; 84
      80:	b2 07       	cpc	r27, r18
      82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
      84:	ae d4       	rcall	.+2396   	; 0x9e2 <main>
      86:	0d ce       	rjmp	.-998    	; 0xfffffca2 <__eeprom_end+0xff7efca2>

00000088 <__bad_interrupt>:
      88:	bb cf       	rjmp	.-138    	; 0x0 <__vectors>

0000008a <Disable>:
	.global Disable
	.global Enable

Disable:

	in	r24,_SFR_IO_ADDR(SREG)		;get status register
      8a:	8f b7       	in	r24, 0x3f	; 63
	cli								;disable interrupt
      8c:	f8 94       	cli
	andi r24,0x80					;strip off interrupt bit
      8e:	80 78       	andi	r24, 0x80	; 128
	ret
      90:	08 95       	ret

00000092 <Enable>:

Enable:
	in r25,_SFR_IO_ADDR(SREG)		;status reg in r24
      92:	9f b7       	in	r25, 0x3f	; 63
	or r25,r24						;or with status reg
      94:	98 2b       	or	r25, r24
	out _SFR_IO_ADDR(SREG),r25		;restored status register
      96:	9f bf       	out	0x3f, r25	; 63
	ret
      98:	08 95       	ret

0000009a <SetGatePort>:

static unsigned char GateShadow;

void SetGatePort(char bit)
{
	GateShadow |= (1 << bit);
      9a:	21 e0       	ldi	r18, 0x01	; 1
      9c:	30 e0       	ldi	r19, 0x00	; 0
      9e:	01 c0       	rjmp	.+2      	; 0xa2 <SetGatePort+0x8>
      a0:	22 0f       	add	r18, r18
      a2:	8a 95       	dec	r24
      a4:	ea f7       	brpl	.-6      	; 0xa0 <SetGatePort+0x6>
      a6:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <__data_end>
      aa:	28 2b       	or	r18, r24
      ac:	20 93 66 00 	sts	0x0066, r18	; 0x800066 <__data_end>
	GATE_WD = GateShadow;
      b0:	20 93 00 82 	sts	0x8200, r18	; 0x808200 <__bss_end+0x80ac>
      b4:	08 95       	ret

000000b6 <ClearGatePort>:
}

void ClearGatePort(char bit)
{
	GateShadow &= ~(1 << bit);
      b6:	21 e0       	ldi	r18, 0x01	; 1
      b8:	30 e0       	ldi	r19, 0x00	; 0
      ba:	01 c0       	rjmp	.+2      	; 0xbe <ClearGatePort+0x8>
      bc:	22 0f       	add	r18, r18
      be:	8a 95       	dec	r24
      c0:	ea f7       	brpl	.-6      	; 0xbc <ClearGatePort+0x6>
      c2:	20 95       	com	r18
      c4:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <__data_end>
      c8:	28 23       	and	r18, r24
      ca:	20 93 66 00 	sts	0x0066, r18	; 0x800066 <__data_end>
	GATE_WD = GateShadow;
      ce:	20 93 00 82 	sts	0x8200, r18	; 0x808200 <__bss_end+0x80ac>
      d2:	08 95       	ret

000000d4 <CreateSemaphore>:
**	n............name of semaphore (DEBUG only)                           **
**                                                                        **
***************************************************************************/

void CreateSemaphore(SEMAPHORE *pSem,int InitCount,int Mode)
{
      d4:	cf 93       	push	r28
      d6:	df 93       	push	r29
      d8:	ec 01       	movw	r28, r24
	char sr;

	pSem->EventCount = InitCount;	//set initial count
      da:	7b 87       	std	Y+11, r23	; 0x0b
      dc:	6a 87       	std	Y+10, r22	; 0x0a
	pSem->SemaphoreMode = Mode;	//set mode
      de:	59 87       	std	Y+9, r21	; 0x09
      e0:	48 87       	std	Y+8, r20	; 0x08
	pSem->task_head = 0;				//no tasks waiting
      e2:	19 82       	std	Y+1, r1	; 0x01
      e4:	18 82       	st	Y, r1
	pSem->task_tail = 0;				//no tasks waiting
      e6:	1b 82       	std	Y+3, r1	; 0x03
      e8:	1a 82       	std	Y+2, r1	; 0x02
	//-------------------------------------------------------
	// if Mode==SEMAPHORE_MODE_TIMEOUT, then put this
	// semaphore into timeout list
	//-------------------------------------------------------
	// enter critical section, disable interrupts
	sr = Disable();
      ea:	cf df       	rcall	.-98     	; 0x8a <Disable>
	if(pSem->SemaphoreMode == SEMAPHORE_MODE_TIMEOUT)
      ec:	28 85       	ldd	r18, Y+8	; 0x08
      ee:	39 85       	ldd	r19, Y+9	; 0x09
      f0:	21 30       	cpi	r18, 0x01	; 1
      f2:	31 05       	cpc	r19, r1
      f4:	c9 f4       	brne	.+50     	; 0x128 <CreateSemaphore+0x54>
	{
		if(pTimeoutList)	//is the list already started?
      f6:	e0 91 89 00 	lds	r30, 0x0089	; 0x800089 <pTimeoutList>
      fa:	f0 91 8a 00 	lds	r31, 0x008A	; 0x80008a <pTimeoutList+0x1>
      fe:	30 97       	sbiw	r30, 0x00	; 0
     100:	59 f0       	breq	.+22     	; 0x118 <CreateSemaphore+0x44>
		{
			pSem->Tnext = pTimeoutList;	//make current head next in line
     102:	fd 83       	std	Y+5, r31	; 0x05
     104:	ec 83       	std	Y+4, r30	; 0x04
			pSem->Tprev = 0;			//these is no previous entry
     106:	1f 82       	std	Y+7, r1	; 0x07
     108:	1e 82       	std	Y+6, r1	; 0x06
			pTimeoutList->Tprev = pSem;	//this will be prev for next entry
     10a:	d7 83       	std	Z+7, r29	; 0x07
     10c:	c6 83       	std	Z+6, r28	; 0x06
			pTimeoutList = pSem;			//this is now the new head of list
     10e:	d0 93 8a 00 	sts	0x008A, r29	; 0x80008a <pTimeoutList+0x1>
     112:	c0 93 89 00 	sts	0x0089, r28	; 0x800089 <pTimeoutList>
     116:	08 c0       	rjmp	.+16     	; 0x128 <CreateSemaphore+0x54>
		}
		else			//no start list
		{
			pTimeoutList = pSem;	//set timeout list
     118:	d0 93 8a 00 	sts	0x008A, r29	; 0x80008a <pTimeoutList+0x1>
     11c:	c0 93 89 00 	sts	0x0089, r28	; 0x800089 <pTimeoutList>
			pSem->Tnext = 0;
     120:	1d 82       	std	Y+5, r1	; 0x05
     122:	1c 82       	std	Y+4, r1	; 0x04
			pSem->Tprev = 0;
     124:	1f 82       	std	Y+7, r1	; 0x07
     126:	1e 82       	std	Y+6, r1	; 0x06
		}
	}
	//exit critical section, enable IRQ
	Enable(sr);	//restore interrupts
}
     128:	df 91       	pop	r29
     12a:	cf 91       	pop	r28
			pSem->Tnext = 0;
			pSem->Tprev = 0;
		}
	}
	//exit critical section, enable IRQ
	Enable(sr);	//restore interrupts
     12c:	b2 cf       	rjmp	.-156    	; 0x92 <Enable>

0000012e <NewSemaphore>:
	return value:
		pointer to an Event Control block on success
		OR NULL on fail
************************************************/
SEMAPHORE *NewSemaphore(int InitCount,int Mode)
{
     12e:	ef 92       	push	r14
     130:	ff 92       	push	r15
     132:	0f 93       	push	r16
     134:	1f 93       	push	r17
     136:	cf 93       	push	r28
     138:	df 93       	push	r29
     13a:	8c 01       	movw	r16, r24
     13c:	7b 01       	movw	r14, r22
*********************************************/
static SEMAPHORE *AllocSemaphore(void)
{
	SEMAPHORE *rv;
	// enter critical section disable IRQ
	char sr = Disable();
     13e:	a5 df       	rcall	.-182    	; 0x8a <Disable>
	if (pSemaphorePool)	//check the pool
     140:	c0 91 67 00 	lds	r28, 0x0067	; 0x800067 <pSemaphorePool>
     144:	d0 91 68 00 	lds	r29, 0x0068	; 0x800068 <pSemaphorePool+0x1>
     148:	20 97       	sbiw	r28, 0x00	; 0
     14a:	41 f0       	breq	.+16     	; 0x15c <NewSemaphore+0x2e>
	{
		//get first SEMAPHORE in pool
		rv = pSemaphorePool;
		//new head of pool
		pSemaphorePool = pSemaphorePool->Tnext;
     14c:	2c 81       	ldd	r18, Y+4	; 0x04
     14e:	3d 81       	ldd	r19, Y+5	; 0x05
     150:	30 93 68 00 	sts	0x0068, r19	; 0x800068 <pSemaphorePool+0x1>
     154:	20 93 67 00 	sts	0x0067, r18	; 0x800067 <pSemaphorePool>
		//exit critical section
		Enable(sr);
     158:	9c df       	rcall	.-200    	; 0x92 <Enable>
     15a:	07 c0       	rjmp	.+14     	; 0x16a <NewSemaphore+0x3c>
	}
	else
	{
		//exit critical section
		Enable(sr);
     15c:	9a df       	rcall	.-204    	; 0x92 <Enable>
		//allocate SEMAPHORE from heap
		rv = (SEMAPHORE *)malloc(sizeof(SEMAPHORE));	//or allocate from the heap
     15e:	8c e0       	ldi	r24, 0x0C	; 12
     160:	90 e0       	ldi	r25, 0x00	; 0
     162:	cb d4       	rcall	.+2454   	; 0xafa <malloc>
     164:	ec 01       	movw	r28, r24
************************************************/
SEMAPHORE *NewSemaphore(int InitCount,int Mode)
{
	SEMAPHORE *pSem;

	if((pSem = AllocSemaphore()) != NULL)
     166:	89 2b       	or	r24, r25
     168:	21 f0       	breq	.+8      	; 0x172 <NewSemaphore+0x44>
		CreateSemaphore(pSem,InitCount,Mode);
     16a:	a7 01       	movw	r20, r14
     16c:	b8 01       	movw	r22, r16
     16e:	ce 01       	movw	r24, r28
     170:	b1 df       	rcall	.-158    	; 0xd4 <CreateSemaphore>
	return pSem;
}
     172:	ce 01       	movw	r24, r28
     174:	df 91       	pop	r29
     176:	cf 91       	pop	r28
     178:	1f 91       	pop	r17
     17a:	0f 91       	pop	r16
     17c:	ff 90       	pop	r15
     17e:	ef 90       	pop	r14
     180:	08 95       	ret

00000182 <DeleteSemaphore>:
**		e..........pointer to SEMAPHORE block that describes the semaphore
**
*******************************************************************************/

void DeleteSemaphore(SEMAPHORE *pSem)
{
     182:	ef 92       	push	r14
     184:	ff 92       	push	r15
     186:	1f 93       	push	r17
     188:	cf 93       	push	r28
     18a:	df 93       	push	r29
     18c:	ec 01       	movw	r28, r24
	char sr;
	TCB *t;

	//are there any tasks waiting for this sucker?
	//enter critical section, disable IRQ
	sr = Disable();
     18e:	7d df       	rcall	.-262    	; 0x8a <Disable>
     190:	18 2f       	mov	r17, r24
	while(pSem->task_head)		//remove all tasks
	{
		t = pSem->task_head;		//get first task in
		pSem->task_head = t->next;       //remove from list
		t->next = (TCB *)0;
		t->status = EVENT_DELETED;	//return this value
     192:	8c ef       	ldi	r24, 0xFC	; 252
     194:	e8 2e       	mov	r14, r24
     196:	ff 24       	eor	r15, r15
     198:	fa 94       	dec	r15
	TCB *t;

	//are there any tasks waiting for this sucker?
	//enter critical section, disable IRQ
	sr = Disable();
	while(pSem->task_head)		//remove all tasks
     19a:	e8 81       	ld	r30, Y
     19c:	f9 81       	ldd	r31, Y+1	; 0x01
     19e:	30 97       	sbiw	r30, 0x00	; 0
     1a0:	69 f0       	breq	.+26     	; 0x1bc <DeleteSemaphore+0x3a>
	{
		t = pSem->task_head;		//get first task in
		pSem->task_head = t->next;       //remove from list
     1a2:	84 89       	ldd	r24, Z+20	; 0x14
     1a4:	95 89       	ldd	r25, Z+21	; 0x15
     1a6:	99 83       	std	Y+1, r25	; 0x01
     1a8:	88 83       	st	Y, r24
		t->next = (TCB *)0;
     1aa:	15 8a       	std	Z+21, r1	; 0x15
     1ac:	14 8a       	std	Z+20, r1	; 0x14
		t->status = EVENT_DELETED;	//return this value
     1ae:	f1 86       	std	Z+9, r15	; 0x09
     1b0:	e0 86       	std	Z+8, r14	; 0x08
		Insert(&ActiveTasks,t);	//put task back onto active list
     1b2:	bf 01       	movw	r22, r30
     1b4:	8b e8       	ldi	r24, 0x8B	; 139
     1b6:	90 e0       	ldi	r25, 0x00	; 0
     1b8:	0a da       	rcall	.-3052   	; 0xfffff5ce <__eeprom_end+0xff7ef5ce>
     1ba:	ef cf       	rjmp	.-34     	; 0x19a <DeleteSemaphore+0x18>
***********************************************/
static void FreeSemaphore(SEMAPHORE *pSem)
{
	char sr;
	//enter critical section disable IRQ
	sr = Disable();
     1bc:	66 df       	rcall	.-308    	; 0x8a <Disable>
	if(pSem->SemaphoreMode)	//is it in timeout list?
     1be:	28 85       	ldd	r18, Y+8	; 0x08
     1c0:	39 85       	ldd	r19, Y+9	; 0x09
     1c2:	23 2b       	or	r18, r19
     1c4:	d9 f0       	breq	.+54     	; 0x1fc <DeleteSemaphore+0x7a>
	{
		//remove semaphore from timeout list
		if(pSem == pTimeoutList)
     1c6:	40 91 89 00 	lds	r20, 0x0089	; 0x800089 <pTimeoutList>
     1ca:	50 91 8a 00 	lds	r21, 0x008A	; 0x80008a <pTimeoutList+0x1>
     1ce:	2c 81       	ldd	r18, Y+4	; 0x04
     1d0:	3d 81       	ldd	r19, Y+5	; 0x05
     1d2:	c4 17       	cp	r28, r20
     1d4:	d5 07       	cpc	r29, r21
     1d6:	21 f4       	brne	.+8      	; 0x1e0 <DeleteSemaphore+0x5e>
			pTimeoutList = pSem->Tnext;
     1d8:	30 93 8a 00 	sts	0x008A, r19	; 0x80008a <pTimeoutList+0x1>
     1dc:	20 93 89 00 	sts	0x0089, r18	; 0x800089 <pTimeoutList>
		if(pSem->Tprev)
     1e0:	ee 81       	ldd	r30, Y+6	; 0x06
     1e2:	ff 81       	ldd	r31, Y+7	; 0x07
     1e4:	30 97       	sbiw	r30, 0x00	; 0
     1e6:	11 f0       	breq	.+4      	; 0x1ec <DeleteSemaphore+0x6a>
			pSem->Tprev->Tnext = pSem->Tnext;
     1e8:	35 83       	std	Z+5, r19	; 0x05
     1ea:	24 83       	std	Z+4, r18	; 0x04
		if(pSem->Tnext)
     1ec:	ac 81       	ldd	r26, Y+4	; 0x04
     1ee:	bd 81       	ldd	r27, Y+5	; 0x05
     1f0:	10 97       	sbiw	r26, 0x00	; 0
     1f2:	21 f0       	breq	.+8      	; 0x1fc <DeleteSemaphore+0x7a>
			pSem->Tnext->Tprev = pSem->Tprev;
     1f4:	17 96       	adiw	r26, 0x07	; 7
     1f6:	fc 93       	st	X, r31
     1f8:	ee 93       	st	-X, r30
     1fa:	16 97       	sbiw	r26, 0x06	; 6
	}
	//put SEMAPHORE into pool
	pSem->Tnext = pSemaphorePool;
     1fc:	20 91 67 00 	lds	r18, 0x0067	; 0x800067 <pSemaphorePool>
     200:	30 91 68 00 	lds	r19, 0x0068	; 0x800068 <pSemaphorePool+0x1>
     204:	3d 83       	std	Y+5, r19	; 0x05
     206:	2c 83       	std	Y+4, r18	; 0x04
	pSemaphorePool = pSem;
     208:	d0 93 68 00 	sts	0x0068, r29	; 0x800068 <pSemaphorePool+0x1>
     20c:	c0 93 67 00 	sts	0x0067, r28	; 0x800067 <pSemaphorePool>
	//Exit Critical Section, Enable IRQ
	Enable(sr);
     210:	40 df       	rcall	.-384    	; 0x92 <Enable>
		t->next = (TCB *)0;
		t->status = EVENT_DELETED;	//return this value
		Insert(&ActiveTasks,t);	//put task back onto active list
	}
	FreeSemaphore(pSem);		//put semaphore back in pool
	Enable(sr);
     212:	81 2f       	mov	r24, r17
}
     214:	df 91       	pop	r29
     216:	cf 91       	pop	r28
     218:	1f 91       	pop	r17
     21a:	ff 90       	pop	r15
     21c:	ef 90       	pop	r14
		t->next = (TCB *)0;
		t->status = EVENT_DELETED;	//return this value
		Insert(&ActiveTasks,t);	//put task back onto active list
	}
	FreeSemaphore(pSem);		//put semaphore back in pool
	Enable(sr);
     21e:	39 cf       	rjmp	.-398    	; 0x92 <Enable>

00000220 <CreateTask>:
**	arg.............argument to be passed to function...it chan either be 
**  a value, or a pointer to some data
***************************************************************************************/

void CreateTask(TCB *t, void (*task)(void *), int stacksize,int priority,void *arg)
{
     220:	8f 92       	push	r8
     222:	9f 92       	push	r9
     224:	af 92       	push	r10
     226:	bf 92       	push	r11
     228:	cf 92       	push	r12
     22a:	df 92       	push	r13
     22c:	ef 92       	push	r14
     22e:	ff 92       	push	r15
     230:	0f 93       	push	r16
     232:	1f 93       	push	r17
     234:	cf 93       	push	r28
     236:	df 93       	push	r29
     238:	7c 01       	movw	r14, r24
     23a:	4b 01       	movw	r8, r22
     23c:	ea 01       	movw	r28, r20
     23e:	59 01       	movw	r10, r18
		pointer to block of ram to use as stack on success
		OR NULL on fail
*********************************************************/
static void *AllocStack(size_t len)
{
	return malloc(len);
     240:	ca 01       	movw	r24, r20
     242:	5b d4       	rcall	.+2230   	; 0xafa <malloc>
     244:	6c 01       	movw	r12, r24

	stack = AllocStack(stacksize);
	//set all stack locations with an
	//arbitrary value to make DEBUG
	// much easier.
	for(i=0;i<stacksize;++i) 
     246:	fc 01       	movw	r30, r24
		stack[i] = 0xcd;
     248:	2d ec       	ldi	r18, 0xCD	; 205

	stack = AllocStack(stacksize);
	//set all stack locations with an
	//arbitrary value to make DEBUG
	// much easier.
	for(i=0;i<stacksize;++i) 
     24a:	cf 01       	movw	r24, r30
     24c:	8c 19       	sub	r24, r12
     24e:	9d 09       	sbc	r25, r13
     250:	8c 17       	cp	r24, r28
     252:	9d 07       	cpc	r25, r29
     254:	14 f4       	brge	.+4      	; 0x25a <CreateTask+0x3a>
		stack[i] = 0xcd;
     256:	21 93       	st	Z+, r18
     258:	f8 cf       	rjmp	.-16     	; 0x24a <CreateTask+0x2a>
	//enter critical section, Disable IRQ
	sr = Disable();
     25a:	17 df       	rcall	.-466    	; 0x8a <Disable>
	if(t)
     25c:	e1 14       	cp	r14, r1
     25e:	f1 04       	cpc	r15, r1
     260:	09 f4       	brne	.+2      	; 0x264 <__stack+0x5>
     262:	6c c0       	rjmp	.+216    	; 0x33c <__stack+0xdd>
	{
		//initialize TCB member variables
		t->TcbSwaps = 0;
     264:	d7 01       	movw	r26, r14
     266:	1f 96       	adiw	r26, 0x0f	; 15
     268:	1c 92       	st	X, r1
     26a:	1e 92       	st	-X, r1
     26c:	1e 97       	sbiw	r26, 0x0e	; 14
		t->stacksize = stacksize;
     26e:	15 96       	adiw	r26, 0x05	; 5
     270:	dc 93       	st	X, r29
     272:	ce 93       	st	-X, r28
     274:	14 97       	sbiw	r26, 0x04	; 4
		t->priority = priority;
     276:	17 96       	adiw	r26, 0x07	; 7
     278:	bc 92       	st	X, r11
     27a:	ae 92       	st	-X, r10
     27c:	16 97       	sbiw	r26, 0x06	; 6
		t->TimeStamp = 0;
     27e:	1d 96       	adiw	r26, 0x0d	; 13
     280:	1c 92       	st	X, r1
     282:	1e 92       	st	-X, r1
     284:	1c 97       	sbiw	r26, 0x0c	; 12
		t->stacktop = stack;
     286:	13 96       	adiw	r26, 0x03	; 3
     288:	dc 92       	st	X, r13
     28a:	ce 92       	st	-X, r12
     28c:	12 97       	sbiw	r26, 0x02	; 2
		t->next = (TCB *)0;
     28e:	55 96       	adiw	r26, 0x15	; 21
     290:	1c 92       	st	X, r1
     292:	1e 92       	st	-X, r1
     294:	54 97       	sbiw	r26, 0x14	; 20
		t->list = (TCB *)0;
     296:	57 96       	adiw	r26, 0x17	; 23
     298:	1c 92       	st	X, r1
     29a:	1e 92       	st	-X, r1
     29c:	56 97       	sbiw	r26, 0x16	; 22
		stk = stack + stacksize-1;
     29e:	fe 01       	movw	r30, r28
     2a0:	31 97       	sbiw	r30, 0x01	; 1
     2a2:	ec 0d       	add	r30, r12
     2a4:	fd 1d       	adc	r31, r13
		//Initialize the stack
		*stk-- = (char)LO( (unsigned)task);/*	return address	*/
     2a6:	80 82       	st	Z, r8
		*stk-- = (char)HI( (unsigned)task);
     2a8:	df 01       	movw	r26, r30
     2aa:	11 97       	sbiw	r26, 0x01	; 1
     2ac:	9c 92       	st	X, r9
		*stk-- = 0;		/*	r31 = 0	*/
     2ae:	11 97       	sbiw	r26, 0x01	; 1
     2b0:	1c 92       	st	X, r1
		*stk-- = 0x80;	/*	SREG Interrupts enabled	*/
     2b2:	11 97       	sbiw	r26, 0x01	; 1
     2b4:	90 e8       	ldi	r25, 0x80	; 128
     2b6:	9c 93       	st	X, r25
		*stk-- = 0;		/*	r30 = 0	*/
     2b8:	11 97       	sbiw	r26, 0x01	; 1
     2ba:	1c 92       	st	X, r1
		*stk-- = 0;		/*	r29 = 0	*/
     2bc:	11 97       	sbiw	r26, 0x01	; 1
     2be:	1c 92       	st	X, r1
		*stk-- = 0;		/*	r28 = 0	*/
     2c0:	11 97       	sbiw	r26, 0x01	; 1
     2c2:	1c 92       	st	X, r1
		*stk-- = 0;		/*	r27 = 0	*/
     2c4:	11 97       	sbiw	r26, 0x01	; 1
     2c6:	1c 92       	st	X, r1
		*stk-- = 0;		/*	r26 = 0	*/
     2c8:	11 97       	sbiw	r26, 0x01	; 1
     2ca:	1c 92       	st	X, r1
		*stk-- = (char)HI( (unsigned)arg);		/*	r25 = 0	*/
     2cc:	11 97       	sbiw	r26, 0x01	; 1
     2ce:	1c 93       	st	X, r17
		*stk-- = (char)LO( (unsigned)arg);		/*	r24 = 0	*/
     2d0:	11 97       	sbiw	r26, 0x01	; 1
     2d2:	0c 93       	st	X, r16
		*stk-- = 0;		/*	r23 = 0	*/
     2d4:	11 97       	sbiw	r26, 0x01	; 1
     2d6:	1c 92       	st	X, r1
		*stk-- = 0;		/*	r22 = 0	*/
     2d8:	11 97       	sbiw	r26, 0x01	; 1
     2da:	1c 92       	st	X, r1
		*stk-- = 0;		/*	r21 = 0	*/
     2dc:	11 97       	sbiw	r26, 0x01	; 1
     2de:	1c 92       	st	X, r1
		*stk-- = 0;		/*	r20 = 0	*/
     2e0:	11 97       	sbiw	r26, 0x01	; 1
     2e2:	1c 92       	st	X, r1
		*stk-- = 0;		/*	r19 	*/
     2e4:	11 97       	sbiw	r26, 0x01	; 1
     2e6:	1c 92       	st	X, r1
		*stk-- = 0;		/*	r18 	*/
     2e8:	11 97       	sbiw	r26, 0x01	; 1
     2ea:	1c 92       	st	X, r1
		*stk-- = 0;		/*	r17 	*/
     2ec:	11 97       	sbiw	r26, 0x01	; 1
     2ee:	1c 92       	st	X, r1
		*stk-- = 0;		/*	r16 	*/
     2f0:	11 97       	sbiw	r26, 0x01	; 1
     2f2:	1c 92       	st	X, r1
		*stk-- = 0;		/*	r15 	*/
     2f4:	11 97       	sbiw	r26, 0x01	; 1
     2f6:	1c 92       	st	X, r1
		*stk-- = 0;		/*	r14 	*/
     2f8:	11 97       	sbiw	r26, 0x01	; 1
     2fa:	1c 92       	st	X, r1
		*stk-- = 0;		/*	r13 	*/
     2fc:	11 97       	sbiw	r26, 0x01	; 1
     2fe:	1c 92       	st	X, r1
		*stk-- = 0;		/*	r12 	*/
     300:	11 97       	sbiw	r26, 0x01	; 1
     302:	1c 92       	st	X, r1
		*stk-- = 0;		/*	r11 	*/
     304:	11 97       	sbiw	r26, 0x01	; 1
     306:	1c 92       	st	X, r1
		*stk-- = 0;		/*	r10 	*/
     308:	11 97       	sbiw	r26, 0x01	; 1
     30a:	1c 92       	st	X, r1
		*stk-- = 0;		/*	r9 		*/
     30c:	11 97       	sbiw	r26, 0x01	; 1
     30e:	1c 92       	st	X, r1
		*stk-- = 0;		/*	r8 		*/
     310:	11 97       	sbiw	r26, 0x01	; 1
     312:	1c 92       	st	X, r1
		*stk-- = 0;		/*	r7 		*/
     314:	11 97       	sbiw	r26, 0x01	; 1
     316:	1c 92       	st	X, r1
		*stk-- = 0;		/*	r6 		*/
     318:	11 97       	sbiw	r26, 0x01	; 1
     31a:	1c 92       	st	X, r1
		*stk-- = 0;		/*	r5 		*/
     31c:	11 97       	sbiw	r26, 0x01	; 1
     31e:	1c 92       	st	X, r1
		*stk-- = 0;		/*	r4 		*/
     320:	11 97       	sbiw	r26, 0x01	; 1
     322:	1c 92       	st	X, r1
		*stk-- = 0;		/*	r3 		*/
     324:	11 97       	sbiw	r26, 0x01	; 1
     326:	1c 92       	st	X, r1
		*stk-- = 0;		/*	r2 		*/
     328:	11 97       	sbiw	r26, 0x01	; 1
     32a:	1c 92       	st	X, r1
		*stk-- = 0;		/*	r1 must be ZERO 	*/
     32c:	11 97       	sbiw	r26, 0x01	; 1
     32e:	1c 92       	st	X, r1
		*stk-- = 0;		/*	r0 		*/
     330:	11 97       	sbiw	r26, 0x01	; 1
     332:	1c 92       	st	X, r1
     334:	b3 97       	sbiw	r30, 0x23	; 35
		t->stack = stk;
     336:	d7 01       	movw	r26, r14
     338:	ed 93       	st	X+, r30
     33a:	fc 93       	st	X, r31
	}
	//exit critical section, enable IRQ
	Enable(sr);
}
     33c:	df 91       	pop	r29
     33e:	cf 91       	pop	r28
     340:	1f 91       	pop	r17
     342:	0f 91       	pop	r16
     344:	ff 90       	pop	r15
     346:	ef 90       	pop	r14
     348:	df 90       	pop	r13
     34a:	cf 90       	pop	r12
     34c:	bf 90       	pop	r11
     34e:	af 90       	pop	r10
     350:	9f 90       	pop	r9
     352:	8f 90       	pop	r8
		*stk-- = 0;		/*	r1 must be ZERO 	*/
		*stk-- = 0;		/*	r0 		*/
		t->stack = stk;
	}
	//exit critical section, enable IRQ
	Enable(sr);
     354:	9e ce       	rjmp	.-708    	; 0x92 <Enable>

00000356 <DoSwap>:
		This function does a context swap
*******************************************/
void DoSwap(void) __attribute__ ( ( naked ) );
void DoSwap(void)
{
	SAVE_CONTEXT();		//save the context of the current task
     356:	ff 93       	push	r31
     358:	ff b7       	in	r31, 0x3f	; 63
     35a:	f8 94       	cli
     35c:	ff 93       	push	r31
     35e:	ef 93       	push	r30
     360:	df 93       	push	r29
     362:	cf 93       	push	r28
     364:	bf 93       	push	r27
     366:	af 93       	push	r26
     368:	9f 93       	push	r25
     36a:	8f 93       	push	r24
     36c:	7f 93       	push	r23
     36e:	6f 93       	push	r22
     370:	5f 93       	push	r21
     372:	4f 93       	push	r20
     374:	3f 93       	push	r19
     376:	2f 93       	push	r18
     378:	1f 93       	push	r17
     37a:	0f 93       	push	r16
     37c:	ff 92       	push	r15
     37e:	ef 92       	push	r14
     380:	df 92       	push	r13
     382:	cf 92       	push	r12
     384:	bf 92       	push	r11
     386:	af 92       	push	r10
     388:	9f 92       	push	r9
     38a:	8f 92       	push	r8
     38c:	7f 92       	push	r7
     38e:	6f 92       	push	r6
     390:	5f 92       	push	r5
     392:	4f 92       	push	r4
     394:	3f 92       	push	r3
     396:	2f 92       	push	r2
     398:	1f 92       	push	r1
     39a:	11 24       	eor	r1, r1
     39c:	0f 92       	push	r0
     39e:	a0 91 95 00 	lds	r26, 0x0095	; 0x800095 <pCurrentTask>
     3a2:	b0 91 96 00 	lds	r27, 0x0096	; 0x800096 <pCurrentTask+0x1>
     3a6:	0d b6       	in	r0, 0x3d	; 61
     3a8:	0d 92       	st	X+, r0
     3aa:	0e b6       	in	r0, 0x3e	; 62
     3ac:	0d 92       	st	X+, r0
	pCurrentTask = pNextTask;	//set current task to next task
     3ae:	80 91 99 00 	lds	r24, 0x0099	; 0x800099 <pNextTask>
     3b2:	90 91 9a 00 	lds	r25, 0x009A	; 0x80009a <pNextTask+0x1>
     3b6:	90 93 96 00 	sts	0x0096, r25	; 0x800096 <pCurrentTask+0x1>
     3ba:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <pCurrentTask>
	RESTORE_CONTEXT();		//restore context of new task
     3be:	a0 91 99 00 	lds	r26, 0x0099	; 0x800099 <pNextTask>
     3c2:	b0 91 9a 00 	lds	r27, 0x009A	; 0x80009a <pNextTask+0x1>
     3c6:	cd 91       	ld	r28, X+
     3c8:	cd bf       	out	0x3d, r28	; 61
     3ca:	dd 91       	ld	r29, X+
     3cc:	de bf       	out	0x3e, r29	; 62
     3ce:	0f 90       	pop	r0
     3d0:	1f 90       	pop	r1
     3d2:	2f 90       	pop	r2
     3d4:	3f 90       	pop	r3
     3d6:	4f 90       	pop	r4
     3d8:	5f 90       	pop	r5
     3da:	6f 90       	pop	r6
     3dc:	7f 90       	pop	r7
     3de:	8f 90       	pop	r8
     3e0:	9f 90       	pop	r9
     3e2:	af 90       	pop	r10
     3e4:	bf 90       	pop	r11
     3e6:	cf 90       	pop	r12
     3e8:	df 90       	pop	r13
     3ea:	ef 90       	pop	r14
     3ec:	ff 90       	pop	r15
     3ee:	0f 91       	pop	r16
     3f0:	1f 91       	pop	r17
     3f2:	2f 91       	pop	r18
     3f4:	3f 91       	pop	r19
     3f6:	4f 91       	pop	r20
     3f8:	5f 91       	pop	r21
     3fa:	6f 91       	pop	r22
     3fc:	7f 91       	pop	r23
     3fe:	8f 91       	pop	r24
     400:	9f 91       	pop	r25
     402:	af 91       	pop	r26
     404:	bf 91       	pop	r27
     406:	cf 91       	pop	r28
     408:	df 91       	pop	r29
     40a:	ef 91       	pop	r30
     40c:	ff 91       	pop	r31
     40e:	f7 fd       	sbrc	r31, 7
     410:	03 c0       	rjmp	.+6      	; 0x418 <irqen>
     412:	ff bf       	out	0x3f, r31	; 63
     414:	ff 91       	pop	r31
     416:	08 95       	ret

00000418 <irqen>:
     418:	ff 77       	andi	r31, 0x7F	; 127
     41a:	ff bf       	out	0x3f, r31	; 63
     41c:	ff 91       	pop	r31
     41e:	18 95       	reti

00000420 <ExitInterrupt>:
************************************************************************/

void ExitInterrupt(void)
{
	//decrement Interrupt level
	--InterruptCount;
     420:	80 91 9b 00 	lds	r24, 0x009B	; 0x80009b <InterruptCount>
     424:	90 91 9c 00 	lds	r25, 0x009C	; 0x80009c <InterruptCount+0x1>
     428:	01 97       	sbiw	r24, 0x01	; 1
     42a:	90 93 9c 00 	sts	0x009C, r25	; 0x80009c <InterruptCount+0x1>
     42e:	80 93 9b 00 	sts	0x009B, r24	; 0x80009b <InterruptCount>
	//don't swap if nested or
	//if multitasking is blocked
	if(!InterruptCount)	
     432:	80 91 9b 00 	lds	r24, 0x009B	; 0x80009b <InterruptCount>
     436:	90 91 9c 00 	lds	r25, 0x009C	; 0x80009c <InterruptCount+0x1>
     43a:	89 2b       	or	r24, r25
     43c:	09 f0       	breq	.+2      	; 0x440 <ExitInterrupt+0x20>
     43e:	5f c0       	rjmp	.+190    	; 0x4fe <irqen+0x8>
	{
		//Update the time stamp in the current task
		pCurrentTask->TimeStamp = TStamp;
     440:	40 91 95 00 	lds	r20, 0x0095	; 0x800095 <pCurrentTask>
     444:	50 91 96 00 	lds	r21, 0x0096	; 0x800096 <pCurrentTask+0x1>
     448:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <TStamp>
     44c:	90 91 53 01 	lds	r25, 0x0153	; 0x800153 <TStamp+0x1>
     450:	fa 01       	movw	r30, r20
     452:	95 87       	std	Z+13, r25	; 0x0d
     454:	84 87       	std	Z+12, r24	; 0x0c
		//get the next task and put the current
		//task back into the priority queue
		Replace(&ActiveTasks,(void **)&pNextTask,pCurrentTask);
     456:	69 e9       	ldi	r22, 0x99	; 153
     458:	70 e0       	ldi	r23, 0x00	; 0
     45a:	8b e8       	ldi	r24, 0x8B	; 139
     45c:	90 e0       	ldi	r25, 0x00	; 0
     45e:	41 d9       	rcall	.-3454   	; 0xfffff6e2 <__eeprom_end+0xff7ef6e2>
		//check to see if we got the same task back
		if(pNextTask != pCurrentTask)
     460:	e0 91 99 00 	lds	r30, 0x0099	; 0x800099 <pNextTask>
     464:	f0 91 9a 00 	lds	r31, 0x009A	; 0x80009a <pNextTask+0x1>
     468:	80 91 95 00 	lds	r24, 0x0095	; 0x800095 <pCurrentTask>
     46c:	90 91 96 00 	lds	r25, 0x0096	; 0x800096 <pCurrentTask+0x1>
     470:	e8 17       	cp	r30, r24
     472:	f9 07       	cpc	r31, r25
     474:	09 f4       	brne	.+2      	; 0x478 <ExitInterrupt+0x58>
     476:	43 c0       	rjmp	.+134    	; 0x4fe <irqen+0x8>
		{
			//increment the swap counter
			pNextTask->TcbSwaps++;
     478:	86 85       	ldd	r24, Z+14	; 0x0e
     47a:	97 85       	ldd	r25, Z+15	; 0x0f
     47c:	01 96       	adiw	r24, 0x01	; 1
     47e:	97 87       	std	Z+15, r25	; 0x0f
     480:	86 87       	std	Z+14, r24	; 0x0e
			// the size of the stack
			// ignore return address on
			// stack to 
			// Exit Interrupt
			//-----------------------------
			asm volatile (
     482:	9e b7       	in	r25, 0x3e	; 62
     484:	8d b7       	in	r24, 0x3d	; 61
     486:	02 96       	adiw	r24, 0x02	; 2
     488:	a0 91 95 00 	lds	r26, 0x0095	; 0x800095 <pCurrentTask>
     48c:	b0 91 96 00 	lds	r27, 0x0096	; 0x800096 <pCurrentTask+0x1>
     490:	8d 93       	st	X+, r24
     492:	9d 93       	st	X+, r25
			"lds	r26, pCurrentTask		\n\t"	//get address of current task
			"lds	r27, pCurrentTask + 1	\n\t"
			"st		x+, r24					\n\t"	//save stack pointer in TCB
			"st		x+, r25					\n\t"
			);
			pCurrentTask = pNextTask;	//update current task
     494:	f0 93 96 00 	sts	0x0096, r31	; 0x800096 <pCurrentTask+0x1>
     498:	e0 93 95 00 	sts	0x0095, r30	; 0x800095 <pCurrentTask>
			RESTORE_CONTEXT();		//restore next task context
     49c:	a0 91 99 00 	lds	r26, 0x0099	; 0x800099 <pNextTask>
     4a0:	b0 91 9a 00 	lds	r27, 0x009A	; 0x80009a <pNextTask+0x1>
     4a4:	cd 91       	ld	r28, X+
     4a6:	cd bf       	out	0x3d, r28	; 61
     4a8:	dd 91       	ld	r29, X+
     4aa:	de bf       	out	0x3e, r29	; 62
     4ac:	0f 90       	pop	r0
     4ae:	1f 90       	pop	r1
     4b0:	2f 90       	pop	r2
     4b2:	3f 90       	pop	r3
     4b4:	4f 90       	pop	r4
     4b6:	5f 90       	pop	r5
     4b8:	6f 90       	pop	r6
     4ba:	7f 90       	pop	r7
     4bc:	8f 90       	pop	r8
     4be:	9f 90       	pop	r9
     4c0:	af 90       	pop	r10
     4c2:	bf 90       	pop	r11
     4c4:	cf 90       	pop	r12
     4c6:	df 90       	pop	r13
     4c8:	ef 90       	pop	r14
     4ca:	ff 90       	pop	r15
     4cc:	0f 91       	pop	r16
     4ce:	1f 91       	pop	r17
     4d0:	2f 91       	pop	r18
     4d2:	3f 91       	pop	r19
     4d4:	4f 91       	pop	r20
     4d6:	5f 91       	pop	r21
     4d8:	6f 91       	pop	r22
     4da:	7f 91       	pop	r23
     4dc:	8f 91       	pop	r24
     4de:	9f 91       	pop	r25
     4e0:	af 91       	pop	r26
     4e2:	bf 91       	pop	r27
     4e4:	cf 91       	pop	r28
     4e6:	df 91       	pop	r29
     4e8:	ef 91       	pop	r30
     4ea:	ff 91       	pop	r31
     4ec:	f7 fd       	sbrc	r31, 7
     4ee:	03 c0       	rjmp	.+6      	; 0x4f6 <irqen>
     4f0:	ff bf       	out	0x3f, r31	; 63
     4f2:	ff 91       	pop	r31
     4f4:	08 95       	ret

000004f6 <irqen>:
     4f6:	ff 77       	andi	r31, 0x7F	; 127
     4f8:	ff bf       	out	0x3f, r31	; 63
     4fa:	ff 91       	pop	r31
     4fc:	18 95       	reti
     4fe:	08 95       	ret

00000500 <EnterInterrupt>:
}

void EnterInterrupt(void)
{
	//Increment interrupt level
	++InterruptCount;
     500:	80 91 9b 00 	lds	r24, 0x009B	; 0x80009b <InterruptCount>
     504:	90 91 9c 00 	lds	r25, 0x009C	; 0x80009c <InterruptCount+0x1>
     508:	01 96       	adiw	r24, 0x01	; 1
     50a:	90 93 9c 00 	sts	0x009C, r25	; 0x80009c <InterruptCount+0x1>
     50e:	80 93 9b 00 	sts	0x009B, r24	; 0x80009b <InterruptCount>
     512:	08 95       	ret

00000514 <TaskIdle>:
//	allowed to use any blocking objects, such
//	as PendSemaphore, etc.
//************************************************
void TaskIdle(void *arg)  __attribute__ ( ( noreturn ) );
void TaskIdle(void *arg)
{
     514:	cf 93       	push	r28
     516:	df 93       	push	r29
     518:	00 d0       	rcall	.+0      	; 0x51a <TaskIdle+0x6>
     51a:	cd b7       	in	r28, 0x3d	; 61
     51c:	de b7       	in	r29, 0x3e	; 62
	volatile int i=0;
     51e:	1a 82       	std	Y+2, r1	; 0x02
     520:	19 82       	std	Y+1, r1	; 0x01
	while(1)
	{
		i++;
     522:	89 81       	ldd	r24, Y+1	; 0x01
     524:	9a 81       	ldd	r25, Y+2	; 0x02
     526:	01 96       	adiw	r24, 0x01	; 1
     528:	9a 83       	std	Y+2, r25	; 0x02
     52a:	89 83       	std	Y+1, r24	; 0x01
     52c:	fa cf       	rjmp	.-12     	; 0x522 <TaskIdle+0xe>

0000052e <DacOut>:
	DACMSG_SETDAC_PAYLOAD *pPayload;
	char flag;
	DAC_D *pDacs;
	int i;

	pDacs = malloc(sizeof(DAC_D));
     52e:	8a e1       	ldi	r24, 0x1A	; 26
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	e3 d2       	rcall	.+1478   	; 0xafa <malloc>
     534:	ec 01       	movw	r28, r24
     536:	dc 01       	movw	r26, r24
     538:	12 96       	adiw	r26, 0x02	; 2
     53a:	fc 01       	movw	r30, r24
     53c:	3a 96       	adiw	r30, 0x0a	; 10
     53e:	4a 96       	adiw	r24, 0x1a	; 26
	//--------------------------------------
	// Initialize the Dac Descriptor block
	//--------------------------------------
	for(i=0;i<8;++i)
	{
		pDacs->GateFlag[i] = GATEFLAG_GATEIDLE;
     540:	1d 92       	st	X+, r1
		pDacs->Vals[i] = 0;
     542:	11 92       	st	Z+, r1
     544:	11 92       	st	Z+, r1

	pDacs = malloc(sizeof(DAC_D));
	//--------------------------------------
	// Initialize the Dac Descriptor block
	//--------------------------------------
	for(i=0;i<8;++i)
     546:	8e 17       	cp	r24, r30
     548:	9f 07       	cpc	r25, r31
     54a:	d1 f7       	brne	.-12     	; 0x540 <DacOut+0x12>
	{
		pDacs->GateFlag[i] = GATEFLAG_GATEIDLE;
		pDacs->Vals[i] = 0;
	}
	pDacs->CurChan = 0;
     54c:	19 82       	std	Y+1, r1	; 0x01
     54e:	18 82       	st	Y, r1
	//-------------------------------
	// get the process started
	//-------------------------------
	PostSemaphore(pStrobDone,0);
     550:	60 e0       	ldi	r22, 0x00	; 0
     552:	70 e0       	ldi	r23, 0x00	; 0
     554:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <pStrobDone>
     558:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <pStrobDone+0x1>
     55c:	67 d7       	rcall	.+3790   	; 0x142c <PostSemaphore>
	while(1)
	{
		//---------------------------
		// wait for a message
		//---------------------------
		pMSG = MqGet(pMsgDac);
     55e:	80 91 b5 00 	lds	r24, 0x00B5	; 0x8000b5 <pMsgDac>
     562:	90 91 b6 00 	lds	r25, 0x00B6	; 0x8000b6 <pMsgDac+0x1>
     566:	8b d4       	rcall	.+2326   	; 0xe7e <MqGet>
     568:	8c 01       	movw	r16, r24
		//---------------------------
		// Decode the message command
		//---------------------------
		switch(pMSG->MsgCmd)
     56a:	dc 01       	movw	r26, r24
     56c:	8d 91       	ld	r24, X+
     56e:	9c 91       	ld	r25, X
     570:	00 97       	sbiw	r24, 0x00	; 0
     572:	19 f0       	breq	.+6      	; 0x57a <DacOut+0x4c>
     574:	01 97       	sbiw	r24, 0x01	; 1
     576:	d1 f0       	breq	.+52     	; 0x5ac <DacOut+0x7e>
     578:	88 c0       	rjmp	.+272    	; 0x68a <DacOut+0x15c>
				pPayload = (DACMSG_SETDAC_PAYLOAD *)pMSG->Payload;
				//we set the current channle to the
				//channel of the new dac value
				//this way there is a minimum
				//amount of latency
				pDacs->CurChan = pPayload->m_Chan;
     57a:	f8 01       	movw	r30, r16
     57c:	84 85       	ldd	r24, Z+12	; 0x0c
     57e:	90 e0       	ldi	r25, 0x00	; 0
     580:	99 83       	std	Y+1, r25	; 0x01
     582:	88 83       	st	Y, r24
				//set the value of the dac
				pDacs->Vals[pDacs->CurChan] = pPayload->DacVal;
     584:	fc 01       	movw	r30, r24
     586:	35 96       	adiw	r30, 0x05	; 5
     588:	ee 0f       	add	r30, r30
     58a:	ff 1f       	adc	r31, r31
     58c:	ec 0f       	add	r30, r28
     58e:	fd 1f       	adc	r31, r29
     590:	d8 01       	movw	r26, r16
     592:	1d 96       	adiw	r26, 0x0d	; 13
     594:	2d 91       	ld	r18, X+
     596:	3c 91       	ld	r19, X
     598:	1e 97       	sbiw	r26, 0x0e	; 14
     59a:	31 83       	std	Z+1, r19	; 0x01
     59c:	20 83       	st	Z, r18
				//set the gate flag
				pDacs->GateFlag[pDacs->CurChan] = pPayload->Gate;
     59e:	fe 01       	movw	r30, r28
     5a0:	e8 0f       	add	r30, r24
     5a2:	f9 1f       	adc	r31, r25
     5a4:	1f 96       	adiw	r26, 0x0f	; 15
     5a6:	2c 91       	ld	r18, X
     5a8:	22 83       	std	Z+2, r18	; 0x02
				break;
     5aa:	6f c0       	rjmp	.+222    	; 0x68a <DacOut+0x15c>
				// the list of DAC values and
				// outputs them one by one
				//--------------------------------
				// First we take care of the gate
				//-------------------------------
				flag = pDacs->GateFlag[pDacs->CurChan];
     5ac:	e8 80       	ld	r14, Y
     5ae:	f9 80       	ldd	r15, Y+1	; 0x01
     5b0:	fe 01       	movw	r30, r28
     5b2:	ee 0d       	add	r30, r14
     5b4:	ff 1d       	adc	r31, r15
     5b6:	82 81       	ldd	r24, Z+2	; 0x02
				if(flag)	//is active gate?
     5b8:	88 23       	and	r24, r24
     5ba:	09 f4       	brne	.+2      	; 0x5be <DacOut+0x90>
     5bc:	42 c0       	rjmp	.+132    	; 0x642 <DacOut+0x114>
				{
					switch(pDacs->CurChan)
     5be:	b8 e0       	ldi	r27, 0x08	; 8
     5c0:	eb 16       	cp	r14, r27
     5c2:	f1 04       	cpc	r15, r1
     5c4:	f0 f5       	brcc	.+124    	; 0x642 <DacOut+0x114>
     5c6:	97 01       	movw	r18, r14
     5c8:	2f 5e       	subi	r18, 0xEF	; 239
     5ca:	3f 4f       	sbci	r19, 0xFF	; 255
     5cc:	2f 93       	push	r18
     5ce:	3f 93       	push	r19
     5d0:	08 95       	ret
					{
						case DACCHAN_PITCH:
							if(flag == GATEFLAG_GATEON)
     5d2:	81 30       	cpi	r24, 0x01	; 1
     5d4:	19 f4       	brne	.+6      	; 0x5dc <DacOut+0xae>
								SetGatePort(GATE_GATE);
     5d6:	80 e0       	ldi	r24, 0x00	; 0
     5d8:	60 dd       	rcall	.-1344   	; 0x9a <SetGatePort>
     5da:	04 c0       	rjmp	.+8      	; 0x5e4 <DacOut+0xb6>
							else if (flag == GATEFLAG_GATEOFF)
     5dc:	82 30       	cpi	r24, 0x02	; 2
     5de:	11 f4       	brne	.+4      	; 0x5e4 <DacOut+0xb6>
								ClearGatePort(GATE_GATE);
     5e0:	80 e0       	ldi	r24, 0x00	; 0
     5e2:	69 dd       	rcall	.-1326   	; 0xb6 <ClearGatePort>
							pDacs->GateFlag[DACCHAN_PITCH] = GATEFLAG_GATEIDLE;
     5e4:	1a 82       	std	Y+2, r1	; 0x02
							break;
     5e6:	2d c0       	rjmp	.+90     	; 0x642 <DacOut+0x114>
						case DACCHAN_VEL:	//no gate for these
						case DACCHAN_CV1:
						case DACCHAN_CV2:
							pDacs->GateFlag[pDacs->CurChan] = GATEFLAG_GATEIDLE;
     5e8:	12 82       	std	Z+2, r1	; 0x02
							break;
     5ea:	2b c0       	rjmp	.+86     	; 0x642 <DacOut+0x114>
						case DACCHAN_CH4:
							if(flag == GATEFLAG_GATEON)
     5ec:	81 30       	cpi	r24, 0x01	; 1
     5ee:	19 f4       	brne	.+6      	; 0x5f6 <DacOut+0xc8>
								SetGatePort(GATE_GATE1);
     5f0:	84 e0       	ldi	r24, 0x04	; 4
     5f2:	53 dd       	rcall	.-1370   	; 0x9a <SetGatePort>
     5f4:	04 c0       	rjmp	.+8      	; 0x5fe <DacOut+0xd0>
							else if (flag == GATEFLAG_GATEOFF)
     5f6:	82 30       	cpi	r24, 0x02	; 2
     5f8:	11 f4       	brne	.+4      	; 0x5fe <DacOut+0xd0>
								ClearGatePort(GATE_GATE1);
     5fa:	84 e0       	ldi	r24, 0x04	; 4
     5fc:	5c dd       	rcall	.-1352   	; 0xb6 <ClearGatePort>
							pDacs->GateFlag[DACCHAN_CH4] = GATEFLAG_GATEIDLE;
     5fe:	1e 82       	std	Y+6, r1	; 0x06
							break;
     600:	20 c0       	rjmp	.+64     	; 0x642 <DacOut+0x114>
						case DACCHAN_CH5:
							if(flag == GATEFLAG_GATEON)
     602:	81 30       	cpi	r24, 0x01	; 1
     604:	19 f4       	brne	.+6      	; 0x60c <DacOut+0xde>
								SetGatePort(GATE_GATE2);
     606:	85 e0       	ldi	r24, 0x05	; 5
     608:	48 dd       	rcall	.-1392   	; 0x9a <SetGatePort>
     60a:	04 c0       	rjmp	.+8      	; 0x614 <DacOut+0xe6>
							else if (flag == GATEFLAG_GATEOFF)
     60c:	82 30       	cpi	r24, 0x02	; 2
     60e:	11 f4       	brne	.+4      	; 0x614 <DacOut+0xe6>
								ClearGatePort(GATE_GATE2);
     610:	85 e0       	ldi	r24, 0x05	; 5
     612:	51 dd       	rcall	.-1374   	; 0xb6 <ClearGatePort>
							pDacs->GateFlag[DACCHAN_CH5] = GATEFLAG_GATEIDLE;
     614:	1f 82       	std	Y+7, r1	; 0x07
							break;
     616:	15 c0       	rjmp	.+42     	; 0x642 <DacOut+0x114>
						case DACCHAN_CH6:
							if(flag == GATEFLAG_GATEON)
     618:	81 30       	cpi	r24, 0x01	; 1
     61a:	19 f4       	brne	.+6      	; 0x622 <DacOut+0xf4>
								SetGatePort(GATE_GATE3);
     61c:	86 e0       	ldi	r24, 0x06	; 6
     61e:	3d dd       	rcall	.-1414   	; 0x9a <SetGatePort>
     620:	04 c0       	rjmp	.+8      	; 0x62a <DacOut+0xfc>
							else if (flag == GATEFLAG_GATEOFF)
     622:	82 30       	cpi	r24, 0x02	; 2
     624:	11 f4       	brne	.+4      	; 0x62a <DacOut+0xfc>
								ClearGatePort(GATE_GATE3);
     626:	86 e0       	ldi	r24, 0x06	; 6
     628:	46 dd       	rcall	.-1396   	; 0xb6 <ClearGatePort>
							pDacs->GateFlag[DACCHAN_CH6] = GATEFLAG_GATEIDLE;
     62a:	18 86       	std	Y+8, r1	; 0x08
							break;
     62c:	0a c0       	rjmp	.+20     	; 0x642 <DacOut+0x114>
						case DACCHAN_CH7:
							if(flag == GATEFLAG_GATEON)
     62e:	81 30       	cpi	r24, 0x01	; 1
     630:	19 f4       	brne	.+6      	; 0x638 <DacOut+0x10a>
								SetGatePort(GATE_GATE4);
     632:	87 e0       	ldi	r24, 0x07	; 7
     634:	32 dd       	rcall	.-1436   	; 0x9a <SetGatePort>
     636:	04 c0       	rjmp	.+8      	; 0x640 <DacOut+0x112>
							else if (flag == GATEFLAG_GATEOFF)
     638:	82 30       	cpi	r24, 0x02	; 2
     63a:	11 f4       	brne	.+4      	; 0x640 <DacOut+0x112>
								ClearGatePort(GATE_GATE4);
     63c:	87 e0       	ldi	r24, 0x07	; 7
     63e:	3b dd       	rcall	.-1418   	; 0xb6 <ClearGatePort>
							pDacs->GateFlag[DACCHAN_CH7] = GATEFLAG_GATEIDLE;
     640:	19 86       	std	Y+9, r1	; 0x09
				//----------------------------------------
				// Gates have been taken care of, now
				// we go to the next channel and refresh
				// that sample and hold
				//-----------------------------------------
				pDacs->CurChan++;
     642:	ef ef       	ldi	r30, 0xFF	; 255
     644:	ee 1a       	sub	r14, r30
     646:	fe 0a       	sbc	r15, r30
				if(pDacs->CurChan == 8) pDacs->CurChan = 0;
     648:	f8 e0       	ldi	r31, 0x08	; 8
     64a:	ef 16       	cp	r14, r31
     64c:	f1 04       	cpc	r15, r1
     64e:	19 f0       	breq	.+6      	; 0x656 <DacOut+0x128>
				//----------------------------------------
				// Gates have been taken care of, now
				// we go to the next channel and refresh
				// that sample and hold
				//-----------------------------------------
				pDacs->CurChan++;
     650:	f9 82       	std	Y+1, r15	; 0x01
     652:	e8 82       	st	Y, r14
     654:	02 c0       	rjmp	.+4      	; 0x65a <DacOut+0x12c>
				if(pDacs->CurChan == 8) pDacs->CurChan = 0;
     656:	19 82       	std	Y+1, r1	; 0x01
     658:	18 82       	st	Y, r1
				DAC_LOW = LO(pDacs->Vals[pDacs->CurChan]);
     65a:	e8 81       	ld	r30, Y
     65c:	f9 81       	ldd	r31, Y+1	; 0x01
     65e:	35 96       	adiw	r30, 0x05	; 5
     660:	ee 0f       	add	r30, r30
     662:	ff 1f       	adc	r31, r31
     664:	ec 0f       	add	r30, r28
     666:	fd 1f       	adc	r31, r29
     668:	80 81       	ld	r24, Z
     66a:	80 93 00 88 	sts	0x8800, r24	; 0x808800 <__bss_end+0x86ac>
				DAC_HIGH = HI(pDacs->Vals[pDacs->CurChan]);
     66e:	e8 81       	ld	r30, Y
     670:	f9 81       	ldd	r31, Y+1	; 0x01
     672:	35 96       	adiw	r30, 0x05	; 5
     674:	ee 0f       	add	r30, r30
     676:	ff 1f       	adc	r31, r31
     678:	ec 0f       	add	r30, r28
     67a:	fd 1f       	adc	r31, r29
     67c:	81 81       	ldd	r24, Z+1	; 0x01
     67e:	80 93 00 80 	sts	0x8000, r24	; 0x808000 <__bss_end+0x7eac>
				PORTB = pDacs->CurChan;
     682:	88 81       	ld	r24, Y
     684:	88 bb       	out	0x18, r24	; 24
				DAC_LOAD = 0;
     686:	10 92 00 84 	sts	0x8400, r1	; 0x808400 <__bss_end+0x82ac>
				break;
		}
		DeleteMSG(pMSG);
     68a:	c8 01       	movw	r24, r16
     68c:	48 d4       	rcall	.+2192   	; 0xf1e <DeleteMSG>
	}
     68e:	67 cf       	rjmp	.-306    	; 0x55e <DacOut+0x30>

00000690 <AuxDacTask>:

	while(1)
	{
		PendSemaphore(pStrobDone,0);
		pMSG = NewMSG(0);
		pMSG->MsgCmd = DACMSG_STROBEDONE;
     690:	c1 e0       	ldi	r28, 0x01	; 1
     692:	d0 e0       	ldi	r29, 0x00	; 0
{
	MSG *pMSG;

	while(1)
	{
		PendSemaphore(pStrobDone,0);
     694:	60 e0       	ldi	r22, 0x00	; 0
     696:	70 e0       	ldi	r23, 0x00	; 0
     698:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <pStrobDone>
     69c:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <pStrobDone+0x1>
     6a0:	65 d6       	rcall	.+3274   	; 0x136c <PendSemaphore>
		pMSG = NewMSG(0);
     6a2:	80 e0       	ldi	r24, 0x00	; 0
     6a4:	90 e0       	ldi	r25, 0x00	; 0
     6a6:	1e d4       	rcall	.+2108   	; 0xee4 <NewMSG>
		pMSG->MsgCmd = DACMSG_STROBEDONE;
     6a8:	fc 01       	movw	r30, r24
     6aa:	d1 83       	std	Z+1, r29	; 0x01
     6ac:	c0 83       	st	Z, r28
		MqPut(pMsgDac,pMSG);
     6ae:	bc 01       	movw	r22, r24
     6b0:	80 91 b5 00 	lds	r24, 0x00B5	; 0x8000b5 <pMsgDac>
     6b4:	90 91 b6 00 	lds	r25, 0x00B6	; 0x8000b6 <pMsgDac+0x1>
     6b8:	98 d3       	rcall	.+1840   	; 0xdea <MqPut>
     6ba:	ec cf       	rjmp	.-40     	; 0x694 <AuxDacTask+0x4>

000006bc <MidiIn>:
{
	char c;	//character from midi port

	while(1)	//infinite loop
	{
		c = USART_GetC();	//get character from midi port
     6bc:	8b d9       	rcall	.-3306   	; 0xfffff9d4 <__eeprom_end+0xff7ef9d4>
		ParseMidi(&MidiParseDesc,c);	//parse byte
     6be:	68 2f       	mov	r22, r24
     6c0:	89 ee       	ldi	r24, 0xE9	; 233
     6c2:	90 e0       	ldi	r25, 0x00	; 0
     6c4:	5a d5       	rcall	.+2740   	; 0x117a <ParseMidi>
     6c6:	fa cf       	rjmp	.-12     	; 0x6bc <MidiIn>

000006c8 <TaskMidiClock>:
void TaskMidiClock(void *arg)  __attribute__ ( ( noreturn ) );
void TaskMidiClock(void *arg)
{
	while(1)
	{
		PendSemaphore(pSemClock,0);
     6c8:	60 e0       	ldi	r22, 0x00	; 0
     6ca:	70 e0       	ldi	r23, 0x00	; 0
     6cc:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <pSemClock>
     6d0:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <pSemClock+0x1>
     6d4:	4b d6       	rcall	.+3222   	; 0x136c <PendSemaphore>
		TimeDelay(10);
     6d6:	8a e0       	ldi	r24, 0x0A	; 10
     6d8:	90 e0       	ldi	r25, 0x00	; 0
     6da:	8e d8       	rcall	.-3812   	; 0xfffff7f8 <__eeprom_end+0xff7ef7f8>
		ClearGatePort(GATE_CLOCK);
     6dc:	81 e0       	ldi	r24, 0x01	; 1
     6de:	eb dc       	rcall	.-1578   	; 0xb6 <ClearGatePort>
     6e0:	f3 cf       	rjmp	.-26     	; 0x6c8 <TaskMidiClock>

000006e2 <TaskMidiReset>:
void TaskMidiReset(void *arg)  __attribute__ ( ( noreturn ) );
void TaskMidiReset(void *arg)
{
	while(1)
	{
		PendSemaphore(pSemReset,0);	//wat for it
     6e2:	60 e0       	ldi	r22, 0x00	; 0
     6e4:	70 e0       	ldi	r23, 0x00	; 0
     6e6:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <pSemReset>
     6ea:	90 91 2a 01 	lds	r25, 0x012A	; 0x80012a <pSemReset+0x1>
     6ee:	3e d6       	rcall	.+3196   	; 0x136c <PendSemaphore>
		TimeDelay(10);	//delay an extra 10mS
     6f0:	8a e0       	ldi	r24, 0x0A	; 10
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	81 d8       	rcall	.-3838   	; 0xfffff7f8 <__eeprom_end+0xff7ef7f8>
		ClearGatePort(GATE_RESET);	//clear bit
     6f6:	83 e0       	ldi	r24, 0x03	; 3
     6f8:	de dc       	rcall	.-1604   	; 0xb6 <ClearGatePort>
     6fa:	f3 cf       	rjmp	.-26     	; 0x6e2 <TaskMidiReset>

000006fc <InitINT0Irq>:
{
	//----------------------
	// Set INT0 to trigger
	// on Rising Edge
	//----------------------
	MCUCR |= BIT(ISC01) | BIT(ISC00);
     6fc:	85 b7       	in	r24, 0x35	; 53
     6fe:	83 60       	ori	r24, 0x03	; 3
     700:	85 bf       	out	0x35, r24	; 53
	CLEAR_STROBE_IRQ = 0;	//clear flag
     702:	10 92 00 8c 	sts	0x8C00, r1	; 0x808c00 <__bss_end+0x8aac>
	GICR |= BIT(INT0);
     706:	8b b7       	in	r24, 0x3b	; 59
     708:	80 64       	ori	r24, 0x40	; 64
     70a:	8b bf       	out	0x3b, r24	; 59
     70c:	08 95       	ret

0000070e <__vector_1>:
// done.
//*************************************************
void INT0_vect(void) __attribute__ ((naked));
void INT0_vect(void)
{
	SAVE_IRQ();
     70e:	ff 93       	push	r31
     710:	ff b7       	in	r31, 0x3f	; 63
     712:	f0 68       	ori	r31, 0x80	; 128
     714:	ff 93       	push	r31
     716:	ef 93       	push	r30
     718:	df 93       	push	r29
     71a:	cf 93       	push	r28
     71c:	bf 93       	push	r27
     71e:	af 93       	push	r26
     720:	9f 93       	push	r25
     722:	8f 93       	push	r24
     724:	7f 93       	push	r23
     726:	6f 93       	push	r22
     728:	5f 93       	push	r21
     72a:	4f 93       	push	r20
     72c:	3f 93       	push	r19
     72e:	2f 93       	push	r18
     730:	1f 93       	push	r17
     732:	0f 93       	push	r16
     734:	ff 92       	push	r15
     736:	ef 92       	push	r14
     738:	df 92       	push	r13
     73a:	cf 92       	push	r12
     73c:	bf 92       	push	r11
     73e:	af 92       	push	r10
     740:	9f 92       	push	r9
     742:	8f 92       	push	r8
     744:	7f 92       	push	r7
     746:	6f 92       	push	r6
     748:	5f 92       	push	r5
     74a:	4f 92       	push	r4
     74c:	3f 92       	push	r3
     74e:	2f 92       	push	r2
     750:	1f 92       	push	r1
     752:	11 24       	eor	r1, r1
     754:	0f 92       	push	r0
	EnterInterrupt();
     756:	d4 de       	rcall	.-600    	; 0x500 <EnterInterrupt>
    CLEAR_STROBE_IRQ = 0;	//reset interrupt
     758:	10 92 00 8c 	sts	0x8C00, r1	; 0x808c00 <__bss_end+0x8aac>
	//Notify system that Dac Write is done
	PostSemaphore(pStrobDone,0);
     75c:	60 e0       	ldi	r22, 0x00	; 0
     75e:	70 e0       	ldi	r23, 0x00	; 0
     760:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <pStrobDone>
     764:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <pStrobDone+0x1>
     768:	61 d6       	rcall	.+3266   	; 0x142c <PostSemaphore>
	ExitInterrupt();
     76a:	5a de       	rcall	.-844    	; 0x420 <ExitInterrupt>
	RESTORE_IRQ();
     76c:	0f 90       	pop	r0
     76e:	1f 90       	pop	r1
     770:	2f 90       	pop	r2
     772:	3f 90       	pop	r3
     774:	4f 90       	pop	r4
     776:	5f 90       	pop	r5
     778:	6f 90       	pop	r6
     77a:	7f 90       	pop	r7
     77c:	8f 90       	pop	r8
     77e:	9f 90       	pop	r9
     780:	af 90       	pop	r10
     782:	bf 90       	pop	r11
     784:	cf 90       	pop	r12
     786:	df 90       	pop	r13
     788:	ef 90       	pop	r14
     78a:	ff 90       	pop	r15
     78c:	0f 91       	pop	r16
     78e:	1f 91       	pop	r17
     790:	2f 91       	pop	r18
     792:	3f 91       	pop	r19
     794:	4f 91       	pop	r20
     796:	5f 91       	pop	r21
     798:	6f 91       	pop	r22
     79a:	7f 91       	pop	r23
     79c:	8f 91       	pop	r24
     79e:	9f 91       	pop	r25
     7a0:	af 91       	pop	r26
     7a2:	bf 91       	pop	r27
     7a4:	cf 91       	pop	r28
     7a6:	df 91       	pop	r29
     7a8:	ef 91       	pop	r30
     7aa:	ff 91       	pop	r31
     7ac:	ff 77       	andi	r31, 0x7F	; 127
     7ae:	ff bf       	out	0x3f, r31	; 63
     7b0:	ff 91       	pop	r31
     7b2:	18 95       	reti

000007b4 <__vector_2>:
//**************************************************

void INT1_vect(void) __attribute__ ((naked));
void INT1_vect(void)
{
	SAVE_IRQ();
     7b4:	ff 93       	push	r31
     7b6:	ff b7       	in	r31, 0x3f	; 63
     7b8:	f0 68       	ori	r31, 0x80	; 128
     7ba:	ff 93       	push	r31
     7bc:	ef 93       	push	r30
     7be:	df 93       	push	r29
     7c0:	cf 93       	push	r28
     7c2:	bf 93       	push	r27
     7c4:	af 93       	push	r26
     7c6:	9f 93       	push	r25
     7c8:	8f 93       	push	r24
     7ca:	7f 93       	push	r23
     7cc:	6f 93       	push	r22
     7ce:	5f 93       	push	r21
     7d0:	4f 93       	push	r20
     7d2:	3f 93       	push	r19
     7d4:	2f 93       	push	r18
     7d6:	1f 93       	push	r17
     7d8:	0f 93       	push	r16
     7da:	ff 92       	push	r15
     7dc:	ef 92       	push	r14
     7de:	df 92       	push	r13
     7e0:	cf 92       	push	r12
     7e2:	bf 92       	push	r11
     7e4:	af 92       	push	r10
     7e6:	9f 92       	push	r9
     7e8:	8f 92       	push	r8
     7ea:	7f 92       	push	r7
     7ec:	6f 92       	push	r6
     7ee:	5f 92       	push	r5
     7f0:	4f 92       	push	r4
     7f2:	3f 92       	push	r3
     7f4:	2f 92       	push	r2
     7f6:	1f 92       	push	r1
     7f8:	11 24       	eor	r1, r1
     7fa:	0f 92       	push	r0
	EnterInterrupt();
     7fc:	81 de       	rcall	.-766    	; 0x500 <EnterInterrupt>
	ExitInterrupt();
     7fe:	10 de       	rcall	.-992    	; 0x420 <ExitInterrupt>
	RESTORE_IRQ();
     800:	0f 90       	pop	r0
     802:	1f 90       	pop	r1
     804:	2f 90       	pop	r2
     806:	3f 90       	pop	r3
     808:	4f 90       	pop	r4
     80a:	5f 90       	pop	r5
     80c:	6f 90       	pop	r6
     80e:	7f 90       	pop	r7
     810:	8f 90       	pop	r8
     812:	9f 90       	pop	r9
     814:	af 90       	pop	r10
     816:	bf 90       	pop	r11
     818:	cf 90       	pop	r12
     81a:	df 90       	pop	r13
     81c:	ef 90       	pop	r14
     81e:	ff 90       	pop	r15
     820:	0f 91       	pop	r16
     822:	1f 91       	pop	r17
     824:	2f 91       	pop	r18
     826:	3f 91       	pop	r19
     828:	4f 91       	pop	r20
     82a:	5f 91       	pop	r21
     82c:	6f 91       	pop	r22
     82e:	7f 91       	pop	r23
     830:	8f 91       	pop	r24
     832:	9f 91       	pop	r25
     834:	af 91       	pop	r26
     836:	bf 91       	pop	r27
     838:	cf 91       	pop	r28
     83a:	df 91       	pop	r29
     83c:	ef 91       	pop	r30
     83e:	ff 91       	pop	r31
     840:	ff 77       	andi	r31, 0x7F	; 127
     842:	ff bf       	out	0x3f, r31	; 63
     844:	ff 91       	pop	r31
     846:	18 95       	reti

00000848 <Timer0Init>:
// Timer 0
//*******************************************

void Timer0Init(void)
{
	TCCR0 = 0x00;	//stop timer
     848:	13 be       	out	0x33, r1	; 51
	TCNT0 = 0x80;	//set count register
     84a:	80 e8       	ldi	r24, 0x80	; 128
     84c:	82 bf       	out	0x32, r24	; 50
	OCR0 = 0xff;	//set output compare
     84e:	8f ef       	ldi	r24, 0xFF	; 255
     850:	81 bf       	out	0x31, r24	; 49
	//Divide clock by 64
	TCCR0 = BIT(CS01) | BIT(CS00); //start timer
     852:	83 e0       	ldi	r24, 0x03	; 3
     854:	83 bf       	out	0x33, r24	; 51
	TIMSK |= BIT(TOIE0);
     856:	89 b7       	in	r24, 0x39	; 57
     858:	82 60       	ori	r24, 0x02	; 2
     85a:	89 bf       	out	0x39, r24	; 57
     85c:	08 95       	ret

0000085e <__vector_7>:
//	system.
//************************************************
void TIMER0_OVF_vect(void) __attribute__ ((naked));
void TIMER0_OVF_vect(void)
{
	SAVE_IRQ();
     85e:	ff 93       	push	r31
     860:	ff b7       	in	r31, 0x3f	; 63
     862:	f0 68       	ori	r31, 0x80	; 128
     864:	ff 93       	push	r31
     866:	ef 93       	push	r30
     868:	df 93       	push	r29
     86a:	cf 93       	push	r28
     86c:	bf 93       	push	r27
     86e:	af 93       	push	r26
     870:	9f 93       	push	r25
     872:	8f 93       	push	r24
     874:	7f 93       	push	r23
     876:	6f 93       	push	r22
     878:	5f 93       	push	r21
     87a:	4f 93       	push	r20
     87c:	3f 93       	push	r19
     87e:	2f 93       	push	r18
     880:	1f 93       	push	r17
     882:	0f 93       	push	r16
     884:	ff 92       	push	r15
     886:	ef 92       	push	r14
     888:	df 92       	push	r13
     88a:	cf 92       	push	r12
     88c:	bf 92       	push	r11
     88e:	af 92       	push	r10
     890:	9f 92       	push	r9
     892:	8f 92       	push	r8
     894:	7f 92       	push	r7
     896:	6f 92       	push	r6
     898:	5f 92       	push	r5
     89a:	4f 92       	push	r4
     89c:	3f 92       	push	r3
     89e:	2f 92       	push	r2
     8a0:	1f 92       	push	r1
     8a2:	11 24       	eor	r1, r1
     8a4:	0f 92       	push	r0
	EnterInterrupt();
     8a6:	2c de       	rcall	.-936    	; 0x500 <EnterInterrupt>
	TCNT0 = 0x80;
     8a8:	80 e8       	ldi	r24, 0x80	; 128
     8aa:	82 bf       	out	0x32, r24	; 50
	++Ticks;
     8ac:	80 91 b7 00 	lds	r24, 0x00B7	; 0x8000b7 <Ticks>
     8b0:	90 91 b8 00 	lds	r25, 0x00B8	; 0x8000b8 <Ticks+0x1>
     8b4:	01 96       	adiw	r24, 0x01	; 1
     8b6:	90 93 b8 00 	sts	0x00B8, r25	; 0x8000b8 <Ticks+0x1>
     8ba:	80 93 b7 00 	sts	0x00B7, r24	; 0x8000b7 <Ticks>
	TimerTicker();	//call OS timer services
     8be:	b2 d7       	rcall	.+3940   	; 0x1824 <TimerTicker>
	ExitInterrupt();
     8c0:	af dd       	rcall	.-1186   	; 0x420 <ExitInterrupt>
	RESTORE_IRQ();
     8c2:	0f 90       	pop	r0
     8c4:	1f 90       	pop	r1
     8c6:	2f 90       	pop	r2
     8c8:	3f 90       	pop	r3
     8ca:	4f 90       	pop	r4
     8cc:	5f 90       	pop	r5
     8ce:	6f 90       	pop	r6
     8d0:	7f 90       	pop	r7
     8d2:	8f 90       	pop	r8
     8d4:	9f 90       	pop	r9
     8d6:	af 90       	pop	r10
     8d8:	bf 90       	pop	r11
     8da:	cf 90       	pop	r12
     8dc:	df 90       	pop	r13
     8de:	ef 90       	pop	r14
     8e0:	ff 90       	pop	r15
     8e2:	0f 91       	pop	r16
     8e4:	1f 91       	pop	r17
     8e6:	2f 91       	pop	r18
     8e8:	3f 91       	pop	r19
     8ea:	4f 91       	pop	r20
     8ec:	5f 91       	pop	r21
     8ee:	6f 91       	pop	r22
     8f0:	7f 91       	pop	r23
     8f2:	8f 91       	pop	r24
     8f4:	9f 91       	pop	r25
     8f6:	af 91       	pop	r26
     8f8:	bf 91       	pop	r27
     8fa:	cf 91       	pop	r28
     8fc:	df 91       	pop	r29
     8fe:	ef 91       	pop	r30
     900:	ff 91       	pop	r31
     902:	ff 77       	andi	r31, 0x7F	; 127
     904:	ff bf       	out	0x3f, r31	; 63
     906:	ff 91       	pop	r31
     908:	18 95       	reti

0000090a <__vector_6>:
//****************************************

void TIMER1_OVF_vect(void) __attribute__ ((naked));
void TIMER1_OVF_vect(void)
{
	SAVE_IRQ();
     90a:	ff 93       	push	r31
     90c:	ff b7       	in	r31, 0x3f	; 63
     90e:	f0 68       	ori	r31, 0x80	; 128
     910:	ff 93       	push	r31
     912:	ef 93       	push	r30
     914:	df 93       	push	r29
     916:	cf 93       	push	r28
     918:	bf 93       	push	r27
     91a:	af 93       	push	r26
     91c:	9f 93       	push	r25
     91e:	8f 93       	push	r24
     920:	7f 93       	push	r23
     922:	6f 93       	push	r22
     924:	5f 93       	push	r21
     926:	4f 93       	push	r20
     928:	3f 93       	push	r19
     92a:	2f 93       	push	r18
     92c:	1f 93       	push	r17
     92e:	0f 93       	push	r16
     930:	ff 92       	push	r15
     932:	ef 92       	push	r14
     934:	df 92       	push	r13
     936:	cf 92       	push	r12
     938:	bf 92       	push	r11
     93a:	af 92       	push	r10
     93c:	9f 92       	push	r9
     93e:	8f 92       	push	r8
     940:	7f 92       	push	r7
     942:	6f 92       	push	r6
     944:	5f 92       	push	r5
     946:	4f 92       	push	r4
     948:	3f 92       	push	r3
     94a:	2f 92       	push	r2
     94c:	1f 92       	push	r1
     94e:	11 24       	eor	r1, r1
     950:	0f 92       	push	r0
	//-----------------
	// Reload timer
	// counter reg
	//-----------------
	EnterInterrupt();
     952:	d6 dd       	rcall	.-1108   	; 0x500 <EnterInterrupt>
	TCNT1H = 0xff;
     954:	8f ef       	ldi	r24, 0xFF	; 255
     956:	8d bd       	out	0x2d, r24	; 45
	TCNT1L = 0x83;
     958:	83 e8       	ldi	r24, 0x83	; 131
     95a:	8c bd       	out	0x2c, r24	; 44
	ExitInterrupt();
     95c:	61 dd       	rcall	.-1342   	; 0x420 <ExitInterrupt>
	RESTORE_IRQ();
     95e:	0f 90       	pop	r0
     960:	1f 90       	pop	r1
     962:	2f 90       	pop	r2
     964:	3f 90       	pop	r3
     966:	4f 90       	pop	r4
     968:	5f 90       	pop	r5
     96a:	6f 90       	pop	r6
     96c:	7f 90       	pop	r7
     96e:	8f 90       	pop	r8
     970:	9f 90       	pop	r9
     972:	af 90       	pop	r10
     974:	bf 90       	pop	r11
     976:	cf 90       	pop	r12
     978:	df 90       	pop	r13
     97a:	ef 90       	pop	r14
     97c:	ff 90       	pop	r15
     97e:	0f 91       	pop	r16
     980:	1f 91       	pop	r17
     982:	2f 91       	pop	r18
     984:	3f 91       	pop	r19
     986:	4f 91       	pop	r20
     988:	5f 91       	pop	r21
     98a:	6f 91       	pop	r22
     98c:	7f 91       	pop	r23
     98e:	8f 91       	pop	r24
     990:	9f 91       	pop	r25
     992:	af 91       	pop	r26
     994:	bf 91       	pop	r27
     996:	cf 91       	pop	r28
     998:	df 91       	pop	r29
     99a:	ef 91       	pop	r30
     99c:	ff 91       	pop	r31
     99e:	ff 77       	andi	r31, 0x7F	; 127
     9a0:	ff bf       	out	0x3f, r31	; 63
     9a2:	ff 91       	pop	r31
     9a4:	18 95       	reti

000009a6 <Timer1IrqInit>:
void Timer1IrqInit()
{
	//---------------------
	// Stop Timer
	//---------------------
	TCCR1B = 0;
     9a6:	1e bc       	out	0x2e, r1	; 46
	//----------------------
	// Init Counter
	//----------------------
	TCNT1H = 0xff;
     9a8:	8f ef       	ldi	r24, 0xFF	; 255
     9aa:	8d bd       	out	0x2d, r24	; 45
	TCNT1L = 0x83;
     9ac:	93 e8       	ldi	r25, 0x83	; 131
     9ae:	9c bd       	out	0x2c, r25	; 44
	//-----------------------
	// Init Compare Register
	//-----------------------
	OCR1BH = 0xff;
     9b0:	89 bd       	out	0x29, r24	; 41
	OCR1BL = 0xf8;
     9b2:	88 ef       	ldi	r24, 0xF8	; 248
     9b4:	88 bd       	out	0x28, r24	; 40
	//----------------------
	// Start the timer
	//----------------------
	TCCR1A = BIT(COM1B0);	//Toggle OC1B
     9b6:	80 e1       	ldi	r24, 0x10	; 16
     9b8:	8f bd       	out	0x2f, r24	; 47
	TCCR1B = BIT(CS11);	//clk/8
     9ba:	82 e0       	ldi	r24, 0x02	; 2
     9bc:	8e bd       	out	0x2e, r24	; 46
	DDRE |= 0x04;
     9be:	32 9a       	sbi	0x06, 2	; 6
	TIMSK |= BIT(TOIE1);
     9c0:	89 b7       	in	r24, 0x39	; 57
     9c2:	80 68       	ori	r24, 0x80	; 128
     9c4:	89 bf       	out	0x39, r24	; 57
     9c6:	08 95       	ret

000009c8 <reset>:
// Init Code
//**********************************************

void reset(void)
{
	MCUCR |= BIT(SRE);	//enable external bus
     9c8:	85 b7       	in	r24, 0x35	; 53
     9ca:	80 68       	ori	r24, 0x80	; 128
     9cc:	85 bf       	out	0x35, r24	; 53
	DDRB |= BIT(0) | BIT(1) | BIT(2);	//S/H Select Bits
     9ce:	87 b3       	in	r24, 0x17	; 23
     9d0:	87 60       	ori	r24, 0x07	; 7
     9d2:	87 bb       	out	0x17, r24	; 23
	Timer0Init();
     9d4:	39 df       	rcall	.-398    	; 0x848 <Timer0Init>
	Timer1IrqInit();	//Timer 1 IRQ
     9d6:	e7 df       	rcall	.-50     	; 0x9a6 <Timer1IrqInit>
	InitINT0Irq();
     9d8:	91 de       	rcall	.-734    	; 0x6fc <InitINT0Irq>
	USART_Init();		//initialize midi port
     9da:	fc d8       	rcall	.-3592   	; 0xfffffbd4 <__eeprom_end+0xff7efbd4>
	CLEAR_STROBE_IRQ = 0;
     9dc:	10 92 00 8c 	sts	0x8C00, r1	; 0x808c00 <__bss_end+0x8aac>
     9e0:	08 95       	ret

000009e2 <main>:
}

int main()
{
     9e2:	0f 93       	push	r16
     9e4:	1f 93       	push	r17
	Disable();
     9e6:	51 db       	rcall	.-2398   	; 0x8a <Disable>
	reset();
     9e8:	ef df       	rcall	.-34     	; 0x9c8 <reset>
	OSInit();
     9ea:	b9 d4       	rcall	.+2418   	; 0x135e <OSInit>
	OS_InitMalloc(0,0);
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	80 e0       	ldi	r24, 0x00	; 0
     9f2:	90 e0       	ldi	r25, 0x00	; 0
     9f4:	aa d1       	rcall	.+852    	; 0xd4a <OS_InitMalloc>
	InitMessageQueueManager();
     9f6:	94 d2       	rcall	.+1320   	; 0xf20 <InitMessageQueueManager>
	pMsgDac = MqInit(64);
     9f8:	80 e4       	ldi	r24, 0x40	; 64
     9fa:	90 e0       	ldi	r25, 0x00	; 0
     9fc:	c5 d1       	rcall	.+906    	; 0xd88 <MqInit>
     9fe:	90 93 b6 00 	sts	0x00B6, r25	; 0x8000b6 <pMsgDac+0x1>
     a02:	80 93 b5 00 	sts	0x00B5, r24	; 0x8000b5 <pMsgDac>
	InitMidiParseDesc(&MidiParseDesc);
     a06:	89 ee       	ldi	r24, 0xE9	; 233
     a08:	90 e0       	ldi	r25, 0x00	; 0
     a0a:	94 d2       	rcall	.+1320   	; 0xf34 <InitMidiParseDesc>
	CreateTask(&DacOutTCB,DacOut,256,11,0);
     a0c:	00 e0       	ldi	r16, 0x00	; 0
     a0e:	10 e0       	ldi	r17, 0x00	; 0
     a10:	2b e0       	ldi	r18, 0x0B	; 11
     a12:	30 e0       	ldi	r19, 0x00	; 0
     a14:	40 e0       	ldi	r20, 0x00	; 0
     a16:	51 e0       	ldi	r21, 0x01	; 1
     a18:	67 e9       	ldi	r22, 0x97	; 151
     a1a:	72 e0       	ldi	r23, 0x02	; 2
     a1c:	8b e2       	ldi	r24, 0x2B	; 43
     a1e:	91 e0       	ldi	r25, 0x01	; 1
     a20:	ff db       	rcall	.-2050   	; 0x220 <CreateTask>
	Insert(&ActiveTasks,&DacOutTCB);
     a22:	6b e2       	ldi	r22, 0x2B	; 43
     a24:	71 e0       	ldi	r23, 0x01	; 1
     a26:	8b e8       	ldi	r24, 0x8B	; 139
     a28:	90 e0       	ldi	r25, 0x00	; 0
     a2a:	d1 d5       	rcall	.+2978   	; 0x15ce <Insert>
	CreateTask(&MidiInTCB,MidiIn,256,10,0);
     a2c:	2a e0       	ldi	r18, 0x0A	; 10
     a2e:	30 e0       	ldi	r19, 0x00	; 0
     a30:	40 e0       	ldi	r20, 0x00	; 0
     a32:	51 e0       	ldi	r21, 0x01	; 1
     a34:	6e e5       	ldi	r22, 0x5E	; 94
     a36:	73 e0       	ldi	r23, 0x03	; 3
     a38:	81 e1       	ldi	r24, 0x11	; 17
     a3a:	91 e0       	ldi	r25, 0x01	; 1
     a3c:	f1 db       	rcall	.-2078   	; 0x220 <CreateTask>
	Insert(&ActiveTasks,&MidiInTCB);
     a3e:	61 e1       	ldi	r22, 0x11	; 17
     a40:	71 e0       	ldi	r23, 0x01	; 1
     a42:	8b e8       	ldi	r24, 0x8B	; 139
     a44:	90 e0       	ldi	r25, 0x00	; 0
     a46:	c3 d5       	rcall	.+2950   	; 0x15ce <Insert>
	CreateTask(&IdleTCB,TaskIdle,256,1,0);
     a48:	21 e0       	ldi	r18, 0x01	; 1
     a4a:	30 e0       	ldi	r19, 0x00	; 0
     a4c:	40 e0       	ldi	r20, 0x00	; 0
     a4e:	51 e0       	ldi	r21, 0x01	; 1
     a50:	6a e8       	ldi	r22, 0x8A	; 138
     a52:	72 e0       	ldi	r23, 0x02	; 2
     a54:	85 ef       	ldi	r24, 0xF5	; 245
     a56:	90 e0       	ldi	r25, 0x00	; 0
     a58:	e3 db       	rcall	.-2106   	; 0x220 <CreateTask>
	Insert(&ActiveTasks,&IdleTCB);
     a5a:	65 ef       	ldi	r22, 0xF5	; 245
     a5c:	70 e0       	ldi	r23, 0x00	; 0
     a5e:	8b e8       	ldi	r24, 0x8B	; 139
     a60:	90 e0       	ldi	r25, 0x00	; 0
     a62:	b5 d5       	rcall	.+2922   	; 0x15ce <Insert>
	CreateTask(&AuxDacTaskTCB,AuxDacTask,256,100,0);
     a64:	24 e6       	ldi	r18, 0x64	; 100
     a66:	30 e0       	ldi	r19, 0x00	; 0
     a68:	40 e0       	ldi	r20, 0x00	; 0
     a6a:	51 e0       	ldi	r21, 0x01	; 1
     a6c:	68 e4       	ldi	r22, 0x48	; 72
     a6e:	73 e0       	ldi	r23, 0x03	; 3
     a70:	8d e9       	ldi	r24, 0x9D	; 157
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	d5 db       	rcall	.-2134   	; 0x220 <CreateTask>
	Insert(&ActiveTasks,&AuxDacTaskTCB);
     a76:	6d e9       	ldi	r22, 0x9D	; 157
     a78:	70 e0       	ldi	r23, 0x00	; 0
     a7a:	8b e8       	ldi	r24, 0x8B	; 139
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a7 d5       	rcall	.+2894   	; 0x15ce <Insert>
	CreateTask(&TaskMidiClockTCB,TaskMidiClock,256,5,0);
     a80:	25 e0       	ldi	r18, 0x05	; 5
     a82:	30 e0       	ldi	r19, 0x00	; 0
     a84:	40 e0       	ldi	r20, 0x00	; 0
     a86:	51 e0       	ldi	r21, 0x01	; 1
     a88:	64 e6       	ldi	r22, 0x64	; 100
     a8a:	73 e0       	ldi	r23, 0x03	; 3
     a8c:	81 ed       	ldi	r24, 0xD1	; 209
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	c7 db       	rcall	.-2162   	; 0x220 <CreateTask>
	Insert(&ActiveTasks,&TaskMidiClockTCB);
     a92:	61 ed       	ldi	r22, 0xD1	; 209
     a94:	70 e0       	ldi	r23, 0x00	; 0
     a96:	8b e8       	ldi	r24, 0x8B	; 139
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	99 d5       	rcall	.+2866   	; 0x15ce <Insert>
	CreateTask(&TaskMidiResetTCB,TaskMidiReset,256,5,0);
     a9c:	25 e0       	ldi	r18, 0x05	; 5
     a9e:	30 e0       	ldi	r19, 0x00	; 0
     aa0:	40 e0       	ldi	r20, 0x00	; 0
     aa2:	51 e0       	ldi	r21, 0x01	; 1
     aa4:	61 e7       	ldi	r22, 0x71	; 113
     aa6:	73 e0       	ldi	r23, 0x03	; 3
     aa8:	89 eb       	ldi	r24, 0xB9	; 185
     aaa:	90 e0       	ldi	r25, 0x00	; 0
     aac:	b9 db       	rcall	.-2190   	; 0x220 <CreateTask>
	Insert(&ActiveTasks,&TaskMidiResetTCB);
     aae:	69 eb       	ldi	r22, 0xB9	; 185
     ab0:	70 e0       	ldi	r23, 0x00	; 0
     ab2:	8b e8       	ldi	r24, 0x8B	; 139
     ab4:	90 e0       	ldi	r25, 0x00	; 0
     ab6:	8b d5       	rcall	.+2838   	; 0x15ce <Insert>
	pStrobDone = NewSemaphore(0,SEMAPHORE_MODE_BLOCKING);
     ab8:	60 e0       	ldi	r22, 0x00	; 0
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	80 e0       	ldi	r24, 0x00	; 0
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	36 db       	rcall	.-2452   	; 0x12e <NewSemaphore>
     ac2:	90 93 10 01 	sts	0x0110, r25	; 0x800110 <pStrobDone+0x1>
     ac6:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <pStrobDone>
	pSemClock = NewSemaphore(0,SEMAPHORE_MODE_BLOCKING);
     aca:	60 e0       	ldi	r22, 0x00	; 0
     acc:	70 e0       	ldi	r23, 0x00	; 0
     ace:	80 e0       	ldi	r24, 0x00	; 0
     ad0:	90 e0       	ldi	r25, 0x00	; 0
     ad2:	2d db       	rcall	.-2470   	; 0x12e <NewSemaphore>
     ad4:	90 93 0e 01 	sts	0x010E, r25	; 0x80010e <pSemClock+0x1>
     ad8:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <pSemClock>
	pSemReset = NewSemaphore(0,SEMAPHORE_MODE_BLOCKING);
     adc:	60 e0       	ldi	r22, 0x00	; 0
     ade:	70 e0       	ldi	r23, 0x00	; 0
     ae0:	80 e0       	ldi	r24, 0x00	; 0
     ae2:	90 e0       	ldi	r25, 0x00	; 0
     ae4:	24 db       	rcall	.-2488   	; 0x12e <NewSemaphore>
     ae6:	90 93 2a 01 	sts	0x012A, r25	; 0x80012a <pSemReset+0x1>
     aea:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <pSemReset>
	StartOS();
     aee:	46 d6       	rcall	.+3212   	; 0x177c <StartOS>
	return 0;
}
     af0:	80 e0       	ldi	r24, 0x00	; 0
     af2:	90 e0       	ldi	r25, 0x00	; 0
     af4:	1f 91       	pop	r17
     af6:	0f 91       	pop	r16
     af8:	08 95       	ret

00000afa <malloc>:
		pointer to memory block on success,
		OR NULL on fail
*******************************************/

void *malloc(size_t len)
{
     afa:	ef 92       	push	r14
     afc:	ff 92       	push	r15
     afe:	0f 93       	push	r16
     b00:	1f 93       	push	r17
     b02:	cf 93       	push	r28
     b04:	df 93       	push	r29
     b06:	8c 01       	movw	r16, r24
	 * Our minimum chunk size is the size of a pointer (plus the
	 * size of the "sz" field, but we don't need to account for
	 * this), otherwise we could not possibly fit a freelist entry
	 * into the chunk later.
	 */
	PendSemaphore(&MallocBlocker,0);
     b08:	60 e0       	ldi	r22, 0x00	; 0
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	85 e4       	ldi	r24, 0x45	; 69
     b0e:	91 e0       	ldi	r25, 0x01	; 1
     b10:	2d d4       	rcall	.+2138   	; 0x136c <PendSemaphore>
	if (len < sizeof(struct __freelist) - sizeof(size_t))
     b12:	02 30       	cpi	r16, 0x02	; 2
     b14:	11 05       	cpc	r17, r1
     b16:	10 f4       	brcc	.+4      	; 0xb1c <malloc+0x22>
		len = sizeof(struct __freelist) - sizeof(size_t);
     b18:	02 e0       	ldi	r16, 0x02	; 2
     b1a:	10 e0       	ldi	r17, 0x00	; 0
	 * would match exactly.  If we found one, we are done.  While
	 * walking, note down the size of the largest chunk we found
	 * that would still fit the request -- we need it for step 2.
	 *
	 */
	for (s = 0, fp1 = __flp, fp2 = 0;
     b1c:	e0 90 69 00 	lds	r14, 0x0069	; 0x800069 <__flp>
     b20:	f0 90 6a 00 	lds	r15, 0x006A	; 0x80006a <__flp+0x1>
     b24:	e7 01       	movw	r28, r14
     b26:	80 e0       	ldi	r24, 0x00	; 0
     b28:	90 e0       	ldi	r25, 0x00	; 0
     b2a:	e0 e0       	ldi	r30, 0x00	; 0
     b2c:	f0 e0       	ldi	r31, 0x00	; 0
     b2e:	20 97       	sbiw	r28, 0x00	; 0
     b30:	19 f1       	breq	.+70     	; 0xb78 <malloc+0x7e>
	     fp1;
	     fp2 = fp1, fp1 = fp1->nx) {
		if (fp1->sz == len) {
     b32:	28 81       	ld	r18, Y
     b34:	39 81       	ldd	r19, Y+1	; 0x01
     b36:	5a 81       	ldd	r21, Y+2	; 0x02
     b38:	4b 81       	ldd	r20, Y+3	; 0x03
     b3a:	02 17       	cp	r16, r18
     b3c:	13 07       	cpc	r17, r19
     b3e:	79 f4       	brne	.+30     	; 0xb5e <malloc+0x64>
			/*
			 * Found it.  Disconnect the chunk from the
			 * freelist, and return it.
			 */
			if (fp2)
     b40:	30 97       	sbiw	r30, 0x00	; 0
     b42:	19 f0       	breq	.+6      	; 0xb4a <malloc+0x50>
				fp2->nx = fp1->nx;
     b44:	52 83       	std	Z+2, r21	; 0x02
     b46:	43 83       	std	Z+3, r20	; 0x03
     b48:	04 c0       	rjmp	.+8      	; 0xb52 <malloc+0x58>
			else
				__flp = fp1->nx;
     b4a:	50 93 69 00 	sts	0x0069, r21	; 0x800069 <__flp>
     b4e:	40 93 6a 00 	sts	0x006A, r20	; 0x80006a <__flp+0x1>
			PostSemaphore(&MallocBlocker,0);
     b52:	60 e0       	ldi	r22, 0x00	; 0
     b54:	70 e0       	ldi	r23, 0x00	; 0
     b56:	85 e4       	ldi	r24, 0x45	; 69
     b58:	91 e0       	ldi	r25, 0x01	; 1
     b5a:	68 d4       	rcall	.+2256   	; 0x142c <PostSemaphore>
     b5c:	32 c0       	rjmp	.+100    	; 0xbc2 <malloc+0xc8>
			return &(fp1->nx);
		}
		if (fp1->sz > len) {
     b5e:	02 17       	cp	r16, r18
     b60:	13 07       	cpc	r17, r19
     b62:	30 f4       	brcc	.+12     	; 0xb70 <malloc+0x76>
			if (s == 0 || fp1->sz < s)
     b64:	00 97       	sbiw	r24, 0x00	; 0
     b66:	19 f0       	breq	.+6      	; 0xb6e <malloc+0x74>
     b68:	28 17       	cp	r18, r24
     b6a:	39 07       	cpc	r19, r25
     b6c:	08 f4       	brcc	.+2      	; 0xb70 <malloc+0x76>
     b6e:	c9 01       	movw	r24, r18
	 * that would still fit the request -- we need it for step 2.
	 *
	 */
	for (s = 0, fp1 = __flp, fp2 = 0;
	     fp1;
	     fp2 = fp1, fp1 = fp1->nx) {
     b70:	fe 01       	movw	r30, r28
     b72:	c5 2f       	mov	r28, r21
     b74:	d4 2f       	mov	r29, r20
     b76:	db cf       	rjmp	.-74     	; 0xb2e <malloc+0x34>
	 * difference between the requested size and the size of the
	 * chunk found is large enough for another freelist entry; if
	 * not, just enlarge the request size to what we have found,
	 * and use the entire chunk.
	 */
	if (s) {
     b78:	00 97       	sbiw	r24, 0x00	; 0
     b7a:	b1 f1       	breq	.+108    	; 0xbe8 <malloc+0xee>
		if (s - len < sizeof(struct __freelist))
     b7c:	9c 01       	movw	r18, r24
     b7e:	20 1b       	sub	r18, r16
     b80:	31 0b       	sbc	r19, r17
     b82:	24 30       	cpi	r18, 0x04	; 4
     b84:	31 05       	cpc	r19, r1
     b86:	28 f4       	brcc	.+10     	; 0xb92 <malloc+0x98>
     b88:	8c 01       	movw	r16, r24
			len = s;
		for (fp1 = __flp, fp2 = 0;
     b8a:	03 c0       	rjmp	.+6      	; 0xb92 <malloc+0x98>
		     fp1;
		     fp2 = fp1, fp1 = fp1->nx) {
     b8c:	e7 01       	movw	r28, r14
     b8e:	e2 80       	ldd	r14, Z+2	; 0x02
     b90:	f3 80       	ldd	r15, Z+3	; 0x03
	 * and use the entire chunk.
	 */
	if (s) {
		if (s - len < sizeof(struct __freelist))
			len = s;
		for (fp1 = __flp, fp2 = 0;
     b92:	e1 14       	cp	r14, r1
     b94:	f1 04       	cpc	r15, r1
     b96:	41 f1       	breq	.+80     	; 0xbe8 <malloc+0xee>
		     fp1;
		     fp2 = fp1, fp1 = fp1->nx) {
			if (fp1->sz == s) {
     b98:	f7 01       	movw	r30, r14
     b9a:	20 81       	ld	r18, Z
     b9c:	31 81       	ldd	r19, Z+1	; 0x01
     b9e:	82 17       	cp	r24, r18
     ba0:	93 07       	cpc	r25, r19
     ba2:	a1 f7       	brne	.-24     	; 0xb8c <malloc+0x92>
				if (len == s) {
     ba4:	08 17       	cp	r16, r24
     ba6:	19 07       	cpc	r17, r25
     ba8:	99 f4       	brne	.+38     	; 0xbd0 <malloc+0xd6>
     baa:	82 81       	ldd	r24, Z+2	; 0x02
     bac:	93 81       	ldd	r25, Z+3	; 0x03
					/*
					 * Use entire chunk; same as
					 * above.
					 */
					if (fp2)
     bae:	20 97       	sbiw	r28, 0x00	; 0
     bb0:	51 f0       	breq	.+20     	; 0xbc6 <malloc+0xcc>
						fp2->nx = fp1->nx;
     bb2:	9b 83       	std	Y+3, r25	; 0x03
     bb4:	8a 83       	std	Y+2, r24	; 0x02
					else
						__flp = fp1->nx;
					PostSemaphore(&MallocBlocker,0);
     bb6:	60 e0       	ldi	r22, 0x00	; 0
     bb8:	70 e0       	ldi	r23, 0x00	; 0
     bba:	85 e4       	ldi	r24, 0x45	; 69
     bbc:	91 e0       	ldi	r25, 0x01	; 1
     bbe:	36 d4       	rcall	.+2156   	; 0x142c <PostSemaphore>
					return &(fp1->nx);
     bc0:	e7 01       	movw	r28, r14
     bc2:	22 96       	adiw	r28, 0x02	; 2
     bc4:	51 c0       	rjmp	.+162    	; 0xc68 <malloc+0x16e>
					 * above.
					 */
					if (fp2)
						fp2->nx = fp1->nx;
					else
						__flp = fp1->nx;
     bc6:	90 93 6a 00 	sts	0x006A, r25	; 0x80006a <__flp+0x1>
     bca:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__flp>
     bce:	f3 cf       	rjmp	.-26     	; 0xbb6 <malloc+0xbc>
				 * entry, and note down the size of
				 * the new chunk before returning it
				 * to the caller.
				 */
				cp = (char *)fp1;
				s -= len;
     bd0:	80 1b       	sub	r24, r16
     bd2:	91 0b       	sbc	r25, r17
				cp += s;
				fp2 = (struct __freelist *)cp;
				fp2->sz = len;
     bd4:	e7 01       	movw	r28, r14
     bd6:	c8 0f       	add	r28, r24
     bd8:	d9 1f       	adc	r29, r25
     bda:	09 93       	st	Y+, r16
     bdc:	19 93       	st	Y+, r17
				fp1->sz = s - sizeof(size_t);
     bde:	02 97       	sbiw	r24, 0x02	; 2
     be0:	f7 01       	movw	r30, r14
     be2:	91 83       	std	Z+1, r25	; 0x01
     be4:	80 83       	st	Z, r24
     be6:	33 c0       	rjmp	.+102    	; 0xc4e <malloc+0x154>
	 * Under Unix, the "break value" was the end of the data
	 * segment as dynamically requested from the operating system.
	 * Since we don't have an operating system, just make sure
	 * that we don't collide with the stack.
	 */
	if (__brkval == 0)
     be8:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <__brkval>
     bec:	90 91 44 01 	lds	r25, 0x0144	; 0x800144 <__brkval+0x1>
     bf0:	89 2b       	or	r24, r25
     bf2:	41 f4       	brne	.+16     	; 0xc04 <malloc+0x10a>
		__brkval = __malloc_heap_start;
     bf4:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__malloc_heap_start>
     bf8:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <__malloc_heap_start+0x1>
     bfc:	90 93 44 01 	sts	0x0144, r25	; 0x800144 <__brkval+0x1>
     c00:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <__brkval>
	cp = __malloc_heap_end;
     c04:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
     c08:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__data_start+0x1>
	if (cp == 0)
     c0c:	00 97       	sbiw	r24, 0x00	; 0
     c0e:	41 f4       	brne	.+16     	; 0xc20 <malloc+0x126>
		cp = STACK_POINTER() - __malloc_margin;
     c10:	8d b7       	in	r24, 0x3d	; 61
     c12:	9e b7       	in	r25, 0x3e	; 62
     c14:	20 91 64 00 	lds	r18, 0x0064	; 0x800064 <__malloc_margin>
     c18:	30 91 65 00 	lds	r19, 0x0065	; 0x800065 <__malloc_margin+0x1>
     c1c:	82 1b       	sub	r24, r18
     c1e:	93 0b       	sbc	r25, r19
	avail = cp - __brkval;
     c20:	c0 91 43 01 	lds	r28, 0x0143	; 0x800143 <__brkval>
     c24:	d0 91 44 01 	lds	r29, 0x0144	; 0x800144 <__brkval+0x1>
     c28:	8c 1b       	sub	r24, r28
     c2a:	9d 0b       	sbc	r25, r29
	/*
	 * Both tests below are needed to catch the case len >= 0xfffe.
	 */
	if (avail >= len && avail >= len + sizeof(size_t)) {
     c2c:	80 17       	cp	r24, r16
     c2e:	91 07       	cpc	r25, r17
     c30:	a0 f0       	brcs	.+40     	; 0xc5a <malloc+0x160>
     c32:	98 01       	movw	r18, r16
     c34:	2e 5f       	subi	r18, 0xFE	; 254
     c36:	3f 4f       	sbci	r19, 0xFF	; 255
     c38:	82 17       	cp	r24, r18
     c3a:	93 07       	cpc	r25, r19
     c3c:	70 f0       	brcs	.+28     	; 0xc5a <malloc+0x160>
		fp1 = (struct __freelist *)__brkval;
		__brkval += len + sizeof(size_t);
     c3e:	2c 0f       	add	r18, r28
     c40:	3d 1f       	adc	r19, r29
     c42:	30 93 44 01 	sts	0x0144, r19	; 0x800144 <__brkval+0x1>
     c46:	20 93 43 01 	sts	0x0143, r18	; 0x800143 <__brkval>
		fp1->sz = len;
     c4a:	09 93       	st	Y+, r16
     c4c:	19 93       	st	Y+, r17
		PostSemaphore(&MallocBlocker,0);
     c4e:	60 e0       	ldi	r22, 0x00	; 0
     c50:	70 e0       	ldi	r23, 0x00	; 0
     c52:	85 e4       	ldi	r24, 0x45	; 69
     c54:	91 e0       	ldi	r25, 0x01	; 1
     c56:	ea d3       	rcall	.+2004   	; 0x142c <PostSemaphore>
		return &(fp1->nx);
     c58:	07 c0       	rjmp	.+14     	; 0xc68 <malloc+0x16e>
	}
	/*
	 * Step 4: There's no help, just fail. :-/
	 */
	 PostSemaphore(&MallocBlocker,0);
     c5a:	60 e0       	ldi	r22, 0x00	; 0
     c5c:	70 e0       	ldi	r23, 0x00	; 0
     c5e:	85 e4       	ldi	r24, 0x45	; 69
     c60:	91 e0       	ldi	r25, 0x01	; 1
     c62:	e4 d3       	rcall	.+1992   	; 0x142c <PostSemaphore>
	return 0;
     c64:	c0 e0       	ldi	r28, 0x00	; 0
     c66:	d0 e0       	ldi	r29, 0x00	; 0
}
     c68:	ce 01       	movw	r24, r28
     c6a:	df 91       	pop	r29
     c6c:	cf 91       	pop	r28
     c6e:	1f 91       	pop	r17
     c70:	0f 91       	pop	r16
     c72:	ff 90       	pop	r15
     c74:	ef 90       	pop	r14
     c76:	08 95       	ret

00000c78 <free>:
		free is thread safe.
	parameters:
		p.....pointer to memory block to free
**************************************************/
void free(void *p)
{
     c78:	cf 93       	push	r28
     c7a:	df 93       	push	r29
	struct __freelist *fp1, *fp2, *fpnew;
	char *cp1, *cp2, *cpnew;

	/* ISO C says free(NULL) must be a no-op */
	if (p == 0)
     c7c:	00 97       	sbiw	r24, 0x00	; 0
     c7e:	09 f4       	brne	.+2      	; 0xc82 <free+0xa>
     c80:	61 c0       	rjmp	.+194    	; 0xd44 <free+0xcc>
     c82:	ec 01       	movw	r28, r24
		return;

	PendSemaphore(&MallocBlocker,0);
     c84:	60 e0       	ldi	r22, 0x00	; 0
     c86:	70 e0       	ldi	r23, 0x00	; 0
     c88:	85 e4       	ldi	r24, 0x45	; 69
     c8a:	91 e0       	ldi	r25, 0x01	; 1
     c8c:	6f d3       	rcall	.+1758   	; 0x136c <PendSemaphore>
	cpnew = p;
	cpnew -= sizeof(size_t);
     c8e:	fe 01       	movw	r30, r28
     c90:	32 97       	sbiw	r30, 0x02	; 2
	fpnew = (struct __freelist *)cpnew;
	fpnew->nx = 0;
     c92:	13 82       	std	Z+3, r1	; 0x03
     c94:	12 82       	std	Z+2, r1	; 0x02

	/*
	 * Trivial case first: if there's no freelist yet, our entry
	 * will be the only one on it.
	 */
	if (__flp == 0) {
     c96:	a0 91 69 00 	lds	r26, 0x0069	; 0x800069 <__flp>
     c9a:	b0 91 6a 00 	lds	r27, 0x006A	; 0x80006a <__flp+0x1>
     c9e:	10 97       	sbiw	r26, 0x00	; 0
     ca0:	49 f1       	breq	.+82     	; 0xcf4 <free+0x7c>
     ca2:	80 e0       	ldi	r24, 0x00	; 0
     ca4:	90 e0       	ldi	r25, 0x00	; 0
	 * if possible.
	 */
	for (fp1 = __flp, fp2 = 0;
	     fp1;
	     fp2 = fp1, fp1 = fp1->nx) {
		if (fp1 < fpnew)
     ca6:	ae 17       	cp	r26, r30
     ca8:	bf 07       	cpc	r27, r31
     caa:	50 f4       	brcc	.+20     	; 0xcc0 <free+0x48>
	 * freelist.  Try to aggregate the chunk with adjacent chunks
	 * if possible.
	 */
	for (fp1 = __flp, fp2 = 0;
	     fp1;
	     fp2 = fp1, fp1 = fp1->nx) {
     cac:	12 96       	adiw	r26, 0x02	; 2
     cae:	2d 91       	ld	r18, X+
     cb0:	3c 91       	ld	r19, X
     cb2:	13 97       	sbiw	r26, 0x03	; 3
     cb4:	cd 01       	movw	r24, r26
	/*
	 * Now, find the position where our new entry belongs onto the
	 * freelist.  Try to aggregate the chunk with adjacent chunks
	 * if possible.
	 */
	for (fp1 = __flp, fp2 = 0;
     cb6:	21 15       	cp	r18, r1
     cb8:	31 05       	cpc	r19, r1
     cba:	09 f1       	breq	.+66     	; 0xcfe <free+0x86>
     cbc:	d9 01       	movw	r26, r18
     cbe:	f3 cf       	rjmp	.-26     	; 0xca6 <free+0x2e>
	     fp1;
	     fp2 = fp1, fp1 = fp1->nx) {
		if (fp1 < fpnew)
			continue;
		cp1 = (char *)fp1;
		fpnew->nx = fp1;
     cc0:	b3 83       	std	Z+3, r27	; 0x03
     cc2:	a2 83       	std	Z+2, r26	; 0x02
		if ((char *)&(fpnew->nx) + fpnew->sz == cp1) {
     cc4:	40 81       	ld	r20, Z
     cc6:	51 81       	ldd	r21, Z+1	; 0x01
     cc8:	c4 0f       	add	r28, r20
     cca:	d5 1f       	adc	r29, r21
     ccc:	ac 17       	cp	r26, r28
     cce:	bd 07       	cpc	r27, r29
     cd0:	79 f4       	brne	.+30     	; 0xcf0 <free+0x78>
			/* upper chunk adjacent, assimilate it */
			fpnew->sz += fp1->sz + sizeof(size_t);
     cd2:	2d 91       	ld	r18, X+
     cd4:	3c 91       	ld	r19, X
     cd6:	11 97       	sbiw	r26, 0x01	; 1
     cd8:	24 0f       	add	r18, r20
     cda:	35 1f       	adc	r19, r21
     cdc:	2e 5f       	subi	r18, 0xFE	; 254
     cde:	3f 4f       	sbci	r19, 0xFF	; 255
     ce0:	31 83       	std	Z+1, r19	; 0x01
     ce2:	20 83       	st	Z, r18
			fpnew->nx = fp1->nx;
     ce4:	12 96       	adiw	r26, 0x02	; 2
     ce6:	2d 91       	ld	r18, X+
     ce8:	3c 91       	ld	r19, X
     cea:	13 97       	sbiw	r26, 0x03	; 3
     cec:	33 83       	std	Z+3, r19	; 0x03
     cee:	22 83       	std	Z+2, r18	; 0x02
		}
		if (fp2 == 0) {
     cf0:	00 97       	sbiw	r24, 0x00	; 0
     cf2:	29 f4       	brne	.+10     	; 0xcfe <free+0x86>
			/* new head of freelist */
			__flp = fpnew;
     cf4:	f0 93 6a 00 	sts	0x006A, r31	; 0x80006a <__flp+0x1>
     cf8:	e0 93 69 00 	sts	0x0069, r30	; 0x800069 <__flp>
     cfc:	1c c0       	rjmp	.+56     	; 0xd36 <free+0xbe>
	 * Note that we get here either if we hit the "break" above,
	 * or if we fell off the end of the loop.  The latter means
	 * we've got a new topmost chunk.  Either way, try aggregating
	 * with the lower chunk if possible.
	 */
	fp2->nx = fpnew;
     cfe:	dc 01       	movw	r26, r24
     d00:	13 96       	adiw	r26, 0x03	; 3
     d02:	fc 93       	st	X, r31
     d04:	ee 93       	st	-X, r30
     d06:	12 97       	sbiw	r26, 0x02	; 2
	cp2 = (char *)&(fp2->nx);
	if (cp2 + fp2->sz == cpnew) {
     d08:	4d 91       	ld	r20, X+
     d0a:	5d 91       	ld	r21, X+
     d0c:	a4 0f       	add	r26, r20
     d0e:	b5 1f       	adc	r27, r21
     d10:	ea 17       	cp	r30, r26
     d12:	fb 07       	cpc	r31, r27
     d14:	81 f4       	brne	.+32     	; 0xd36 <free+0xbe>
		/* lower junk adjacent, merge */
		fp2->sz += fpnew->sz + sizeof(size_t);
     d16:	20 81       	ld	r18, Z
     d18:	31 81       	ldd	r19, Z+1	; 0x01
     d1a:	24 0f       	add	r18, r20
     d1c:	35 1f       	adc	r19, r21
     d1e:	2e 5f       	subi	r18, 0xFE	; 254
     d20:	3f 4f       	sbci	r19, 0xFF	; 255
     d22:	dc 01       	movw	r26, r24
     d24:	11 96       	adiw	r26, 0x01	; 1
     d26:	3c 93       	st	X, r19
     d28:	2e 93       	st	-X, r18
		fp2->nx = fpnew->nx;
     d2a:	22 81       	ldd	r18, Z+2	; 0x02
     d2c:	33 81       	ldd	r19, Z+3	; 0x03
     d2e:	13 96       	adiw	r26, 0x03	; 3
     d30:	3c 93       	st	X, r19
     d32:	2e 93       	st	-X, r18
     d34:	12 97       	sbiw	r26, 0x02	; 2
	}
	PostSemaphore(&MallocBlocker,0);
     d36:	60 e0       	ldi	r22, 0x00	; 0
     d38:	70 e0       	ldi	r23, 0x00	; 0
     d3a:	85 e4       	ldi	r24, 0x45	; 69
     d3c:	91 e0       	ldi	r25, 0x01	; 1
}
     d3e:	df 91       	pop	r29
     d40:	cf 91       	pop	r28
	if (cp2 + fp2->sz == cpnew) {
		/* lower junk adjacent, merge */
		fp2->sz += fpnew->sz + sizeof(size_t);
		fp2->nx = fpnew->nx;
	}
	PostSemaphore(&MallocBlocker,0);
     d42:	74 c3       	rjmp	.+1768   	; 0x142c <PostSemaphore>
}
     d44:	df 91       	pop	r29
     d46:	cf 91       	pop	r28
     d48:	08 95       	ret

00000d4a <OS_InitMalloc>:
// If start == 0, use default value
// If end == 0, use default value
//--------------------------------------------------------------------

void OS_InitMalloc(char *start, char *end)
{
     d4a:	0f 93       	push	r16
     d4c:	1f 93       	push	r17
     d4e:	cf 93       	push	r28
     d50:	df 93       	push	r29
     d52:	8c 01       	movw	r16, r24
     d54:	eb 01       	movw	r28, r22
	CreateSemaphore(&MallocBlocker,1,SEMAPHORE_MODE_BLOCKING);
     d56:	40 e0       	ldi	r20, 0x00	; 0
     d58:	50 e0       	ldi	r21, 0x00	; 0
     d5a:	61 e0       	ldi	r22, 0x01	; 1
     d5c:	70 e0       	ldi	r23, 0x00	; 0
     d5e:	85 e4       	ldi	r24, 0x45	; 69
     d60:	91 e0       	ldi	r25, 0x01	; 1
     d62:	b8 d9       	rcall	.-3216   	; 0xd4 <CreateSemaphore>
	if(start) __malloc_heap_start = start;
     d64:	01 15       	cp	r16, r1
     d66:	11 05       	cpc	r17, r1
     d68:	21 f0       	breq	.+8      	; 0xd72 <OS_InitMalloc+0x28>
     d6a:	10 93 63 00 	sts	0x0063, r17	; 0x800063 <__malloc_heap_start+0x1>
     d6e:	00 93 62 00 	sts	0x0062, r16	; 0x800062 <__malloc_heap_start>
	if(end) __malloc_heap_end = end;
     d72:	20 97       	sbiw	r28, 0x00	; 0
     d74:	21 f0       	breq	.+8      	; 0xd7e <OS_InitMalloc+0x34>
     d76:	d0 93 61 00 	sts	0x0061, r29	; 0x800061 <__data_start+0x1>
     d7a:	c0 93 60 00 	sts	0x0060, r28	; 0x800060 <__data_start>
}
     d7e:	df 91       	pop	r29
     d80:	cf 91       	pop	r28
     d82:	1f 91       	pop	r17
     d84:	0f 91       	pop	r16
     d86:	08 95       	ret

00000d88 <MqInit>:
	return value:
		pointer to new message queue
**********************************************/

MESSAGE_QUEUE * MqInit(int size)
{
     d88:	0f 93       	push	r16
     d8a:	1f 93       	push	r17
     d8c:	cf 93       	push	r28
     d8e:	df 93       	push	r29
     d90:	8c 01       	movw	r16, r24
	char *buffer = malloc(sizeof(MESSAGE_QUEUE) + size * sizeof(MSG*) );
     d92:	06 96       	adiw	r24, 0x06	; 6
     d94:	88 0f       	add	r24, r24
     d96:	99 1f       	adc	r25, r25
     d98:	b0 de       	rcall	.-672    	; 0xafa <malloc>
     d9a:	ec 01       	movw	r28, r24
	MESSAGE_QUEUE *rv = (MESSAGE_QUEUE *)buffer;
	MSG **pM = (MSG **)(&buffer[sizeof(MESSAGE_QUEUE)]);
	PendSemaphore(MqBlocker,0);		//protect access
     d9c:	60 e0       	ldi	r22, 0x00	; 0
     d9e:	70 e0       	ldi	r23, 0x00	; 0
     da0:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <MqBlocker>
     da4:	90 91 6e 00 	lds	r25, 0x006E	; 0x80006e <MqBlocker+0x1>
     da8:	e1 d2       	rcall	.+1474   	; 0x136c <PendSemaphore>
	rv->Head = 0;
     daa:	1b 82       	std	Y+3, r1	; 0x03
     dac:	1a 82       	std	Y+2, r1	; 0x02
	rv->Tail = 0;
     dae:	1d 82       	std	Y+5, r1	; 0x05
     db0:	1c 82       	std	Y+4, r1	; 0x04
	rv->nMsg = 0;
     db2:	1f 82       	std	Y+7, r1	; 0x07
     db4:	1e 82       	std	Y+6, r1	; 0x06
	rv->b = pM;
     db6:	ce 01       	movw	r24, r28
     db8:	0c 96       	adiw	r24, 0x0c	; 12
     dba:	9b 87       	std	Y+11, r25	; 0x0b
     dbc:	8a 87       	std	Y+10, r24	; 0x0a
	rv->Size = size;
     dbe:	19 87       	std	Y+9, r17	; 0x09
     dc0:	08 87       	std	Y+8, r16	; 0x08
	rv->Sem = NewSemaphore(0,SEMAPHORE_MODE_BLOCKING);
     dc2:	60 e0       	ldi	r22, 0x00	; 0
     dc4:	70 e0       	ldi	r23, 0x00	; 0
     dc6:	80 e0       	ldi	r24, 0x00	; 0
     dc8:	90 e0       	ldi	r25, 0x00	; 0
     dca:	b1 d9       	rcall	.-3230   	; 0x12e <NewSemaphore>
     dcc:	99 83       	std	Y+1, r25	; 0x01
     dce:	88 83       	st	Y, r24
	PostSemaphore(MqBlocker,0);		//release access
     dd0:	60 e0       	ldi	r22, 0x00	; 0
     dd2:	70 e0       	ldi	r23, 0x00	; 0
     dd4:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <MqBlocker>
     dd8:	90 91 6e 00 	lds	r25, 0x006E	; 0x80006e <MqBlocker+0x1>
     ddc:	27 d3       	rcall	.+1614   	; 0x142c <PostSemaphore>
	return rv;
}
     dde:	ce 01       	movw	r24, r28
     de0:	df 91       	pop	r29
     de2:	cf 91       	pop	r28
     de4:	1f 91       	pop	r17
     de6:	0f 91       	pop	r16
     de8:	08 95       	ret

00000dea <MqPut>:
		mq.....pointer to the message queue
		m......pointer to message to send
*********************************************/

void MqPut(MESSAGE_QUEUE *mq,MSG *m)
{
     dea:	ff 92       	push	r15
     dec:	0f 93       	push	r16
     dee:	1f 93       	push	r17
     df0:	cf 93       	push	r28
     df2:	df 93       	push	r29
	char sr=0;

	if(mq)	//are we live?
     df4:	00 97       	sbiw	r24, 0x00	; 0
     df6:	e9 f1       	breq	.+122    	; 0xe72 <MqPut+0x88>
     df8:	8b 01       	movw	r16, r22
     dfa:	ec 01       	movw	r28, r24
	{
		if(!InterruptCount)sr = Disable();		//enter critical section
     dfc:	80 91 9b 00 	lds	r24, 0x009B	; 0x80009b <InterruptCount>
     e00:	90 91 9c 00 	lds	r25, 0x009C	; 0x80009c <InterruptCount+0x1>
     e04:	89 2b       	or	r24, r25
     e06:	19 f4       	brne	.+6      	; 0xe0e <MqPut+0x24>
     e08:	40 d9       	rcall	.-3456   	; 0x8a <Disable>
     e0a:	f8 2e       	mov	r15, r24
     e0c:	01 c0       	rjmp	.+2      	; 0xe10 <MqPut+0x26>
		m......pointer to message to send
*********************************************/

void MqPut(MESSAGE_QUEUE *mq,MSG *m)
{
	char sr=0;
     e0e:	f1 2c       	mov	r15, r1

	if(mq)	//are we live?
	{
		if(!InterruptCount)sr = Disable();		//enter critical section
		if(mq->nMsg < mq->Size)	//is there room?
     e10:	2e 81       	ldd	r18, Y+6	; 0x06
     e12:	3f 81       	ldd	r19, Y+7	; 0x07
     e14:	68 85       	ldd	r22, Y+8	; 0x08
     e16:	79 85       	ldd	r23, Y+9	; 0x09
     e18:	26 17       	cp	r18, r22
     e1a:	37 07       	cpc	r19, r23
     e1c:	ec f4       	brge	.+58     	; 0xe58 <MqPut+0x6e>
		{
			mq->b[mq->Head++] = m;	//put message into queue
     e1e:	ea 85       	ldd	r30, Y+10	; 0x0a
     e20:	fb 85       	ldd	r31, Y+11	; 0x0b
     e22:	8a 81       	ldd	r24, Y+2	; 0x02
     e24:	9b 81       	ldd	r25, Y+3	; 0x03
     e26:	ac 01       	movw	r20, r24
     e28:	4f 5f       	subi	r20, 0xFF	; 255
     e2a:	5f 4f       	sbci	r21, 0xFF	; 255
     e2c:	5b 83       	std	Y+3, r21	; 0x03
     e2e:	4a 83       	std	Y+2, r20	; 0x02
     e30:	88 0f       	add	r24, r24
     e32:	99 1f       	adc	r25, r25
     e34:	e8 0f       	add	r30, r24
     e36:	f9 1f       	adc	r31, r25
     e38:	11 83       	std	Z+1, r17	; 0x01
     e3a:	00 83       	st	Z, r16
			if(mq->Head == mq->Size)
     e3c:	64 17       	cp	r22, r20
     e3e:	75 07       	cpc	r23, r21
     e40:	11 f4       	brne	.+4      	; 0xe46 <MqPut+0x5c>
				mq->Head = 0;	//wrap head pointer
     e42:	1b 82       	std	Y+3, r1	; 0x03
     e44:	1a 82       	std	Y+2, r1	; 0x02
			mq->nMsg++;			//increment number of messages
     e46:	2f 5f       	subi	r18, 0xFF	; 255
     e48:	3f 4f       	sbci	r19, 0xFF	; 255
     e4a:	3f 83       	std	Y+7, r19	; 0x07
     e4c:	2e 83       	std	Y+6, r18	; 0x06
			PostSemaphore(mq->Sem,0);
     e4e:	60 e0       	ldi	r22, 0x00	; 0
     e50:	70 e0       	ldi	r23, 0x00	; 0
     e52:	88 81       	ld	r24, Y
     e54:	99 81       	ldd	r25, Y+1	; 0x01
     e56:	ea d2       	rcall	.+1492   	; 0x142c <PostSemaphore>
		}
		if(!InterruptCount)Enable(sr);			//exit critical section
     e58:	80 91 9b 00 	lds	r24, 0x009B	; 0x80009b <InterruptCount>
     e5c:	90 91 9c 00 	lds	r25, 0x009C	; 0x80009c <InterruptCount+0x1>
     e60:	89 2b       	or	r24, r25
     e62:	39 f4       	brne	.+14     	; 0xe72 <MqPut+0x88>
     e64:	8f 2d       	mov	r24, r15
	}
}
     e66:	df 91       	pop	r29
     e68:	cf 91       	pop	r28
     e6a:	1f 91       	pop	r17
     e6c:	0f 91       	pop	r16
     e6e:	ff 90       	pop	r15
			if(mq->Head == mq->Size)
				mq->Head = 0;	//wrap head pointer
			mq->nMsg++;			//increment number of messages
			PostSemaphore(mq->Sem,0);
		}
		if(!InterruptCount)Enable(sr);			//exit critical section
     e70:	10 c9       	rjmp	.-3552   	; 0x92 <Enable>
	}
}
     e72:	df 91       	pop	r29
     e74:	cf 91       	pop	r28
     e76:	1f 91       	pop	r17
     e78:	0f 91       	pop	r16
     e7a:	ff 90       	pop	r15
     e7c:	08 95       	ret

00000e7e <MqGet>:
		mq.....pointer to message queue
	return value:
		pointer to a message block
************************************************/
MSG *MqGet(MESSAGE_QUEUE *mq)
{
     e7e:	0f 93       	push	r16
     e80:	1f 93       	push	r17
     e82:	cf 93       	push	r28
     e84:	df 93       	push	r29
	char sr;
	MSG *retval = 0;

	if(mq)
     e86:	00 97       	sbiw	r24, 0x00	; 0
     e88:	29 f1       	breq	.+74     	; 0xed4 <MqGet+0x56>
     e8a:	ec 01       	movw	r28, r24
	{
		PendSemaphore(mq->Sem,0);		//wait for message
     e8c:	60 e0       	ldi	r22, 0x00	; 0
     e8e:	70 e0       	ldi	r23, 0x00	; 0
     e90:	88 81       	ld	r24, Y
     e92:	99 81       	ldd	r25, Y+1	; 0x01
     e94:	6b d2       	rcall	.+1238   	; 0x136c <PendSemaphore>
		sr = Disable();				//endter critical section
     e96:	f9 d8       	rcall	.-3598   	; 0x8a <Disable>
		retval = mq->b[mq->Tail++];	//remove message from queue
     e98:	ea 85       	ldd	r30, Y+10	; 0x0a
     e9a:	fb 85       	ldd	r31, Y+11	; 0x0b
     e9c:	2c 81       	ldd	r18, Y+4	; 0x04
     e9e:	3d 81       	ldd	r19, Y+5	; 0x05
     ea0:	a9 01       	movw	r20, r18
     ea2:	4f 5f       	subi	r20, 0xFF	; 255
     ea4:	5f 4f       	sbci	r21, 0xFF	; 255
     ea6:	5d 83       	std	Y+5, r21	; 0x05
     ea8:	4c 83       	std	Y+4, r20	; 0x04
     eaa:	22 0f       	add	r18, r18
     eac:	33 1f       	adc	r19, r19
     eae:	e2 0f       	add	r30, r18
     eb0:	f3 1f       	adc	r31, r19
     eb2:	00 81       	ld	r16, Z
     eb4:	11 81       	ldd	r17, Z+1	; 0x01
		if(mq->Tail == mq->Size)	//are we at the end of the line
     eb6:	28 85       	ldd	r18, Y+8	; 0x08
     eb8:	39 85       	ldd	r19, Y+9	; 0x09
     eba:	42 17       	cp	r20, r18
     ebc:	53 07       	cpc	r21, r19
     ebe:	11 f4       	brne	.+4      	; 0xec4 <MqGet+0x46>
			mq->Tail = 0;			//wrap tail pointer
     ec0:	1d 82       	std	Y+5, r1	; 0x05
     ec2:	1c 82       	std	Y+4, r1	; 0x04
		mq->nMsg--;					//decrement number of messages in queue
     ec4:	2e 81       	ldd	r18, Y+6	; 0x06
     ec6:	3f 81       	ldd	r19, Y+7	; 0x07
     ec8:	21 50       	subi	r18, 0x01	; 1
     eca:	31 09       	sbc	r19, r1
     ecc:	3f 83       	std	Y+7, r19	; 0x07
     ece:	2e 83       	std	Y+6, r18	; 0x06
		Enable(sr);
     ed0:	e0 d8       	rcall	.-3648   	; 0x92 <Enable>
     ed2:	02 c0       	rjmp	.+4      	; 0xed8 <MqGet+0x5a>
		pointer to a message block
************************************************/
MSG *MqGet(MESSAGE_QUEUE *mq)
{
	char sr;
	MSG *retval = 0;
     ed4:	00 e0       	ldi	r16, 0x00	; 0
     ed6:	10 e0       	ldi	r17, 0x00	; 0
			mq->Tail = 0;			//wrap tail pointer
		mq->nMsg--;					//decrement number of messages in queue
		Enable(sr);
	}
	return retval;
}
     ed8:	c8 01       	movw	r24, r16
     eda:	df 91       	pop	r29
     edc:	cf 91       	pop	r28
     ede:	1f 91       	pop	r17
     ee0:	0f 91       	pop	r16
     ee2:	08 95       	ret

00000ee4 <NewMSG>:
		NULL on fail
		Pointer to Message Block on success
************************************************/

MSG *NewMSG(int payloadSize)
{
     ee4:	cf 93       	push	r28
     ee6:	df 93       	push	r29
     ee8:	ec 01       	movw	r28, r24
	MSG *retval = 0;

	if((retval = (MSG *)malloc(sizeof(MSG) + payloadSize)) != NULL)
     eea:	0d 96       	adiw	r24, 0x0d	; 13
     eec:	06 de       	rcall	.-1012   	; 0xafa <malloc>
     eee:	00 97       	sbiw	r24, 0x00	; 0
     ef0:	99 f0       	breq	.+38     	; 0xf18 <NewMSG+0x34>
	{
		MsgAllocCount++;
     ef2:	20 91 6b 00 	lds	r18, 0x006B	; 0x80006b <MsgAllocCount>
     ef6:	30 91 6c 00 	lds	r19, 0x006C	; 0x80006c <MsgAllocCount+0x1>
     efa:	2f 5f       	subi	r18, 0xFF	; 255
     efc:	3f 4f       	sbci	r19, 0xFF	; 255
     efe:	30 93 6c 00 	sts	0x006C, r19	; 0x80006c <MsgAllocCount+0x1>
     f02:	20 93 6b 00 	sts	0x006B, r18	; 0x80006b <MsgAllocCount>
		retval->MaxPayload = payloadSize;
     f06:	fc 01       	movw	r30, r24
     f08:	d5 83       	std	Z+5, r29	; 0x05
     f0a:	c4 83       	std	Z+4, r28	; 0x04
		retval->ReplyHandle = NULL;
     f0c:	11 86       	std	Z+9, r1	; 0x09
     f0e:	10 86       	std	Z+8, r1	; 0x08
		retval->PayloadSize = 0;
     f10:	13 82       	std	Z+3, r1	; 0x03
     f12:	12 82       	std	Z+2, r1	; 0x02
		retval->next = 0;
     f14:	13 86       	std	Z+11, r1	; 0x0b
     f16:	12 86       	std	Z+10, r1	; 0x0a
		retval->PayloadSize = 0;
	}
	return retval;
}
     f18:	df 91       	pop	r29
     f1a:	cf 91       	pop	r28
     f1c:	08 95       	ret

00000f1e <DeleteMSG>:
void DeleteMSG(MSG *m)
{
	//-------------------------------------
	//put message into message pool
	//-------------------------------------
	free(m);
     f1e:	ac ce       	rjmp	.-680    	; 0xc78 <free>

00000f20 <InitMessageQueueManager>:
void InitMessageQueueManager(void)
{
	//--------------------------------------
	// Allow access to one task at a time
	//--------------------------------------
	MqBlocker = NewSemaphore(1,SEMAPHORE_MODE_BLOCKING);
     f20:	60 e0       	ldi	r22, 0x00	; 0
     f22:	70 e0       	ldi	r23, 0x00	; 0
     f24:	81 e0       	ldi	r24, 0x01	; 1
     f26:	90 e0       	ldi	r25, 0x00	; 0
     f28:	02 d9       	rcall	.-3580   	; 0x12e <NewSemaphore>
     f2a:	90 93 6e 00 	sts	0x006E, r25	; 0x80006e <MqBlocker+0x1>
     f2e:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <MqBlocker>
     f32:	08 95       	ret

00000f34 <InitMidiParseDesc>:
		MqPut(pMsgDac,pMSG);
	}
}

void ActionController(unsigned char chan,unsigned char Num,unsigned char val)
{
     f34:	fc 01       	movw	r30, r24
     f36:	12 82       	std	Z+2, r1	; 0x02
     f38:	11 82       	std	Z+1, r1	; 0x01
     f3a:	15 82       	std	Z+5, r1	; 0x05
     f3c:	17 82       	std	Z+7, r1	; 0x07
     f3e:	16 82       	std	Z+6, r1	; 0x06
     f40:	10 82       	st	Z, r1
     f42:	13 82       	std	Z+3, r1	; 0x03
     f44:	14 82       	std	Z+4, r1	; 0x04
     f46:	13 86       	std	Z+11, r1	; 0x0b
     f48:	12 86       	std	Z+10, r1	; 0x0a
     f4a:	08 95       	ret

00000f4c <ActionSysEx>:
     f4c:	cf 93       	push	r28
     f4e:	df 93       	push	r29
     f50:	ec 01       	movw	r28, r24
     f52:	1f 82       	std	Y+7, r1	; 0x07
     f54:	1e 82       	std	Y+6, r1	; 0x06
     f56:	80 e8       	ldi	r24, 0x80	; 128
     f58:	90 e0       	ldi	r25, 0x00	; 0
     f5a:	cf dd       	rcall	.-1122   	; 0xafa <malloc>
     f5c:	9b 87       	std	Y+11, r25	; 0x0b
     f5e:	8a 87       	std	Y+10, r24	; 0x0a
     f60:	df 91       	pop	r29
     f62:	cf 91       	pop	r28
     f64:	08 95       	ret

00000f66 <ActionSysExData>:
     f66:	fc 01       	movw	r30, r24
     f68:	26 81       	ldd	r18, Z+6	; 0x06
     f6a:	37 81       	ldd	r19, Z+7	; 0x07
     f6c:	20 38       	cpi	r18, 0x80	; 128
     f6e:	31 05       	cpc	r19, r1
     f70:	58 f4       	brcc	.+22     	; 0xf88 <ActionSysExData+0x22>
     f72:	82 85       	ldd	r24, Z+10	; 0x0a
     f74:	93 85       	ldd	r25, Z+11	; 0x0b
     f76:	a9 01       	movw	r20, r18
     f78:	4f 5f       	subi	r20, 0xFF	; 255
     f7a:	5f 4f       	sbci	r21, 0xFF	; 255
     f7c:	57 83       	std	Z+7, r21	; 0x07
     f7e:	46 83       	std	Z+6, r20	; 0x06
     f80:	fc 01       	movw	r30, r24
     f82:	e2 0f       	add	r30, r18
     f84:	f3 1f       	adc	r31, r19
     f86:	60 83       	st	Z, r22
     f88:	08 95       	ret

00000f8a <ActionSysExEnd>:
     f8a:	cf 93       	push	r28
     f8c:	df 93       	push	r29
     f8e:	ec 01       	movw	r28, r24
     f90:	ea 85       	ldd	r30, Y+10	; 0x0a
     f92:	fb 85       	ldd	r31, Y+11	; 0x0b
     f94:	80 81       	ld	r24, Z
     f96:	8d 37       	cpi	r24, 0x7D	; 125
     f98:	c9 f4       	brne	.+50     	; 0xfcc <ActionSysExEnd+0x42>
     f9a:	81 81       	ldd	r24, Z+1	; 0x01
     f9c:	81 30       	cpi	r24, 0x01	; 1
     f9e:	99 f0       	breq	.+38     	; 0xfc6 <ActionSysExEnd+0x3c>
     fa0:	83 30       	cpi	r24, 0x03	; 3
     fa2:	a1 f4       	brne	.+40     	; 0xfcc <ActionSysExEnd+0x42>
     fa4:	80 ef       	ldi	r24, 0xF0	; 240
     fa6:	90 e0       	ldi	r25, 0x00	; 0
     fa8:	51 d5       	rcall	.+2722   	; 0x1a4c <USART_PutC>
     faa:	8d e7       	ldi	r24, 0x7D	; 125
     fac:	90 e0       	ldi	r25, 0x00	; 0
     fae:	4e d5       	rcall	.+2716   	; 0x1a4c <USART_PutC>
     fb0:	83 e0       	ldi	r24, 0x03	; 3
     fb2:	90 e0       	ldi	r25, 0x00	; 0
     fb4:	4b d5       	rcall	.+2710   	; 0x1a4c <USART_PutC>
     fb6:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <MidiChan>
     fba:	90 e0       	ldi	r25, 0x00	; 0
     fbc:	47 d5       	rcall	.+2702   	; 0x1a4c <USART_PutC>
     fbe:	87 ef       	ldi	r24, 0xF7	; 247
     fc0:	90 e0       	ldi	r25, 0x00	; 0
     fc2:	44 d5       	rcall	.+2696   	; 0x1a4c <USART_PutC>
     fc4:	03 c0       	rjmp	.+6      	; 0xfcc <ActionSysExEnd+0x42>
     fc6:	82 81       	ldd	r24, Z+2	; 0x02
     fc8:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <MidiChan>
     fcc:	8a 85       	ldd	r24, Y+10	; 0x0a
     fce:	9b 85       	ldd	r25, Y+11	; 0x0b
     fd0:	53 de       	rcall	.-858    	; 0xc78 <free>
     fd2:	1f 82       	std	Y+7, r1	; 0x07
     fd4:	1e 82       	std	Y+6, r1	; 0x06
     fd6:	df 91       	pop	r29
     fd8:	cf 91       	pop	r28
     fda:	08 95       	ret

00000fdc <ActionSysRTClock>:
     fdc:	81 e0       	ldi	r24, 0x01	; 1
     fde:	5d d8       	rcall	.-3910   	; 0x9a <SetGatePort>
     fe0:	60 e0       	ldi	r22, 0x00	; 0
     fe2:	70 e0       	ldi	r23, 0x00	; 0
     fe4:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <pSemClock>
     fe8:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <pSemClock+0x1>
     fec:	1f c2       	rjmp	.+1086   	; 0x142c <PostSemaphore>

00000fee <ActionSysRTContinue>:
     fee:	82 e0       	ldi	r24, 0x02	; 2
     ff0:	54 c8       	rjmp	.-3928   	; 0x9a <SetGatePort>

00000ff2 <ActionSysRTStop>:
     ff2:	82 e0       	ldi	r24, 0x02	; 2
     ff4:	60 c8       	rjmp	.-3904   	; 0xb6 <ClearGatePort>

00000ff6 <ActionSysRTReset>:
     ff6:	83 e0       	ldi	r24, 0x03	; 3
     ff8:	50 d8       	rcall	.-3936   	; 0x9a <SetGatePort>
     ffa:	60 e0       	ldi	r22, 0x00	; 0
     ffc:	70 e0       	ldi	r23, 0x00	; 0
     ffe:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <pSemReset>
    1002:	90 91 2a 01 	lds	r25, 0x012A	; 0x80012a <pSemReset+0x1>
    1006:	12 c2       	rjmp	.+1060   	; 0x142c <PostSemaphore>

00001008 <ActionNoteOff>:
    1008:	cf 93       	push	r28
    100a:	df 93       	push	r29
    100c:	90 91 70 00 	lds	r25, 0x0070	; 0x800070 <MidiChan>
    1010:	98 13       	cpse	r25, r24
    1012:	2a c0       	rjmp	.+84     	; 0x1068 <ActionNoteOff+0x60>
    1014:	d0 91 51 01 	lds	r29, 0x0151	; 0x800151 <CurrentNote>
    1018:	d6 13       	cpse	r29, r22
    101a:	26 c0       	rjmp	.+76     	; 0x1068 <ActionNoteOff+0x60>
    101c:	c4 2f       	mov	r28, r20
    101e:	84 e0       	ldi	r24, 0x04	; 4
    1020:	90 e0       	ldi	r25, 0x00	; 0
    1022:	60 df       	rcall	.-320    	; 0xee4 <NewMSG>
    1024:	fc 01       	movw	r30, r24
    1026:	14 86       	std	Z+12, r1	; 0x0c
    1028:	dd 0f       	add	r29, r29
    102a:	15 86       	std	Z+13, r1	; 0x0d
    102c:	d6 87       	std	Z+14, r29	; 0x0e
    102e:	82 e0       	ldi	r24, 0x02	; 2
    1030:	87 87       	std	Z+15, r24	; 0x0f
    1032:	bf 01       	movw	r22, r30
    1034:	80 91 b5 00 	lds	r24, 0x00B5	; 0x8000b5 <pMsgDac>
    1038:	90 91 b6 00 	lds	r25, 0x00B6	; 0x8000b6 <pMsgDac+0x1>
    103c:	d6 de       	rcall	.-596    	; 0xdea <MqPut>
    103e:	84 e0       	ldi	r24, 0x04	; 4
    1040:	90 e0       	ldi	r25, 0x00	; 0
    1042:	50 df       	rcall	.-352    	; 0xee4 <NewMSG>
    1044:	fc 01       	movw	r30, r24
    1046:	81 e0       	ldi	r24, 0x01	; 1
    1048:	84 87       	std	Z+12, r24	; 0x0c
    104a:	80 e8       	ldi	r24, 0x80	; 128
    104c:	c8 9f       	mul	r28, r24
    104e:	a0 01       	movw	r20, r0
    1050:	11 24       	eor	r1, r1
    1052:	56 87       	std	Z+14, r21	; 0x0e
    1054:	45 87       	std	Z+13, r20	; 0x0d
    1056:	17 86       	std	Z+15, r1	; 0x0f
    1058:	bf 01       	movw	r22, r30
    105a:	80 91 b5 00 	lds	r24, 0x00B5	; 0x8000b5 <pMsgDac>
    105e:	90 91 b6 00 	lds	r25, 0x00B6	; 0x8000b6 <pMsgDac+0x1>
    1062:	c3 de       	rcall	.-634    	; 0xdea <MqPut>
    1064:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <GateState>
    1068:	df 91       	pop	r29
    106a:	cf 91       	pop	r28
    106c:	08 95       	ret

0000106e <ActionNoteOn>:
    106e:	cf 93       	push	r28
    1070:	df 93       	push	r29
    1072:	90 91 70 00 	lds	r25, 0x0070	; 0x800070 <MidiChan>
    1076:	98 13       	cpse	r25, r24
    1078:	30 c0       	rjmp	.+96     	; 0x10da <ActionNoteOn+0x6c>
    107a:	c4 2f       	mov	r28, r20
    107c:	d6 2f       	mov	r29, r22
    107e:	84 e0       	ldi	r24, 0x04	; 4
    1080:	90 e0       	ldi	r25, 0x00	; 0
    1082:	30 df       	rcall	.-416    	; 0xee4 <NewMSG>
    1084:	fc 01       	movw	r30, r24
    1086:	14 86       	std	Z+12, r1	; 0x0c
    1088:	8d 2f       	mov	r24, r29
    108a:	88 0f       	add	r24, r24
    108c:	15 86       	std	Z+13, r1	; 0x0d
    108e:	86 87       	std	Z+14, r24	; 0x0e
    1090:	c1 11       	cpse	r28, r1
    1092:	02 c0       	rjmp	.+4      	; 0x1098 <ActionNoteOn+0x2a>
    1094:	82 e0       	ldi	r24, 0x02	; 2
    1096:	01 c0       	rjmp	.+2      	; 0x109a <ActionNoteOn+0x2c>
    1098:	81 e0       	ldi	r24, 0x01	; 1
    109a:	87 87       	std	Z+15, r24	; 0x0f
    109c:	bf 01       	movw	r22, r30
    109e:	80 91 b5 00 	lds	r24, 0x00B5	; 0x8000b5 <pMsgDac>
    10a2:	90 91 b6 00 	lds	r25, 0x00B6	; 0x8000b6 <pMsgDac+0x1>
    10a6:	a1 de       	rcall	.-702    	; 0xdea <MqPut>
    10a8:	84 e0       	ldi	r24, 0x04	; 4
    10aa:	90 e0       	ldi	r25, 0x00	; 0
    10ac:	1b df       	rcall	.-458    	; 0xee4 <NewMSG>
    10ae:	fc 01       	movw	r30, r24
    10b0:	81 e0       	ldi	r24, 0x01	; 1
    10b2:	84 87       	std	Z+12, r24	; 0x0c
    10b4:	8c 2f       	mov	r24, r28
    10b6:	88 0f       	add	r24, r24
    10b8:	15 86       	std	Z+13, r1	; 0x0d
    10ba:	86 87       	std	Z+14, r24	; 0x0e
    10bc:	17 86       	std	Z+15, r1	; 0x0f
    10be:	bf 01       	movw	r22, r30
    10c0:	80 91 b5 00 	lds	r24, 0x00B5	; 0x8000b5 <pMsgDac>
    10c4:	90 91 b6 00 	lds	r25, 0x00B6	; 0x8000b6 <pMsgDac+0x1>
    10c8:	90 de       	rcall	.-736    	; 0xdea <MqPut>
    10ca:	81 e0       	ldi	r24, 0x01	; 1
    10cc:	c1 11       	cpse	r28, r1
    10ce:	01 c0       	rjmp	.+2      	; 0x10d2 <ActionNoteOn+0x64>
    10d0:	80 e0       	ldi	r24, 0x00	; 0
    10d2:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <GateState>
    10d6:	d0 93 51 01 	sts	0x0151, r29	; 0x800151 <CurrentNote>
    10da:	df 91       	pop	r29
    10dc:	cf 91       	pop	r28
    10de:	08 95       	ret

000010e0 <ActionAfterTouch>:
    10e0:	cf 93       	push	r28
    10e2:	90 91 70 00 	lds	r25, 0x0070	; 0x800070 <MidiChan>
    10e6:	98 13       	cpse	r25, r24
    10e8:	12 c0       	rjmp	.+36     	; 0x110e <ActionAfterTouch+0x2e>
    10ea:	c4 2f       	mov	r28, r20
    10ec:	84 e0       	ldi	r24, 0x04	; 4
    10ee:	90 e0       	ldi	r25, 0x00	; 0
    10f0:	f9 de       	rcall	.-526    	; 0xee4 <NewMSG>
    10f2:	fc 01       	movw	r30, r24
    10f4:	cc 0f       	add	r28, r28
    10f6:	15 86       	std	Z+13, r1	; 0x0d
    10f8:	c6 87       	std	Z+14, r28	; 0x0e
    10fa:	17 86       	std	Z+15, r1	; 0x0f
    10fc:	82 e0       	ldi	r24, 0x02	; 2
    10fe:	84 87       	std	Z+12, r24	; 0x0c
    1100:	bf 01       	movw	r22, r30
    1102:	80 91 b5 00 	lds	r24, 0x00B5	; 0x8000b5 <pMsgDac>
    1106:	90 91 b6 00 	lds	r25, 0x00B6	; 0x8000b6 <pMsgDac+0x1>
    110a:	cf 91       	pop	r28
    110c:	6e ce       	rjmp	.-804    	; 0xdea <MqPut>
    110e:	cf 91       	pop	r28
    1110:	08 95       	ret

00001112 <ActionChanPressure>:
    1112:	cf 93       	push	r28
    1114:	90 91 70 00 	lds	r25, 0x0070	; 0x800070 <MidiChan>
    1118:	98 13       	cpse	r25, r24
    111a:	12 c0       	rjmp	.+36     	; 0x1140 <ActionChanPressure+0x2e>
    111c:	c6 2f       	mov	r28, r22
    111e:	84 e0       	ldi	r24, 0x04	; 4
    1120:	90 e0       	ldi	r25, 0x00	; 0
    1122:	e0 de       	rcall	.-576    	; 0xee4 <NewMSG>
    1124:	fc 01       	movw	r30, r24
    1126:	cc 0f       	add	r28, r28
    1128:	15 86       	std	Z+13, r1	; 0x0d
    112a:	c6 87       	std	Z+14, r28	; 0x0e
    112c:	17 86       	std	Z+15, r1	; 0x0f
    112e:	82 e0       	ldi	r24, 0x02	; 2
    1130:	84 87       	std	Z+12, r24	; 0x0c
    1132:	bf 01       	movw	r22, r30
    1134:	80 91 b5 00 	lds	r24, 0x00B5	; 0x8000b5 <pMsgDac>
    1138:	90 91 b6 00 	lds	r25, 0x00B6	; 0x8000b6 <pMsgDac+0x1>
    113c:	cf 91       	pop	r28
    113e:	55 ce       	rjmp	.-854    	; 0xdea <MqPut>
    1140:	cf 91       	pop	r28
    1142:	08 95       	ret

00001144 <ActionPitchWheel>:
    1144:	cf 93       	push	r28
    1146:	df 93       	push	r29
    1148:	90 91 70 00 	lds	r25, 0x0070	; 0x800070 <MidiChan>
    114c:	98 13       	cpse	r25, r24
    114e:	12 c0       	rjmp	.+36     	; 0x1174 <ActionPitchWheel+0x30>
    1150:	eb 01       	movw	r28, r22
    1152:	84 e0       	ldi	r24, 0x04	; 4
    1154:	90 e0       	ldi	r25, 0x00	; 0
    1156:	c6 de       	rcall	.-628    	; 0xee4 <NewMSG>
    1158:	fc 01       	movw	r30, r24
    115a:	d6 87       	std	Z+14, r29	; 0x0e
    115c:	c5 87       	std	Z+13, r28	; 0x0d
    115e:	17 86       	std	Z+15, r1	; 0x0f
    1160:	83 e0       	ldi	r24, 0x03	; 3
    1162:	84 87       	std	Z+12, r24	; 0x0c
    1164:	bf 01       	movw	r22, r30
    1166:	80 91 b5 00 	lds	r24, 0x00B5	; 0x8000b5 <pMsgDac>
    116a:	90 91 b6 00 	lds	r25, 0x00B6	; 0x8000b6 <pMsgDac+0x1>
    116e:	df 91       	pop	r29
    1170:	cf 91       	pop	r28
    1172:	3b ce       	rjmp	.-906    	; 0xdea <MqPut>
    1174:	df 91       	pop	r29
    1176:	cf 91       	pop	r28
    1178:	08 95       	ret

0000117a <ParseMidi>:

}

int ParseMidi(MIDIPARSE_D *pMp, unsigned char c)
{
    117a:	cf 93       	push	r28
    117c:	df 93       	push	r29
    117e:	ec 01       	movw	r28, r24
    1180:	46 2f       	mov	r20, r22
	//	c.......a byte of midi data
	//
	// returns:
	//	0
	//-----------------------------------------
	if(c & (unsigned char)0x80)	//is it a command?
    1182:	67 ff       	sbrs	r22, 7
    1184:	32 c0       	rjmp	.+100    	; 0x11ea <ParseMidi+0x70>
	{
		if(c < (unsigned char)0xf0)
    1186:	60 3f       	cpi	r22, 0xF0	; 240
    1188:	38 f4       	brcc	.+14     	; 0x1198 <ParseMidi+0x1e>
		{
			//process this stuff, dispose of everything else
			pMp->cmd = (unsigned char)(c & (unsigned char)0xf0);
    118a:	86 2f       	mov	r24, r22
    118c:	80 7f       	andi	r24, 0xF0	; 240
    118e:	89 83       	std	Y+1, r24	; 0x01
			pMp->chan = (unsigned char)(c & 0x0f);
    1190:	e6 2f       	mov	r30, r22
    1192:	ef 70       	andi	r30, 0x0F	; 15
    1194:	ea 83       	std	Y+2, r30	; 0x02
    1196:	ae c0       	rjmp	.+348    	; 0x12f4 <ParseMidi+0x17a>
			pMp->state = NOTE0;
		}
		else	//process system commands
		{
			switch(c)
    1198:	50 e0       	ldi	r21, 0x00	; 0
    119a:	fa 01       	movw	r30, r20
    119c:	e0 5f       	subi	r30, 0xF0	; 240
    119e:	f1 09       	sbc	r31, r1
    11a0:	e0 31       	cpi	r30, 0x10	; 16
    11a2:	f1 05       	cpc	r31, r1
    11a4:	08 f0       	brcs	.+2      	; 0x11a8 <ParseMidi+0x2e>
    11a6:	ba c0       	rjmp	.+372    	; 0x131c <ParseMidi+0x1a2>
    11a8:	e7 5e       	subi	r30, 0xE7	; 231
    11aa:	ff 4f       	sbci	r31, 0xFF	; 255
    11ac:	09 94       	ijmp
			{
				case SYSEX:	//n bytes defined by command
                   	pMp->state = SYSEX_STATE;
    11ae:	83 e0       	ldi	r24, 0x03	; 3
    11b0:	8d 83       	std	Y+5, r24	; 0x05
                    pMp->cmd = SYSEX;
    11b2:	80 ef       	ldi	r24, 0xF0	; 240
    11b4:	89 83       	std	Y+1, r24	; 0x01
					ActionSysEx(pMp);
    11b6:	ce 01       	movw	r24, r28
    11b8:	c9 de       	rcall	.-622    	; 0xf4c <ActionSysEx>
					break;
    11ba:	b0 c0       	rjmp	.+352    	; 0x131c <ParseMidi+0x1a2>
				case SYSCOM_MTCQUARTERFRAME:		//2 bytes
					pMp->cmd = SYSCOM_MTCQUARTERFRAME;
    11bc:	81 ef       	ldi	r24, 0xF1	; 241
    11be:	04 c0       	rjmp	.+8      	; 0x11c8 <ParseMidi+0x4e>
					pMp->state = SYSCOM_STATE;
					break;
				case SYSCOMSONGPOS:		//3 bytes
					pMp->cmd = SYSCOMSONGPOS;
    11c0:	82 ef       	ldi	r24, 0xF2	; 242
    11c2:	89 83       	std	Y+1, r24	; 0x01
    11c4:	97 c0       	rjmp	.+302    	; 0x12f4 <ParseMidi+0x17a>
					pMp->state = NOTE0;
					break;
				case SYSCOMSONGSEL:		//2 bytes
					pMp->cmd = SYSCOMSONGSEL;
    11c6:	83 ef       	ldi	r24, 0xF3	; 243
    11c8:	89 83       	std	Y+1, r24	; 0x01
					pMp->state = SYSCOM_STATE;
    11ca:	84 e0       	ldi	r24, 0x04	; 4
    11cc:	94 c0       	rjmp	.+296    	; 0x12f6 <ParseMidi+0x17c>
					break;
				case SYSCOMTUNEREQ:		//1 byte
					ActionSysComTuneReq();
					break;
				case SYSEXEND:			//1 byte
                   	pMp->state = IDLE;
    11ce:	1d 82       	std	Y+5, r1	; 0x05
                    pMp->cmd = SYSEXEND;
    11d0:	87 ef       	ldi	r24, 0xF7	; 247
    11d2:	89 83       	std	Y+1, r24	; 0x01
					ActionSysExEnd(pMp);
    11d4:	ce 01       	movw	r24, r28
    11d6:	d9 de       	rcall	.-590    	; 0xf8a <ActionSysExEnd>
					break;
    11d8:	a1 c0       	rjmp	.+322    	; 0x131c <ParseMidi+0x1a2>
				case SYSRTCLOCK:		//1 byte
					ActionSysRTClock();
    11da:	00 df       	rcall	.-512    	; 0xfdc <ActionSysRTClock>
					break;
    11dc:	9f c0       	rjmp	.+318    	; 0x131c <ParseMidi+0x1a2>
					break;
				case SYSRTSTART:		//1 byte
					ActionSysRTStart();
					break;
				case SYSRTCONTINUE:		//1 byte
					ActionSysRTContinue();
    11de:	07 df       	rcall	.-498    	; 0xfee <ActionSysRTContinue>
					break;
    11e0:	9d c0       	rjmp	.+314    	; 0x131c <ParseMidi+0x1a2>
				case SYSRTSTOP:			//1 byte
					ActionSysRTStop();
    11e2:	07 df       	rcall	.-498    	; 0xff2 <ActionSysRTStop>
					break;
    11e4:	9b c0       	rjmp	.+310    	; 0x131c <ParseMidi+0x1a2>
					break;
				case SYSRTACTIVESEN:	//1 byte
					ActionSysRTActiveSense();
					break;
				case SYSRTRESET:		//1 byte
					ActionSysRTReset();
    11e6:	07 df       	rcall	.-498    	; 0xff6 <ActionSysRTReset>
					break;
    11e8:	99 c0       	rjmp	.+306    	; 0x131c <ParseMidi+0x1a2>
	else	// 	then it must be data
	{
		/*	we must handle the case of running status...so we need to keep track of
		**  which data byte we are on
		*/
		switch(pMp->cmd)	//what was the last command?
    11ea:	89 81       	ldd	r24, Y+1	; 0x01
    11ec:	80 3d       	cpi	r24, 0xD0	; 208
    11ee:	09 f4       	brne	.+2      	; 0x11f2 <ParseMidi+0x78>
    11f0:	4d c0       	rjmp	.+154    	; 0x128c <ParseMidi+0x112>
    11f2:	78 f4       	brcc	.+30     	; 0x1212 <ParseMidi+0x98>
    11f4:	80 3a       	cpi	r24, 0xA0	; 160
    11f6:	d9 f1       	breq	.+118    	; 0x126e <ParseMidi+0xf4>
    11f8:	28 f4       	brcc	.+10     	; 0x1204 <ParseMidi+0x8a>
    11fa:	80 38       	cpi	r24, 0x80	; 128
    11fc:	f1 f0       	breq	.+60     	; 0x123a <ParseMidi+0xc0>
    11fe:	80 39       	cpi	r24, 0x90	; 144
    1200:	29 f1       	breq	.+74     	; 0x124c <ParseMidi+0xd2>
    1202:	8c c0       	rjmp	.+280    	; 0x131c <ParseMidi+0x1a2>
    1204:	80 3b       	cpi	r24, 0xB0	; 176
    1206:	09 f4       	brne	.+2      	; 0x120a <ParseMidi+0x90>
    1208:	44 c0       	rjmp	.+136    	; 0x1292 <ParseMidi+0x118>
    120a:	80 3c       	cpi	r24, 0xC0	; 192
    120c:	09 f4       	brne	.+2      	; 0x1210 <ParseMidi+0x96>
    120e:	72 c0       	rjmp	.+228    	; 0x12f4 <ParseMidi+0x17a>
    1210:	85 c0       	rjmp	.+266    	; 0x131c <ParseMidi+0x1a2>
    1212:	81 3f       	cpi	r24, 0xF1	; 241
    1214:	09 f4       	brne	.+2      	; 0x1218 <ParseMidi+0x9e>
    1216:	81 c0       	rjmp	.+258    	; 0x131a <ParseMidi+0x1a0>
    1218:	48 f4       	brcc	.+18     	; 0x122c <ParseMidi+0xb2>
    121a:	80 3e       	cpi	r24, 0xE0	; 224
    121c:	09 f4       	brne	.+2      	; 0x1220 <ParseMidi+0xa6>
    121e:	48 c0       	rjmp	.+144    	; 0x12b0 <ParseMidi+0x136>
    1220:	80 3f       	cpi	r24, 0xF0	; 240
    1222:	09 f0       	breq	.+2      	; 0x1226 <ParseMidi+0xac>
    1224:	7b c0       	rjmp	.+246    	; 0x131c <ParseMidi+0x1a2>
			case PATCH:			//last command was patch change 2 bytes
				pMp->state = NOTE0;
				ActionProgramChange(pMp->chan,c);
				break;
			case SYSEX:		//1 byte...This is where we pass of sysex data
				ActionSysExData(pMp,c);
    1226:	ce 01       	movw	r24, r28
    1228:	9e de       	rcall	.-708    	; 0xf66 <ActionSysExData>
               	break;
    122a:	78 c0       	rjmp	.+240    	; 0x131c <ParseMidi+0x1a2>
	else	// 	then it must be data
	{
		/*	we must handle the case of running status...so we need to keep track of
		**  which data byte we are on
		*/
		switch(pMp->cmd)	//what was the last command?
    122c:	82 3f       	cpi	r24, 0xF2	; 242
    122e:	09 f4       	brne	.+2      	; 0x1232 <ParseMidi+0xb8>
    1230:	58 c0       	rjmp	.+176    	; 0x12e2 <ParseMidi+0x168>
    1232:	83 3f       	cpi	r24, 0xF3	; 243
    1234:	09 f4       	brne	.+2      	; 0x1238 <ParseMidi+0xbe>
    1236:	71 c0       	rjmp	.+226    	; 0x131a <ParseMidi+0x1a0>
    1238:	71 c0       	rjmp	.+226    	; 0x131c <ParseMidi+0x1a2>
		{
			case NOTEOFF:	//last command was note off 3 bytes
				switch(pMp->state)
    123a:	8d 81       	ldd	r24, Y+5	; 0x05
    123c:	81 30       	cpi	r24, 0x01	; 1
    123e:	21 f1       	breq	.+72     	; 0x1288 <ParseMidi+0x10e>
    1240:	82 30       	cpi	r24, 0x02	; 2
    1242:	09 f0       	breq	.+2      	; 0x1246 <ParseMidi+0xcc>
    1244:	6b c0       	rjmp	.+214    	; 0x131c <ParseMidi+0x1a2>
					case NOTE0:
						pMp->nextnote = c;
						pMp->state = NOTE1;
						break;
					case NOTE1:
						pMp->currentnote = pMp->nextnote;
    1246:	6b 81       	ldd	r22, Y+3	; 0x03
    1248:	6c 83       	std	Y+4, r22	; 0x04
    124a:	0e c0       	rjmp	.+28     	; 0x1268 <ParseMidi+0xee>
						pMp->state = NOTE0;
						break;
				}
				break;
			case NOTEON:	// last command was note on 3 bytes
				switch(pMp->state)
    124c:	8d 81       	ldd	r24, Y+5	; 0x05
    124e:	81 30       	cpi	r24, 0x01	; 1
    1250:	d9 f0       	breq	.+54     	; 0x1288 <ParseMidi+0x10e>
    1252:	82 30       	cpi	r24, 0x02	; 2
    1254:	09 f0       	breq	.+2      	; 0x1258 <ParseMidi+0xde>
    1256:	62 c0       	rjmp	.+196    	; 0x131c <ParseMidi+0x1a2>
					case NOTE0:
						pMp->nextnote = c;
						pMp->state = NOTE1;
						break;
					case NOTE1:
						pMp->currentnote = pMp->nextnote;
    1258:	6b 81       	ldd	r22, Y+3	; 0x03
    125a:	6c 83       	std	Y+4, r22	; 0x04
						if(c > 0)
    125c:	44 23       	and	r20, r20
    125e:	19 f0       	breq	.+6      	; 0x1266 <ParseMidi+0xec>
							ActionNoteOn(pMp->chan,pMp->currentnote,c);
    1260:	8a 81       	ldd	r24, Y+2	; 0x02
    1262:	05 df       	rcall	.-502    	; 0x106e <ActionNoteOn>
    1264:	47 c0       	rjmp	.+142    	; 0x12f4 <ParseMidi+0x17a>
						else
							ActionNoteOff(pMp->chan,pMp->nextnote,c);
    1266:	40 e0       	ldi	r20, 0x00	; 0
    1268:	8a 81       	ldd	r24, Y+2	; 0x02
    126a:	ce de       	rcall	.-612    	; 0x1008 <ActionNoteOff>
    126c:	43 c0       	rjmp	.+134    	; 0x12f4 <ParseMidi+0x17a>
					default:
						break;
				}
				break;
			case NOTEPRES:	// last command was note pressure  3 bytes
				switch(pMp->state)
    126e:	8d 81       	ldd	r24, Y+5	; 0x05
    1270:	81 30       	cpi	r24, 0x01	; 1
    1272:	51 f0       	breq	.+20     	; 0x1288 <ParseMidi+0x10e>
    1274:	82 30       	cpi	r24, 0x02	; 2
    1276:	09 f0       	breq	.+2      	; 0x127a <ParseMidi+0x100>
    1278:	51 c0       	rjmp	.+162    	; 0x131c <ParseMidi+0x1a2>
					case NOTE0:
						pMp->nextnote = c;
						pMp->state = NOTE1;
						break;
					case NOTE1:
						pMp->state = NOTE0;
    127a:	81 e0       	ldi	r24, 0x01	; 1
    127c:	8d 83       	std	Y+5, r24	; 0x05
						pMp->currentnote = pMp->nextnote;
    127e:	6b 81       	ldd	r22, Y+3	; 0x03
    1280:	6c 83       	std	Y+4, r22	; 0x04
						ActionAfterTouch(pMp->chan,pMp->currentnote,c);
    1282:	8a 81       	ldd	r24, Y+2	; 0x02
    1284:	2d df       	rcall	.-422    	; 0x10e0 <ActionAfterTouch>
						break;
    1286:	4a c0       	rjmp	.+148    	; 0x131c <ParseMidi+0x1a2>
				break;
			case NOTEPRES:	// last command was note pressure  3 bytes
				switch(pMp->state)
				{
					case NOTE0:
						pMp->nextnote = c;
    1288:	4b 83       	std	Y+3, r20	; 0x03
    128a:	32 c0       	rjmp	.+100    	; 0x12f0 <ParseMidi+0x176>
						ActionAfterTouch(pMp->chan,pMp->currentnote,c);
						break;
				}
				break;
			case CHANPRES:		//last command was channel pressuren 2 bytes
				ActionChanPressure(pMp->chan,c);
    128c:	8a 81       	ldd	r24, Y+2	; 0x02
    128e:	41 df       	rcall	.-382    	; 0x1112 <ActionChanPressure>
				break;
    1290:	45 c0       	rjmp	.+138    	; 0x131c <ParseMidi+0x1a2>
			case CONTROL:			//control change 3 bytes
				switch(pMp->state)
    1292:	8d 81       	ldd	r24, Y+5	; 0x05
    1294:	81 30       	cpi	r24, 0x01	; 1
    1296:	41 f0       	breq	.+16     	; 0x12a8 <ParseMidi+0x12e>
    1298:	82 30       	cpi	r24, 0x02	; 2
    129a:	09 f0       	breq	.+2      	; 0x129e <ParseMidi+0x124>
    129c:	3f c0       	rjmp	.+126    	; 0x131c <ParseMidi+0x1a2>
					case NOTE0:
						pMp->state = NOTE1;
						pMp->nextnote = c;
						break;
					case NOTE1:
						pMp->state = NOTE0;
    129e:	81 e0       	ldi	r24, 0x01	; 1
    12a0:	8d 83       	std	Y+5, r24	; 0x05
						pMp->currentnote = pMp->nextnote;
    12a2:	8b 81       	ldd	r24, Y+3	; 0x03
    12a4:	8c 83       	std	Y+4, r24	; 0x04
    12a6:	3a c0       	rjmp	.+116    	; 0x131c <ParseMidi+0x1a2>
				break;
			case CONTROL:			//control change 3 bytes
				switch(pMp->state)
				{
					case NOTE0:
						pMp->state = NOTE1;
    12a8:	82 e0       	ldi	r24, 0x02	; 2
    12aa:	8d 83       	std	Y+5, r24	; 0x05
						pMp->nextnote = c;
    12ac:	6b 83       	std	Y+3, r22	; 0x03
						break;
    12ae:	36 c0       	rjmp	.+108    	; 0x131c <ParseMidi+0x1a2>
						ActionController(pMp->chan,pMp->currentnote,c);
						break;
				}
				break;
			case WHEEL:			//last command was pitch wheel change 3 bytes
				switch(pMp->state)
    12b0:	8d 81       	ldd	r24, Y+5	; 0x05
    12b2:	81 30       	cpi	r24, 0x01	; 1
    12b4:	c9 f0       	breq	.+50     	; 0x12e8 <ParseMidi+0x16e>
    12b6:	82 30       	cpi	r24, 0x02	; 2
    12b8:	89 f5       	brne	.+98     	; 0x131c <ParseMidi+0x1a2>
						pMp->v = ((int)c);
						pMp->state = NOTE1;
						break;
					case NOTE1:
						pMp->v |= ((int)c)<<7;
						pMp->v <<= 2;	//12 bits;
    12ba:	80 e8       	ldi	r24, 0x80	; 128
    12bc:	68 9f       	mul	r22, r24
    12be:	f0 01       	movw	r30, r0
    12c0:	11 24       	eor	r1, r1
    12c2:	68 85       	ldd	r22, Y+8	; 0x08
    12c4:	79 85       	ldd	r23, Y+9	; 0x09
    12c6:	e6 2b       	or	r30, r22
    12c8:	f7 2b       	or	r31, r23
    12ca:	bf 01       	movw	r22, r30
    12cc:	66 0f       	add	r22, r22
    12ce:	77 1f       	adc	r23, r23
    12d0:	66 0f       	add	r22, r22
    12d2:	77 1f       	adc	r23, r23
    12d4:	79 87       	std	Y+9, r23	; 0x09
    12d6:	68 87       	std	Y+8, r22	; 0x08
						pMp->state = NOTE0;
    12d8:	81 e0       	ldi	r24, 0x01	; 1
    12da:	8d 83       	std	Y+5, r24	; 0x05
						ActionPitchWheel(pMp->chan,pMp->v);
    12dc:	8a 81       	ldd	r24, Y+2	; 0x02
    12de:	32 df       	rcall	.-412    	; 0x1144 <ActionPitchWheel>
						break;
    12e0:	1d c0       	rjmp	.+58     	; 0x131c <ParseMidi+0x1a2>
			case SYSCOM_MTCQUARTERFRAME:
				pMp->state = IDLE;
				ActionMTCQuarterFrameMessage(c);
				break;
			case SYSCOMSONGPOS:
				switch(pMp->state)
    12e2:	8d 81       	ldd	r24, Y+5	; 0x05
    12e4:	81 30       	cpi	r24, 0x01	; 1
    12e6:	49 f4       	brne	.+18     	; 0x12fa <ParseMidi+0x180>
				break;
			case WHEEL:			//last command was pitch wheel change 3 bytes
				switch(pMp->state)
				{
					case NOTE0:
						pMp->v = ((int)c);
    12e8:	e4 2f       	mov	r30, r20
    12ea:	f0 e0       	ldi	r31, 0x00	; 0
    12ec:	f9 87       	std	Y+9, r31	; 0x09
    12ee:	e8 87       	std	Y+8, r30	; 0x08
						pMp->state = NOTE1;
    12f0:	82 e0       	ldi	r24, 0x02	; 2
    12f2:	01 c0       	rjmp	.+2      	; 0x12f6 <ParseMidi+0x17c>
						ActionPitchWheel(pMp->chan,pMp->v);
						break;
				}
				break;
			case PATCH:			//last command was patch change 2 bytes
				pMp->state = NOTE0;
    12f4:	81 e0       	ldi	r24, 0x01	; 1
    12f6:	8d 83       	std	Y+5, r24	; 0x05
    12f8:	11 c0       	rjmp	.+34     	; 0x131c <ParseMidi+0x1a2>
			case SYSCOM_MTCQUARTERFRAME:
				pMp->state = IDLE;
				ActionMTCQuarterFrameMessage(c);
				break;
			case SYSCOMSONGPOS:
				switch(pMp->state)
    12fa:	82 30       	cpi	r24, 0x02	; 2
    12fc:	79 f4       	brne	.+30     	; 0x131c <ParseMidi+0x1a2>
						pMp->v = ((int)c);
						pMp->state = NOTE1;
						break;
					case NOTE1:
						pMp->v |= ((int)c)<<7;
						pMp->v <<= 2;	//12 bits;
    12fe:	80 e8       	ldi	r24, 0x80	; 128
    1300:	68 9f       	mul	r22, r24
    1302:	f0 01       	movw	r30, r0
    1304:	11 24       	eor	r1, r1
    1306:	48 85       	ldd	r20, Y+8	; 0x08
    1308:	59 85       	ldd	r21, Y+9	; 0x09
    130a:	e4 2b       	or	r30, r20
    130c:	f5 2b       	or	r31, r21
    130e:	ee 0f       	add	r30, r30
    1310:	ff 1f       	adc	r31, r31
    1312:	ee 0f       	add	r30, r30
    1314:	ff 1f       	adc	r31, r31
    1316:	f9 87       	std	Y+9, r31	; 0x09
    1318:	e8 87       	std	Y+8, r30	; 0x08
						ActionSysComSongPos(pMp->v);
						break;
				}
				break;
			case SYSCOMSONGSEL:
				pMp->state = IDLE;
    131a:	1d 82       	std	Y+5, r1	; 0x05
				ActionSysComSongSel(c);
				break;
		}	//end of switch(cmd)
	}	//end of if(c & 0x080)
	return 0;
}
    131c:	80 e0       	ldi	r24, 0x00	; 0
    131e:	90 e0       	ldi	r25, 0x00	; 0
    1320:	df 91       	pop	r29
    1322:	cf 91       	pop	r28
    1324:	08 95       	ret

00001326 <PriorityCompare>:
//		positive....priority of s1 > s2
//		negative....priority of s1 < s2
//----------------------------------------------------------------------
//
static int PriorityCompare(void **s1, void **s2)
{
    1326:	cf 93       	push	r28
    1328:	df 93       	push	r29
	int r;

	//check priority levels
	if( (r = ((TCB *)*s1)->priority - ((TCB *)*s2)->priority) != 0)
    132a:	dc 01       	movw	r26, r24
    132c:	ed 91       	ld	r30, X+
    132e:	fc 91       	ld	r31, X
    1330:	eb 01       	movw	r28, r22
    1332:	a8 81       	ld	r26, Y
    1334:	b9 81       	ldd	r27, Y+1	; 0x01
    1336:	86 81       	ldd	r24, Z+6	; 0x06
    1338:	97 81       	ldd	r25, Z+7	; 0x07
    133a:	16 96       	adiw	r26, 0x06	; 6
    133c:	2d 91       	ld	r18, X+
    133e:	3c 91       	ld	r19, X
    1340:	17 97       	sbiw	r26, 0x07	; 7
    1342:	82 1b       	sub	r24, r18
    1344:	93 0b       	sbc	r25, r19
    1346:	41 f4       	brne	.+16     	; 0x1358 <PriorityCompare+0x32>
		return r;
	//if priority levels are the same, then check time stamps
	return (int)(((TCB *)*s2)->TimeStamp - ((TCB *)*s1)->TimeStamp);
    1348:	1c 96       	adiw	r26, 0x0c	; 12
    134a:	8d 91       	ld	r24, X+
    134c:	9c 91       	ld	r25, X
    134e:	1d 97       	sbiw	r26, 0x0d	; 13
    1350:	24 85       	ldd	r18, Z+12	; 0x0c
    1352:	35 85       	ldd	r19, Z+13	; 0x0d
    1354:	82 1b       	sub	r24, r18
    1356:	93 0b       	sbc	r25, r19
}
    1358:	df 91       	pop	r29
    135a:	cf 91       	pop	r28
    135c:	08 95       	ret

0000135e <OSInit>:
//	parameters:
//		none
//---------------------------------------------------------------------------
void OSInit(void)
{
	CreatePriorityQueue(&ActiveTasks,32,PriorityCompare);
    135e:	43 e9       	ldi	r20, 0x93	; 147
    1360:	59 e0       	ldi	r21, 0x09	; 9
    1362:	60 e2       	ldi	r22, 0x20	; 32
    1364:	70 e0       	ldi	r23, 0x00	; 0
    1366:	8b e8       	ldi	r24, 0x8B	; 139
    1368:	90 e0       	ldi	r25, 0x00	; 0
    136a:	1c c1       	rjmp	.+568    	; 0x15a4 <CreatePriorityQueue>

0000136c <PendSemaphore>:
**	Inidicates status of operation.  0 or positive is normal,
**		negative is error
**************************************************************************/

int PendSemaphore(SEMAPHORE *e, int Timeout)	//wait for semaphore availiable
{
    136c:	ef 92       	push	r14
    136e:	ff 92       	push	r15
    1370:	1f 93       	push	r17
    1372:	cf 93       	push	r28
    1374:	df 93       	push	r29
    1376:	ec 01       	movw	r28, r24
    1378:	7b 01       	movw	r14, r22
	char sr;
	int retval;
	sr = Disable();
    137a:	87 d6       	rcall	.+3342   	; 0x208a <__TEXT_REGION_LENGTH__+0x8a>
    137c:	18 2f       	mov	r17, r24
	if(e->EventCount > 0)	/*	is resource availiable?	*/
    137e:	2a 85       	ldd	r18, Y+10	; 0x0a
    1380:	3b 85       	ldd	r19, Y+11	; 0x0b
    1382:	c9 01       	movw	r24, r18
    1384:	01 97       	sbiw	r24, 0x01	; 1
	{
		/*	yes	*/
		--e->EventCount;
    1386:	9b 87       	std	Y+11, r25	; 0x0b
    1388:	8a 87       	std	Y+10, r24	; 0x0a
int PendSemaphore(SEMAPHORE *e, int Timeout)	//wait for semaphore availiable
{
	char sr;
	int retval;
	sr = Disable();
	if(e->EventCount > 0)	/*	is resource availiable?	*/
    138a:	12 16       	cp	r1, r18
    138c:	13 06       	cpc	r1, r19
    138e:	2c f4       	brge	.+10     	; 0x139a <PendSemaphore+0x2e>
	{
		/*	yes	*/
		--e->EventCount;
		Enable(sr);
    1390:	81 2f       	mov	r24, r17
    1392:	7f d6       	rcall	.+3326   	; 0x2092 <__TEXT_REGION_LENGTH__+0x92>
		retval = EVENT_NOERROR;	//everything is peachy
    1394:	80 e0       	ldi	r24, 0x00	; 0
    1396:	90 e0       	ldi	r25, 0x00	; 0
    1398:	43 c0       	rjmp	.+134    	; 0x1420 <PendSemaphore+0xb4>
	}
	else
	{
		/*	no	*/
		--e->EventCount;
		if(!e->task_head)		//make linked list of waiting tasks
    139a:	88 81       	ld	r24, Y
    139c:	99 81       	ldd	r25, Y+1	; 0x01
    139e:	e0 91 95 00 	lds	r30, 0x0095	; 0x800095 <pCurrentTask>
    13a2:	f0 91 96 00 	lds	r31, 0x0096	; 0x800096 <pCurrentTask+0x1>
    13a6:	89 2b       	or	r24, r25
    13a8:	19 f4       	brne	.+6      	; 0x13b0 <PendSemaphore+0x44>
			e->task_head = pCurrentTask;
    13aa:	f9 83       	std	Y+1, r31	; 0x01
    13ac:	e8 83       	st	Y, r30
    13ae:	06 c0       	rjmp	.+12     	; 0x13bc <PendSemaphore+0x50>
		else
			e->task_tail->next = pCurrentTask;
    13b0:	aa 81       	ldd	r26, Y+2	; 0x02
    13b2:	bb 81       	ldd	r27, Y+3	; 0x03
    13b4:	55 96       	adiw	r26, 0x15	; 21
    13b6:	fc 93       	st	X, r31
    13b8:	ee 93       	st	-X, r30
    13ba:	54 97       	sbiw	r26, 0x14	; 20
		e->task_tail = pCurrentTask;
    13bc:	fb 83       	std	Y+3, r31	; 0x03
    13be:	ea 83       	std	Y+2, r30	; 0x02
		pCurrentTask->status = EVENT_NOERROR;
    13c0:	11 86       	std	Z+9, r1	; 0x09
    13c2:	10 86       	std	Z+8, r1	; 0x08
		if(e->SemaphoreMode)
    13c4:	88 85       	ldd	r24, Y+8	; 0x08
    13c6:	99 85       	ldd	r25, Y+9	; 0x09
    13c8:	89 2b       	or	r24, r25
    13ca:	11 f0       	breq	.+4      	; 0x13d0 <PendSemaphore+0x64>
			pCurrentTask->timeout = Timeout;
    13cc:	f1 8a       	std	Z+17, r15	; 0x11
    13ce:	e0 8a       	std	Z+16, r14	; 0x10

		//swap out current task
		//Update the time stamp on current task
		pCurrentTask->TimeStamp = TStamp;
    13d0:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <TStamp>
    13d4:	90 91 53 01 	lds	r25, 0x0153	; 0x800153 <TStamp+0x1>
    13d8:	95 87       	std	Z+13, r25	; 0x0d
    13da:	84 87       	std	Z+12, r24	; 0x0c
		//get highest priority task from queue
		if(Delete(&ActiveTasks,(void **)&pNextTask))	
    13dc:	69 e9       	ldi	r22, 0x99	; 153
    13de:	70 e0       	ldi	r23, 0x00	; 0
    13e0:	8b e8       	ldi	r24, 0x8B	; 139
    13e2:	90 e0       	ldi	r25, 0x00	; 0
    13e4:	53 d1       	rcall	.+678    	; 0x168c <Delete>
    13e6:	89 2b       	or	r24, r25
    13e8:	59 f0       	breq	.+22     	; 0x1400 <PendSemaphore+0x94>
		{
			//increment swaps on new task
			pNextTask->TcbSwaps++;
    13ea:	e0 91 99 00 	lds	r30, 0x0099	; 0x800099 <pNextTask>
    13ee:	f0 91 9a 00 	lds	r31, 0x009A	; 0x80009a <pNextTask+0x1>
    13f2:	86 85       	ldd	r24, Z+14	; 0x0e
    13f4:	97 85       	ldd	r25, Z+15	; 0x0f
    13f6:	01 96       	adiw	r24, 0x01	; 1
    13f8:	97 87       	std	Z+15, r25	; 0x0f
    13fa:	86 87       	std	Z+14, r24	; 0x0e
			DoSwap();		//do context swap
    13fc:	ac d7       	rcall	.+3928   	; 0x2356 <__TEXT_REGION_LENGTH__+0x356>
    13fe:	08 c0       	rjmp	.+16     	; 0x1410 <PendSemaphore+0xa4>
		}
		else
		{
			//there were no tasks in the queue
			//set status to error and return
			pCurrentTask->status = EVENT_NOTASKS;
    1400:	e0 91 95 00 	lds	r30, 0x0095	; 0x800095 <pCurrentTask>
    1404:	f0 91 96 00 	lds	r31, 0x0096	; 0x800096 <pCurrentTask+0x1>
    1408:	8f ef       	ldi	r24, 0xFF	; 255
    140a:	9f ef       	ldi	r25, 0xFF	; 255
    140c:	91 87       	std	Z+9, r25	; 0x09
    140e:	80 87       	std	Z+8, r24	; 0x08
		}
		//-----------------------
		// Pend is over, check status
		//-----------------------

		Enable(sr);
    1410:	81 2f       	mov	r24, r17
    1412:	3f d6       	rcall	.+3198   	; 0x2092 <__TEXT_REGION_LENGTH__+0x92>
		retval = pCurrentTask->status;	//return this value
    1414:	e0 91 95 00 	lds	r30, 0x0095	; 0x800095 <pCurrentTask>
    1418:	f0 91 96 00 	lds	r31, 0x0096	; 0x800096 <pCurrentTask+0x1>
    141c:	80 85       	ldd	r24, Z+8	; 0x08
    141e:	91 85       	ldd	r25, Z+9	; 0x09
	}
	return retval;
}
    1420:	df 91       	pop	r29
    1422:	cf 91       	pop	r28
    1424:	1f 91       	pop	r17
    1426:	ff 90       	pop	r15
    1428:	ef 90       	pop	r14
    142a:	08 95       	ret

0000142c <PostSemaphore>:
**
** return value: 0 = No Error, negative indicates error
***************************************************************************/

int PostSemaphore(SEMAPHORE *e, int Value)	//signal semaphore availiable
{
    142c:	ef 92       	push	r14
    142e:	ff 92       	push	r15
    1430:	1f 93       	push	r17
    1432:	cf 93       	push	r28
    1434:	df 93       	push	r29
    1436:	ec 01       	movw	r28, r24
    1438:	7b 01       	movw	r14, r22
	char sr=0;
	//------------------------------
	// do not disable IRQ if inside
	// of an interrupt routine
	//------------------------------
	if(!InterruptCount)sr = Disable();
    143a:	80 91 9b 00 	lds	r24, 0x009B	; 0x80009b <InterruptCount>
    143e:	90 91 9c 00 	lds	r25, 0x009C	; 0x80009c <InterruptCount+0x1>
    1442:	89 2b       	or	r24, r25
    1444:	19 f4       	brne	.+6      	; 0x144c <PostSemaphore+0x20>
    1446:	21 d6       	rcall	.+3138   	; 0x208a <__TEXT_REGION_LENGTH__+0x8a>
    1448:	18 2f       	mov	r17, r24
    144a:	01 c0       	rjmp	.+2      	; 0x144e <PostSemaphore+0x22>
***************************************************************************/

int PostSemaphore(SEMAPHORE *e, int Value)	//signal semaphore availiable
{
	TCB *t;
	char sr=0;
    144c:	10 e0       	ldi	r17, 0x00	; 0
	//------------------------------
	// do not disable IRQ if inside
	// of an interrupt routine
	//------------------------------
	if(!InterruptCount)sr = Disable();
	if(e->EventCount < 32766)	//is it going to overflow??
    144e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1450:	9b 85       	ldd	r25, Y+11	; 0x0b
    1452:	8e 3f       	cpi	r24, 0xFE	; 254
    1454:	2f e7       	ldi	r18, 0x7F	; 127
    1456:	92 07       	cpc	r25, r18
    1458:	64 f5       	brge	.+88     	; 0x14b2 <PostSemaphore+0x86>
    145a:	9c 01       	movw	r18, r24
    145c:	2f 5f       	subi	r18, 0xFF	; 255
    145e:	3f 4f       	sbci	r19, 0xFF	; 255
	{
		if(e->EventCount >= 0)	//increment semaphore
		{
			++e->EventCount;
    1460:	3b 87       	std	Y+11, r19	; 0x0b
    1462:	2a 87       	std	Y+10, r18	; 0x0a
	// of an interrupt routine
	//------------------------------
	if(!InterruptCount)sr = Disable();
	if(e->EventCount < 32766)	//is it going to overflow??
	{
		if(e->EventCount >= 0)	//increment semaphore
    1464:	97 ff       	sbrs	r25, 7
    1466:	1c c0       	rjmp	.+56     	; 0x14a0 <PostSemaphore+0x74>
			if(!InterruptCount)Enable(sr);
		}
		else
		{
			++e->EventCount;
			if(e->task_head)				//is there really a task waiting?
    1468:	e8 81       	ld	r30, Y
    146a:	f9 81       	ldd	r31, Y+1	; 0x01
    146c:	30 97       	sbiw	r30, 0x00	; 0
    146e:	c1 f0       	breq	.+48     	; 0x14a0 <PostSemaphore+0x74>
			{
				t = e->task_head;		//get first task in
				e->task_head = t->next;       //remove from list
    1470:	84 89       	ldd	r24, Z+20	; 0x14
    1472:	95 89       	ldd	r25, Z+21	; 0x15
    1474:	99 83       	std	Y+1, r25	; 0x01
    1476:	88 83       	st	Y, r24
				t->next = (TCB *)0;
    1478:	15 8a       	std	Z+21, r1	; 0x15
    147a:	14 8a       	std	Z+20, r1	; 0x14
				t->status = Value;			//return this value
    147c:	f1 86       	std	Z+9, r15	; 0x09
    147e:	e0 86       	std	Z+8, r14	; 0x08
				Insert(&ActiveTasks,t);	//put task back onto active list
    1480:	bf 01       	movw	r22, r30
    1482:	8b e8       	ldi	r24, 0x8B	; 139
    1484:	90 e0       	ldi	r25, 0x00	; 0
    1486:	a3 d0       	rcall	.+326    	; 0x15ce <Insert>
				if(!InterruptCount)Enable(sr);
    1488:	80 91 9b 00 	lds	r24, 0x009B	; 0x80009b <InterruptCount>
    148c:	90 91 9c 00 	lds	r25, 0x009C	; 0x80009c <InterruptCount+0x1>
    1490:	89 2b       	or	r24, r25
    1492:	11 f4       	brne	.+4      	; 0x1498 <PostSemaphore+0x6c>
    1494:	81 2f       	mov	r24, r17
    1496:	fd d5       	rcall	.+3066   	; 0x2092 <__TEXT_REGION_LENGTH__+0x92>
				Yield();
    1498:	dc d3       	rcall	.+1976   	; 0x1c52 <Yield>
			else
			{
				if(!InterruptCount)Enable(sr);
			}
		}
		return EVENT_NOERROR;
    149a:	c0 e0       	ldi	r28, 0x00	; 0
    149c:	d0 e0       	ldi	r29, 0x00	; 0
    149e:	13 c0       	rjmp	.+38     	; 0x14c6 <PostSemaphore+0x9a>
				if(!InterruptCount)Enable(sr);
				Yield();
			}
			else
			{
				if(!InterruptCount)Enable(sr);
    14a0:	c0 91 9b 00 	lds	r28, 0x009B	; 0x80009b <InterruptCount>
    14a4:	d0 91 9c 00 	lds	r29, 0x009C	; 0x80009c <InterruptCount+0x1>
    14a8:	20 97       	sbiw	r28, 0x00	; 0
    14aa:	b9 f7       	brne	.-18     	; 0x149a <PostSemaphore+0x6e>
    14ac:	81 2f       	mov	r24, r17
    14ae:	f1 d5       	rcall	.+3042   	; 0x2092 <__TEXT_REGION_LENGTH__+0x92>
    14b0:	0a c0       	rjmp	.+20     	; 0x14c6 <PostSemaphore+0x9a>
		}
		return EVENT_NOERROR;
	}
	else
	{
		if(!InterruptCount)Enable(sr);
    14b2:	80 91 9b 00 	lds	r24, 0x009B	; 0x80009b <InterruptCount>
    14b6:	90 91 9c 00 	lds	r25, 0x009C	; 0x80009c <InterruptCount+0x1>
    14ba:	89 2b       	or	r24, r25
    14bc:	11 f4       	brne	.+4      	; 0x14c2 <PostSemaphore+0x96>
    14be:	81 2f       	mov	r24, r17
    14c0:	e8 d5       	rcall	.+3024   	; 0x2092 <__TEXT_REGION_LENGTH__+0x92>
		return(EVENT_OVERFLOW);
    14c2:	ce ef       	ldi	r28, 0xFE	; 254
    14c4:	df ef       	ldi	r29, 0xFF	; 255
	}
}
    14c6:	ce 01       	movw	r24, r28
    14c8:	df 91       	pop	r29
    14ca:	cf 91       	pop	r28
    14cc:	1f 91       	pop	r17
    14ce:	ff 90       	pop	r15
    14d0:	ef 90       	pop	r14
    14d2:	08 95       	ret

000014d4 <ReheapDown>:
**	parameters:
**		pQ.......pointer to the priority queue
**
***********************************************/
static void ReheapDown(PRIORITYQUEUE* pQ)
{
    14d4:	6f 92       	push	r6
    14d6:	7f 92       	push	r7
    14d8:	8f 92       	push	r8
    14da:	9f 92       	push	r9
    14dc:	af 92       	push	r10
    14de:	bf 92       	push	r11
    14e0:	cf 92       	push	r12
    14e2:	df 92       	push	r13
    14e4:	ef 92       	push	r14
    14e6:	ff 92       	push	r15
    14e8:	0f 93       	push	r16
    14ea:	1f 93       	push	r17
    14ec:	cf 93       	push	r28
    14ee:	df 93       	push	r29
    14f0:	6c 01       	movw	r12, r24
	void **ppParent;	//pointer to parent
	void **ppChild;   //pointer to child
	void **ppSibling;	//pointer to sibling
	void **ppHeap;	//pointer to m_ppHeap

	ppHeap = pQ->m_ppHeap;
    14f2:	dc 01       	movw	r26, r24
    14f4:	18 96       	adiw	r26, 0x08	; 8
    14f6:	6d 90       	ld	r6, X+
    14f8:	7c 90       	ld	r7, X
    14fa:	19 97       	sbiw	r26, 0x09	; 9
	for(parent=0,child=1;child < pQ->m_nItems;)
    14fc:	ee 24       	eor	r14, r14
    14fe:	e3 94       	inc	r14
    1500:	f1 2c       	mov	r15, r1
    1502:	00 e0       	ldi	r16, 0x00	; 0
    1504:	10 e0       	ldi	r17, 0x00	; 0
    1506:	d6 01       	movw	r26, r12
    1508:	12 96       	adiw	r26, 0x02	; 2
    150a:	8d 91       	ld	r24, X+
    150c:	9c 91       	ld	r25, X
    150e:	13 97       	sbiw	r26, 0x03	; 3
    1510:	e8 16       	cp	r14, r24
    1512:	f9 06       	cpc	r15, r25
    1514:	c4 f5       	brge	.+112    	; 0x1586 <ReheapDown+0xb2>
	{
		//----------------------------------
		// get pointer to parent and child nodes
		//----------------------------------
		ppParent = &ppHeap[parent];
    1516:	00 0f       	add	r16, r16
    1518:	11 1f       	adc	r17, r17
    151a:	06 0d       	add	r16, r6
    151c:	17 1d       	adc	r17, r7
		ppChild = &ppHeap[child];
    151e:	e7 01       	movw	r28, r14
    1520:	cc 0f       	add	r28, r28
    1522:	dd 1f       	adc	r29, r29
    1524:	c6 0d       	add	r28, r6
    1526:	d7 1d       	adc	r29, r7
		//-----------------------------------
		// is there a possible sibling to
		// the child node?
		//------------------------------------
		if(child + 1 < pQ->m_nItems)
    1528:	57 01       	movw	r10, r14
    152a:	bf ef       	ldi	r27, 0xFF	; 255
    152c:	ab 1a       	sub	r10, r27
    152e:	bb 0a       	sbc	r11, r27
    1530:	a8 16       	cp	r10, r24
    1532:	b9 06       	cpc	r11, r25
    1534:	74 f4       	brge	.+28     	; 0x1552 <ReheapDown+0x7e>
		{
			//---------------------------------
			// get a pointer to the sibling
			//---------------------------------
			ppSibling = ppChild + 1;
    1536:	4e 01       	movw	r8, r28
    1538:	e2 e0       	ldi	r30, 0x02	; 2
    153a:	8e 0e       	add	r8, r30
    153c:	91 1c       	adc	r9, r1
			//---------------------------------
			// is priority of child less than
			// that of the sibling?
			//---------------------------------
			if((*pQ->m_Cmp)(ppChild,ppSibling) < 0)
    153e:	d6 01       	movw	r26, r12
    1540:	ed 91       	ld	r30, X+
    1542:	fc 91       	ld	r31, X
    1544:	b4 01       	movw	r22, r8
    1546:	ce 01       	movw	r24, r28
    1548:	09 95       	icall
    154a:	97 ff       	sbrs	r25, 7
    154c:	02 c0       	rjmp	.+4      	; 0x1552 <ReheapDown+0x7e>
			{
				//--------------------------------
				// make the child equal to sibling
				//---------------------------------
				ppChild = ppSibling;
    154e:	e4 01       	movw	r28, r8
			ppSibling = ppChild + 1;
			//---------------------------------
			// is priority of child less than
			// that of the sibling?
			//---------------------------------
			if((*pQ->m_Cmp)(ppChild,ppSibling) < 0)
    1550:	75 01       	movw	r14, r10
		//-------------------------------------
		// if the priority of the parent is
		// greater than or equal to the child
		// we are done, break out of the loop
		//------------------------------------
		if((*pQ->m_Cmp)(ppParent,ppChild) >= 0)
    1552:	d6 01       	movw	r26, r12
    1554:	ed 91       	ld	r30, X+
    1556:	fc 91       	ld	r31, X
    1558:	be 01       	movw	r22, r28
    155a:	c8 01       	movw	r24, r16
    155c:	09 95       	icall
    155e:	97 ff       	sbrs	r25, 7
    1560:	12 c0       	rjmp	.+36     	; 0x1586 <ReheapDown+0xb2>

static void swap(void **ppS1,void **ppS2)
{
	void *pTemp;

	pTemp = *ppS1;
    1562:	f8 01       	movw	r30, r16
    1564:	80 81       	ld	r24, Z
    1566:	91 81       	ldd	r25, Z+1	; 0x01
	*ppS1 = *ppS2;
    1568:	28 81       	ld	r18, Y
    156a:	39 81       	ldd	r19, Y+1	; 0x01
    156c:	31 83       	std	Z+1, r19	; 0x01
    156e:	20 83       	st	Z, r18
	*ppS2 = pTemp;
    1570:	99 83       	std	Y+1, r25	; 0x01
    1572:	88 83       	st	Y, r24
		//----------------------------------
		parent = child;
		//----------------------------------
		// calculate new child index
		//----------------------------------
		child = LEFTCHILD(parent);
    1574:	c7 01       	movw	r24, r14
    1576:	88 0f       	add	r24, r24
    1578:	99 1f       	adc	r25, r25
		//----------------------------------
		swap(ppParent,ppChild);
		//----------------------------------
		// new parent is the child
		//----------------------------------
		parent = child;
    157a:	87 01       	movw	r16, r14
		//----------------------------------
		// calculate new child index
		//----------------------------------
		child = LEFTCHILD(parent);
    157c:	9c 01       	movw	r18, r24
    157e:	2f 5f       	subi	r18, 0xFF	; 255
    1580:	3f 4f       	sbci	r19, 0xFF	; 255
    1582:	79 01       	movw	r14, r18
    1584:	c0 cf       	rjmp	.-128    	; 0x1506 <ReheapDown+0x32>
	}	//end of for loop
}
    1586:	df 91       	pop	r29
    1588:	cf 91       	pop	r28
    158a:	1f 91       	pop	r17
    158c:	0f 91       	pop	r16
    158e:	ff 90       	pop	r15
    1590:	ef 90       	pop	r14
    1592:	df 90       	pop	r13
    1594:	cf 90       	pop	r12
    1596:	bf 90       	pop	r11
    1598:	af 90       	pop	r10
    159a:	9f 90       	pop	r9
    159c:	8f 90       	pop	r8
    159e:	7f 90       	pop	r7
    15a0:	6f 90       	pop	r6
    15a2:	08 95       	ret

000015a4 <CreatePriorityQueue>:
// these.
//
//---------------------------------------------------------
//
void CreatePriorityQueue(PRIORITYQUEUE *q,int ne,int (*c)(void **,void **))
{
    15a4:	cf 93       	push	r28
    15a6:	df 93       	push	r29
    15a8:	ec 01       	movw	r28, r24
	q->m_Cmp = c;
    15aa:	59 83       	std	Y+1, r21	; 0x01
    15ac:	48 83       	st	Y, r20
	q->m_nItems = 0;
    15ae:	1b 82       	std	Y+3, r1	; 0x03
    15b0:	1a 82       	std	Y+2, r1	; 0x02
	q->m_Maxitems = ne;
    15b2:	7d 83       	std	Y+5, r23	; 0x05
    15b4:	6c 83       	std	Y+4, r22	; 0x04
	q->m_ppHeap = (void **)malloc(sizeof(void *) * ne);
    15b6:	cb 01       	movw	r24, r22
    15b8:	88 0f       	add	r24, r24
    15ba:	99 1f       	adc	r25, r25
    15bc:	9e da       	rcall	.-2756   	; 0xafa <malloc>
    15be:	99 87       	std	Y+9, r25	; 0x09
    15c0:	88 87       	std	Y+8, r24	; 0x08
    q->m_ppBottom = &q->m_ppHeap[-1];
    15c2:	02 97       	sbiw	r24, 0x02	; 2
    15c4:	9f 83       	std	Y+7, r25	; 0x07
    15c6:	8e 83       	std	Y+6, r24	; 0x06
}
    15c8:	df 91       	pop	r29
    15ca:	cf 91       	pop	r28
    15cc:	08 95       	ret

000015ce <Insert>:
//		space available in queue
//
//---------------------------------------------------------
//
int Insert(PRIORITYQUEUE* pQ,void *item)
{
    15ce:	af 92       	push	r10
    15d0:	bf 92       	push	r11
    15d2:	cf 92       	push	r12
    15d4:	df 92       	push	r13
    15d6:	ef 92       	push	r14
    15d8:	ff 92       	push	r15
    15da:	0f 93       	push	r16
    15dc:	1f 93       	push	r17
    15de:	cf 93       	push	r28
    15e0:	df 93       	push	r29
	int space_avail;

	space_avail = pQ->m_Maxitems - pQ->m_nItems;
    15e2:	dc 01       	movw	r26, r24
    15e4:	12 96       	adiw	r26, 0x02	; 2
    15e6:	2d 91       	ld	r18, X+
    15e8:	3c 91       	ld	r19, X
    15ea:	13 97       	sbiw	r26, 0x03	; 3
    15ec:	14 96       	adiw	r26, 0x04	; 4
    15ee:	cd 90       	ld	r12, X+
    15f0:	dc 90       	ld	r13, X
    15f2:	15 97       	sbiw	r26, 0x05	; 5
    15f4:	c2 1a       	sub	r12, r18
    15f6:	d3 0a       	sbc	r13, r19
	if((space_avail) > 0)
    15f8:	1c 14       	cp	r1, r12
    15fa:	1d 04       	cpc	r1, r13
    15fc:	dc f5       	brge	.+118    	; 0x1674 <Insert+0xa6>
    15fe:	8c 01       	movw	r16, r24
	{
		++pQ->m_nItems;
    1600:	c9 01       	movw	r24, r18
    1602:	01 96       	adiw	r24, 0x01	; 1
    1604:	fd 01       	movw	r30, r26
    1606:	93 83       	std	Z+3, r25	; 0x03
    1608:	82 83       	std	Z+2, r24	; 0x02
		*(++pQ->m_ppBottom) = item;
    160a:	06 80       	ldd	r0, Z+6	; 0x06
    160c:	f7 81       	ldd	r31, Z+7	; 0x07
    160e:	e0 2d       	mov	r30, r0
    1610:	cf 01       	movw	r24, r30
    1612:	02 96       	adiw	r24, 0x02	; 2
    1614:	17 96       	adiw	r26, 0x07	; 7
    1616:	9c 93       	st	X, r25
    1618:	8e 93       	st	-X, r24
    161a:	16 97       	sbiw	r26, 0x06	; 6
    161c:	73 83       	std	Z+3, r23	; 0x03
    161e:	62 83       	std	Z+2, r22	; 0x02
	//-------------------------
	// Index of parent node
	// Keep looping while
	// parent is valid (>= 0)
	//-------------------------
	while(child > 0)
    1620:	12 16       	cp	r1, r18
    1622:	13 06       	cpc	r1, r19
    1624:	3c f5       	brge	.+78     	; 0x1674 <Insert+0xa6>
	{
		parent = PARENT(child);
    1626:	59 01       	movw	r10, r18
    1628:	b1 e0       	ldi	r27, 0x01	; 1
    162a:	ab 1a       	sub	r10, r27
    162c:	b1 08       	sbc	r11, r1
    162e:	b5 94       	asr	r11
    1630:	a7 94       	ror	r10
		//-----------------------------
		// get pointers to parent
		// and child nodes
		//------------------------------
		ppChild = &pQ->m_ppHeap[child];
    1632:	f8 01       	movw	r30, r16
    1634:	80 85       	ldd	r24, Z+8	; 0x08
    1636:	91 85       	ldd	r25, Z+9	; 0x09
    1638:	22 0f       	add	r18, r18
    163a:	33 1f       	adc	r19, r19
    163c:	ec 01       	movw	r28, r24
    163e:	c2 0f       	add	r28, r18
    1640:	d3 1f       	adc	r29, r19
		ppParent = &pQ->m_ppHeap[parent];
    1642:	75 01       	movw	r14, r10
    1644:	ee 0c       	add	r14, r14
    1646:	ff 1c       	adc	r15, r15
    1648:	e8 0e       	add	r14, r24
    164a:	f9 1e       	adc	r15, r25
		// If the priority of the parent
		// is greater than or equal to
		// the priority of the child,
		// we are done, break from the loop
		//---------------------------------
		if( (*pQ->m_Cmp)(ppParent,ppChild) >= 0)
    164c:	01 90       	ld	r0, Z+
    164e:	f0 81       	ld	r31, Z
    1650:	e0 2d       	mov	r30, r0
    1652:	be 01       	movw	r22, r28
    1654:	c7 01       	movw	r24, r14
    1656:	09 95       	icall
    1658:	97 ff       	sbrs	r25, 7
    165a:	0c c0       	rjmp	.+24     	; 0x1674 <Insert+0xa6>

static void swap(void **ppS1,void **ppS2)
{
	void *pTemp;

	pTemp = *ppS1;
    165c:	d7 01       	movw	r26, r14
    165e:	8d 91       	ld	r24, X+
    1660:	9c 91       	ld	r25, X
    1662:	11 97       	sbiw	r26, 0x01	; 1
	*ppS1 = *ppS2;
    1664:	28 81       	ld	r18, Y
    1666:	39 81       	ldd	r19, Y+1	; 0x01
    1668:	2d 93       	st	X+, r18
    166a:	3c 93       	st	X, r19
	*ppS2 = pTemp;
    166c:	99 83       	std	Y+1, r25	; 0x01
    166e:	88 83       	st	Y, r24
		//----------------------------------
		swap(ppParent,ppChild);
		//----------------------------------
		// the new parent is the child
		//----------------------------------
		child = parent;
    1670:	95 01       	movw	r18, r10
    1672:	d6 cf       	rjmp	.-84     	; 0x1620 <Insert+0x52>
		++pQ->m_nItems;
		*(++pQ->m_ppBottom) = item;
		ReheapUp(pQ);
	}
	return space_avail;
}
    1674:	c6 01       	movw	r24, r12
    1676:	df 91       	pop	r29
    1678:	cf 91       	pop	r28
    167a:	1f 91       	pop	r17
    167c:	0f 91       	pop	r16
    167e:	ff 90       	pop	r15
    1680:	ef 90       	pop	r14
    1682:	df 90       	pop	r13
    1684:	cf 90       	pop	r12
    1686:	bf 90       	pop	r11
    1688:	af 90       	pop	r10
    168a:	08 95       	ret

0000168c <Delete>:
// return value:
//		returns slots in use in the queue
//---------------------------------------------------------

int Delete(PRIORITYQUEUE* pQ,void **target)
{
    168c:	cf 93       	push	r28
    168e:	df 93       	push	r29
	int SlotsInUse;

	if((SlotsInUse = pQ->m_nItems) > 0)
    1690:	dc 01       	movw	r26, r24
    1692:	12 96       	adiw	r26, 0x02	; 2
    1694:	cd 91       	ld	r28, X+
    1696:	dc 91       	ld	r29, X
    1698:	13 97       	sbiw	r26, 0x03	; 3
    169a:	1c 16       	cp	r1, r28
    169c:	1d 06       	cpc	r1, r29
    169e:	ec f4       	brge	.+58     	; 0x16da <Delete+0x4e>
    16a0:	fc 01       	movw	r30, r24
	{
		*target = *pQ->m_ppHeap;		//get item from top of m_ppHeap
    16a2:	80 85       	ldd	r24, Z+8	; 0x08
    16a4:	91 85       	ldd	r25, Z+9	; 0x09
    16a6:	dc 01       	movw	r26, r24
    16a8:	8d 91       	ld	r24, X+
    16aa:	9c 91       	ld	r25, X
    16ac:	db 01       	movw	r26, r22
    16ae:	8d 93       	st	X+, r24
    16b0:	9c 93       	st	X, r25
		*pQ->m_ppHeap = *pQ->m_ppBottom--;
    16b2:	80 85       	ldd	r24, Z+8	; 0x08
    16b4:	91 85       	ldd	r25, Z+9	; 0x09
    16b6:	a6 81       	ldd	r26, Z+6	; 0x06
    16b8:	b7 81       	ldd	r27, Z+7	; 0x07
    16ba:	9d 01       	movw	r18, r26
    16bc:	22 50       	subi	r18, 0x02	; 2
    16be:	31 09       	sbc	r19, r1
    16c0:	37 83       	std	Z+7, r19	; 0x07
    16c2:	26 83       	std	Z+6, r18	; 0x06
    16c4:	2d 91       	ld	r18, X+
    16c6:	3c 91       	ld	r19, X
    16c8:	dc 01       	movw	r26, r24
    16ca:	2d 93       	st	X+, r18
    16cc:	3c 93       	st	X, r19
		--pQ->m_nItems;
    16ce:	ce 01       	movw	r24, r28
    16d0:	01 97       	sbiw	r24, 0x01	; 1
    16d2:	93 83       	std	Z+3, r25	; 0x03
    16d4:	82 83       	std	Z+2, r24	; 0x02
		ReheapDown(pQ);
    16d6:	cf 01       	movw	r24, r30
    16d8:	fd de       	rcall	.-518    	; 0x14d4 <ReheapDown>
	}
	return SlotsInUse;
}
    16da:	ce 01       	movw	r24, r28
    16dc:	df 91       	pop	r29
    16de:	cf 91       	pop	r28
    16e0:	08 95       	ret

000016e2 <Replace>:
//	return value:
//		returns number of slots in use
//-----------------------------------------------------------

int Replace(PRIORITYQUEUE* pQ,void **target,void *item)
{
    16e2:	cf 92       	push	r12
    16e4:	df 92       	push	r13
    16e6:	ef 92       	push	r14
    16e8:	ff 92       	push	r15
    16ea:	0f 93       	push	r16
    16ec:	1f 93       	push	r17
    16ee:	cf 93       	push	r28
    16f0:	df 93       	push	r29
    16f2:	00 d0       	rcall	.+0      	; 0x16f4 <Replace+0x12>
    16f4:	cd b7       	in	r28, 0x3d	; 61
    16f6:	de b7       	in	r29, 0x3e	; 62
    16f8:	5a 83       	std	Y+2, r21	; 0x02
    16fa:	49 83       	std	Y+1, r20	; 0x01
	int SlotsInUse;

	if((SlotsInUse = pQ->m_nItems) > 0)
    16fc:	dc 01       	movw	r26, r24
    16fe:	12 96       	adiw	r26, 0x02	; 2
    1700:	ed 90       	ld	r14, X+
    1702:	fc 90       	ld	r15, X
    1704:	13 97       	sbiw	r26, 0x03	; 3
    1706:	1e 14       	cp	r1, r14
    1708:	1f 04       	cpc	r1, r15
    170a:	3c f5       	brge	.+78     	; 0x175a <Replace+0x78>
    170c:	6b 01       	movw	r12, r22
    170e:	8c 01       	movw	r16, r24
	{
		if ((*pQ->m_Cmp)(&item,pQ->m_ppHeap) > 0)	//only replace if priority is less
    1710:	fc 01       	movw	r30, r24
    1712:	60 85       	ldd	r22, Z+8	; 0x08
    1714:	71 85       	ldd	r23, Z+9	; 0x09
    1716:	01 90       	ld	r0, Z+
    1718:	f0 81       	ld	r31, Z
    171a:	e0 2d       	mov	r30, r0
    171c:	ce 01       	movw	r24, r28
    171e:	01 96       	adiw	r24, 0x01	; 1
    1720:	09 95       	icall
    1722:	29 81       	ldd	r18, Y+1	; 0x01
    1724:	3a 81       	ldd	r19, Y+2	; 0x02
    1726:	18 16       	cp	r1, r24
    1728:	19 06       	cpc	r1, r25
    172a:	24 f4       	brge	.+8      	; 0x1734 <Replace+0x52>
		{
			*target = item;		//item is higher priority
    172c:	d6 01       	movw	r26, r12
    172e:	2d 93       	st	X+, r18
    1730:	3c 93       	st	X, r19
    1732:	18 c0       	rjmp	.+48     	; 0x1764 <Replace+0x82>
		}
		else
		{
			*target = *pQ->m_ppHeap;
    1734:	d8 01       	movw	r26, r16
    1736:	18 96       	adiw	r26, 0x08	; 8
    1738:	ed 91       	ld	r30, X+
    173a:	fc 91       	ld	r31, X
    173c:	19 97       	sbiw	r26, 0x09	; 9
    173e:	80 81       	ld	r24, Z
    1740:	91 81       	ldd	r25, Z+1	; 0x01
    1742:	f6 01       	movw	r30, r12
    1744:	91 83       	std	Z+1, r25	; 0x01
    1746:	80 83       	st	Z, r24
			*pQ->m_ppHeap = item;
    1748:	18 96       	adiw	r26, 0x08	; 8
    174a:	ed 91       	ld	r30, X+
    174c:	fc 91       	ld	r31, X
    174e:	19 97       	sbiw	r26, 0x09	; 9
    1750:	31 83       	std	Z+1, r19	; 0x01
    1752:	20 83       	st	Z, r18
			ReheapDown(pQ);
    1754:	c8 01       	movw	r24, r16
    1756:	be de       	rcall	.-644    	; 0x14d4 <ReheapDown>
    1758:	05 c0       	rjmp	.+10     	; 0x1764 <Replace+0x82>
		}
	}
	else
		*target = item;
    175a:	89 81       	ldd	r24, Y+1	; 0x01
    175c:	9a 81       	ldd	r25, Y+2	; 0x02
    175e:	db 01       	movw	r26, r22
    1760:	8d 93       	st	X+, r24
    1762:	9c 93       	st	X, r25
	return SlotsInUse;
}
    1764:	c7 01       	movw	r24, r14
    1766:	0f 90       	pop	r0
    1768:	0f 90       	pop	r0
    176a:	df 91       	pop	r29
    176c:	cf 91       	pop	r28
    176e:	1f 91       	pop	r17
    1770:	0f 91       	pop	r16
    1772:	ff 90       	pop	r15
    1774:	ef 90       	pop	r14
    1776:	df 90       	pop	r13
    1778:	cf 90       	pop	r12
    177a:	08 95       	ret

0000177c <StartOS>:
	// Remove task from priorty queue
	// Restore its context
	// and then jump to the first task using
	// return from subroutine
	//---------------------------------------
	Delete(&ActiveTasks,(void **)&pNextTask);
    177c:	69 e9       	ldi	r22, 0x99	; 153
    177e:	70 e0       	ldi	r23, 0x00	; 0
    1780:	8b e8       	ldi	r24, 0x8B	; 139
    1782:	90 e0       	ldi	r25, 0x00	; 0
    1784:	83 df       	rcall	.-250    	; 0x168c <Delete>
	pCurrentTask = pNextTask;
    1786:	80 91 99 00 	lds	r24, 0x0099	; 0x800099 <pNextTask>
    178a:	90 91 9a 00 	lds	r25, 0x009A	; 0x80009a <pNextTask+0x1>
    178e:	90 93 96 00 	sts	0x0096, r25	; 0x800096 <pCurrentTask+0x1>
    1792:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <pCurrentTask>
	RESTORE_CONTEXT();
    1796:	a0 91 99 00 	lds	r26, 0x0099	; 0x800099 <pNextTask>
    179a:	b0 91 9a 00 	lds	r27, 0x009A	; 0x80009a <pNextTask+0x1>
    179e:	cd 91       	ld	r28, X+
    17a0:	cd bf       	out	0x3d, r28	; 61
    17a2:	dd 91       	ld	r29, X+
    17a4:	de bf       	out	0x3e, r29	; 62
    17a6:	0f 90       	pop	r0
    17a8:	1f 90       	pop	r1
    17aa:	2f 90       	pop	r2
    17ac:	3f 90       	pop	r3
    17ae:	4f 90       	pop	r4
    17b0:	5f 90       	pop	r5
    17b2:	6f 90       	pop	r6
    17b4:	7f 90       	pop	r7
    17b6:	8f 90       	pop	r8
    17b8:	9f 90       	pop	r9
    17ba:	af 90       	pop	r10
    17bc:	bf 90       	pop	r11
    17be:	cf 90       	pop	r12
    17c0:	df 90       	pop	r13
    17c2:	ef 90       	pop	r14
    17c4:	ff 90       	pop	r15
    17c6:	0f 91       	pop	r16
    17c8:	1f 91       	pop	r17
    17ca:	2f 91       	pop	r18
    17cc:	3f 91       	pop	r19
    17ce:	4f 91       	pop	r20
    17d0:	5f 91       	pop	r21
    17d2:	6f 91       	pop	r22
    17d4:	7f 91       	pop	r23
    17d6:	8f 91       	pop	r24
    17d8:	9f 91       	pop	r25
    17da:	af 91       	pop	r26
    17dc:	bf 91       	pop	r27
    17de:	cf 91       	pop	r28
    17e0:	df 91       	pop	r29
    17e2:	ef 91       	pop	r30
    17e4:	ff 91       	pop	r31
    17e6:	f7 fd       	sbrc	r31, 7
    17e8:	03 c0       	rjmp	.+6      	; 0x17f0 <irqen>
    17ea:	ff bf       	out	0x3f, r31	; 63
    17ec:	ff 91       	pop	r31
    17ee:	08 95       	ret

000017f0 <irqen>:
    17f0:	ff 77       	andi	r31, 0x7F	; 127
    17f2:	ff bf       	out	0x3f, r31	; 63
    17f4:	ff 91       	pop	r31
    17f6:	18 95       	reti

000017f8 <TimeDelay>:
// return value:
//	returns non zero value if something happened out of the ordinary
//--------------------------------------------------------------------------

int TimeDelay(int mSec)
{
    17f8:	0f 93       	push	r16
    17fa:	1f 93       	push	r17
    17fc:	cf 93       	push	r28
    17fe:	df 93       	push	r29
    1800:	8c 01       	movw	r16, r24
	int retval;
	SEMAPHORE *e;					//pointer to event control block for semaphore

	e = NewSemaphore(0,SEMAPHORE_MODE_TIMEOUT);	//create semaphore
    1802:	61 e0       	ldi	r22, 0x01	; 1
    1804:	70 e0       	ldi	r23, 0x00	; 0
    1806:	80 e0       	ldi	r24, 0x00	; 0
    1808:	90 e0       	ldi	r25, 0x00	; 0
    180a:	91 d4       	rcall	.+2338   	; 0x212e <__TEXT_REGION_LENGTH__+0x12e>
    180c:	ec 01       	movw	r28, r24
	retval = PendSemaphore(e,mSec);	//pend for time delay period
    180e:	b8 01       	movw	r22, r16
    1810:	ad dd       	rcall	.-1190   	; 0x136c <PendSemaphore>
    1812:	8c 01       	movw	r16, r24
	DeleteSemaphore(e);				//return semaphore back to pool
    1814:	ce 01       	movw	r24, r28
    1816:	b5 d4       	rcall	.+2410   	; 0x2182 <__TEXT_REGION_LENGTH__+0x182>
	return retval;					//exit
}
    1818:	c8 01       	movw	r24, r16
    181a:	df 91       	pop	r29
    181c:	cf 91       	pop	r28
    181e:	1f 91       	pop	r17
    1820:	0f 91       	pop	r16
    1822:	08 95       	ret

00001824 <TimerTicker>:
**  Control Blocks looking for timed out events.                      **
**                                                                    **
***********************************************************************/

void TimerTicker(void)
{
    1824:	ef 92       	push	r14
    1826:	ff 92       	push	r15
    1828:	0f 93       	push	r16
    182a:	1f 93       	push	r17
    182c:	cf 93       	push	r28
    182e:	df 93       	push	r29
	TCB *t,**prev;

	//------------------------------
	// Increment the time stamp
	//------------------------------
	++TStamp;
    1830:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <TStamp>
    1834:	90 91 53 01 	lds	r25, 0x0153	; 0x800153 <TStamp+0x1>
    1838:	01 96       	adiw	r24, 0x01	; 1
    183a:	90 93 53 01 	sts	0x0153, r25	; 0x800153 <TStamp+0x1>
    183e:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <TStamp>
	// gone to zero, put the tasks that
	// are waiting on those semaphores
	// back into the queue so that they
	// can execute.
	//-----------------------------------
	for(e = pTimeoutList;e;e=e->Tnext)	//go through whole list
    1842:	00 91 89 00 	lds	r16, 0x0089	; 0x800089 <pTimeoutList>
    1846:	10 91 8a 00 	lds	r17, 0x008A	; 0x80008a <pTimeoutList+0x1>
			if(t->timeout > 0)	//if less than zero, infinite timeout
			{
				if( --(t->timeout) <= 0)	//decrement timeout counter
				{
					e->EventCount++;		//fake a post
					t->status = EVENT_TIMEOUT;	//event caused by semaphore
    184a:	8d ef       	ldi	r24, 0xFD	; 253
    184c:	e8 2e       	mov	r14, r24
    184e:	ff 24       	eor	r15, r15
    1850:	fa 94       	dec	r15
	// gone to zero, put the tasks that
	// are waiting on those semaphores
	// back into the queue so that they
	// can execute.
	//-----------------------------------
	for(e = pTimeoutList;e;e=e->Tnext)	//go through whole list
    1852:	01 15       	cp	r16, r1
    1854:	11 05       	cpc	r17, r1
    1856:	79 f1       	breq	.+94     	; 0x18b6 <TimerTicker+0x92>
	{
		for(prev = &(e->task_head),t = e->task_head;t;)
    1858:	f8 01       	movw	r30, r16
    185a:	c0 81       	ld	r28, Z
    185c:	d1 81       	ldd	r29, Z+1	; 0x01
    185e:	20 97       	sbiw	r28, 0x00	; 0
    1860:	31 f1       	breq	.+76     	; 0x18ae <TimerTicker+0x8a>
		{
			if(t->timeout > 0)	//if less than zero, infinite timeout
    1862:	88 89       	ldd	r24, Y+16	; 0x10
    1864:	99 89       	ldd	r25, Y+17	; 0x11
    1866:	18 16       	cp	r1, r24
    1868:	19 06       	cpc	r1, r25
    186a:	dc f4       	brge	.+54     	; 0x18a2 <TimerTicker+0x7e>
			{
				if( --(t->timeout) <= 0)	//decrement timeout counter
    186c:	01 97       	sbiw	r24, 0x01	; 1
    186e:	99 8b       	std	Y+17, r25	; 0x11
    1870:	88 8b       	std	Y+16, r24	; 0x10
    1872:	89 2b       	or	r24, r25
    1874:	b1 f4       	brne	.+44     	; 0x18a2 <TimerTicker+0x7e>
				{
					e->EventCount++;		//fake a post
    1876:	d8 01       	movw	r26, r16
    1878:	1a 96       	adiw	r26, 0x0a	; 10
    187a:	8d 91       	ld	r24, X+
    187c:	9c 91       	ld	r25, X
    187e:	1b 97       	sbiw	r26, 0x0b	; 11
    1880:	01 96       	adiw	r24, 0x01	; 1
    1882:	1b 96       	adiw	r26, 0x0b	; 11
    1884:	9c 93       	st	X, r25
    1886:	8e 93       	st	-X, r24
    1888:	1a 97       	sbiw	r26, 0x0a	; 10
					t->status = EVENT_TIMEOUT;	//event caused by semaphore
    188a:	f9 86       	std	Y+9, r15	; 0x09
    188c:	e8 86       	std	Y+8, r14	; 0x08
					*prev = t->next;	//remove t from list
    188e:	8c 89       	ldd	r24, Y+20	; 0x14
    1890:	9d 89       	ldd	r25, Y+21	; 0x15
    1892:	91 83       	std	Z+1, r25	; 0x01
    1894:	80 83       	st	Z, r24
					t->next = 0;
    1896:	1d 8a       	std	Y+21, r1	; 0x15
    1898:	1c 8a       	std	Y+20, r1	; 0x14
					Insert(&ActiveTasks,t);//put it back in queue
    189a:	be 01       	movw	r22, r28
    189c:	8b e8       	ldi	r24, 0x8B	; 139
    189e:	90 e0       	ldi	r25, 0x00	; 0
    18a0:	96 de       	rcall	.-724    	; 0x15ce <Insert>
				}
			}
			prev = &(t->next);
    18a2:	fe 01       	movw	r30, r28
    18a4:	74 96       	adiw	r30, 0x14	; 20
			t = t->next;
    18a6:	0c 88       	ldd	r0, Y+20	; 0x14
    18a8:	dd 89       	ldd	r29, Y+21	; 0x15
    18aa:	c0 2d       	mov	r28, r0
    18ac:	d8 cf       	rjmp	.-80     	; 0x185e <TimerTicker+0x3a>
	// gone to zero, put the tasks that
	// are waiting on those semaphores
	// back into the queue so that they
	// can execute.
	//-----------------------------------
	for(e = pTimeoutList;e;e=e->Tnext)	//go through whole list
    18ae:	f8 01       	movw	r30, r16
    18b0:	04 81       	ldd	r16, Z+4	; 0x04
    18b2:	15 81       	ldd	r17, Z+5	; 0x05
    18b4:	ce cf       	rjmp	.-100    	; 0x1852 <TimerTicker+0x2e>
			}
			prev = &(t->next);
			t = t->next;
		}
	}
}
    18b6:	df 91       	pop	r29
    18b8:	cf 91       	pop	r28
    18ba:	1f 91       	pop	r17
    18bc:	0f 91       	pop	r16
    18be:	ff 90       	pop	r15
    18c0:	ef 90       	pop	r14
    18c2:	08 95       	ret

000018c4 <__vector_9>:
//	USART_Status
//*************************************************
int USART_Status(void)
{
	return RxDesc.m_nChar;
}
    18c4:	ff 93       	push	r31
    18c6:	ff b7       	in	r31, 0x3f	; 63
    18c8:	f0 68       	ori	r31, 0x80	; 128
    18ca:	ff 93       	push	r31
    18cc:	ef 93       	push	r30
    18ce:	df 93       	push	r29
    18d0:	cf 93       	push	r28
    18d2:	bf 93       	push	r27
    18d4:	af 93       	push	r26
    18d6:	9f 93       	push	r25
    18d8:	8f 93       	push	r24
    18da:	7f 93       	push	r23
    18dc:	6f 93       	push	r22
    18de:	5f 93       	push	r21
    18e0:	4f 93       	push	r20
    18e2:	3f 93       	push	r19
    18e4:	2f 93       	push	r18
    18e6:	1f 93       	push	r17
    18e8:	0f 93       	push	r16
    18ea:	ff 92       	push	r15
    18ec:	ef 92       	push	r14
    18ee:	df 92       	push	r13
    18f0:	cf 92       	push	r12
    18f2:	bf 92       	push	r11
    18f4:	af 92       	push	r10
    18f6:	9f 92       	push	r9
    18f8:	8f 92       	push	r8
    18fa:	7f 92       	push	r7
    18fc:	6f 92       	push	r6
    18fe:	5f 92       	push	r5
    1900:	4f 92       	push	r4
    1902:	3f 92       	push	r3
    1904:	2f 92       	push	r2
    1906:	1f 92       	push	r1
    1908:	11 24       	eor	r1, r1
    190a:	0f 92       	push	r0
    190c:	f9 d5       	rcall	.+3058   	; 0x2500 <__TEXT_REGION_LENGTH__+0x500>
    190e:	20 91 87 00 	lds	r18, 0x0087	; 0x800087 <RxDesc+0xa>
    1912:	30 91 88 00 	lds	r19, 0x0088	; 0x800088 <RxDesc+0xb>
    1916:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <RxDesc+0x4>
    191a:	90 91 82 00 	lds	r25, 0x0082	; 0x800082 <RxDesc+0x5>
    191e:	28 17       	cp	r18, r24
    1920:	39 07       	cpc	r19, r25
    1922:	9c f5       	brge	.+102    	; 0x198a <__vector_9+0xc6>
    1924:	60 e0       	ldi	r22, 0x00	; 0
    1926:	70 e0       	ldi	r23, 0x00	; 0
    1928:	80 91 7d 00 	lds	r24, 0x007D	; 0x80007d <RxDesc>
    192c:	90 91 7e 00 	lds	r25, 0x007E	; 0x80007e <RxDesc+0x1>
    1930:	7d dd       	rcall	.-1286   	; 0x142c <PostSemaphore>
    1932:	40 91 7f 00 	lds	r20, 0x007F	; 0x80007f <RxDesc+0x2>
    1936:	50 91 80 00 	lds	r21, 0x0080	; 0x800080 <RxDesc+0x3>
    193a:	80 91 83 00 	lds	r24, 0x0083	; 0x800083 <RxDesc+0x6>
    193e:	90 91 84 00 	lds	r25, 0x0084	; 0x800084 <RxDesc+0x7>
    1942:	9c 01       	movw	r18, r24
    1944:	2f 5f       	subi	r18, 0xFF	; 255
    1946:	3f 4f       	sbci	r19, 0xFF	; 255
    1948:	30 93 84 00 	sts	0x0084, r19	; 0x800084 <RxDesc+0x7>
    194c:	20 93 83 00 	sts	0x0083, r18	; 0x800083 <RxDesc+0x6>
    1950:	2c b1       	in	r18, 0x0c	; 12
    1952:	fa 01       	movw	r30, r20
    1954:	e8 0f       	add	r30, r24
    1956:	f9 1f       	adc	r31, r25
    1958:	20 83       	st	Z, r18
    195a:	80 91 87 00 	lds	r24, 0x0087	; 0x800087 <RxDesc+0xa>
    195e:	90 91 88 00 	lds	r25, 0x0088	; 0x800088 <RxDesc+0xb>
    1962:	01 96       	adiw	r24, 0x01	; 1
    1964:	90 93 88 00 	sts	0x0088, r25	; 0x800088 <RxDesc+0xb>
    1968:	80 93 87 00 	sts	0x0087, r24	; 0x800087 <RxDesc+0xa>
    196c:	20 91 83 00 	lds	r18, 0x0083	; 0x800083 <RxDesc+0x6>
    1970:	30 91 84 00 	lds	r19, 0x0084	; 0x800084 <RxDesc+0x7>
    1974:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <RxDesc+0x4>
    1978:	90 91 82 00 	lds	r25, 0x0082	; 0x800082 <RxDesc+0x5>
    197c:	28 17       	cp	r18, r24
    197e:	39 07       	cpc	r19, r25
    1980:	21 f4       	brne	.+8      	; 0x198a <__vector_9+0xc6>
    1982:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <RxDesc+0x7>
    1986:	10 92 83 00 	sts	0x0083, r1	; 0x800083 <RxDesc+0x6>
    198a:	4a d5       	rcall	.+2708   	; 0x2420 <__TEXT_REGION_LENGTH__+0x420>
    198c:	0f 90       	pop	r0
    198e:	1f 90       	pop	r1
    1990:	2f 90       	pop	r2
    1992:	3f 90       	pop	r3
    1994:	4f 90       	pop	r4
    1996:	5f 90       	pop	r5
    1998:	6f 90       	pop	r6
    199a:	7f 90       	pop	r7
    199c:	8f 90       	pop	r8
    199e:	9f 90       	pop	r9
    19a0:	af 90       	pop	r10
    19a2:	bf 90       	pop	r11
    19a4:	cf 90       	pop	r12
    19a6:	df 90       	pop	r13
    19a8:	ef 90       	pop	r14
    19aa:	ff 90       	pop	r15
    19ac:	0f 91       	pop	r16
    19ae:	1f 91       	pop	r17
    19b0:	2f 91       	pop	r18
    19b2:	3f 91       	pop	r19
    19b4:	4f 91       	pop	r20
    19b6:	5f 91       	pop	r21
    19b8:	6f 91       	pop	r22
    19ba:	7f 91       	pop	r23
    19bc:	8f 91       	pop	r24
    19be:	9f 91       	pop	r25
    19c0:	af 91       	pop	r26
    19c2:	bf 91       	pop	r27
    19c4:	cf 91       	pop	r28
    19c6:	df 91       	pop	r29
    19c8:	ef 91       	pop	r30
    19ca:	ff 91       	pop	r31
    19cc:	ff 77       	andi	r31, 0x7F	; 127
    19ce:	ff bf       	out	0x3f, r31	; 63
    19d0:	ff 91       	pop	r31
    19d2:	18 95       	reti

000019d4 <USART_GetC>:
//***************************************************
//	USART_GetC
//		Get a character from the uart
//***************************************************
int USART_GetC(void)
{
    19d4:	cf 93       	push	r28
    19d6:	df 93       	push	r29
	//-------------------------
	// if there are no chars
	// waiting for us, pend
	// until there are
	//-------------------------
	PendSemaphore(RxDesc.m_pSem,0);
    19d8:	60 e0       	ldi	r22, 0x00	; 0
    19da:	70 e0       	ldi	r23, 0x00	; 0
    19dc:	80 91 7d 00 	lds	r24, 0x007D	; 0x80007d <RxDesc>
    19e0:	90 91 7e 00 	lds	r25, 0x007E	; 0x80007e <RxDesc+0x1>
    19e4:	c3 dc       	rcall	.-1658   	; 0x136c <PendSemaphore>
	sr = Disable();	//enter critical section
    19e6:	51 d3       	rcall	.+1698   	; 0x208a <__TEXT_REGION_LENGTH__+0x8a>
	c = RxDesc.m_pBuffer[RxDesc.m_Tail++];
    19e8:	40 91 7f 00 	lds	r20, 0x007F	; 0x80007f <RxDesc+0x2>
    19ec:	50 91 80 00 	lds	r21, 0x0080	; 0x800080 <RxDesc+0x3>
    19f0:	20 91 85 00 	lds	r18, 0x0085	; 0x800085 <RxDesc+0x8>
    19f4:	30 91 86 00 	lds	r19, 0x0086	; 0x800086 <RxDesc+0x9>
    19f8:	b9 01       	movw	r22, r18
    19fa:	6f 5f       	subi	r22, 0xFF	; 255
    19fc:	7f 4f       	sbci	r23, 0xFF	; 255
    19fe:	70 93 86 00 	sts	0x0086, r23	; 0x800086 <RxDesc+0x9>
    1a02:	60 93 85 00 	sts	0x0085, r22	; 0x800085 <RxDesc+0x8>
    1a06:	fa 01       	movw	r30, r20
    1a08:	e2 0f       	add	r30, r18
    1a0a:	f3 1f       	adc	r31, r19
    1a0c:	c0 81       	ld	r28, Z
    1a0e:	d0 e0       	ldi	r29, 0x00	; 0
	RxDesc.m_nChar--;
    1a10:	20 91 87 00 	lds	r18, 0x0087	; 0x800087 <RxDesc+0xa>
    1a14:	30 91 88 00 	lds	r19, 0x0088	; 0x800088 <RxDesc+0xb>
    1a18:	21 50       	subi	r18, 0x01	; 1
    1a1a:	31 09       	sbc	r19, r1
    1a1c:	30 93 88 00 	sts	0x0088, r19	; 0x800088 <RxDesc+0xb>
    1a20:	20 93 87 00 	sts	0x0087, r18	; 0x800087 <RxDesc+0xa>
	if(RxDesc.m_Tail == RxDesc.m_Size)
    1a24:	40 91 85 00 	lds	r20, 0x0085	; 0x800085 <RxDesc+0x8>
    1a28:	50 91 86 00 	lds	r21, 0x0086	; 0x800086 <RxDesc+0x9>
    1a2c:	20 91 81 00 	lds	r18, 0x0081	; 0x800081 <RxDesc+0x4>
    1a30:	30 91 82 00 	lds	r19, 0x0082	; 0x800082 <RxDesc+0x5>
    1a34:	42 17       	cp	r20, r18
    1a36:	53 07       	cpc	r21, r19
    1a38:	21 f4       	brne	.+8      	; 0x1a42 <USART_GetC+0x6e>
		RxDesc.m_Tail = 0;
    1a3a:	10 92 86 00 	sts	0x0086, r1	; 0x800086 <RxDesc+0x9>
    1a3e:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <RxDesc+0x8>
	Enable(sr);
    1a42:	27 d3       	rcall	.+1614   	; 0x2092 <__TEXT_REGION_LENGTH__+0x92>
	return c;
}
    1a44:	ce 01       	movw	r24, r28
    1a46:	df 91       	pop	r29
    1a48:	cf 91       	pop	r28
    1a4a:	08 95       	ret

00001a4c <USART_PutC>:
//
// Parameters:
//		c......character to output to Uart
//**********************************************
void USART_PutC(int c)
{
    1a4c:	cf 93       	push	r28
    1a4e:	c8 2f       	mov	r28, r24
	char sr;

	PendSemaphore(TxDesc.m_pSem,0);
    1a50:	60 e0       	ldi	r22, 0x00	; 0
    1a52:	70 e0       	ldi	r23, 0x00	; 0
    1a54:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <TxDesc>
    1a58:	90 91 72 00 	lds	r25, 0x0072	; 0x800072 <TxDesc+0x1>
    1a5c:	87 dc       	rcall	.-1778   	; 0x136c <PendSemaphore>
	sr = Disable();
    1a5e:	15 d3       	rcall	.+1578   	; 0x208a <__TEXT_REGION_LENGTH__+0x8a>
	TxDesc.m_pBuffer[TxDesc.m_Head++] = c;
    1a60:	40 91 73 00 	lds	r20, 0x0073	; 0x800073 <TxDesc+0x2>
    1a64:	50 91 74 00 	lds	r21, 0x0074	; 0x800074 <TxDesc+0x3>
    1a68:	20 91 77 00 	lds	r18, 0x0077	; 0x800077 <TxDesc+0x6>
    1a6c:	30 91 78 00 	lds	r19, 0x0078	; 0x800078 <TxDesc+0x7>
    1a70:	b9 01       	movw	r22, r18
    1a72:	6f 5f       	subi	r22, 0xFF	; 255
    1a74:	7f 4f       	sbci	r23, 0xFF	; 255
    1a76:	70 93 78 00 	sts	0x0078, r23	; 0x800078 <TxDesc+0x7>
    1a7a:	60 93 77 00 	sts	0x0077, r22	; 0x800077 <TxDesc+0x6>
    1a7e:	fa 01       	movw	r30, r20
    1a80:	e2 0f       	add	r30, r18
    1a82:	f3 1f       	adc	r31, r19
    1a84:	c0 83       	st	Z, r28
	if(TxDesc.m_Head == TxDesc.m_Size) TxDesc.m_Head = 0;
    1a86:	40 91 77 00 	lds	r20, 0x0077	; 0x800077 <TxDesc+0x6>
    1a8a:	50 91 78 00 	lds	r21, 0x0078	; 0x800078 <TxDesc+0x7>
    1a8e:	20 91 75 00 	lds	r18, 0x0075	; 0x800075 <TxDesc+0x4>
    1a92:	30 91 76 00 	lds	r19, 0x0076	; 0x800076 <TxDesc+0x5>
    1a96:	42 17       	cp	r20, r18
    1a98:	53 07       	cpc	r21, r19
    1a9a:	21 f4       	brne	.+8      	; 0x1aa4 <USART_PutC+0x58>
    1a9c:	10 92 78 00 	sts	0x0078, r1	; 0x800078 <TxDesc+0x7>
    1aa0:	10 92 77 00 	sts	0x0077, r1	; 0x800077 <TxDesc+0x6>
	TxDesc.m_nChar++;
    1aa4:	20 91 7b 00 	lds	r18, 0x007B	; 0x80007b <TxDesc+0xa>
    1aa8:	30 91 7c 00 	lds	r19, 0x007C	; 0x80007c <TxDesc+0xb>
    1aac:	2f 5f       	subi	r18, 0xFF	; 255
    1aae:	3f 4f       	sbci	r19, 0xFF	; 255
    1ab0:	30 93 7c 00 	sts	0x007C, r19	; 0x80007c <TxDesc+0xb>
    1ab4:	20 93 7b 00 	sts	0x007B, r18	; 0x80007b <TxDesc+0xa>
}

void UART_TXirq(char en)
{
	if(en)
		UCSRB |= BIT(UDRIE);
    1ab8:	55 9a       	sbi	0x0a, 5	; 10
	TxDesc.m_pBuffer[TxDesc.m_Head++] = c;
	if(TxDesc.m_Head == TxDesc.m_Size) TxDesc.m_Head = 0;
	TxDesc.m_nChar++;
	UART_TXirq(1);
	Enable(sr);
}
    1aba:	cf 91       	pop	r28
	sr = Disable();
	TxDesc.m_pBuffer[TxDesc.m_Head++] = c;
	if(TxDesc.m_Head == TxDesc.m_Size) TxDesc.m_Head = 0;
	TxDesc.m_nChar++;
	UART_TXirq(1);
	Enable(sr);
    1abc:	ea c2       	rjmp	.+1492   	; 0x2092 <__TEXT_REGION_LENGTH__+0x92>

00001abe <UART_TXirq>:
}

void UART_TXirq(char en)
{
	if(en)
    1abe:	88 23       	and	r24, r24
    1ac0:	11 f0       	breq	.+4      	; 0x1ac6 <UART_TXirq+0x8>
		UCSRB |= BIT(UDRIE);
    1ac2:	55 9a       	sbi	0x0a, 5	; 10
    1ac4:	08 95       	ret
	else
		UCSRB &= ~BIT(UDRIE);
    1ac6:	55 98       	cbi	0x0a, 5	; 10
    1ac8:	08 95       	ret

00001aca <__vector_10>:
//*************************************************

void USART_UDRE_vect(void) __attribute__ ((naked));
void USART_UDRE_vect(void)
{
	SAVE_IRQ();		//save context
    1aca:	ff 93       	push	r31
    1acc:	ff b7       	in	r31, 0x3f	; 63
    1ace:	f0 68       	ori	r31, 0x80	; 128
    1ad0:	ff 93       	push	r31
    1ad2:	ef 93       	push	r30
    1ad4:	df 93       	push	r29
    1ad6:	cf 93       	push	r28
    1ad8:	bf 93       	push	r27
    1ada:	af 93       	push	r26
    1adc:	9f 93       	push	r25
    1ade:	8f 93       	push	r24
    1ae0:	7f 93       	push	r23
    1ae2:	6f 93       	push	r22
    1ae4:	5f 93       	push	r21
    1ae6:	4f 93       	push	r20
    1ae8:	3f 93       	push	r19
    1aea:	2f 93       	push	r18
    1aec:	1f 93       	push	r17
    1aee:	0f 93       	push	r16
    1af0:	ff 92       	push	r15
    1af2:	ef 92       	push	r14
    1af4:	df 92       	push	r13
    1af6:	cf 92       	push	r12
    1af8:	bf 92       	push	r11
    1afa:	af 92       	push	r10
    1afc:	9f 92       	push	r9
    1afe:	8f 92       	push	r8
    1b00:	7f 92       	push	r7
    1b02:	6f 92       	push	r6
    1b04:	5f 92       	push	r5
    1b06:	4f 92       	push	r4
    1b08:	3f 92       	push	r3
    1b0a:	2f 92       	push	r2
    1b0c:	1f 92       	push	r1
    1b0e:	11 24       	eor	r1, r1
    1b10:	0f 92       	push	r0
	EnterInterrupt();
    1b12:	f6 d4       	rcall	.+2540   	; 0x2500 <__TEXT_REGION_LENGTH__+0x500>
	PostSemaphore(TxDesc.m_pSem,0);	//increment semaphore count
    1b14:	60 e0       	ldi	r22, 0x00	; 0
    1b16:	70 e0       	ldi	r23, 0x00	; 0
    1b18:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <TxDesc>
    1b1c:	90 91 72 00 	lds	r25, 0x0072	; 0x800072 <TxDesc+0x1>
    1b20:	85 dc       	rcall	.-1782   	; 0x142c <PostSemaphore>
									//this indicates the free space of the buffer
	UDR = TxDesc.m_pBuffer[TxDesc.m_Tail++];;	//send data
    1b22:	20 91 73 00 	lds	r18, 0x0073	; 0x800073 <TxDesc+0x2>
    1b26:	30 91 74 00 	lds	r19, 0x0074	; 0x800074 <TxDesc+0x3>
    1b2a:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <TxDesc+0x8>
    1b2e:	90 91 7a 00 	lds	r25, 0x007A	; 0x80007a <TxDesc+0x9>
    1b32:	ac 01       	movw	r20, r24
    1b34:	4f 5f       	subi	r20, 0xFF	; 255
    1b36:	5f 4f       	sbci	r21, 0xFF	; 255
    1b38:	50 93 7a 00 	sts	0x007A, r21	; 0x80007a <TxDesc+0x9>
    1b3c:	40 93 79 00 	sts	0x0079, r20	; 0x800079 <TxDesc+0x8>
    1b40:	f9 01       	movw	r30, r18
    1b42:	e8 0f       	add	r30, r24
    1b44:	f9 1f       	adc	r31, r25
    1b46:	80 81       	ld	r24, Z
    1b48:	8c b9       	out	0x0c, r24	; 12
	TxDesc.m_nChar--;	//decrement number of chars in buffer
    1b4a:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <TxDesc+0xa>
    1b4e:	90 91 7c 00 	lds	r25, 0x007C	; 0x80007c <TxDesc+0xb>
    1b52:	01 97       	sbiw	r24, 0x01	; 1
    1b54:	90 93 7c 00 	sts	0x007C, r25	; 0x80007c <TxDesc+0xb>
    1b58:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <TxDesc+0xa>
	if(TxDesc.m_nChar == 0) UART_TXirq(0);	//disable interrupt if no chars
    1b5c:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <TxDesc+0xa>
    1b60:	90 91 7c 00 	lds	r25, 0x007C	; 0x80007c <TxDesc+0xb>
    1b64:	89 2b       	or	r24, r25
    1b66:	11 f4       	brne	.+4      	; 0x1b6c <__vector_10+0xa2>
    1b68:	80 e0       	ldi	r24, 0x00	; 0
    1b6a:	a9 df       	rcall	.-174    	; 0x1abe <UART_TXirq>
	if(TxDesc.m_Tail == TxDesc.m_Size) TxDesc.m_Tail = 0;	//update tail pointer
    1b6c:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <TxDesc+0x8>
    1b70:	30 91 7a 00 	lds	r19, 0x007A	; 0x80007a <TxDesc+0x9>
    1b74:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <TxDesc+0x4>
    1b78:	90 91 76 00 	lds	r25, 0x0076	; 0x800076 <TxDesc+0x5>
    1b7c:	28 17       	cp	r18, r24
    1b7e:	39 07       	cpc	r19, r25
    1b80:	21 f4       	brne	.+8      	; 0x1b8a <__vector_10+0xc0>
    1b82:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <TxDesc+0x9>
    1b86:	10 92 79 00 	sts	0x0079, r1	; 0x800079 <TxDesc+0x8>
	ExitInterrupt();
    1b8a:	4a d4       	rcall	.+2196   	; 0x2420 <__TEXT_REGION_LENGTH__+0x420>
	RESTORE_IRQ();
    1b8c:	0f 90       	pop	r0
    1b8e:	1f 90       	pop	r1
    1b90:	2f 90       	pop	r2
    1b92:	3f 90       	pop	r3
    1b94:	4f 90       	pop	r4
    1b96:	5f 90       	pop	r5
    1b98:	6f 90       	pop	r6
    1b9a:	7f 90       	pop	r7
    1b9c:	8f 90       	pop	r8
    1b9e:	9f 90       	pop	r9
    1ba0:	af 90       	pop	r10
    1ba2:	bf 90       	pop	r11
    1ba4:	cf 90       	pop	r12
    1ba6:	df 90       	pop	r13
    1ba8:	ef 90       	pop	r14
    1baa:	ff 90       	pop	r15
    1bac:	0f 91       	pop	r16
    1bae:	1f 91       	pop	r17
    1bb0:	2f 91       	pop	r18
    1bb2:	3f 91       	pop	r19
    1bb4:	4f 91       	pop	r20
    1bb6:	5f 91       	pop	r21
    1bb8:	6f 91       	pop	r22
    1bba:	7f 91       	pop	r23
    1bbc:	8f 91       	pop	r24
    1bbe:	9f 91       	pop	r25
    1bc0:	af 91       	pop	r26
    1bc2:	bf 91       	pop	r27
    1bc4:	cf 91       	pop	r28
    1bc6:	df 91       	pop	r29
    1bc8:	ef 91       	pop	r30
    1bca:	ff 91       	pop	r31
    1bcc:	ff 77       	andi	r31, 0x7F	; 127
    1bce:	ff bf       	out	0x3f, r31	; 63
    1bd0:	ff 91       	pop	r31
    1bd2:	18 95       	reti

00001bd4 <USART_Init>:
	else
		UCSRB &= ~BIT(UDRIE);
}

void USART_Init(void)
{
    1bd4:	0f 93       	push	r16
    1bd6:	1f 93       	push	r17
    1bd8:	cf 93       	push	r28
    1bda:	df 93       	push	r29
	//---------------------------------------
	// Transmit descriptor
	//---------------------------------------
	 TxDesc.m_pBuffer = malloc(UART_BUFFSIZE);
    1bdc:	80 e8       	ldi	r24, 0x80	; 128
    1bde:	90 e0       	ldi	r25, 0x00	; 0
    1be0:	8c d7       	rcall	.+3864   	; 0x2afa <__TEXT_REGION_LENGTH__+0xafa>
    1be2:	c1 e7       	ldi	r28, 0x71	; 113
    1be4:	d0 e0       	ldi	r29, 0x00	; 0
    1be6:	9b 83       	std	Y+3, r25	; 0x03
    1be8:	8a 83       	std	Y+2, r24	; 0x02
	 TxDesc.m_Head = 0;
    1bea:	1f 82       	std	Y+7, r1	; 0x07
    1bec:	1e 82       	std	Y+6, r1	; 0x06
	 TxDesc.m_Tail = 0;
    1bee:	19 86       	std	Y+9, r1	; 0x09
    1bf0:	18 86       	std	Y+8, r1	; 0x08
	 TxDesc.m_nChar = 0;
    1bf2:	1b 86       	std	Y+11, r1	; 0x0b
    1bf4:	1a 86       	std	Y+10, r1	; 0x0a
	 TxDesc.m_Size = UART_BUFFSIZE;
    1bf6:	00 e8       	ldi	r16, 0x80	; 128
    1bf8:	10 e0       	ldi	r17, 0x00	; 0
    1bfa:	1d 83       	std	Y+5, r17	; 0x05
    1bfc:	0c 83       	std	Y+4, r16	; 0x04
	 TxDesc.m_pSem = NewSemaphore(UART_BUFFSIZE,SEMAPHORE_MODE_BLOCKING);
    1bfe:	60 e0       	ldi	r22, 0x00	; 0
    1c00:	70 e0       	ldi	r23, 0x00	; 0
    1c02:	80 e8       	ldi	r24, 0x80	; 128
    1c04:	90 e0       	ldi	r25, 0x00	; 0
    1c06:	93 d2       	rcall	.+1318   	; 0x212e <__TEXT_REGION_LENGTH__+0x12e>
    1c08:	99 83       	std	Y+1, r25	; 0x01
    1c0a:	88 83       	st	Y, r24
	 //---------------------------------------
	 // Receive Descriptor
	 //---------------------------------------
	 RxDesc.m_pBuffer = malloc(UART_BUFFSIZE);
    1c0c:	80 e8       	ldi	r24, 0x80	; 128
    1c0e:	90 e0       	ldi	r25, 0x00	; 0
    1c10:	74 d7       	rcall	.+3816   	; 0x2afa <__TEXT_REGION_LENGTH__+0xafa>
    1c12:	cd e7       	ldi	r28, 0x7D	; 125
    1c14:	d0 e0       	ldi	r29, 0x00	; 0
    1c16:	9b 83       	std	Y+3, r25	; 0x03
    1c18:	8a 83       	std	Y+2, r24	; 0x02
	 RxDesc.m_Head = 0;
    1c1a:	1f 82       	std	Y+7, r1	; 0x07
    1c1c:	1e 82       	std	Y+6, r1	; 0x06
	 RxDesc.m_Tail = 0;
    1c1e:	19 86       	std	Y+9, r1	; 0x09
    1c20:	18 86       	std	Y+8, r1	; 0x08
	 RxDesc.m_nChar = 0;
    1c22:	1b 86       	std	Y+11, r1	; 0x0b
    1c24:	1a 86       	std	Y+10, r1	; 0x0a
	 RxDesc.m_pSem = NewSemaphore(0,SEMAPHORE_MODE_BLOCKING);
    1c26:	60 e0       	ldi	r22, 0x00	; 0
    1c28:	70 e0       	ldi	r23, 0x00	; 0
    1c2a:	80 e0       	ldi	r24, 0x00	; 0
    1c2c:	90 e0       	ldi	r25, 0x00	; 0
    1c2e:	7f d2       	rcall	.+1278   	; 0x212e <__TEXT_REGION_LENGTH__+0x12e>
    1c30:	99 83       	std	Y+1, r25	; 0x01
    1c32:	88 83       	st	Y, r24
	 RxDesc.m_Size = UART_BUFFSIZE;
    1c34:	1d 83       	std	Y+5, r17	; 0x05
    1c36:	0c 83       	std	Y+4, r16	; 0x04
	 //---------------------------------
	 // Set Baud Rate
	 // UBRR = Fosc/(16 * Baud) - 1
	 //---------------------------------
	 UBRRH = 0;
    1c38:	10 bc       	out	0x20, r1	; 32
	 UBRRL = 15; // 8000000/(16 * 31250) - 1
    1c3a:	8f e0       	ldi	r24, 0x0F	; 15
    1c3c:	89 b9       	out	0x09, r24	; 9
	 UCSRA = 0;
    1c3e:	1b b8       	out	0x0b, r1	; 11
	 //----------------------------------
	 // Enable TX and RX interrupt
	 //----------------------------------
	 UCSRB = BIT(RXCIE) | BIT(RXEN) | BIT(TXEN);
    1c40:	88 e9       	ldi	r24, 0x98	; 152
    1c42:	8a b9       	out	0x0a, r24	; 10
	 //----------------------------------
	 // 8 Bits, No parity
	 //----------------------------------
	 UCSRC = 0x80 | BIT(UCSZ1) | BIT(UCSZ0);
    1c44:	86 e8       	ldi	r24, 0x86	; 134
    1c46:	80 bd       	out	0x20, r24	; 32
}
    1c48:	df 91       	pop	r29
    1c4a:	cf 91       	pop	r28
    1c4c:	1f 91       	pop	r17
    1c4e:	0f 91       	pop	r16
    1c50:	08 95       	ret

00001c52 <Yield>:
** are in an interrupt
** routine
*********************************************************************/

void Yield(void)
{
    1c52:	cf 93       	push	r28
	char sr;

	// Do not yield if at the interrupt level
	if(!InterruptCount)
    1c54:	80 91 9b 00 	lds	r24, 0x009B	; 0x80009b <InterruptCount>
    1c58:	90 91 9c 00 	lds	r25, 0x009C	; 0x80009c <InterruptCount+0x1>
    1c5c:	89 2b       	or	r24, r25
    1c5e:	f9 f4       	brne	.+62     	; 0x1c9e <Yield+0x4c>
	{
		sr = Disable();
    1c60:	14 d2       	rcall	.+1064   	; 0x208a <__TEXT_REGION_LENGTH__+0x8a>
    1c62:	c8 2f       	mov	r28, r24
		//update the time stamp in current task
		pCurrentTask->TimeStamp = TStamp;
    1c64:	40 91 95 00 	lds	r20, 0x0095	; 0x800095 <pCurrentTask>
    1c68:	50 91 96 00 	lds	r21, 0x0096	; 0x800096 <pCurrentTask+0x1>
    1c6c:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <TStamp>
    1c70:	90 91 53 01 	lds	r25, 0x0153	; 0x800153 <TStamp+0x1>
    1c74:	fa 01       	movw	r30, r20
    1c76:	95 87       	std	Z+13, r25	; 0x0d
    1c78:	84 87       	std	Z+12, r24	; 0x0c
		//Insert current task back into queue
		//and get a new task
		Replace(&ActiveTasks,(void **)&pNextTask,(void *)pCurrentTask);
    1c7a:	69 e9       	ldi	r22, 0x99	; 153
    1c7c:	70 e0       	ldi	r23, 0x00	; 0
    1c7e:	8b e8       	ldi	r24, 0x8B	; 139
    1c80:	90 e0       	ldi	r25, 0x00	; 0
    1c82:	2f dd       	rcall	.-1442   	; 0x16e2 <Replace>
		//increment task swaps
		pNextTask->TcbSwaps++;
    1c84:	e0 91 99 00 	lds	r30, 0x0099	; 0x800099 <pNextTask>
    1c88:	f0 91 9a 00 	lds	r31, 0x009A	; 0x80009a <pNextTask+0x1>
    1c8c:	86 85       	ldd	r24, Z+14	; 0x0e
    1c8e:	97 85       	ldd	r25, Z+15	; 0x0f
    1c90:	01 96       	adiw	r24, 0x01	; 1
    1c92:	97 87       	std	Z+15, r25	; 0x0f
    1c94:	86 87       	std	Z+14, r24	; 0x0e
		//swap tasks
		DoSwap();
    1c96:	5f d3       	rcall	.+1726   	; 0x2356 <__TEXT_REGION_LENGTH__+0x356>
		Enable(sr);
    1c98:	8c 2f       	mov	r24, r28
	}
}
    1c9a:	cf 91       	pop	r28
		Replace(&ActiveTasks,(void **)&pNextTask,(void *)pCurrentTask);
		//increment task swaps
		pNextTask->TcbSwaps++;
		//swap tasks
		DoSwap();
		Enable(sr);
    1c9c:	fa c1       	rjmp	.+1012   	; 0x2092 <__TEXT_REGION_LENGTH__+0x92>
	}
}
    1c9e:	cf 91       	pop	r28
    1ca0:	08 95       	ret

00001ca2 <_exit>:
    1ca2:	f8 94       	cli

00001ca4 <__stop_program>:
    1ca4:	ff cf       	rjmp	.-2      	; 0x1ca4 <__stop_program>
