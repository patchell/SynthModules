
500-1093_MidiMerger.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000009c  00800100  000022c4  00002358  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000022c4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000106  0080019c  0080019c  000023f4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000023f4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002424  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000438  00000000  00000000  00002468  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000671e  00000000  00000000  000028a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002445  00000000  00000000  00008fbe  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002304  00000000  00000000  0000b403  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000009c4  00000000  00000000  0000d708  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000cac  00000000  00000000  0000e0cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000380a  00000000  00000000  0000ed78  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002c8  00000000  00000000  00012582  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	4e c0       	rjmp	.+156    	; 0x9e <__ctors_end>
       2:	00 00       	nop
       4:	6a c0       	rjmp	.+212    	; 0xda <__bad_interrupt>
       6:	00 00       	nop
       8:	68 c0       	rjmp	.+208    	; 0xda <__bad_interrupt>
       a:	00 00       	nop
       c:	66 c0       	rjmp	.+204    	; 0xda <__bad_interrupt>
       e:	00 00       	nop
      10:	64 c0       	rjmp	.+200    	; 0xda <__bad_interrupt>
      12:	00 00       	nop
      14:	62 c0       	rjmp	.+196    	; 0xda <__bad_interrupt>
      16:	00 00       	nop
      18:	60 c0       	rjmp	.+192    	; 0xda <__bad_interrupt>
      1a:	00 00       	nop
      1c:	5e c0       	rjmp	.+188    	; 0xda <__bad_interrupt>
      1e:	00 00       	nop
      20:	5c c0       	rjmp	.+184    	; 0xda <__bad_interrupt>
      22:	00 00       	nop
      24:	5a c0       	rjmp	.+180    	; 0xda <__bad_interrupt>
      26:	00 00       	nop
      28:	58 c0       	rjmp	.+176    	; 0xda <__bad_interrupt>
      2a:	00 00       	nop
      2c:	56 c0       	rjmp	.+172    	; 0xda <__bad_interrupt>
      2e:	00 00       	nop
      30:	54 c0       	rjmp	.+168    	; 0xda <__bad_interrupt>
      32:	00 00       	nop
      34:	52 c0       	rjmp	.+164    	; 0xda <__bad_interrupt>
      36:	00 00       	nop
      38:	50 c0       	rjmp	.+160    	; 0xda <__bad_interrupt>
      3a:	00 00       	nop
      3c:	4e c0       	rjmp	.+156    	; 0xda <__bad_interrupt>
      3e:	00 00       	nop
      40:	4c c0       	rjmp	.+152    	; 0xda <__bad_interrupt>
      42:	00 00       	nop
      44:	4a c0       	rjmp	.+148    	; 0xda <__bad_interrupt>
      46:	00 00       	nop
      48:	23 c6       	rjmp	.+3142   	; 0xc90 <__vector_18>
      4a:	00 00       	nop
      4c:	46 c0       	rjmp	.+140    	; 0xda <__bad_interrupt>
      4e:	00 00       	nop
      50:	0c 94 a7 0e 	jmp	0x1d4e	; 0x1d4e <__vector_20>
      54:	0c 94 ff 0e 	jmp	0x1dfe	; 0x1dfe <__vector_21>
      58:	40 c0       	rjmp	.+128    	; 0xda <__bad_interrupt>
      5a:	00 00       	nop
      5c:	3e c0       	rjmp	.+124    	; 0xda <__bad_interrupt>
      5e:	00 00       	nop
      60:	3c c0       	rjmp	.+120    	; 0xda <__bad_interrupt>
      62:	00 00       	nop
      64:	3a c0       	rjmp	.+116    	; 0xda <__bad_interrupt>
      66:	00 00       	nop
      68:	38 c0       	rjmp	.+112    	; 0xda <__bad_interrupt>
      6a:	00 00       	nop
      6c:	36 c0       	rjmp	.+108    	; 0xda <__bad_interrupt>
      6e:	00 00       	nop
      70:	0c 94 57 0f 	jmp	0x1eae	; 0x1eae <__vector_28>
      74:	0c 94 af 0f 	jmp	0x1f5e	; 0x1f5e <__vector_29>
      78:	30 c0       	rjmp	.+96     	; 0xda <__bad_interrupt>
      7a:	00 00       	nop
      7c:	2e c0       	rjmp	.+92     	; 0xda <__bad_interrupt>
      7e:	00 00       	nop
      80:	2c c0       	rjmp	.+88     	; 0xda <__bad_interrupt>
      82:	00 00       	nop
      84:	2a c0       	rjmp	.+84     	; 0xda <__bad_interrupt>
      86:	00 00       	nop
      88:	28 c0       	rjmp	.+80     	; 0xda <__bad_interrupt>
      8a:	00 00       	nop
      8c:	7b 04       	cpc	r7, r11
      8e:	94 04       	cpc	r9, r4
      90:	b1 04       	cpc	r11, r1
      92:	7b 04       	cpc	r7, r11
      94:	94 04       	cpc	r9, r4
      96:	e9 04       	cpc	r14, r9
      98:	b8 04       	cpc	r11, r8
      9a:	f0 04       	cpc	r15, r0
      9c:	0c 05       	cpc	r16, r12

0000009e <__ctors_end>:
      9e:	11 24       	eor	r1, r1
      a0:	1f be       	out	0x3f, r1	; 63
      a2:	cf ef       	ldi	r28, 0xFF	; 255
      a4:	d0 e4       	ldi	r29, 0x40	; 64
      a6:	de bf       	out	0x3e, r29	; 62
      a8:	cd bf       	out	0x3d, r28	; 61

000000aa <__do_copy_data>:
      aa:	11 e0       	ldi	r17, 0x01	; 1
      ac:	a0 e0       	ldi	r26, 0x00	; 0
      ae:	b1 e0       	ldi	r27, 0x01	; 1
      b0:	e4 ec       	ldi	r30, 0xC4	; 196
      b2:	f2 e2       	ldi	r31, 0x22	; 34
      b4:	00 e0       	ldi	r16, 0x00	; 0
      b6:	0b bf       	out	0x3b, r16	; 59
      b8:	02 c0       	rjmp	.+4      	; 0xbe <__do_copy_data+0x14>
      ba:	07 90       	elpm	r0, Z+
      bc:	0d 92       	st	X+, r0
      be:	ac 39       	cpi	r26, 0x9C	; 156
      c0:	b1 07       	cpc	r27, r17
      c2:	d9 f7       	brne	.-10     	; 0xba <__do_copy_data+0x10>

000000c4 <__do_clear_bss>:
      c4:	22 e0       	ldi	r18, 0x02	; 2
      c6:	ac e9       	ldi	r26, 0x9C	; 156
      c8:	b1 e0       	ldi	r27, 0x01	; 1
      ca:	01 c0       	rjmp	.+2      	; 0xce <.do_clear_bss_start>

000000cc <.do_clear_bss_loop>:
      cc:	1d 92       	st	X+, r1

000000ce <.do_clear_bss_start>:
      ce:	a2 3a       	cpi	r26, 0xA2	; 162
      d0:	b2 07       	cpc	r27, r18
      d2:	e1 f7       	brne	.-8      	; 0xcc <.do_clear_bss_loop>
      d4:	2b d6       	rcall	.+3158   	; 0xd2c <main>
      d6:	0c 94 60 11 	jmp	0x22c0	; 0x22c0 <_exit>

000000da <__bad_interrupt>:
      da:	92 cf       	rjmp	.-220    	; 0x0 <__vectors>

000000dc <Disable>:
	.global Disable
	.global Enable

Disable:

	in	r24,_SFR_IO_ADDR(SREG)		;get status register
      dc:	8f b7       	in	r24, 0x3f	; 63
	cli								;disable interrupt
      de:	f8 94       	cli
	andi r24,0x80					;strip off interrupt bit
      e0:	80 78       	andi	r24, 0x80	; 128
	ret
      e2:	08 95       	ret

000000e4 <Enable>:

Enable:
	in r25,_SFR_IO_ADDR(SREG)	;get the status register
      e4:	9f b7       	in	r25, 0x3f	; 63
	or r25,r24					;set bits in status reg
      e6:	98 2b       	or	r25, r24
	out _SFR_IO_ADDR(SREG),r25	;save new status register
      e8:	9f bf       	out	0x3f, r25	; 63
	ret
      ea:	08 95       	ret

000000ec <CreateBQ>:
		pBQ......pointer to byte queue object
		b........pointer to data buffer
		size.....size of data buffer in bytes
*************************************************/
void CreateBQ(BQ *pBQ,char *b,unsigned size)
{
      ec:	fc 01       	movw	r30, r24
	pBQ->task_h = NULL;	//no waiting tasks
      ee:	11 82       	std	Z+1, r1	; 0x01
      f0:	10 82       	st	Z, r1
	pBQ->pBfr = b;		//set buffer
      f2:	73 87       	std	Z+11, r23	; 0x0b
      f4:	62 87       	std	Z+10, r22	; 0x0a
	pBQ->Size = size;	//set size
      f6:	51 87       	std	Z+9, r21	; 0x09
      f8:	40 87       	std	Z+8, r20	; 0x08
	pBQ->Head = 0;		//head pointer zero
      fa:	15 82       	std	Z+5, r1	; 0x05
      fc:	14 82       	std	Z+4, r1	; 0x04
	pBQ->Tail = 0;		//tail pointer zero
      fe:	17 82       	std	Z+7, r1	; 0x07
     100:	16 82       	std	Z+6, r1	; 0x06
	pBQ->nChar = 0;		//number of chars zero
     102:	13 82       	std	Z+3, r1	; 0x03
     104:	12 82       	std	Z+2, r1	; 0x02
     106:	08 95       	ret

00000108 <BQget>:
}

int BQget(BQ *pBQ)
{
     108:	fc 01       	movw	r30, r24
	//	returns a positive value on success
	//	suspends task if there are no characters to get
	//******************************************************
	int retval;

	if(pBQ->nChar)	//are there any characters to get?
     10a:	22 81       	ldd	r18, Z+2	; 0x02
     10c:	33 81       	ldd	r19, Z+3	; 0x03
     10e:	21 15       	cp	r18, r1
     110:	31 05       	cpc	r19, r1
     112:	d1 f0       	breq	.+52     	; 0x148 <BQget+0x40>
		//-------------------------------------
		// Get Character from Buffer
		// Check Head pointer for Wrap
		// Increment number of chars in buffer
		//------------------------------------
		retval = (int)((unsigned char)pBQ->pBfr[pBQ->Head++]);
     114:	62 85       	ldd	r22, Z+10	; 0x0a
     116:	73 85       	ldd	r23, Z+11	; 0x0b
     118:	84 81       	ldd	r24, Z+4	; 0x04
     11a:	95 81       	ldd	r25, Z+5	; 0x05
     11c:	ac 01       	movw	r20, r24
     11e:	4f 5f       	subi	r20, 0xFF	; 255
     120:	5f 4f       	sbci	r21, 0xFF	; 255
     122:	55 83       	std	Z+5, r21	; 0x05
     124:	44 83       	std	Z+4, r20	; 0x04
     126:	db 01       	movw	r26, r22
     128:	a8 0f       	add	r26, r24
     12a:	b9 1f       	adc	r27, r25
     12c:	8c 91       	ld	r24, X
     12e:	90 e0       	ldi	r25, 0x00	; 0
		if(pBQ->Head == pBQ->Size) pBQ->Head = 0;
     130:	60 85       	ldd	r22, Z+8	; 0x08
     132:	71 85       	ldd	r23, Z+9	; 0x09
     134:	46 17       	cp	r20, r22
     136:	57 07       	cpc	r21, r23
     138:	11 f4       	brne	.+4      	; 0x13e <BQget+0x36>
     13a:	15 82       	std	Z+5, r1	; 0x05
     13c:	14 82       	std	Z+4, r1	; 0x04
		pBQ->nChar--;
     13e:	21 50       	subi	r18, 0x01	; 1
     140:	31 09       	sbc	r19, r1
     142:	33 83       	std	Z+3, r19	; 0x03
     144:	22 83       	std	Z+2, r18	; 0x02
     146:	08 95       	ret
	}
	else
	{
		retval = -1;
     148:	8f ef       	ldi	r24, 0xFF	; 255
     14a:	9f ef       	ldi	r25, 0xFF	; 255
	}
	return retval;
}
     14c:	08 95       	ret

0000014e <BQPut>:

int BQPut(BQ *pBQ,int c)
{
     14e:	fc 01       	movw	r30, r24

	//------------------------------------------
	// check to see if there is enough room
	// in the byte queue to add the byte
	//-----------------------------------------
	if(pBQ->nChar < pBQ->Size)	//any place for a character?
     150:	22 81       	ldd	r18, Z+2	; 0x02
     152:	33 81       	ldd	r19, Z+3	; 0x03
     154:	80 85       	ldd	r24, Z+8	; 0x08
     156:	91 85       	ldd	r25, Z+9	; 0x09
     158:	28 17       	cp	r18, r24
     15a:	39 07       	cpc	r19, r25
     15c:	d8 f4       	brcc	.+54     	; 0x194 <BQPut+0x46>
	{
		//add byte and increment tail pointer
		pBQ->pBfr[pBQ->Tail++] = (char)c;
     15e:	22 85       	ldd	r18, Z+10	; 0x0a
     160:	33 85       	ldd	r19, Z+11	; 0x0b
     162:	86 81       	ldd	r24, Z+6	; 0x06
     164:	97 81       	ldd	r25, Z+7	; 0x07
     166:	ac 01       	movw	r20, r24
     168:	4f 5f       	subi	r20, 0xFF	; 255
     16a:	5f 4f       	sbci	r21, 0xFF	; 255
     16c:	57 83       	std	Z+7, r21	; 0x07
     16e:	46 83       	std	Z+6, r20	; 0x06
     170:	d9 01       	movw	r26, r18
     172:	a8 0f       	add	r26, r24
     174:	b9 1f       	adc	r27, r25
     176:	6c 93       	st	X, r22
		//check tail pointer to see if it needs to wrap
		if(pBQ->Tail == pBQ->Size) pBQ->Tail = 0;
     178:	26 81       	ldd	r18, Z+6	; 0x06
     17a:	37 81       	ldd	r19, Z+7	; 0x07
     17c:	80 85       	ldd	r24, Z+8	; 0x08
     17e:	91 85       	ldd	r25, Z+9	; 0x09
     180:	28 17       	cp	r18, r24
     182:	39 07       	cpc	r19, r25
     184:	11 f4       	brne	.+4      	; 0x18a <BQPut+0x3c>
     186:	17 82       	std	Z+7, r1	; 0x07
     188:	16 82       	std	Z+6, r1	; 0x06
		//increment number of characters in buffer
		pBQ->nChar++;
     18a:	82 81       	ldd	r24, Z+2	; 0x02
     18c:	93 81       	ldd	r25, Z+3	; 0x03
     18e:	01 96       	adiw	r24, 0x01	; 1
     190:	93 83       	std	Z+3, r25	; 0x03
     192:	82 83       	std	Z+2, r24	; 0x02
	}
	return retval;
}
     194:	80 e0       	ldi	r24, 0x00	; 0
     196:	90 e0       	ldi	r25, 0x00	; 0
     198:	08 95       	ret

0000019a <CioInit>:
	CioInit
		Initialize the central IO routines
***************************************/
void CioInit(void)
{
	last_dev = 0;
     19a:	10 92 9d 01 	sts	0x019D, r1	; 0x80019d <__data_end+0x1>
     19e:	10 92 9c 01 	sts	0x019C, r1	; 0x80019c <__data_end>
	IOCBBlocker = NewSemaphore(1,SEMAPHORE_MODE_BLOCKING,"IOCBBlocker");
     1a2:	4c e2       	ldi	r20, 0x2C	; 44
     1a4:	51 e0       	ldi	r21, 0x01	; 1
     1a6:	60 e0       	ldi	r22, 0x00	; 0
     1a8:	70 e0       	ldi	r23, 0x00	; 0
     1aa:	81 e0       	ldi	r24, 0x01	; 1
     1ac:	90 e0       	ldi	r25, 0x00	; 0
     1ae:	90 d1       	rcall	.+800    	; 0x4d0 <NewSemaphore>
     1b0:	90 93 fd 01 	sts	0x01FD, r25	; 0x8001fd <IOCBBlocker+0x1>
     1b4:	80 93 fc 01 	sts	0x01FC, r24	; 0x8001fc <IOCBBlocker>
     1b8:	08 95       	ret

000001ba <FreeIOCB>:
	parameters:
		I.......pointer to IOCB to free
***********************************************/

static void FreeIOCB(IOCB *I)
{
     1ba:	cf 93       	push	r28
     1bc:	df 93       	push	r29
     1be:	ec 01       	movw	r28, r24
	// block access to other tasks
	PendSemaphore(IOCBBlocker,0);
     1c0:	60 e0       	ldi	r22, 0x00	; 0
     1c2:	70 e0       	ldi	r23, 0x00	; 0
     1c4:	80 91 fc 01 	lds	r24, 0x01FC	; 0x8001fc <IOCBBlocker>
     1c8:	90 91 fd 01 	lds	r25, 0x01FD	; 0x8001fd <IOCBBlocker+0x1>
     1cc:	0e 94 d6 09 	call	0x13ac	; 0x13ac <PendSemaphore>
	// Add IOCB to front of pool list
	I->next = PoolList;
     1d0:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <PoolList>
     1d4:	90 91 ab 01 	lds	r25, 0x01AB	; 0x8001ab <PoolList+0x1>
     1d8:	9b 87       	std	Y+11, r25	; 0x0b
     1da:	8a 87       	std	Y+10, r24	; 0x0a
	PoolList = I;
     1dc:	d0 93 ab 01 	sts	0x01AB, r29	; 0x8001ab <PoolList+0x1>
     1e0:	c0 93 aa 01 	sts	0x01AA, r28	; 0x8001aa <PoolList>
	// unblock access to other tasks
	PostSemaphore(IOCBBlocker,0);
     1e4:	60 e0       	ldi	r22, 0x00	; 0
     1e6:	70 e0       	ldi	r23, 0x00	; 0
     1e8:	80 91 fc 01 	lds	r24, 0x01FC	; 0x8001fc <IOCBBlocker>
     1ec:	90 91 fd 01 	lds	r25, 0x01FD	; 0x8001fd <IOCBBlocker+0x1>
     1f0:	0e 94 41 0a 	call	0x1482	; 0x1482 <PostSemaphore>
}
     1f4:	df 91       	pop	r29
     1f6:	cf 91       	pop	r28
     1f8:	08 95       	ret

000001fa <CioAddHandler>:
// return value:
//	returns 0 on success, nonzero on fail
//**************************************************************************

int CioAddHandler(char * devname,H_JVEC *t)
{
     1fa:	0f 93       	push	r16
     1fc:	1f 93       	push	r17
     1fe:	cf 93       	push	r28
     200:	df 93       	push	r29
     202:	8c 01       	movw	r16, r24
     204:	eb 01       	movw	r28, r22
	int retval = 0;
	int sr;

	//enter critical section, disable interrupts
	sr = Disable();
     206:	6a df       	rcall	.-300    	; 0xdc <Disable>
	//check to see if there is room for another device
	if(last_dev >= CIO_MAX_DEV) retval = CIO_DEVTABLE_FULL;
     208:	20 91 9c 01 	lds	r18, 0x019C	; 0x80019c <__data_end>
     20c:	30 91 9d 01 	lds	r19, 0x019D	; 0x80019d <__data_end+0x1>
     210:	24 31       	cpi	r18, 0x14	; 20
     212:	31 05       	cpc	r19, r1
     214:	a4 f4       	brge	.+40     	; 0x23e <CioAddHandler+0x44>
	else
	{
		htabs[last_dev].dev_name = devname;	/*	device name	*/
     216:	f9 01       	movw	r30, r18
     218:	ee 0f       	add	r30, r30
     21a:	ff 1f       	adc	r31, r31
     21c:	ee 0f       	add	r30, r30
     21e:	ff 1f       	adc	r31, r31
     220:	e4 55       	subi	r30, 0x54	; 84
     222:	fe 4f       	sbci	r31, 0xFE	; 254
     224:	11 83       	std	Z+1, r17	; 0x01
     226:	00 83       	st	Z, r16
		htabs[last_dev].HtabsEntry = t;	/*	address of table	*/
     228:	d3 83       	std	Z+3, r29	; 0x03
     22a:	c2 83       	std	Z+2, r28	; 0x02
		++last_dev;
     22c:	2f 5f       	subi	r18, 0xFF	; 255
     22e:	3f 4f       	sbci	r19, 0xFF	; 255
     230:	30 93 9d 01 	sts	0x019D, r19	; 0x80019d <__data_end+0x1>
     234:	20 93 9c 01 	sts	0x019C, r18	; 0x80019c <__data_end>
//	returns 0 on success, nonzero on fail
//**************************************************************************

int CioAddHandler(char * devname,H_JVEC *t)
{
	int retval = 0;
     238:	c0 e0       	ldi	r28, 0x00	; 0
     23a:	d0 e0       	ldi	r29, 0x00	; 0
     23c:	02 c0       	rjmp	.+4      	; 0x242 <CioAddHandler+0x48>
	int sr;

	//enter critical section, disable interrupts
	sr = Disable();
	//check to see if there is room for another device
	if(last_dev >= CIO_MAX_DEV) retval = CIO_DEVTABLE_FULL;
     23e:	c0 ec       	ldi	r28, 0xC0	; 192
		htabs[last_dev].dev_name = devname;	/*	device name	*/
		htabs[last_dev].HtabsEntry = t;	/*	address of table	*/
		++last_dev;
	}
	//Exit critical section, enable interrupts
	Enable(sr);
     240:	df ef       	ldi	r29, 0xFF	; 255
     242:	50 df       	rcall	.-352    	; 0xe4 <Enable>
	return retval;
}
     244:	ce 01       	movw	r24, r28
     246:	df 91       	pop	r29
     248:	cf 91       	pop	r28
     24a:	1f 91       	pop	r17
     24c:	0f 91       	pop	r16
     24e:	08 95       	ret

00000250 <CioOpen>:
**		this can be 0->9.  If the unit number is
** omitted, the default unit number is '0'
--------------------------------------------------*/

IOCB *CioOpen(char *devname,int mode)
{
     250:	8f 92       	push	r8
     252:	9f 92       	push	r9
     254:	af 92       	push	r10
     256:	bf 92       	push	r11
     258:	cf 92       	push	r12
     25a:	df 92       	push	r13
     25c:	ef 92       	push	r14
     25e:	ff 92       	push	r15
     260:	0f 93       	push	r16
     262:	1f 93       	push	r17
     264:	cf 93       	push	r28
     266:	df 93       	push	r29
     268:	00 d0       	rcall	.+0      	; 0x26a <CioOpen+0x1a>
     26a:	00 d0       	rcall	.+0      	; 0x26c <CioOpen+0x1c>
     26c:	cd b7       	in	r28, 0x3d	; 61
     26e:	de b7       	in	r29, 0x3e	; 62
     270:	6c 01       	movw	r12, r24
     272:	8b 01       	movw	r16, r22
	// first check the IOCB pool to see if
	// there are any unused IOCBs in there
	// If there are none, then allocate a
	// new one from the heap
	//--------------------------------------
	if(PoolList == NULL)
     274:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <PoolList>
     278:	90 91 ab 01 	lds	r25, 0x01AB	; 0x8001ab <PoolList+0x1>
     27c:	89 2b       	or	r24, r25
     27e:	29 f4       	brne	.+10     	; 0x28a <CioOpen+0x3a>
		retval = (IOCB *)malloc(sizeof(IOCB));
     280:	8c e0       	ldi	r24, 0x0C	; 12
     282:	90 e0       	ldi	r25, 0x00	; 0
     284:	ea d5       	rcall	.+3028   	; 0xe5a <malloc>
     286:	4c 01       	movw	r8, r24
     288:	1b c0       	rjmp	.+54     	; 0x2c0 <CioOpen+0x70>
	else
	{
		//block access to other tasks
		PendSemaphore(IOCBBlocker,0);
     28a:	60 e0       	ldi	r22, 0x00	; 0
     28c:	70 e0       	ldi	r23, 0x00	; 0
     28e:	80 91 fc 01 	lds	r24, 0x01FC	; 0x8001fc <IOCBBlocker>
     292:	90 91 fd 01 	lds	r25, 0x01FD	; 0x8001fd <IOCBBlocker+0x1>
     296:	0e 94 d6 09 	call	0x13ac	; 0x13ac <PendSemaphore>
		//get first IOCB is pool
		retval = PoolList;
     29a:	80 90 aa 01 	lds	r8, 0x01AA	; 0x8001aa <PoolList>
     29e:	90 90 ab 01 	lds	r9, 0x01AB	; 0x8001ab <PoolList+0x1>
		//update head of pool list
		PoolList = PoolList->next;
     2a2:	f4 01       	movw	r30, r8
     2a4:	82 85       	ldd	r24, Z+10	; 0x0a
     2a6:	93 85       	ldd	r25, Z+11	; 0x0b
     2a8:	90 93 ab 01 	sts	0x01AB, r25	; 0x8001ab <PoolList+0x1>
     2ac:	80 93 aa 01 	sts	0x01AA, r24	; 0x8001aa <PoolList>
		//unblock access to other tasks
		PostSemaphore(IOCBBlocker,0);
     2b0:	60 e0       	ldi	r22, 0x00	; 0
     2b2:	70 e0       	ldi	r23, 0x00	; 0
     2b4:	80 91 fc 01 	lds	r24, 0x01FC	; 0x8001fc <IOCBBlocker>
     2b8:	90 91 fd 01 	lds	r25, 0x01FD	; 0x8001fd <IOCBBlocker+0x1>
     2bc:	0e 94 41 0a 	call	0x1482	; 0x1482 <PostSemaphore>

IOCB *CioOpen(char *devname,int mode)
{
	IOCB *iocb;
	// Allocate an IO control block
	if((iocb = AllocIOCB()) != NULL)
     2c0:	81 14       	cp	r8, r1
     2c2:	91 04       	cpc	r9, r1
     2c4:	09 f4       	brne	.+2      	; 0x2c8 <CioOpen+0x78>
     2c6:	7d c0       	rjmp	.+250    	; 0x3c2 <CioOpen+0x172>
	{
		//set up IOCB with device name and mode
		iocb->dev_name = devname;
     2c8:	f4 01       	movw	r30, r8
     2ca:	d5 82       	std	Z+5, r13	; 0x05
     2cc:	c4 82       	std	Z+4, r12	; 0x04
		iocb->mode = mode;
     2ce:	17 83       	std	Z+7, r17	; 0x07
     2d0:	06 83       	std	Z+6, r16	; 0x06
	HTABS *ht;		//pointer to device table
	
	char *n,un[4];		/*unit numbers up to 999	*/
	int l;				/*	length of device name	*/

	l = strcspn(iocb->dev_name,"9876543210:");	/*	we need to find what is not unit number	*/
     2d2:	68 e3       	ldi	r22, 0x38	; 56
     2d4:	71 e0       	ldi	r23, 0x01	; 1
     2d6:	c6 01       	movw	r24, r12
     2d8:	0e 94 2c 11 	call	0x2258	; 0x2258 <strcspn>
     2dc:	5c 01       	movw	r10, r24
	ht = htabs + last_dev - 1;					/*	point to handler table	*/
     2de:	00 91 9c 01 	lds	r16, 0x019C	; 0x80019c <__data_end>
     2e2:	10 91 9d 01 	lds	r17, 0x019D	; 0x80019d <__data_end+0x1>
     2e6:	c8 01       	movw	r24, r16
     2e8:	88 0f       	add	r24, r24
     2ea:	99 1f       	adc	r25, r25
     2ec:	88 0f       	add	r24, r24
     2ee:	99 1f       	adc	r25, r25
     2f0:	9c 01       	movw	r18, r24
     2f2:	28 55       	subi	r18, 0x58	; 88
     2f4:	3e 4f       	sbci	r19, 0xFE	; 254
     2f6:	79 01       	movw	r14, r18
	//-----------------------------------------
	// search device table for device name
	//-----------------------------------------
	for(i=last_dev -1;(i > -1) && strncmp(iocb->dev_name,ht->dev_name,l) ;--i,--ht);
     2f8:	01 50       	subi	r16, 0x01	; 1
     2fa:	11 09       	sbc	r17, r1
     2fc:	5a f4       	brpl	.+22     	; 0x314 <CioOpen+0xc4>
     2fe:	5d c0       	rjmp	.+186    	; 0x3ba <CioOpen+0x16a>
     300:	01 50       	subi	r16, 0x01	; 1
     302:	11 09       	sbc	r17, r1
     304:	34 e0       	ldi	r19, 0x04	; 4
     306:	e3 1a       	sub	r14, r19
     308:	f1 08       	sbc	r15, r1
     30a:	0f 3f       	cpi	r16, 0xFF	; 255
     30c:	8f ef       	ldi	r24, 0xFF	; 255
     30e:	18 07       	cpc	r17, r24
     310:	09 f4       	brne	.+2      	; 0x314 <CioOpen+0xc4>
     312:	53 c0       	rjmp	.+166    	; 0x3ba <CioOpen+0x16a>
     314:	f7 01       	movw	r30, r14
     316:	60 81       	ld	r22, Z
     318:	71 81       	ldd	r23, Z+1	; 0x01
     31a:	a5 01       	movw	r20, r10
     31c:	c6 01       	movw	r24, r12
     31e:	0e 94 3b 11 	call	0x2276	; 0x2276 <strncmp>
     322:	89 2b       	or	r24, r25
     324:	69 f7       	brne	.-38     	; 0x300 <CioOpen+0xb0>
	if(i >= 0)
     326:	11 23       	and	r17, r17
     328:	7c f1       	brlt	.+94     	; 0x388 <CioOpen+0x138>
	{
		/*
		** ok, now we need to locate the unit number
		*/
		n = iocb->dev_name + l;
     32a:	ca 0c       	add	r12, r10
     32c:	db 1c       	adc	r13, r11
		if((l = strcspn(n,":")) == 0)
     32e:	62 e4       	ldi	r22, 0x42	; 66
     330:	71 e0       	ldi	r23, 0x01	; 1
     332:	c6 01       	movw	r24, r12
     334:	0e 94 2c 11 	call	0x2258	; 0x2258 <strcspn>
     338:	7c 01       	movw	r14, r24
     33a:	00 97       	sbiw	r24, 0x00	; 0
     33c:	31 f4       	brne	.+12     	; 0x34a <CioOpen+0xfa>
		{
			//------------------------
			// Unit number not found
			//------------------------
			iocb->devnum = 1;		/*	default unit number	*/
     33e:	81 e0       	ldi	r24, 0x01	; 1
     340:	90 e0       	ldi	r25, 0x00	; 0
     342:	f4 01       	movw	r30, r8
     344:	93 83       	std	Z+3, r25	; 0x03
     346:	82 83       	std	Z+2, r24	; 0x02
     348:	23 c0       	rjmp	.+70     	; 0x390 <CioOpen+0x140>
		else
		{
			//------------------------
			// copy unit number
			//------------------------
			strncpy(un,n,l);
     34a:	ac 01       	movw	r20, r24
     34c:	b6 01       	movw	r22, r12
     34e:	ce 01       	movw	r24, r28
     350:	01 96       	adiw	r24, 0x01	; 1
     352:	0e 94 49 11 	call	0x2292	; 0x2292 <strncpy>
			un[l] = '\0';
     356:	e1 e0       	ldi	r30, 0x01	; 1
     358:	f0 e0       	ldi	r31, 0x00	; 0
     35a:	ec 0f       	add	r30, r28
     35c:	fd 1f       	adc	r31, r29
     35e:	ee 0d       	add	r30, r14
     360:	ff 1d       	adc	r31, r15
     362:	10 82       	st	Z, r1
			/*	convert unit number	*/
			iocb->devnum = atoi(un);
     364:	ce 01       	movw	r24, r28
     366:	01 96       	adiw	r24, 0x01	; 1
     368:	0e 94 08 11 	call	0x2210	; 0x2210 <atoi>
     36c:	f4 01       	movw	r30, r8
     36e:	93 83       	std	Z+3, r25	; 0x03
     370:	82 83       	std	Z+2, r24	; 0x02
     372:	0e c0       	rjmp	.+28     	; 0x390 <CioOpen+0x140>
		iocb->mode = mode;
		//search device table for this device
		if(( iocb->ichid = dev_search(iocb)) < 0)
		{
			//the device was not found
			FreeIOCB(iocb);	//free up IOCB again
     374:	c4 01       	movw	r24, r8
     376:	21 df       	rcall	.-446    	; 0x1ba <FreeIOCB>
			iocb = NULL;
     378:	81 2c       	mov	r8, r1
     37a:	91 2c       	mov	r9, r1
		}
		// call open from device table
		else if(((*htabs[iocb->ichid].HtabsEntry->openv)(iocb)) < 0)
		{
			//open failed, free IOCB
			FreeIOCB(iocb);	//free up IOCB again
     37c:	22 c0       	rjmp	.+68     	; 0x3c2 <CioOpen+0x172>
     37e:	c4 01       	movw	r24, r8
     380:	1c df       	rcall	.-456    	; 0x1ba <FreeIOCB>
			iocb = NULL;
     382:	81 2c       	mov	r8, r1
     384:	91 2c       	mov	r9, r1
     386:	1d c0       	rjmp	.+58     	; 0x3c2 <CioOpen+0x172>
	{
		//set up IOCB with device name and mode
		iocb->dev_name = devname;
		iocb->mode = mode;
		//search device table for this device
		if(( iocb->ichid = dev_search(iocb)) < 0)
     388:	f4 01       	movw	r30, r8
     38a:	11 83       	std	Z+1, r17	; 0x01
     38c:	00 83       	st	Z, r16
     38e:	f2 cf       	rjmp	.-28     	; 0x374 <CioOpen+0x124>
     390:	f4 01       	movw	r30, r8
     392:	11 83       	std	Z+1, r17	; 0x01
     394:	00 83       	st	Z, r16
			//the device was not found
			FreeIOCB(iocb);	//free up IOCB again
			iocb = NULL;
		}
		// call open from device table
		else if(((*htabs[iocb->ichid].HtabsEntry->openv)(iocb)) < 0)
     396:	00 0f       	add	r16, r16
     398:	11 1f       	adc	r17, r17
     39a:	00 0f       	add	r16, r16
     39c:	11 1f       	adc	r17, r17
     39e:	f8 01       	movw	r30, r16
     3a0:	e4 55       	subi	r30, 0x54	; 84
     3a2:	fe 4f       	sbci	r31, 0xFE	; 254
     3a4:	02 80       	ldd	r0, Z+2	; 0x02
     3a6:	f3 81       	ldd	r31, Z+3	; 0x03
     3a8:	e0 2d       	mov	r30, r0
     3aa:	01 90       	ld	r0, Z+
     3ac:	f0 81       	ld	r31, Z
     3ae:	e0 2d       	mov	r30, r0
     3b0:	c4 01       	movw	r24, r8
     3b2:	09 95       	icall
     3b4:	99 23       	and	r25, r25
     3b6:	2c f4       	brge	.+10     	; 0x3c2 <CioOpen+0x172>
     3b8:	e2 cf       	rjmp	.-60     	; 0x37e <CioOpen+0x12e>
	{
		//set up IOCB with device name and mode
		iocb->dev_name = devname;
		iocb->mode = mode;
		//search device table for this device
		if(( iocb->ichid = dev_search(iocb)) < 0)
     3ba:	f4 01       	movw	r30, r8
     3bc:	11 83       	std	Z+1, r17	; 0x01
     3be:	00 83       	st	Z, r16
     3c0:	d9 cf       	rjmp	.-78     	; 0x374 <CioOpen+0x124>
			FreeIOCB(iocb);	//free up IOCB again
			iocb = NULL;
		}
	}
	return(iocb);
}
     3c2:	c4 01       	movw	r24, r8
     3c4:	0f 90       	pop	r0
     3c6:	0f 90       	pop	r0
     3c8:	0f 90       	pop	r0
     3ca:	0f 90       	pop	r0
     3cc:	df 91       	pop	r29
     3ce:	cf 91       	pop	r28
     3d0:	1f 91       	pop	r17
     3d2:	0f 91       	pop	r16
     3d4:	ff 90       	pop	r15
     3d6:	ef 90       	pop	r14
     3d8:	df 90       	pop	r13
     3da:	cf 90       	pop	r12
     3dc:	bf 90       	pop	r11
     3de:	af 90       	pop	r10
     3e0:	9f 90       	pop	r9
     3e2:	8f 90       	pop	r8
     3e4:	08 95       	ret

000003e6 <CioGetC>:

int CioGetC(IOCB *I, int to)
{
	//check to see if device was
	//opened for reading
	if((I->mode & FCNTL_RDONLY) == 0)
     3e6:	dc 01       	movw	r26, r24
     3e8:	16 96       	adiw	r26, 0x06	; 6
     3ea:	2c 91       	ld	r18, X
     3ec:	16 97       	sbiw	r26, 0x06	; 6
     3ee:	20 ff       	sbrs	r18, 0
     3f0:	10 c0       	rjmp	.+32     	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
		return(CIO_WRONLY);	//return error
	//
	// look up function in device table
	// and call get method for device
	//
	return ( (*htabs[I->ichid].HtabsEntry->getv)(I,to)  );
     3f2:	ed 91       	ld	r30, X+
     3f4:	fc 91       	ld	r31, X
     3f6:	ee 0f       	add	r30, r30
     3f8:	ff 1f       	adc	r31, r31
     3fa:	ee 0f       	add	r30, r30
     3fc:	ff 1f       	adc	r31, r31
     3fe:	e4 55       	subi	r30, 0x54	; 84
     400:	fe 4f       	sbci	r31, 0xFE	; 254
     402:	02 80       	ldd	r0, Z+2	; 0x02
     404:	f3 81       	ldd	r31, Z+3	; 0x03
     406:	e0 2d       	mov	r30, r0
     408:	04 80       	ldd	r0, Z+4	; 0x04
     40a:	f5 81       	ldd	r31, Z+5	; 0x05
     40c:	e0 2d       	mov	r30, r0
     40e:	09 95       	icall
     410:	08 95       	ret
int CioGetC(IOCB *I, int to)
{
	//check to see if device was
	//opened for reading
	if((I->mode & FCNTL_RDONLY) == 0)
		return(CIO_WRONLY);	//return error
     412:	8e eb       	ldi	r24, 0xBE	; 190
     414:	9f ef       	ldi	r25, 0xFF	; 255
	//
	// look up function in device table
	// and call get method for device
	//
	return ( (*htabs[I->ichid].HtabsEntry->getv)(I,to)  );
}
     416:	08 95       	ret

00000418 <CioPutC>:
		or a device dependent value
*****************************************************/
int CioPutC(IOCB *I,int c)
{
	//check to see if device was opened in write mode
	if((I->mode & FCNTL_WRONLY) == 0)
     418:	dc 01       	movw	r26, r24
     41a:	16 96       	adiw	r26, 0x06	; 6
     41c:	2c 91       	ld	r18, X
     41e:	16 97       	sbiw	r26, 0x06	; 6
     420:	21 ff       	sbrs	r18, 1
     422:	10 c0       	rjmp	.+32     	; 0x444 <CioPutC+0x2c>
		return(CIO_RDONLY);	/*	read only error	*/
	//
	//look up function and then call
	//put method from device table
	//
	return( (*htabs[I->ichid].HtabsEntry->putv)(I,c));
     424:	ed 91       	ld	r30, X+
     426:	fc 91       	ld	r31, X
     428:	ee 0f       	add	r30, r30
     42a:	ff 1f       	adc	r31, r31
     42c:	ee 0f       	add	r30, r30
     42e:	ff 1f       	adc	r31, r31
     430:	e4 55       	subi	r30, 0x54	; 84
     432:	fe 4f       	sbci	r31, 0xFE	; 254
     434:	02 80       	ldd	r0, Z+2	; 0x02
     436:	f3 81       	ldd	r31, Z+3	; 0x03
     438:	e0 2d       	mov	r30, r0
     43a:	00 84       	ldd	r0, Z+8	; 0x08
     43c:	f1 85       	ldd	r31, Z+9	; 0x09
     43e:	e0 2d       	mov	r30, r0
     440:	09 95       	icall
     442:	08 95       	ret
*****************************************************/
int CioPutC(IOCB *I,int c)
{
	//check to see if device was opened in write mode
	if((I->mode & FCNTL_WRONLY) == 0)
		return(CIO_RDONLY);	/*	read only error	*/
     444:	8d eb       	ldi	r24, 0xBD	; 189
     446:	9f ef       	ldi	r25, 0xFF	; 255
	//
	//look up function and then call
	//put method from device table
	//
	return( (*htabs[I->ichid].HtabsEntry->putv)(I,c));
}
     448:	08 95       	ret

0000044a <CioXIO>:
		depends on the device driver
**********************************************/

int CioXIO(IOCB *I,int cmd,void *d)
{
	return((*htabs[I->ichid].HtabsEntry->specv)(I,cmd,d));
     44a:	dc 01       	movw	r26, r24
     44c:	ed 91       	ld	r30, X+
     44e:	fc 91       	ld	r31, X
     450:	ee 0f       	add	r30, r30
     452:	ff 1f       	adc	r31, r31
     454:	ee 0f       	add	r30, r30
     456:	ff 1f       	adc	r31, r31
     458:	e4 55       	subi	r30, 0x54	; 84
     45a:	fe 4f       	sbci	r31, 0xFE	; 254
     45c:	02 80       	ldd	r0, Z+2	; 0x02
     45e:	f3 81       	ldd	r31, Z+3	; 0x03
     460:	e0 2d       	mov	r30, r0
     462:	06 84       	ldd	r0, Z+14	; 0x0e
     464:	f7 85       	ldd	r31, Z+15	; 0x0f
     466:	e0 2d       	mov	r30, r0
     468:	09 95       	icall
}
     46a:	08 95       	ret

0000046c <CreateSemaphore>:
**	n............name of semaphore (DEBUG only)                           **
**                                                                        **
***************************************************************************/

void CreateSemaphore(ECB *e,int InitCount,int Mode,char *n)
{
     46c:	cf 93       	push	r28
     46e:	df 93       	push	r29
     470:	ec 01       	movw	r28, r24
	char sr;

	e->EventCount = InitCount;	//set initial count
     472:	7b 87       	std	Y+11, r23	; 0x0b
     474:	6a 87       	std	Y+10, r22	; 0x0a
	e->SemaphoreMode = Mode;	//set mode
     476:	59 87       	std	Y+9, r21	; 0x09
     478:	48 87       	std	Y+8, r20	; 0x08
	strcpy(e->name,n);			//copy name in
     47a:	b9 01       	movw	r22, r18
     47c:	0c 96       	adiw	r24, 0x0c	; 12
     47e:	0e 94 25 11 	call	0x224a	; 0x224a <strcpy>
	e->task_h = 0;				//no tasks waiting
     482:	19 82       	std	Y+1, r1	; 0x01
     484:	18 82       	st	Y, r1
	e->task_t = 0;				//no tasks waiting
     486:	1b 82       	std	Y+3, r1	; 0x03
     488:	1a 82       	std	Y+2, r1	; 0x02
	//-------------------------------------------------------
	// if Mode==SEMAPHORE_MODE_TIMEOUT, then put this
	// semaphore into timeout list
	//-------------------------------------------------------
	// enter critical section, disable interrupts
	sr = Disable();
     48a:	28 de       	rcall	.-944    	; 0xdc <Disable>
	if(e->SemaphoreMode == SEMAPHORE_MODE_TIMEOUT)
     48c:	28 85       	ldd	r18, Y+8	; 0x08
     48e:	39 85       	ldd	r19, Y+9	; 0x09
     490:	21 30       	cpi	r18, 0x01	; 1
     492:	31 05       	cpc	r19, r1
     494:	c9 f4       	brne	.+50     	; 0x4c8 <CreateSemaphore+0x5c>
	{
		if(TimeoutList)	//is the list already started?
     496:	e0 91 fe 01 	lds	r30, 0x01FE	; 0x8001fe <TimeoutList>
     49a:	f0 91 ff 01 	lds	r31, 0x01FF	; 0x8001ff <TimeoutList+0x1>
     49e:	30 97       	sbiw	r30, 0x00	; 0
     4a0:	59 f0       	breq	.+22     	; 0x4b8 <CreateSemaphore+0x4c>
		{
			e->Tnext = TimeoutList;	//make current head next in line
     4a2:	fd 83       	std	Y+5, r31	; 0x05
     4a4:	ec 83       	std	Y+4, r30	; 0x04
			e->Tprev = 0;			//these is no previous entry
     4a6:	1f 82       	std	Y+7, r1	; 0x07
     4a8:	1e 82       	std	Y+6, r1	; 0x06
			TimeoutList->Tprev = e;	//this will be prev for next entry
     4aa:	d7 83       	std	Z+7, r29	; 0x07
     4ac:	c6 83       	std	Z+6, r28	; 0x06
			TimeoutList = e;			//this is now the new head of list
     4ae:	d0 93 ff 01 	sts	0x01FF, r29	; 0x8001ff <TimeoutList+0x1>
     4b2:	c0 93 fe 01 	sts	0x01FE, r28	; 0x8001fe <TimeoutList>
     4b6:	08 c0       	rjmp	.+16     	; 0x4c8 <CreateSemaphore+0x5c>
		}
		else			//no start list
		{
			TimeoutList = e;	//set timeout list
     4b8:	d0 93 ff 01 	sts	0x01FF, r29	; 0x8001ff <TimeoutList+0x1>
     4bc:	c0 93 fe 01 	sts	0x01FE, r28	; 0x8001fe <TimeoutList>
			e->Tnext = 0;
     4c0:	1d 82       	std	Y+5, r1	; 0x05
     4c2:	1c 82       	std	Y+4, r1	; 0x04
			e->Tprev = 0;
     4c4:	1f 82       	std	Y+7, r1	; 0x07
		}
	}
	//exit critical section, enable IRQ
	Enable(sr);	//restore interrupts
     4c6:	1e 82       	std	Y+6, r1	; 0x06
     4c8:	0d de       	rcall	.-998    	; 0xe4 <Enable>
}
     4ca:	df 91       	pop	r29
     4cc:	cf 91       	pop	r28
     4ce:	08 95       	ret

000004d0 <NewSemaphore>:
	return value:
		pointer to an Event Control block on success
		OR NULL on fail
************************************************/
ECB *NewSemaphore(int InitCount,int Mode,char *name)
{
     4d0:	cf 92       	push	r12
     4d2:	df 92       	push	r13
     4d4:	ef 92       	push	r14
     4d6:	ff 92       	push	r15
     4d8:	0f 93       	push	r16
     4da:	1f 93       	push	r17
     4dc:	cf 93       	push	r28
     4de:	df 93       	push	r29
     4e0:	8c 01       	movw	r16, r24
     4e2:	7b 01       	movw	r14, r22
     4e4:	6a 01       	movw	r12, r20
*********************************************/
static ECB *AllocECB(void)
{
	ECB *rv;
	// enter critical section disable IRQ
	char sr = Disable();
     4e6:	fa dd       	rcall	.-1036   	; 0xdc <Disable>
	if (ECBPool)	//check the pool
     4e8:	c0 91 9e 01 	lds	r28, 0x019E	; 0x80019e <ECBPool>
     4ec:	d0 91 9f 01 	lds	r29, 0x019F	; 0x80019f <ECBPool+0x1>
     4f0:	20 97       	sbiw	r28, 0x00	; 0
     4f2:	41 f0       	breq	.+16     	; 0x504 <NewSemaphore+0x34>
	{
		//get first ECB in pool
		rv = ECBPool;
		//new head of pool
		ECBPool = ECBPool->Tnext;
     4f4:	2c 81       	ldd	r18, Y+4	; 0x04
     4f6:	3d 81       	ldd	r19, Y+5	; 0x05
     4f8:	30 93 9f 01 	sts	0x019F, r19	; 0x80019f <ECBPool+0x1>
     4fc:	20 93 9e 01 	sts	0x019E, r18	; 0x80019e <ECBPool>
		//exit critical section
		Enable(sr);
     500:	f1 dd       	rcall	.-1054   	; 0xe4 <Enable>
	}
	else
	{
		//exit critical section
		Enable(sr);
     502:	07 c0       	rjmp	.+14     	; 0x512 <NewSemaphore+0x42>
		//allocate ECB from heap
		rv = (ECB *)malloc(sizeof(ECB));	//or allocate from the heap
     504:	ef dd       	rcall	.-1058   	; 0xe4 <Enable>
     506:	80 e2       	ldi	r24, 0x20	; 32
     508:	90 e0       	ldi	r25, 0x00	; 0
     50a:	a7 d4       	rcall	.+2382   	; 0xe5a <malloc>
     50c:	ec 01       	movw	r28, r24
************************************************/
ECB *NewSemaphore(int InitCount,int Mode,char *name)
{
	ECB *r;

	if((r = AllocECB()) != NULL)
     50e:	89 2b       	or	r24, r25
     510:	29 f0       	breq	.+10     	; 0x51c <NewSemaphore+0x4c>
		CreateSemaphore(r,InitCount,Mode,name);
     512:	96 01       	movw	r18, r12
     514:	a7 01       	movw	r20, r14
     516:	b8 01       	movw	r22, r16
     518:	ce 01       	movw	r24, r28
     51a:	a8 df       	rcall	.-176    	; 0x46c <CreateSemaphore>
	return r;
}
     51c:	ce 01       	movw	r24, r28
     51e:	df 91       	pop	r29
     520:	cf 91       	pop	r28
     522:	1f 91       	pop	r17
     524:	0f 91       	pop	r16
     526:	ff 90       	pop	r15
     528:	ef 90       	pop	r14
     52a:	df 90       	pop	r13
     52c:	cf 90       	pop	r12
     52e:	08 95       	ret

00000530 <CreateTask>:
**	arg.............argument to be passed to function...it chan either be 
**  a value, or a pointer to some data
***************************************************************************************/

void CreateTask(TCB *t, void (*task)(void *), int stacksize,int priority,char *name,void *arg)
{
     530:	6f 92       	push	r6
     532:	7f 92       	push	r7
     534:	8f 92       	push	r8
     536:	9f 92       	push	r9
     538:	af 92       	push	r10
     53a:	bf 92       	push	r11
     53c:	cf 92       	push	r12
     53e:	df 92       	push	r13
     540:	ef 92       	push	r14
     542:	ff 92       	push	r15
     544:	0f 93       	push	r16
     546:	1f 93       	push	r17
     548:	cf 93       	push	r28
     54a:	df 93       	push	r29
     54c:	6c 01       	movw	r12, r24
     54e:	66 2e       	mov	r6, r22
     550:	77 2e       	mov	r7, r23
     552:	ea 01       	movw	r28, r20
     554:	49 01       	movw	r8, r18
		pointer to block of ram to use as stack on success
		OR NULL on fail
*********************************************************/
static void *AllocStack(size_t len)
{
	return malloc(len);
     556:	ca 01       	movw	r24, r20
     558:	80 d4       	rcall	.+2304   	; 0xe5a <malloc>
     55a:	5c 01       	movw	r10, r24

	stack = AllocStack(stacksize);
	//set all stack locations with an
	//arbitrary value to make DEBUG
	// much easier.
	for(i=0;i<stacksize;++i) stack[i] = 0xcd;
     55c:	1c 16       	cp	r1, r28
     55e:	1d 06       	cpc	r1, r29
     560:	4c f4       	brge	.+18     	; 0x574 <CreateTask+0x44>
     562:	fc 01       	movw	r30, r24
     564:	9c 01       	movw	r18, r24
     566:	2c 0f       	add	r18, r28
     568:	3d 1f       	adc	r19, r29
     56a:	8d ec       	ldi	r24, 0xCD	; 205
     56c:	81 93       	st	Z+, r24
     56e:	e2 17       	cp	r30, r18
     570:	f3 07       	cpc	r31, r19
	//enter critical section, Disable IRQ
	sr = Disable();
     572:	e1 f7       	brne	.-8      	; 0x56c <CreateTask+0x3c>
     574:	b3 dd       	rcall	.-1178   	; 0xdc <Disable>
	if(t)
     576:	c1 14       	cp	r12, r1
     578:	d1 04       	cpc	r13, r1
     57a:	09 f4       	brne	.+2      	; 0x57e <CreateTask+0x4e>
     57c:	8c c0       	rjmp	.+280    	; 0x696 <CreateTask+0x166>
	{
		//initialize TCB member variables
		t->TcbSwaps = 0;
     57e:	d6 01       	movw	r26, r12
     580:	1f 96       	adiw	r26, 0x0f	; 15
     582:	1c 92       	st	X, r1
     584:	1e 92       	st	-X, r1
     586:	1e 97       	sbiw	r26, 0x0e	; 14
		t->stacksize = stacksize;
     588:	15 96       	adiw	r26, 0x05	; 5
     58a:	dc 93       	st	X, r29
     58c:	ce 93       	st	-X, r28
     58e:	14 97       	sbiw	r26, 0x04	; 4
		t->priority = priority;
     590:	17 96       	adiw	r26, 0x07	; 7
     592:	9c 92       	st	X, r9
     594:	8e 92       	st	-X, r8
     596:	16 97       	sbiw	r26, 0x06	; 6
		t->TimeStamp = 0;
     598:	1d 96       	adiw	r26, 0x0d	; 13
     59a:	1c 92       	st	X, r1
     59c:	1e 92       	st	-X, r1
     59e:	1c 97       	sbiw	r26, 0x0c	; 12
		t->name = name;
     5a0:	53 96       	adiw	r26, 0x13	; 19
     5a2:	1c 93       	st	X, r17
     5a4:	0e 93       	st	-X, r16
     5a6:	52 97       	sbiw	r26, 0x12	; 18
		t->stacktop = stack;
     5a8:	13 96       	adiw	r26, 0x03	; 3
     5aa:	bc 92       	st	X, r11
     5ac:	ae 92       	st	-X, r10
     5ae:	12 97       	sbiw	r26, 0x02	; 2
		t->next = (TCB *)0;
     5b0:	55 96       	adiw	r26, 0x15	; 21
     5b2:	1c 92       	st	X, r1
     5b4:	1e 92       	st	-X, r1
     5b6:	54 97       	sbiw	r26, 0x14	; 20
		t->list = (TCB *)0;
     5b8:	57 96       	adiw	r26, 0x17	; 23
     5ba:	1c 92       	st	X, r1
     5bc:	1e 92       	st	-X, r1
     5be:	56 97       	sbiw	r26, 0x16	; 22
		stk = stack + stacksize-1;
     5c0:	fe 01       	movw	r30, r28
     5c2:	31 97       	sbiw	r30, 0x01	; 1
     5c4:	ea 0d       	add	r30, r10
     5c6:	fb 1d       	adc	r31, r11
		//Initialize the stack
		*stk-- = (char)LO( (unsigned)task);/*	return address	*/
     5c8:	60 82       	st	Z, r6
		*stk-- = (char)HI( (unsigned)task);
     5ca:	df 01       	movw	r26, r30
     5cc:	11 97       	sbiw	r26, 0x01	; 1
     5ce:	7c 92       	st	X, r7
		*stk-- = 31;		/*	r31 = 0	*/
     5d0:	11 97       	sbiw	r26, 0x01	; 1
     5d2:	9f e1       	ldi	r25, 0x1F	; 31
     5d4:	9c 93       	st	X, r25
		*stk-- = 0x80;	/*	SREG Interrupts enabled	*/
     5d6:	11 97       	sbiw	r26, 0x01	; 1
     5d8:	90 e8       	ldi	r25, 0x80	; 128
     5da:	9c 93       	st	X, r25
		*stk-- = 30;		/*	r30 = 0	*/
     5dc:	11 97       	sbiw	r26, 0x01	; 1
     5de:	9e e1       	ldi	r25, 0x1E	; 30
     5e0:	9c 93       	st	X, r25
		*stk-- = 29;		/*	r29 = 0	*/
     5e2:	11 97       	sbiw	r26, 0x01	; 1
     5e4:	9d e1       	ldi	r25, 0x1D	; 29
     5e6:	9c 93       	st	X, r25
		*stk-- = 28;		/*	r28 = 0	*/
     5e8:	11 97       	sbiw	r26, 0x01	; 1
     5ea:	9c e1       	ldi	r25, 0x1C	; 28
     5ec:	9c 93       	st	X, r25
		*stk-- = 27;		/*	r27 = 0	*/
     5ee:	11 97       	sbiw	r26, 0x01	; 1
     5f0:	9b e1       	ldi	r25, 0x1B	; 27
     5f2:	9c 93       	st	X, r25
		*stk-- = 26;		/*	r26 = 0	*/
     5f4:	11 97       	sbiw	r26, 0x01	; 1
     5f6:	9a e1       	ldi	r25, 0x1A	; 26
     5f8:	9c 93       	st	X, r25
		*stk-- = (char)HI( (unsigned)arg);		/*	r25 = 0	*/
     5fa:	11 97       	sbiw	r26, 0x01	; 1
     5fc:	fc 92       	st	X, r15
		*stk-- = (char)LO( (unsigned)arg);		/*	r24 = 0	*/
     5fe:	11 97       	sbiw	r26, 0x01	; 1
     600:	ec 92       	st	X, r14
		*stk-- = 23;		/*	r23 = 0	*/
     602:	11 97       	sbiw	r26, 0x01	; 1
     604:	97 e1       	ldi	r25, 0x17	; 23
     606:	9c 93       	st	X, r25
		*stk-- = 22;		/*	r22 = 0	*/
     608:	11 97       	sbiw	r26, 0x01	; 1
     60a:	96 e1       	ldi	r25, 0x16	; 22
     60c:	9c 93       	st	X, r25
		*stk-- = 21;		/*	r21 = 0	*/
     60e:	11 97       	sbiw	r26, 0x01	; 1
     610:	95 e1       	ldi	r25, 0x15	; 21
     612:	9c 93       	st	X, r25
		*stk-- = 20;		/*	r20 = 0	*/
     614:	11 97       	sbiw	r26, 0x01	; 1
     616:	94 e1       	ldi	r25, 0x14	; 20
     618:	9c 93       	st	X, r25
		*stk-- = 19;		/*	r19 	*/
     61a:	11 97       	sbiw	r26, 0x01	; 1
     61c:	93 e1       	ldi	r25, 0x13	; 19
     61e:	9c 93       	st	X, r25
		*stk-- = 18;		/*	r18 	*/
     620:	11 97       	sbiw	r26, 0x01	; 1
     622:	92 e1       	ldi	r25, 0x12	; 18
     624:	9c 93       	st	X, r25
		*stk-- = 17;		/*	r17 	*/
     626:	11 97       	sbiw	r26, 0x01	; 1
     628:	91 e1       	ldi	r25, 0x11	; 17
     62a:	9c 93       	st	X, r25
		*stk-- = 16;		/*	r16 	*/
     62c:	11 97       	sbiw	r26, 0x01	; 1
     62e:	90 e1       	ldi	r25, 0x10	; 16
     630:	9c 93       	st	X, r25
		*stk-- = 15;		/*	r15 	*/
     632:	11 97       	sbiw	r26, 0x01	; 1
     634:	9f e0       	ldi	r25, 0x0F	; 15
     636:	9c 93       	st	X, r25
		*stk-- = 14;		/*	r14 	*/
     638:	11 97       	sbiw	r26, 0x01	; 1
     63a:	9e e0       	ldi	r25, 0x0E	; 14
     63c:	9c 93       	st	X, r25
		*stk-- = 13;		/*	r13 	*/
     63e:	11 97       	sbiw	r26, 0x01	; 1
     640:	9d e0       	ldi	r25, 0x0D	; 13
     642:	9c 93       	st	X, r25
		*stk-- = 12;		/*	r12 	*/
     644:	11 97       	sbiw	r26, 0x01	; 1
     646:	9c e0       	ldi	r25, 0x0C	; 12
     648:	9c 93       	st	X, r25
		*stk-- = 11;		/*	r11 	*/
     64a:	11 97       	sbiw	r26, 0x01	; 1
     64c:	9b e0       	ldi	r25, 0x0B	; 11
     64e:	9c 93       	st	X, r25
		*stk-- = 10;		/*	r10 	*/
     650:	11 97       	sbiw	r26, 0x01	; 1
     652:	9a e0       	ldi	r25, 0x0A	; 10
     654:	9c 93       	st	X, r25
		*stk-- = 9;			/*	r9 		*/
     656:	11 97       	sbiw	r26, 0x01	; 1
     658:	99 e0       	ldi	r25, 0x09	; 9
     65a:	9c 93       	st	X, r25
		*stk-- = 8;			/*	r8 		*/
     65c:	11 97       	sbiw	r26, 0x01	; 1
     65e:	98 e0       	ldi	r25, 0x08	; 8
     660:	9c 93       	st	X, r25
		*stk-- = 7;			/*	r7 		*/
     662:	11 97       	sbiw	r26, 0x01	; 1
     664:	97 e0       	ldi	r25, 0x07	; 7
     666:	9c 93       	st	X, r25
		*stk-- = 6;			/*	r6 		*/
     668:	11 97       	sbiw	r26, 0x01	; 1
     66a:	96 e0       	ldi	r25, 0x06	; 6
     66c:	9c 93       	st	X, r25
		*stk-- = 5;			/*	r5 		*/
     66e:	11 97       	sbiw	r26, 0x01	; 1
     670:	95 e0       	ldi	r25, 0x05	; 5
     672:	9c 93       	st	X, r25
		*stk-- = 4;			/*	r4 		*/
     674:	11 97       	sbiw	r26, 0x01	; 1
     676:	94 e0       	ldi	r25, 0x04	; 4
     678:	9c 93       	st	X, r25
		*stk-- = 3;			/*	r3 		*/
     67a:	11 97       	sbiw	r26, 0x01	; 1
     67c:	93 e0       	ldi	r25, 0x03	; 3
     67e:	9c 93       	st	X, r25
		*stk-- = 2;			/*	r2 		*/
     680:	11 97       	sbiw	r26, 0x01	; 1
     682:	92 e0       	ldi	r25, 0x02	; 2
     684:	9c 93       	st	X, r25
		*stk-- = 0;			/*	r1 must be ZERO 	*/
     686:	11 97       	sbiw	r26, 0x01	; 1
     688:	1c 92       	st	X, r1
		*stk-- = 0;			/*	r0 		*/
     68a:	11 97       	sbiw	r26, 0x01	; 1
     68c:	1c 92       	st	X, r1
     68e:	b3 97       	sbiw	r30, 0x23	; 35
		t->stack = stk;
     690:	d6 01       	movw	r26, r12
     692:	ed 93       	st	X+, r30
	}
	//exit critical section, enable IRQ
	Enable(sr);
     694:	fc 93       	st	X, r31
     696:	26 dd       	rcall	.-1460   	; 0xe4 <Enable>
}
     698:	df 91       	pop	r29
     69a:	cf 91       	pop	r28
     69c:	1f 91       	pop	r17
     69e:	0f 91       	pop	r16
     6a0:	ff 90       	pop	r15
     6a2:	ef 90       	pop	r14
     6a4:	df 90       	pop	r13
     6a6:	cf 90       	pop	r12
     6a8:	bf 90       	pop	r11
     6aa:	af 90       	pop	r10
     6ac:	9f 90       	pop	r9
     6ae:	8f 90       	pop	r8
     6b0:	7f 90       	pop	r7
     6b2:	6f 90       	pop	r6
     6b4:	08 95       	ret

000006b6 <DoSwap>:
		This function does a context swap
*******************************************/
void DoSwap(void) __attribute__ ( ( naked ) );
void DoSwap(void)
{
	SAVE_CONTEXT();		//save the context of the current task
     6b6:	ff 93       	push	r31
     6b8:	ff b7       	in	r31, 0x3f	; 63
     6ba:	f8 94       	cli
     6bc:	ff 93       	push	r31
     6be:	ef 93       	push	r30
     6c0:	df 93       	push	r29
     6c2:	cf 93       	push	r28
     6c4:	bf 93       	push	r27
     6c6:	af 93       	push	r26
     6c8:	9f 93       	push	r25
     6ca:	8f 93       	push	r24
     6cc:	7f 93       	push	r23
     6ce:	6f 93       	push	r22
     6d0:	5f 93       	push	r21
     6d2:	4f 93       	push	r20
     6d4:	3f 93       	push	r19
     6d6:	2f 93       	push	r18
     6d8:	1f 93       	push	r17
     6da:	0f 93       	push	r16
     6dc:	ff 92       	push	r15
     6de:	ef 92       	push	r14
     6e0:	df 92       	push	r13
     6e2:	cf 92       	push	r12
     6e4:	bf 92       	push	r11
     6e6:	af 92       	push	r10
     6e8:	9f 92       	push	r9
     6ea:	8f 92       	push	r8
     6ec:	7f 92       	push	r7
     6ee:	6f 92       	push	r6
     6f0:	5f 92       	push	r5
     6f2:	4f 92       	push	r4
     6f4:	3f 92       	push	r3
     6f6:	2f 92       	push	r2
     6f8:	1f 92       	push	r1
     6fa:	11 24       	eor	r1, r1
     6fc:	0f 92       	push	r0
     6fe:	a0 91 0e 02 	lds	r26, 0x020E	; 0x80020e <CurrentTask>
     702:	b0 91 0f 02 	lds	r27, 0x020F	; 0x80020f <CurrentTask+0x1>
     706:	0d b6       	in	r0, 0x3d	; 61
     708:	0d 92       	st	X+, r0
     70a:	0e b6       	in	r0, 0x3e	; 62
     70c:	0d 92       	st	X+, r0
	CurrentTask = NextTask;	//set current task to next task
     70e:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <NextTask>
     712:	90 91 0b 02 	lds	r25, 0x020B	; 0x80020b <NextTask+0x1>
     716:	90 93 0f 02 	sts	0x020F, r25	; 0x80020f <CurrentTask+0x1>
     71a:	80 93 0e 02 	sts	0x020E, r24	; 0x80020e <CurrentTask>
	RESTORE_CONTEXT();		//restore context of new task
     71e:	a0 91 0a 02 	lds	r26, 0x020A	; 0x80020a <NextTask>
     722:	b0 91 0b 02 	lds	r27, 0x020B	; 0x80020b <NextTask+0x1>
     726:	cd 91       	ld	r28, X+
     728:	cd bf       	out	0x3d, r28	; 61
     72a:	dd 91       	ld	r29, X+
     72c:	de bf       	out	0x3e, r29	; 62
     72e:	0f 90       	pop	r0
     730:	1f 90       	pop	r1
     732:	2f 90       	pop	r2
     734:	3f 90       	pop	r3
     736:	4f 90       	pop	r4
     738:	5f 90       	pop	r5
     73a:	6f 90       	pop	r6
     73c:	7f 90       	pop	r7
     73e:	8f 90       	pop	r8
     740:	9f 90       	pop	r9
     742:	af 90       	pop	r10
     744:	bf 90       	pop	r11
     746:	cf 90       	pop	r12
     748:	df 90       	pop	r13
     74a:	ef 90       	pop	r14
     74c:	ff 90       	pop	r15
     74e:	0f 91       	pop	r16
     750:	1f 91       	pop	r17
     752:	2f 91       	pop	r18
     754:	3f 91       	pop	r19
     756:	4f 91       	pop	r20
     758:	5f 91       	pop	r21
     75a:	6f 91       	pop	r22
     75c:	7f 91       	pop	r23
     75e:	8f 91       	pop	r24
     760:	9f 91       	pop	r25
     762:	af 91       	pop	r26
     764:	bf 91       	pop	r27
     766:	cf 91       	pop	r28
     768:	df 91       	pop	r29
     76a:	ef 91       	pop	r30
     76c:	ff 91       	pop	r31
     76e:	f7 fd       	sbrc	r31, 7
     770:	03 c0       	rjmp	.+6      	; 0x778 <irqen>
     772:	ff bf       	out	0x3f, r31	; 63
     774:	ff 91       	pop	r31
     776:	08 95       	ret

00000778 <irqen>:
     778:	ff 77       	andi	r31, 0x7F	; 127
     77a:	ff bf       	out	0x3f, r31	; 63
     77c:	ff 91       	pop	r31
     77e:	18 95       	reti

00000780 <ExitInterrupt>:
************************************************************************/

void ExitInterrupt(void)
{
	//decrement Interrupt level
	--InterruptCount;
     780:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <InterruptCount>
     784:	90 91 13 02 	lds	r25, 0x0213	; 0x800213 <InterruptCount+0x1>
     788:	01 97       	sbiw	r24, 0x01	; 1
     78a:	90 93 13 02 	sts	0x0213, r25	; 0x800213 <InterruptCount+0x1>
     78e:	80 93 12 02 	sts	0x0212, r24	; 0x800212 <InterruptCount>
	//don't swap if nested or
	//if multitasking is blocked
	if(!InterruptCount && !Blocking)	
     792:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <InterruptCount>
     796:	90 91 13 02 	lds	r25, 0x0213	; 0x800213 <InterruptCount+0x1>
     79a:	89 2b       	or	r24, r25
     79c:	09 f0       	breq	.+2      	; 0x7a0 <ExitInterrupt+0x20>
     79e:	66 c0       	rjmp	.+204    	; 0x86c <irqen+0x8>
     7a0:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <Blocking>
     7a4:	90 91 11 02 	lds	r25, 0x0211	; 0x800211 <Blocking+0x1>
     7a8:	89 2b       	or	r24, r25
     7aa:	09 f0       	breq	.+2      	; 0x7ae <ExitInterrupt+0x2e>
     7ac:	5f c0       	rjmp	.+190    	; 0x86c <irqen+0x8>
	{
		//Update the time stamp in the current task
		CurrentTask->TimeStamp = TStamp;
     7ae:	40 91 0e 02 	lds	r20, 0x020E	; 0x80020e <CurrentTask>
     7b2:	50 91 0f 02 	lds	r21, 0x020F	; 0x80020f <CurrentTask+0x1>
     7b6:	80 91 a0 02 	lds	r24, 0x02A0	; 0x8002a0 <TStamp>
     7ba:	90 91 a1 02 	lds	r25, 0x02A1	; 0x8002a1 <TStamp+0x1>
     7be:	fa 01       	movw	r30, r20
     7c0:	95 87       	std	Z+13, r25	; 0x0d
     7c2:	84 87       	std	Z+12, r24	; 0x0c
		//get the next task and put the current
		//task back into the priority queue
		Replace(&ActiveTasks,(void **)&NextTask,CurrentTask);
     7c4:	6a e0       	ldi	r22, 0x0A	; 10
     7c6:	72 e0       	ldi	r23, 0x02	; 2
     7c8:	80 e0       	ldi	r24, 0x00	; 0
     7ca:	92 e0       	ldi	r25, 0x02	; 2
     7cc:	e5 d7       	rcall	.+4042   	; 0x1798 <Replace>
		//check to see if we got the same task back
		if(NextTask != CurrentTask)
     7ce:	e0 91 0a 02 	lds	r30, 0x020A	; 0x80020a <NextTask>
     7d2:	f0 91 0b 02 	lds	r31, 0x020B	; 0x80020b <NextTask+0x1>
     7d6:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <CurrentTask>
     7da:	90 91 0f 02 	lds	r25, 0x020F	; 0x80020f <CurrentTask+0x1>
     7de:	e8 17       	cp	r30, r24
     7e0:	f9 07       	cpc	r31, r25
     7e2:	09 f4       	brne	.+2      	; 0x7e6 <ExitInterrupt+0x66>
     7e4:	43 c0       	rjmp	.+134    	; 0x86c <irqen+0x8>
		{
			//increment the swap counter
			NextTask->TcbSwaps++;
     7e6:	86 85       	ldd	r24, Z+14	; 0x0e
     7e8:	97 85       	ldd	r25, Z+15	; 0x0f
     7ea:	01 96       	adiw	r24, 0x01	; 1
     7ec:	97 87       	std	Z+15, r25	; 0x0f
     7ee:	86 87       	std	Z+14, r24	; 0x0e
			// the size of the stack
			// ignore return address on
			// stack to 
			// Exit Interrupt
			//-----------------------------
			asm volatile (
     7f0:	9e b7       	in	r25, 0x3e	; 62
     7f2:	8d b7       	in	r24, 0x3d	; 61
     7f4:	02 96       	adiw	r24, 0x02	; 2
     7f6:	a0 91 0e 02 	lds	r26, 0x020E	; 0x80020e <CurrentTask>
     7fa:	b0 91 0f 02 	lds	r27, 0x020F	; 0x80020f <CurrentTask+0x1>
     7fe:	8d 93       	st	X+, r24
     800:	9d 93       	st	X+, r25
			"lds	r26, CurrentTask		\n\t"	//get address of current task
			"lds	r27, CurrentTask + 1	\n\t"
			"st		x+, r24					\n\t"	//save stack pointer in TCB
			"st		x+, r25					\n\t"
			);
			CurrentTask = NextTask;	//update current task
     802:	f0 93 0f 02 	sts	0x020F, r31	; 0x80020f <CurrentTask+0x1>
     806:	e0 93 0e 02 	sts	0x020E, r30	; 0x80020e <CurrentTask>
			RESTORE_CONTEXT();		//restore next task context
     80a:	a0 91 0a 02 	lds	r26, 0x020A	; 0x80020a <NextTask>
     80e:	b0 91 0b 02 	lds	r27, 0x020B	; 0x80020b <NextTask+0x1>
     812:	cd 91       	ld	r28, X+
     814:	cd bf       	out	0x3d, r28	; 61
     816:	dd 91       	ld	r29, X+
     818:	de bf       	out	0x3e, r29	; 62
     81a:	0f 90       	pop	r0
     81c:	1f 90       	pop	r1
     81e:	2f 90       	pop	r2
     820:	3f 90       	pop	r3
     822:	4f 90       	pop	r4
     824:	5f 90       	pop	r5
     826:	6f 90       	pop	r6
     828:	7f 90       	pop	r7
     82a:	8f 90       	pop	r8
     82c:	9f 90       	pop	r9
     82e:	af 90       	pop	r10
     830:	bf 90       	pop	r11
     832:	cf 90       	pop	r12
     834:	df 90       	pop	r13
     836:	ef 90       	pop	r14
     838:	ff 90       	pop	r15
     83a:	0f 91       	pop	r16
     83c:	1f 91       	pop	r17
     83e:	2f 91       	pop	r18
     840:	3f 91       	pop	r19
     842:	4f 91       	pop	r20
     844:	5f 91       	pop	r21
     846:	6f 91       	pop	r22
     848:	7f 91       	pop	r23
     84a:	8f 91       	pop	r24
     84c:	9f 91       	pop	r25
     84e:	af 91       	pop	r26
     850:	bf 91       	pop	r27
     852:	cf 91       	pop	r28
     854:	df 91       	pop	r29
     856:	ef 91       	pop	r30
     858:	ff 91       	pop	r31
     85a:	f7 fd       	sbrc	r31, 7
     85c:	03 c0       	rjmp	.+6      	; 0x864 <irqen>
     85e:	ff bf       	out	0x3f, r31	; 63
     860:	ff 91       	pop	r31
     862:	08 95       	ret

00000864 <irqen>:
     864:	ff 77       	andi	r31, 0x7F	; 127
     866:	ff bf       	out	0x3f, r31	; 63
     868:	ff 91       	pop	r31
     86a:	18 95       	reti
     86c:	08 95       	ret

0000086e <EnterInterrupt>:
}

void EnterInterrupt(void)
{
	//Increment interrupt level
	++InterruptCount;
     86e:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <InterruptCount>
     872:	90 91 13 02 	lds	r25, 0x0213	; 0x800213 <InterruptCount+0x1>
     876:	01 96       	adiw	r24, 0x01	; 1
     878:	90 93 13 02 	sts	0x0213, r25	; 0x800213 <InterruptCount+0x1>
     87c:	80 93 12 02 	sts	0x0212, r24	; 0x800212 <InterruptCount>
     880:	08 95       	ret

00000882 <IdleTask>:
void IdleTask(void *arg)  __attribute__ ( ( noreturn ) );
void IdleTask(void *arg)
{
	while(1)
	{
		++IdleCount;
     882:	80 91 7a 02 	lds	r24, 0x027A	; 0x80027a <IdleCount>
     886:	90 91 7b 02 	lds	r25, 0x027B	; 0x80027b <IdleCount+0x1>
     88a:	01 96       	adiw	r24, 0x01	; 1
     88c:	90 93 7b 02 	sts	0x027B, r25	; 0x80027b <IdleCount+0x1>
     890:	80 93 7a 02 	sts	0x027A, r24	; 0x80027a <IdleCount>
     894:	f6 cf       	rjmp	.-20     	; 0x882 <IdleTask>

00000896 <MergeTask>:

TCB TMergTask;

void MergeTask(void *arg)  __attribute__ ( ( noreturn ) );
void MergeTask(void *arg)
{
     896:	cf 93       	push	r28
     898:	df 93       	push	r29
     89a:	cd b7       	in	r28, 0x3d	; 61
     89c:	de b7       	in	r29, 0x3e	; 62
     89e:	2c 97       	sbiw	r28, 0x0c	; 12
     8a0:	0f b6       	in	r0, 0x3f	; 63
     8a2:	f8 94       	cli
     8a4:	de bf       	out	0x3e, r29	; 62
     8a6:	0f be       	out	0x3f, r0	; 63
     8a8:	cd bf       	out	0x3d, r28	; 61
     8aa:	7c 01       	movw	r14, r24
	MSG *pMsg;
	char *buffer;
	int i,n;

	IOCB *pMidiOut = (IOCB *)arg;
	buffer = malloc(512);
     8ac:	80 e0       	ldi	r24, 0x00	; 0
     8ae:	92 e0       	ldi	r25, 0x02	; 2
     8b0:	d4 d2       	rcall	.+1448   	; 0xe5a <malloc>
	CreateBQ(&Queue,buffer,512);
     8b2:	40 e0       	ldi	r20, 0x00	; 0
     8b4:	52 e0       	ldi	r21, 0x02	; 2
     8b6:	bc 01       	movw	r22, r24
     8b8:	ce 01       	movw	r24, r28
     8ba:	01 96       	adiw	r24, 0x01	; 1
     8bc:	17 dc       	rcall	.-2002   	; 0xec <CreateBQ>

void MergeTask(void *arg)  __attribute__ ( ( noreturn ) );
void MergeTask(void *arg)
{
	BQ Queue;
	int State = STATE_IDLE;
     8be:	c1 2c       	mov	r12, r1
     8c0:	d1 2c       	mov	r13, r1
						for(i=0;i<n;++i)
							CioPutC(pMidiOut,BQget(&Queue));
						State = STATE_CH1;
					}
					else
						State = STATE_IDLE;
     8c2:	51 2c       	mov	r5, r1
     8c4:	41 2c       	mov	r4, r1
					if(Queue.nChar)
					{
						n = Queue.nChar;
						for(i=0;i<n;++i)
							CioPutC(pMidiOut,BQget(&Queue));
						State = STATE_CH1;
     8c6:	88 24       	eor	r8, r8
     8c8:	83 94       	inc	r8
     8ca:	91 2c       	mov	r9, r1
					if(Queue.nChar)
					{
						n = Queue.nChar;
						for(i=0;i<n;++i)
							CioPutC(pMidiOut,BQget(&Queue));
						State = STATE_CH2;
     8cc:	68 94       	set
     8ce:	77 24       	eor	r7, r7
     8d0:	71 f8       	bld	r7, 1
     8d2:	61 2c       	mov	r6, r1
	IOCB *pMidiOut = (IOCB *)arg;
	buffer = malloc(512);
	CreateBQ(&Queue,buffer,512);
	while(1)
	{
		pMsg = MqGet(pMergeMQ);
     8d4:	80 91 78 02 	lds	r24, 0x0278	; 0x800278 <pMergeMQ>
     8d8:	90 91 79 02 	lds	r25, 0x0279	; 0x800279 <pMergeMQ+0x1>
     8dc:	e3 d4       	rcall	.+2502   	; 0x12a4 <MqGet>
     8de:	8c 01       	movw	r16, r24
		switch(pMsg->MsgCmd)
     8e0:	dc 01       	movw	r26, r24
     8e2:	ed 91       	ld	r30, X+
     8e4:	fc 91       	ld	r31, X
     8e6:	e9 30       	cpi	r30, 0x09	; 9
     8e8:	f1 05       	cpc	r31, r1
     8ea:	08 f0       	brcs	.+2      	; 0x8ee <MergeTask+0x58>
     8ec:	be c0       	rjmp	.+380    	; 0xa6a <MergeTask+0x1d4>
     8ee:	ea 5b       	subi	r30, 0xBA	; 186
     8f0:	ff 4f       	sbci	r31, 0xFF	; 255
     8f2:	0c 94 dd 10 	jmp	0x21ba	; 0x21ba <__tablejump2__>
		{
			case MSGCMD_SYSEX1:
			case MSGCMD_CHAN1:
				switch(State)
     8f6:	b2 e0       	ldi	r27, 0x02	; 2
     8f8:	cb 16       	cp	r12, r27
     8fa:	d1 04       	cpc	r13, r1
     8fc:	2c f0       	brlt	.+10     	; 0x908 <MergeTask+0x72>
     8fe:	e2 e0       	ldi	r30, 0x02	; 2
     900:	ce 16       	cp	r12, r30
     902:	d1 04       	cpc	r13, r1
     904:	51 f0       	breq	.+20     	; 0x91a <MergeTask+0x84>
     906:	b1 c0       	rjmp	.+354    	; 0xa6a <MergeTask+0x1d4>
				{
					case STATE_IDLE:
					case STATE_CH1:
						State = STATE_CH1;
						CioPutC(pMidiOut,pMsg->Payload[0]);
     908:	dc 01       	movw	r26, r24
     90a:	1c 96       	adiw	r26, 0x0c	; 12
     90c:	6c 91       	ld	r22, X
     90e:	70 e0       	ldi	r23, 0x00	; 0
     910:	c7 01       	movw	r24, r14
     912:	82 dd       	rcall	.-1276   	; 0x418 <CioPutC>
			case MSGCMD_CHAN1:
				switch(State)
				{
					case STATE_IDLE:
					case STATE_CH1:
						State = STATE_CH1;
     914:	c8 2c       	mov	r12, r8
     916:	d9 2c       	mov	r13, r9
						CioPutC(pMidiOut,pMsg->Payload[0]);
						break;
     918:	a8 c0       	rjmp	.+336    	; 0xa6a <MergeTask+0x1d4>
					case STATE_CH2:
						BQPut(&Queue,pMsg->Payload[0]);
     91a:	fc 01       	movw	r30, r24
     91c:	64 85       	ldd	r22, Z+12	; 0x0c
     91e:	70 e0       	ldi	r23, 0x00	; 0
     920:	ce 01       	movw	r24, r28
     922:	01 96       	adiw	r24, 0x01	; 1
     924:	14 dc       	rcall	.-2008   	; 0x14e <BQPut>
						break;
     926:	a1 c0       	rjmp	.+322    	; 0xa6a <MergeTask+0x1d4>
				}
				break;
			case MSGCMD_SYSEX2:
			case MSGCMD_CHAN2:
				switch(State)
     928:	f1 e0       	ldi	r31, 0x01	; 1
     92a:	cf 16       	cp	r12, r31
     92c:	d1 04       	cpc	r13, r1
     92e:	49 f0       	breq	.+18     	; 0x942 <MergeTask+0xac>
     930:	82 e0       	ldi	r24, 0x02	; 2
     932:	c8 16       	cp	r12, r24
     934:	d1 04       	cpc	r13, r1
     936:	69 f0       	breq	.+26     	; 0x952 <MergeTask+0xbc>
     938:	c1 14       	cp	r12, r1
     93a:	d1 04       	cpc	r13, r1
     93c:	09 f0       	breq	.+2      	; 0x940 <MergeTask+0xaa>
     93e:	95 c0       	rjmp	.+298    	; 0xa6a <MergeTask+0x1d4>
     940:	08 c0       	rjmp	.+16     	; 0x952 <MergeTask+0xbc>
				{
					case STATE_CH1:
						BQPut(&Queue,pMsg->Payload[0]);
     942:	dc 01       	movw	r26, r24
     944:	1c 96       	adiw	r26, 0x0c	; 12
     946:	6c 91       	ld	r22, X
     948:	70 e0       	ldi	r23, 0x00	; 0
     94a:	ce 01       	movw	r24, r28
     94c:	01 96       	adiw	r24, 0x01	; 1
     94e:	ff db       	rcall	.-2050   	; 0x14e <BQPut>
						break;
     950:	8c c0       	rjmp	.+280    	; 0xa6a <MergeTask+0x1d4>
					case STATE_IDLE:
					case STATE_CH2:
						State = STATE_CH2;
						CioPutC(pMidiOut,pMsg->Payload[0]);
     952:	f8 01       	movw	r30, r16
     954:	64 85       	ldd	r22, Z+12	; 0x0c
     956:	70 e0       	ldi	r23, 0x00	; 0
     958:	c7 01       	movw	r24, r14
     95a:	5e dd       	rcall	.-1348   	; 0x418 <CioPutC>
     95c:	c7 2c       	mov	r12, r7
					case STATE_CH1:
						BQPut(&Queue,pMsg->Payload[0]);
						break;
					case STATE_IDLE:
					case STATE_CH2:
						State = STATE_CH2;
     95e:	d6 2c       	mov	r13, r6
						CioPutC(pMidiOut,pMsg->Payload[0]);
						break;
     960:	84 c0       	rjmp	.+264    	; 0xa6a <MergeTask+0x1d4>
				}
				break;
			case MSGCMD_REALTIME:
				CioPutC(pMidiOut,pMsg->Payload[0]);
     962:	dc 01       	movw	r26, r24
     964:	1c 96       	adiw	r26, 0x0c	; 12
     966:	6c 91       	ld	r22, X
     968:	70 e0       	ldi	r23, 0x00	; 0
     96a:	c7 01       	movw	r24, r14
     96c:	55 dd       	rcall	.-1366   	; 0x418 <CioPutC>
     96e:	7d c0       	rjmp	.+250    	; 0xa6a <MergeTask+0x1d4>
				break;
     970:	b1 e0       	ldi	r27, 0x01	; 1
			case MSGCMD_SYSEXEND2:
				switch(State)
     972:	cb 16       	cp	r12, r27
     974:	d1 04       	cpc	r13, r1
     976:	49 f0       	breq	.+18     	; 0x98a <MergeTask+0xf4>
     978:	e2 e0       	ldi	r30, 0x02	; 2
     97a:	ce 16       	cp	r12, r30
     97c:	d1 04       	cpc	r13, r1
     97e:	69 f0       	breq	.+26     	; 0x99a <MergeTask+0x104>
     980:	c1 14       	cp	r12, r1
     982:	d1 04       	cpc	r13, r1
     984:	09 f0       	breq	.+2      	; 0x988 <MergeTask+0xf2>
     986:	71 c0       	rjmp	.+226    	; 0xa6a <MergeTask+0x1d4>
     988:	08 c0       	rjmp	.+16     	; 0x99a <MergeTask+0x104>
				{
					case STATE_CH1:
						BQPut(&Queue,pMsg->Payload[0]);
     98a:	dc 01       	movw	r26, r24
     98c:	1c 96       	adiw	r26, 0x0c	; 12
     98e:	6c 91       	ld	r22, X
     990:	70 e0       	ldi	r23, 0x00	; 0
     992:	ce 01       	movw	r24, r28
     994:	01 96       	adiw	r24, 0x01	; 1
     996:	db db       	rcall	.-2122   	; 0x14e <BQPut>
						break;
     998:	68 c0       	rjmp	.+208    	; 0xa6a <MergeTask+0x1d4>
					case STATE_IDLE:
					case STATE_CH2:
						State = STATE_CH2;
						CioPutC(pMidiOut,pMsg->Payload[0]);
     99a:	f8 01       	movw	r30, r16
     99c:	64 85       	ldd	r22, Z+12	; 0x0c
     99e:	70 e0       	ldi	r23, 0x00	; 0
     9a0:	c7 01       	movw	r24, r14
     9a2:	3a dd       	rcall	.-1420   	; 0x418 <CioPutC>
     9a4:	ab 80       	ldd	r10, Y+3	; 0x03
						if(Queue.nChar)
     9a6:	bc 80       	ldd	r11, Y+4	; 0x04
						{
							n = Queue.nChar;
							for(i=0;i<n;++i)
     9a8:	1a 14       	cp	r1, r10
     9aa:	1b 04       	cpc	r1, r11
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <MergeTask+0x11a>
     9ae:	4f c0       	rjmp	.+158    	; 0xa4e <MergeTask+0x1b8>
     9b0:	c1 2c       	mov	r12, r1
								CioPutC(pMidiOut,BQget(&Queue));
     9b2:	d1 2c       	mov	r13, r1
     9b4:	ce 01       	movw	r24, r28
     9b6:	01 96       	adiw	r24, 0x01	; 1
     9b8:	a7 db       	rcall	.-2226   	; 0x108 <BQget>
     9ba:	bc 01       	movw	r22, r24
     9bc:	c7 01       	movw	r24, r14
     9be:	2c dd       	rcall	.-1448   	; 0x418 <CioPutC>
     9c0:	ff ef       	ldi	r31, 0xFF	; 255
						State = STATE_CH2;
						CioPutC(pMidiOut,pMsg->Payload[0]);
						if(Queue.nChar)
						{
							n = Queue.nChar;
							for(i=0;i<n;++i)
     9c2:	cf 1a       	sub	r12, r31
     9c4:	df 0a       	sbc	r13, r31
     9c6:	ac 14       	cp	r10, r12
     9c8:	bd 04       	cpc	r11, r13
     9ca:	a1 f7       	brne	.-24     	; 0x9b4 <MergeTask+0x11e>
								CioPutC(pMidiOut,BQget(&Queue));
						}
						State = STATE_CH1;
     9cc:	c8 2c       	mov	r12, r8
     9ce:	d9 2c       	mov	r13, r9
     9d0:	4c c0       	rjmp	.+152    	; 0xa6a <MergeTask+0x1d4>
						break;
				}
				break;
			case MSGCMD_SYSEXEND1:
				CioPutC(pMidiOut,pMsg->Payload[0]);
     9d2:	dc 01       	movw	r26, r24
     9d4:	1c 96       	adiw	r26, 0x0c	; 12
     9d6:	6c 91       	ld	r22, X
     9d8:	70 e0       	ldi	r23, 0x00	; 0
     9da:	c7 01       	movw	r24, r14
     9dc:	1d dd       	rcall	.-1478   	; 0x418 <CioPutC>
     9de:	45 c0       	rjmp	.+138    	; 0xa6a <MergeTask+0x1d4>
				break;
     9e0:	b1 e0       	ldi	r27, 0x01	; 1
			case MSGCMD_CHAN1_DONE:
				if(STATE_CH1 == State)
     9e2:	cb 16       	cp	r12, r27
     9e4:	d1 04       	cpc	r13, r1
     9e6:	09 f0       	breq	.+2      	; 0x9ea <MergeTask+0x154>
     9e8:	40 c0       	rjmp	.+128    	; 0xa6a <MergeTask+0x1d4>
				{
					if(Queue.nChar)
     9ea:	ab 80       	ldd	r10, Y+3	; 0x03
     9ec:	bc 80       	ldd	r11, Y+4	; 0x04
     9ee:	a1 14       	cp	r10, r1
     9f0:	b1 04       	cpc	r11, r1
					{
						n = Queue.nChar;
						for(i=0;i<n;++i)
     9f2:	81 f1       	breq	.+96     	; 0xa54 <MergeTask+0x1be>
     9f4:	94 f1       	brlt	.+100    	; 0xa5a <MergeTask+0x1c4>
     9f6:	c1 2c       	mov	r12, r1
							CioPutC(pMidiOut,BQget(&Queue));
     9f8:	d1 2c       	mov	r13, r1
     9fa:	ce 01       	movw	r24, r28
     9fc:	01 96       	adiw	r24, 0x01	; 1
     9fe:	84 db       	rcall	.-2296   	; 0x108 <BQget>
     a00:	bc 01       	movw	r22, r24
     a02:	c7 01       	movw	r24, r14
     a04:	09 dd       	rcall	.-1518   	; 0x418 <CioPutC>
     a06:	ef ef       	ldi	r30, 0xFF	; 255
				if(STATE_CH1 == State)
				{
					if(Queue.nChar)
					{
						n = Queue.nChar;
						for(i=0;i<n;++i)
     a08:	ce 1a       	sub	r12, r30
     a0a:	de 0a       	sbc	r13, r30
     a0c:	ac 14       	cp	r10, r12
     a0e:	bd 04       	cpc	r11, r13
     a10:	a1 f7       	brne	.-24     	; 0x9fa <MergeTask+0x164>
     a12:	c7 2c       	mov	r12, r7
							CioPutC(pMidiOut,BQget(&Queue));
						State = STATE_CH2;
     a14:	d6 2c       	mov	r13, r6
     a16:	29 c0       	rjmp	.+82     	; 0xa6a <MergeTask+0x1d4>
						State = STATE_IDLE;
				}
				
				break;
			case MSGCMD_CHAN2_DONE:
				if(STATE_CH2 == State)
     a18:	f2 e0       	ldi	r31, 0x02	; 2
     a1a:	cf 16       	cp	r12, r31
     a1c:	d1 04       	cpc	r13, r1
				{
					if(Queue.nChar)
     a1e:	29 f5       	brne	.+74     	; 0xa6a <MergeTask+0x1d4>
     a20:	ab 80       	ldd	r10, Y+3	; 0x03
     a22:	bc 80       	ldd	r11, Y+4	; 0x04
     a24:	a1 14       	cp	r10, r1
     a26:	b1 04       	cpc	r11, r1
					{
						n = Queue.nChar;
						for(i=0;i<n;++i)
     a28:	d9 f0       	breq	.+54     	; 0xa60 <MergeTask+0x1ca>
     a2a:	ec f0       	brlt	.+58     	; 0xa66 <MergeTask+0x1d0>
     a2c:	c1 2c       	mov	r12, r1
							CioPutC(pMidiOut,BQget(&Queue));
     a2e:	d1 2c       	mov	r13, r1
     a30:	ce 01       	movw	r24, r28
     a32:	01 96       	adiw	r24, 0x01	; 1
     a34:	69 db       	rcall	.-2350   	; 0x108 <BQget>
     a36:	bc 01       	movw	r22, r24
     a38:	c7 01       	movw	r24, r14
     a3a:	ee dc       	rcall	.-1572   	; 0x418 <CioPutC>
     a3c:	8f ef       	ldi	r24, 0xFF	; 255
				if(STATE_CH2 == State)
				{
					if(Queue.nChar)
					{
						n = Queue.nChar;
						for(i=0;i<n;++i)
     a3e:	c8 1a       	sub	r12, r24
     a40:	d8 0a       	sbc	r13, r24
     a42:	ac 14       	cp	r10, r12
     a44:	bd 04       	cpc	r11, r13
     a46:	a1 f7       	brne	.-24     	; 0xa30 <MergeTask+0x19a>
     a48:	c8 2c       	mov	r12, r8
							CioPutC(pMidiOut,BQget(&Queue));
						State = STATE_CH1;
     a4a:	d9 2c       	mov	r13, r9
     a4c:	0e c0       	rjmp	.+28     	; 0xa6a <MergeTask+0x1d4>
						{
							n = Queue.nChar;
							for(i=0;i<n;++i)
								CioPutC(pMidiOut,BQget(&Queue));
						}
						State = STATE_CH1;
     a4e:	c8 2c       	mov	r12, r8
     a50:	d9 2c       	mov	r13, r9
     a52:	0b c0       	rjmp	.+22     	; 0xa6a <MergeTask+0x1d4>
						for(i=0;i<n;++i)
							CioPutC(pMidiOut,BQget(&Queue));
						State = STATE_CH2;
					}
					else
						State = STATE_IDLE;
     a54:	c5 2c       	mov	r12, r5
     a56:	d4 2c       	mov	r13, r4
     a58:	08 c0       	rjmp	.+16     	; 0xa6a <MergeTask+0x1d4>
					if(Queue.nChar)
					{
						n = Queue.nChar;
						for(i=0;i<n;++i)
							CioPutC(pMidiOut,BQget(&Queue));
						State = STATE_CH2;
     a5a:	c7 2c       	mov	r12, r7
     a5c:	d6 2c       	mov	r13, r6
     a5e:	05 c0       	rjmp	.+10     	; 0xa6a <MergeTask+0x1d4>
						for(i=0;i<n;++i)
							CioPutC(pMidiOut,BQget(&Queue));
						State = STATE_CH1;
					}
					else
						State = STATE_IDLE;
     a60:	c5 2c       	mov	r12, r5
     a62:	d4 2c       	mov	r13, r4
     a64:	02 c0       	rjmp	.+4      	; 0xa6a <MergeTask+0x1d4>
					if(Queue.nChar)
					{
						n = Queue.nChar;
						for(i=0;i<n;++i)
							CioPutC(pMidiOut,BQget(&Queue));
						State = STATE_CH1;
     a66:	c8 2c       	mov	r12, r8
     a68:	d9 2c       	mov	r13, r9
					else
						State = STATE_IDLE;
				}
				break;
		}
		DeleteMSG(pMsg);
     a6a:	c8 01       	movw	r24, r16
     a6c:	6d d4       	rcall	.+2266   	; 0x1348 <DeleteMSG>
     a6e:	32 cf       	rjmp	.-412    	; 0x8d4 <MergeTask+0x3e>

00000a70 <ClassifyMidiByte>:
	}
     a70:	80 38       	cpi	r24, 0x80	; 128
		classification of byte
******************************************/
int ClassifyMidiByte(int c)
{
	int rv = 0;
	if(c < 128)	//data?
     a72:	91 05       	cpc	r25, r1
     a74:	c4 f0       	brlt	.+48     	; 0xaa6 <ClassifyMidiByte+0x36>
		rv = CLASSIFY_DATA;
	else if (c >= 0x80 && c <= 0xef)
     a76:	9c 01       	movw	r18, r24
     a78:	20 58       	subi	r18, 0x80	; 128
     a7a:	31 09       	sbc	r19, r1
     a7c:	20 37       	cpi	r18, 0x70	; 112
     a7e:	31 05       	cpc	r19, r1
     a80:	a8 f0       	brcs	.+42     	; 0xaac <ClassifyMidiByte+0x3c>
		rv = CLASSIFY_CH_COMMAND;
	else if (c == SYSEX)
     a82:	80 3f       	cpi	r24, 0xF0	; 240
     a84:	91 05       	cpc	r25, r1
     a86:	a9 f0       	breq	.+42     	; 0xab2 <ClassifyMidiByte+0x42>
		rv = CLASSIFY_SYSEX;
	else if (c == SYSEXEND)
     a88:	87 3f       	cpi	r24, 0xF7	; 247
     a8a:	91 05       	cpc	r25, r1
     a8c:	a9 f0       	breq	.+42     	; 0xab8 <ClassifyMidiByte+0x48>
		rv = CLASSIFY_SYSEXEND;
	else if (c >= SYSCOM_MTCQUARTERFRAME && c <= SYSCOMTUNEREQ)
     a8e:	21 57       	subi	r18, 0x71	; 113
     a90:	31 09       	sbc	r19, r1
     a92:	26 30       	cpi	r18, 0x06	; 6
     a94:	31 05       	cpc	r19, r1
     a96:	98 f0       	brcs	.+38     	; 0xabe <ClassifyMidiByte+0x4e>
		rv = CLASSIFY_GLBL_CMD;
	else if (c >= SYSRTCLOCK && c <= SYSRTRESET)
     a98:	88 5f       	subi	r24, 0xF8	; 248
     a9a:	91 09       	sbc	r25, r1
     a9c:	08 97       	sbiw	r24, 0x08	; 8
     a9e:	90 f4       	brcc	.+36     	; 0xac4 <ClassifyMidiByte+0x54>
		rv = CLASSIFY_REALTIME;
     aa0:	82 e0       	ldi	r24, 0x02	; 2
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	08 95       	ret
******************************************/
int ClassifyMidiByte(int c)
{
	int rv = 0;
	if(c < 128)	//data?
		rv = CLASSIFY_DATA;
     aa6:	80 e0       	ldi	r24, 0x00	; 0
     aa8:	90 e0       	ldi	r25, 0x00	; 0
     aaa:	08 95       	ret
	else if (c >= 0x80 && c <= 0xef)
		rv = CLASSIFY_CH_COMMAND;
     aac:	81 e0       	ldi	r24, 0x01	; 1
     aae:	90 e0       	ldi	r25, 0x00	; 0
     ab0:	08 95       	ret
	else if (c == SYSEX)
		rv = CLASSIFY_SYSEX;
     ab2:	83 e0       	ldi	r24, 0x03	; 3
     ab4:	90 e0       	ldi	r25, 0x00	; 0
     ab6:	08 95       	ret
	else if (c == SYSEXEND)
		rv = CLASSIFY_SYSEXEND;
     ab8:	84 e0       	ldi	r24, 0x04	; 4
     aba:	90 e0       	ldi	r25, 0x00	; 0
     abc:	08 95       	ret
	else if (c >= SYSCOM_MTCQUARTERFRAME && c <= SYSCOMTUNEREQ)
		rv = CLASSIFY_GLBL_CMD;
     abe:	85 e0       	ldi	r24, 0x05	; 5
     ac0:	90 e0       	ldi	r25, 0x00	; 0
     ac2:	08 95       	ret
	return value
		classification of byte
******************************************/
int ClassifyMidiByte(int c)
{
	int rv = 0;
     ac4:	80 e0       	ldi	r24, 0x00	; 0
     ac6:	90 e0       	ldi	r25, 0x00	; 0
	else if (c >= SYSCOM_MTCQUARTERFRAME && c <= SYSCOMTUNEREQ)
		rv = CLASSIFY_GLBL_CMD;
	else if (c >= SYSRTCLOCK && c <= SYSRTRESET)
		rv = CLASSIFY_REALTIME;
	return rv;
}
     ac8:	08 95       	ret

00000aca <MidiCh2Task>:

TCB TMidiCh2Task;

void MidiCh2Task(void *arg)  __attribute__ ( ( noreturn ) );
void MidiCh2Task(void *arg)
{
     aca:	6c 01       	movw	r12, r24
	int DataClass;
	int c;
	MSG *pMsg;
	int timeout;
	int cmd=0;
	int TimeOutCount = 0;
     acc:	00 e0       	ldi	r16, 0x00	; 0
     ace:	10 e0       	ldi	r17, 0x00	; 0
	IOCB *pMidi = (IOCB *)arg;
	int DataClass;
	int c;
	MSG *pMsg;
	int timeout;
	int cmd=0;
     ad0:	81 2c       	mov	r8, r1
     ad2:	91 2c       	mov	r9, r1
	int TimeOutCount = 0;

	timeout = -1;	//infinite timeout
     ad4:	ee 24       	eor	r14, r14
     ad6:	ea 94       	dec	r14
     ad8:	ff 24       	eor	r15, r15
     ada:	fa 94       	dec	r15
			else
			{
				timeout = 2;
			}
			pMsg = NewMSG(1);
			pMsg->MsgCmd = MSGCMD_CHAN2_DONE;
     adc:	68 94       	set
     ade:	aa 24       	eor	r10, r10
     ae0:	a3 f8       	bld	r10, 3
     ae2:	b1 2c       	mov	r11, r1
				timeout = -1; //back to infinite timeout
				TimeOutCount = 0;
			}
			else
			{
				timeout = 2;
     ae4:	68 94       	set
     ae6:	66 24       	eor	r6, r6
     ae8:	61 f8       	bld	r6, 1
     aea:	71 2c       	mov	r7, r1
					break;
				case CLASSIFY_SYSEX:
					cmd = MSGCMD_SYSEX2;
					break;
				case CLASSIFY_SYSEXEND:
					cmd = MSGCMD_SYSEXEND2;
     aec:	0f 2e       	mov	r0, r31
     aee:	f6 e0       	ldi	r31, 0x06	; 6
     af0:	2f 2e       	mov	r2, r31
     af2:	f0 2d       	mov	r31, r0
     af4:	31 2c       	mov	r3, r1
					break;
				case CLASSIFY_REALTIME:
					cmd = MSGCMD_REALTIME;
					break;
				case CLASSIFY_SYSEX:
					cmd = MSGCMD_SYSEX2;
     af6:	68 94       	set
     af8:	44 24       	eor	r4, r4
     afa:	42 f8       	bld	r4, 2
     afc:	51 2c       	mov	r5, r1
	int TimeOutCount = 0;

	timeout = -1;	//infinite timeout
	while(1)
	{
		c = CioGetC(pMidi,timeout);
     afe:	6e 2d       	mov	r22, r14
     b00:	7f 2d       	mov	r23, r15
     b02:	c6 01       	movw	r24, r12
     b04:	70 dc       	rcall	.-1824   	; 0x3e6 <CioGetC>
     b06:	ec 01       	movw	r28, r24
		if(c >= 0)
     b08:	99 23       	and	r25, r25
		{
			TimeOutCount = 0;
			DataClass = ClassifyMidiByte(c);
     b0a:	b4 f1       	brlt	.+108    	; 0xb78 <MidiCh2Task+0xae>
     b0c:	b1 df       	rcall	.-158    	; 0xa70 <ClassifyMidiByte>
			switch(DataClass)
     b0e:	82 30       	cpi	r24, 0x02	; 2
     b10:	91 05       	cpc	r25, r1
     b12:	b1 f0       	breq	.+44     	; 0xb40 <MidiCh2Task+0x76>
     b14:	2c f4       	brge	.+10     	; 0xb20 <MidiCh2Task+0x56>
     b16:	00 97       	sbiw	r24, 0x00	; 0
     b18:	49 f0       	breq	.+18     	; 0xb2c <MidiCh2Task+0x62>
     b1a:	01 97       	sbiw	r24, 0x01	; 1
     b1c:	59 f0       	breq	.+22     	; 0xb34 <MidiCh2Task+0x6a>
     b1e:	18 c0       	rjmp	.+48     	; 0xb50 <MidiCh2Task+0x86>
     b20:	84 30       	cpi	r24, 0x04	; 4
     b22:	91 05       	cpc	r25, r1
     b24:	99 f0       	breq	.+38     	; 0xb4c <MidiCh2Task+0x82>
     b26:	7c f0       	brlt	.+30     	; 0xb46 <MidiCh2Task+0x7c>
     b28:	05 97       	sbiw	r24, 0x05	; 5
     b2a:	91 f4       	brne	.+36     	; 0xb50 <MidiCh2Task+0x86>
			{
				case CLASSIFY_DATA:
					cmd = MSGCMD_CHAN2;
     b2c:	88 24       	eor	r8, r8
     b2e:	83 94       	inc	r8
     b30:	91 2c       	mov	r9, r1
     b32:	0e c0       	rjmp	.+28     	; 0xb50 <MidiCh2Task+0x86>
					break;
				case CLASSIFY_CH_COMMAND:
					cmd = MSGCMD_CHAN2;
     b34:	88 24       	eor	r8, r8
     b36:	83 94       	inc	r8
     b38:	91 2c       	mov	r9, r1
					timeout = 2;	//2ms timeout
     b3a:	e6 2c       	mov	r14, r6
     b3c:	f7 2c       	mov	r15, r7
					break;
     b3e:	08 c0       	rjmp	.+16     	; 0xb50 <MidiCh2Task+0x86>
				case CLASSIFY_REALTIME:
					cmd = MSGCMD_REALTIME;
     b40:	86 2c       	mov	r8, r6
     b42:	97 2c       	mov	r9, r7
					break;
     b44:	05 c0       	rjmp	.+10     	; 0xb50 <MidiCh2Task+0x86>
				case CLASSIFY_SYSEX:
					cmd = MSGCMD_SYSEX2;
     b46:	84 2c       	mov	r8, r4
     b48:	95 2c       	mov	r9, r5
					break;
     b4a:	02 c0       	rjmp	.+4      	; 0xb50 <MidiCh2Task+0x86>
				case CLASSIFY_SYSEXEND:
					cmd = MSGCMD_SYSEXEND2;
     b4c:	82 2c       	mov	r8, r2
     b4e:	93 2c       	mov	r9, r3
					break;
				case CLASSIFY_GLBL_CMD:
					cmd = MSGCMD_CHAN2;
					break;
			}
			pMsg = NewMSG(1);
     b50:	81 e0       	ldi	r24, 0x01	; 1
     b52:	90 e0       	ldi	r25, 0x00	; 0
     b54:	dc d3       	rcall	.+1976   	; 0x130e <NewMSG>
     b56:	fc 01       	movw	r30, r24
			pMsg->MaxPayload = 1;
     b58:	81 e0       	ldi	r24, 0x01	; 1
     b5a:	90 e0       	ldi	r25, 0x00	; 0
     b5c:	95 83       	std	Z+5, r25	; 0x05
     b5e:	84 83       	std	Z+4, r24	; 0x04
			pMsg->Payload[0] = c;
     b60:	c4 87       	std	Z+12, r28	; 0x0c
			pMsg->MsgCmd = cmd;
     b62:	80 82       	st	Z, r8
     b64:	91 82       	std	Z+1, r9	; 0x01
			MqPut(pMergeMQ,pMsg);
     b66:	bf 01       	movw	r22, r30
     b68:	80 91 78 02 	lds	r24, 0x0278	; 0x800278 <pMergeMQ>
     b6c:	90 91 79 02 	lds	r25, 0x0279	; 0x800279 <pMergeMQ+0x1>
     b70:	4c d3       	rcall	.+1688   	; 0x120a <MqPut>
	while(1)
	{
		c = CioGetC(pMidi,timeout);
		if(c >= 0)
		{
			TimeOutCount = 0;
     b72:	00 e0       	ldi	r16, 0x00	; 0
     b74:	10 e0       	ldi	r17, 0x00	; 0
     b76:	c3 cf       	rjmp	.-122    	; 0xafe <MidiCh2Task+0x34>
			pMsg->MsgCmd = cmd;
			MqPut(pMergeMQ,pMsg);
		}
		else  //we have a timeout
		{
			TimeOutCount++;
     b78:	0f 5f       	subi	r16, 0xFF	; 255
     b7a:	1f 4f       	sbci	r17, 0xFF	; 255
			if(TimeOutCount == 2)
     b7c:	02 30       	cpi	r16, 0x02	; 2
     b7e:	11 05       	cpc	r17, r1
     b80:	19 f0       	breq	.+6      	; 0xb88 <MidiCh2Task+0xbe>
				timeout = -1; //back to infinite timeout
				TimeOutCount = 0;
			}
			else
			{
				timeout = 2;
     b82:	e6 2c       	mov	r14, r6
     b84:	f7 2c       	mov	r15, r7
     b86:	06 c0       	rjmp	.+12     	; 0xb94 <MidiCh2Task+0xca>
		{
			TimeOutCount++;
			if(TimeOutCount == 2)
			{
				timeout = -1; //back to infinite timeout
				TimeOutCount = 0;
     b88:	00 e0       	ldi	r16, 0x00	; 0
     b8a:	10 e0       	ldi	r17, 0x00	; 0
		else  //we have a timeout
		{
			TimeOutCount++;
			if(TimeOutCount == 2)
			{
				timeout = -1; //back to infinite timeout
     b8c:	ee 24       	eor	r14, r14
     b8e:	ea 94       	dec	r14
     b90:	ff 24       	eor	r15, r15
			}
			else
			{
				timeout = 2;
			}
			pMsg = NewMSG(1);
     b92:	fa 94       	dec	r15
     b94:	81 e0       	ldi	r24, 0x01	; 1
     b96:	90 e0       	ldi	r25, 0x00	; 0
     b98:	ba d3       	rcall	.+1908   	; 0x130e <NewMSG>
			pMsg->MsgCmd = MSGCMD_CHAN2_DONE;
     b9a:	fc 01       	movw	r30, r24
     b9c:	b1 82       	std	Z+1, r11	; 0x01
     b9e:	a0 82       	st	Z, r10
			MqPut(pMergeMQ,pMsg);
     ba0:	bc 01       	movw	r22, r24
     ba2:	80 91 78 02 	lds	r24, 0x0278	; 0x800278 <pMergeMQ>
     ba6:	90 91 79 02 	lds	r25, 0x0279	; 0x800279 <pMergeMQ+0x1>
     baa:	2f d3       	rcall	.+1630   	; 0x120a <MqPut>
     bac:	a8 cf       	rjmp	.-176    	; 0xafe <MidiCh2Task+0x34>

00000bae <MidiCh1Task>:

TCB TMidiCh1Task;

void MidiCh1Task(void *arg)  __attribute__ ( ( noreturn ) );
void MidiCh1Task(void *arg)
{
     bae:	6c 01       	movw	r12, r24
	int DataClass;
	int c;
	MSG *pMsg;
	int timeout;
	int TimeOutCount = 0;
	int cmd=0;
     bb0:	81 2c       	mov	r8, r1
     bb2:	91 2c       	mov	r9, r1
	IOCB *pMidi = (IOCB *)arg;
	int DataClass;
	int c;
	MSG *pMsg;
	int timeout;
	int TimeOutCount = 0;
     bb4:	00 e0       	ldi	r16, 0x00	; 0
     bb6:	10 e0       	ldi	r17, 0x00	; 0
	int cmd=0;

	timeout = -1;	//infinite timeout
     bb8:	ee 24       	eor	r14, r14
     bba:	ea 94       	dec	r14
     bbc:	ff 24       	eor	r15, r15
     bbe:	fa 94       	dec	r15
			else
			{
				timeout = 2;
			}
			pMsg = NewMSG(1);
			pMsg->MsgCmd = MSGCMD_CHAN2_DONE;
     bc0:	68 94       	set
     bc2:	aa 24       	eor	r10, r10
     bc4:	a3 f8       	bld	r10, 3
     bc6:	b1 2c       	mov	r11, r1
				timeout = -1; //back to infinite timeout
				TimeOutCount = 0;
			}
			else
			{
				timeout = 2;
     bc8:	68 94       	set
     bca:	66 24       	eor	r6, r6
     bcc:	61 f8       	bld	r6, 1
     bce:	71 2c       	mov	r7, r1
			TimeOutCount = 0;
			DataClass = ClassifyMidiByte(c);
			switch(DataClass)
			{
				case CLASSIFY_DATA:
					cmd = MSGCMD_CHAN1;
     bd0:	41 2c       	mov	r4, r1
     bd2:	51 2c       	mov	r5, r1
					break;
				case CLASSIFY_SYSEX:
					cmd = MSGCMD_SYSEX1;
					break;
				case CLASSIFY_SYSEXEND:
					cmd = MSGCMD_SYSEXEND1;
     bd4:	21 2c       	mov	r2, r1
					break;
				case CLASSIFY_REALTIME:
					cmd = MSGCMD_REALTIME;
					break;
				case CLASSIFY_SYSEX:
					cmd = MSGCMD_SYSEX1;
     bd6:	31 2c       	mov	r3, r1
	int cmd=0;

	timeout = -1;	//infinite timeout
	while(1)
	{
		c = CioGetC(pMidi,timeout);
     bd8:	6e 2d       	mov	r22, r14
     bda:	7f 2d       	mov	r23, r15
     bdc:	c6 01       	movw	r24, r12
     bde:	03 dc       	rcall	.-2042   	; 0x3e6 <CioGetC>
     be0:	ec 01       	movw	r28, r24
		if(c >= 0)
     be2:	99 23       	and	r25, r25
		{
			TimeOutCount = 0;
			DataClass = ClassifyMidiByte(c);
     be4:	d4 f1       	brlt	.+116    	; 0xc5a <MidiCh1Task+0xac>
     be6:	44 df       	rcall	.-376    	; 0xa70 <ClassifyMidiByte>
			switch(DataClass)
     be8:	82 30       	cpi	r24, 0x02	; 2
     bea:	91 05       	cpc	r25, r1
     bec:	a1 f0       	breq	.+40     	; 0xc16 <MidiCh1Task+0x68>
     bee:	2c f4       	brge	.+10     	; 0xbfa <MidiCh1Task+0x4c>
     bf0:	00 97       	sbiw	r24, 0x00	; 0
     bf2:	49 f0       	breq	.+18     	; 0xc06 <MidiCh1Task+0x58>
     bf4:	01 97       	sbiw	r24, 0x01	; 1
     bf6:	51 f0       	breq	.+20     	; 0xc0c <MidiCh1Task+0x5e>
     bf8:	1c c0       	rjmp	.+56     	; 0xc32 <MidiCh1Task+0x84>
     bfa:	84 30       	cpi	r24, 0x04	; 4
     bfc:	91 05       	cpc	r25, r1
     bfe:	a1 f0       	breq	.+40     	; 0xc28 <MidiCh1Task+0x7a>
     c00:	6c f0       	brlt	.+26     	; 0xc1c <MidiCh1Task+0x6e>
     c02:	05 97       	sbiw	r24, 0x05	; 5
     c04:	b1 f4       	brne	.+44     	; 0xc32 <MidiCh1Task+0x84>
			{
				case CLASSIFY_DATA:
					cmd = MSGCMD_CHAN1;
     c06:	84 2c       	mov	r8, r4
     c08:	95 2c       	mov	r9, r5
     c0a:	13 c0       	rjmp	.+38     	; 0xc32 <MidiCh1Task+0x84>
					break;
				case CLASSIFY_CH_COMMAND:
					cmd = MSGCMD_CHAN1;
     c0c:	84 2c       	mov	r8, r4
     c0e:	95 2c       	mov	r9, r5
					timeout = 2;	//2ms timeout
     c10:	e6 2c       	mov	r14, r6
     c12:	f7 2c       	mov	r15, r7
					break;
     c14:	0e c0       	rjmp	.+28     	; 0xc32 <MidiCh1Task+0x84>
				case CLASSIFY_REALTIME:
					cmd = MSGCMD_REALTIME;
     c16:	86 2c       	mov	r8, r6
     c18:	97 2c       	mov	r9, r7
					break;
     c1a:	0b c0       	rjmp	.+22     	; 0xc32 <MidiCh1Task+0x84>
				case CLASSIFY_SYSEX:
					cmd = MSGCMD_SYSEX1;
     c1c:	0f 2e       	mov	r0, r31
     c1e:	f3 e0       	ldi	r31, 0x03	; 3
     c20:	8f 2e       	mov	r8, r31
     c22:	f0 2d       	mov	r31, r0
     c24:	93 2c       	mov	r9, r3
					break;
     c26:	05 c0       	rjmp	.+10     	; 0xc32 <MidiCh1Task+0x84>
				case CLASSIFY_SYSEXEND:
					cmd = MSGCMD_SYSEXEND1;
     c28:	0f 2e       	mov	r0, r31
     c2a:	f5 e0       	ldi	r31, 0x05	; 5
     c2c:	8f 2e       	mov	r8, r31
     c2e:	f0 2d       	mov	r31, r0
     c30:	92 2c       	mov	r9, r2
					break;
				case CLASSIFY_GLBL_CMD:
					cmd = MSGCMD_CHAN1;
					break;
			}
			pMsg = NewMSG(1);
     c32:	81 e0       	ldi	r24, 0x01	; 1
     c34:	90 e0       	ldi	r25, 0x00	; 0
     c36:	6b d3       	rcall	.+1750   	; 0x130e <NewMSG>
     c38:	fc 01       	movw	r30, r24
			pMsg->MaxPayload = 1;
     c3a:	81 e0       	ldi	r24, 0x01	; 1
     c3c:	90 e0       	ldi	r25, 0x00	; 0
     c3e:	95 83       	std	Z+5, r25	; 0x05
     c40:	84 83       	std	Z+4, r24	; 0x04
			pMsg->Payload[0] = c;
     c42:	c4 87       	std	Z+12, r28	; 0x0c
			pMsg->MsgCmd = cmd;
     c44:	80 82       	st	Z, r8
     c46:	91 82       	std	Z+1, r9	; 0x01
			MqPut(pMergeMQ,pMsg);
     c48:	bf 01       	movw	r22, r30
     c4a:	80 91 78 02 	lds	r24, 0x0278	; 0x800278 <pMergeMQ>
     c4e:	90 91 79 02 	lds	r25, 0x0279	; 0x800279 <pMergeMQ+0x1>
     c52:	db d2       	rcall	.+1462   	; 0x120a <MqPut>
	while(1)
	{
		c = CioGetC(pMidi,timeout);
		if(c >= 0)
		{
			TimeOutCount = 0;
     c54:	00 e0       	ldi	r16, 0x00	; 0
     c56:	10 e0       	ldi	r17, 0x00	; 0
     c58:	bf cf       	rjmp	.-130    	; 0xbd8 <MidiCh1Task+0x2a>
			pMsg->MsgCmd = cmd;
			MqPut(pMergeMQ,pMsg);
		}
		else  //we have a timeout
		{
			TimeOutCount++;
     c5a:	0f 5f       	subi	r16, 0xFF	; 255
     c5c:	1f 4f       	sbci	r17, 0xFF	; 255
			if(TimeOutCount == 2)
     c5e:	02 30       	cpi	r16, 0x02	; 2
     c60:	11 05       	cpc	r17, r1
     c62:	19 f0       	breq	.+6      	; 0xc6a <MidiCh1Task+0xbc>
				timeout = -1; //back to infinite timeout
				TimeOutCount = 0;
			}
			else
			{
				timeout = 2;
     c64:	e6 2c       	mov	r14, r6
     c66:	f7 2c       	mov	r15, r7
     c68:	06 c0       	rjmp	.+12     	; 0xc76 <MidiCh1Task+0xc8>
		{
			TimeOutCount++;
			if(TimeOutCount == 2)
			{
				timeout = -1; //back to infinite timeout
				TimeOutCount = 0;
     c6a:	00 e0       	ldi	r16, 0x00	; 0
     c6c:	10 e0       	ldi	r17, 0x00	; 0
		else  //we have a timeout
		{
			TimeOutCount++;
			if(TimeOutCount == 2)
			{
				timeout = -1; //back to infinite timeout
     c6e:	ee 24       	eor	r14, r14
     c70:	ea 94       	dec	r14
     c72:	ff 24       	eor	r15, r15
			}
			else
			{
				timeout = 2;
			}
			pMsg = NewMSG(1);
     c74:	fa 94       	dec	r15
     c76:	81 e0       	ldi	r24, 0x01	; 1
     c78:	90 e0       	ldi	r25, 0x00	; 0
     c7a:	49 d3       	rcall	.+1682   	; 0x130e <NewMSG>
			pMsg->MsgCmd = MSGCMD_CHAN2_DONE;
     c7c:	fc 01       	movw	r30, r24
     c7e:	b1 82       	std	Z+1, r11	; 0x01
     c80:	a0 82       	st	Z, r10
			MqPut(pMergeMQ,pMsg);
     c82:	bc 01       	movw	r22, r24
     c84:	80 91 78 02 	lds	r24, 0x0278	; 0x800278 <pMergeMQ>
     c88:	90 91 79 02 	lds	r25, 0x0279	; 0x800279 <pMergeMQ+0x1>
     c8c:	be d2       	rcall	.+1404   	; 0x120a <MqPut>
     c8e:	a4 cf       	rjmp	.-184    	; 0xbd8 <MidiCh1Task+0x2a>

00000c90 <__vector_18>:
}

void TIMER0_OVF_vect(void) __attribute__ ((naked));
void TIMER0_OVF_vect(void)
{
	SAVE_IRQ();
     c90:	ff 93       	push	r31
     c92:	ff b7       	in	r31, 0x3f	; 63
     c94:	f0 68       	ori	r31, 0x80	; 128
     c96:	ff 93       	push	r31
     c98:	ef 93       	push	r30
     c9a:	df 93       	push	r29
     c9c:	cf 93       	push	r28
     c9e:	bf 93       	push	r27
     ca0:	af 93       	push	r26
     ca2:	9f 93       	push	r25
     ca4:	8f 93       	push	r24
     ca6:	7f 93       	push	r23
     ca8:	6f 93       	push	r22
     caa:	5f 93       	push	r21
     cac:	4f 93       	push	r20
     cae:	3f 93       	push	r19
     cb0:	2f 93       	push	r18
     cb2:	1f 93       	push	r17
     cb4:	0f 93       	push	r16
     cb6:	ff 92       	push	r15
     cb8:	ef 92       	push	r14
     cba:	df 92       	push	r13
     cbc:	cf 92       	push	r12
     cbe:	bf 92       	push	r11
     cc0:	af 92       	push	r10
     cc2:	9f 92       	push	r9
     cc4:	8f 92       	push	r8
     cc6:	7f 92       	push	r7
     cc8:	6f 92       	push	r6
     cca:	5f 92       	push	r5
     ccc:	4f 92       	push	r4
     cce:	3f 92       	push	r3
     cd0:	2f 92       	push	r2
     cd2:	1f 92       	push	r1
     cd4:	11 24       	eor	r1, r1
     cd6:	0f 92       	push	r0
	EnterInterrupt();
     cd8:	ca dd       	rcall	.-1132   	; 0x86e <EnterInterrupt>
	TCNT0 = 0x80;
     cda:	80 e8       	ldi	r24, 0x80	; 128
     cdc:	86 bd       	out	0x26, r24	; 38
	TimerTicker();
     cde:	0e 94 45 10 	call	0x208a	; 0x208a <TimerTicker>
	ExitInterrupt();
     ce2:	4e dd       	rcall	.-1380   	; 0x780 <ExitInterrupt>
	RESTORE_IRQ();
     ce4:	0f 90       	pop	r0
     ce6:	1f 90       	pop	r1
     ce8:	2f 90       	pop	r2
     cea:	3f 90       	pop	r3
     cec:	4f 90       	pop	r4
     cee:	5f 90       	pop	r5
     cf0:	6f 90       	pop	r6
     cf2:	7f 90       	pop	r7
     cf4:	8f 90       	pop	r8
     cf6:	9f 90       	pop	r9
     cf8:	af 90       	pop	r10
     cfa:	bf 90       	pop	r11
     cfc:	cf 90       	pop	r12
     cfe:	df 90       	pop	r13
     d00:	ef 90       	pop	r14
     d02:	ff 90       	pop	r15
     d04:	0f 91       	pop	r16
     d06:	1f 91       	pop	r17
     d08:	2f 91       	pop	r18
     d0a:	3f 91       	pop	r19
     d0c:	4f 91       	pop	r20
     d0e:	5f 91       	pop	r21
     d10:	6f 91       	pop	r22
     d12:	7f 91       	pop	r23
     d14:	8f 91       	pop	r24
     d16:	9f 91       	pop	r25
     d18:	af 91       	pop	r26
     d1a:	bf 91       	pop	r27
     d1c:	cf 91       	pop	r28
     d1e:	df 91       	pop	r29
     d20:	ef 91       	pop	r30
     d22:	ff 91       	pop	r31
     d24:	ff 77       	andi	r31, 0x7F	; 127
     d26:	ff bf       	out	0x3f, r31	; 63
     d28:	ff 91       	pop	r31
     d2a:	18 95       	reti

00000d2c <main>:
		++IdleCount;
	}
}

int main(void)
{
     d2c:	cf 93       	push	r28
     d2e:	df 93       	push	r29
     d30:	00 d0       	rcall	.+0      	; 0xd32 <main+0x6>
     d32:	00 d0       	rcall	.+0      	; 0xd34 <main+0x8>
     d34:	cd b7       	in	r28, 0x3d	; 61
     d36:	de b7       	in	r29, 0x3e	; 62
	long baud;

	// Setup Timer
	TCCR0B = BIT(CS00) | BIT(CS01);
     d38:	83 e0       	ldi	r24, 0x03	; 3
     d3a:	85 bd       	out	0x25, r24	; 37
	TIMSK0 = BIT(TOIE0);
     d3c:	81 e0       	ldi	r24, 0x01	; 1
     d3e:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
	//Initialize operating system
	OSInit();
     d42:	2c d3       	rcall	.+1624   	; 0x139c <OSInit>
	OS_InitMalloc(0,0);	//initialize heap
     d44:	60 e0       	ldi	r22, 0x00	; 0
     d46:	70 e0       	ldi	r23, 0x00	; 0
     d48:	80 e0       	ldi	r24, 0x00	; 0
     d4a:	90 e0       	ldi	r25, 0x00	; 0
	CioInit();	//Initialize Device I/O
     d4c:	06 d2       	rcall	.+1036   	; 0x115a <OS_InitMalloc>
	RInit();	//Initialize Serial Drivers
     d4e:	25 da       	rcall	.-2998   	; 0x19a <CioInit>
     d50:	ad d5       	rcall	.+2906   	; 0x18ac <RInit>
	InitMessageQueueManager();	//Init Message queues
     d52:	fc d2       	rcall	.+1528   	; 0x134c <InitMessageQueueManager>
	pMidi1 = CioOpen("COM0",CIO_RDONLY | CIO_WRONLY);
     d54:	6f eb       	ldi	r22, 0xBF	; 191
     d56:	7f ef       	ldi	r23, 0xFF	; 255
     d58:	84 e4       	ldi	r24, 0x44	; 68
     d5a:	91 e0       	ldi	r25, 0x01	; 1
     d5c:	79 da       	rcall	.-2830   	; 0x250 <CioOpen>
     d5e:	90 93 2d 02 	sts	0x022D, r25	; 0x80022d <pMidi1+0x1>
     d62:	80 93 2c 02 	sts	0x022C, r24	; 0x80022c <pMidi1>
     d66:	0f 2e       	mov	r0, r31
	baud = 31250;
     d68:	f2 e1       	ldi	r31, 0x12	; 18
     d6a:	cf 2e       	mov	r12, r31
     d6c:	fa e7       	ldi	r31, 0x7A	; 122
     d6e:	df 2e       	mov	r13, r31
     d70:	e1 2c       	mov	r14, r1
     d72:	f1 2c       	mov	r15, r1
     d74:	f0 2d       	mov	r31, r0
     d76:	c9 82       	std	Y+1, r12	; 0x01
     d78:	da 82       	std	Y+2, r13	; 0x02
     d7a:	eb 82       	std	Y+3, r14	; 0x03
     d7c:	fc 82       	std	Y+4, r15	; 0x04
	CioXIO(pMidi1,RS232_XIO_SETBAUD,&baud);
     d7e:	ae 01       	movw	r20, r28
     d80:	4f 5f       	subi	r20, 0xFF	; 255
     d82:	5f 4f       	sbci	r21, 0xFF	; 255
     d84:	60 e0       	ldi	r22, 0x00	; 0
     d86:	70 e0       	ldi	r23, 0x00	; 0
     d88:	60 db       	rcall	.-2368   	; 0x44a <CioXIO>
	pMidi2 = CioOpen("COM1",CIO_RDONLY | CIO_WRONLY);
     d8a:	6f eb       	ldi	r22, 0xBF	; 191
     d8c:	7f ef       	ldi	r23, 0xFF	; 255
     d8e:	89 e4       	ldi	r24, 0x49	; 73
     d90:	91 e0       	ldi	r25, 0x01	; 1
     d92:	5e da       	rcall	.-2884   	; 0x250 <CioOpen>
     d94:	90 93 5f 02 	sts	0x025F, r25	; 0x80025f <pMidi2+0x1>
     d98:	80 93 5e 02 	sts	0x025E, r24	; 0x80025e <pMidi2>
     d9c:	c9 82       	std	Y+1, r12	; 0x01
	baud = 31250;
     d9e:	da 82       	std	Y+2, r13	; 0x02
     da0:	eb 82       	std	Y+3, r14	; 0x03
     da2:	fc 82       	std	Y+4, r15	; 0x04
	CioXIO(pMidi2,RS232_XIO_SETBAUD,&baud);
     da4:	ae 01       	movw	r20, r28
     da6:	4f 5f       	subi	r20, 0xFF	; 255
     da8:	5f 4f       	sbci	r21, 0xFF	; 255
     daa:	60 e0       	ldi	r22, 0x00	; 0
     dac:	70 e0       	ldi	r23, 0x00	; 0
     dae:	4d db       	rcall	.-2406   	; 0x44a <CioXIO>
	pMergeMQ = MqInit(8,"MergeQ");
     db0:	6e e4       	ldi	r22, 0x4E	; 78
     db2:	71 e0       	ldi	r23, 0x01	; 1
     db4:	88 e0       	ldi	r24, 0x08	; 8
     db6:	90 e0       	ldi	r25, 0x00	; 0
     db8:	f1 d1       	rcall	.+994    	; 0x119c <MqInit>
     dba:	90 93 79 02 	sts	0x0279, r25	; 0x800279 <pMergeMQ+0x1>
     dbe:	80 93 78 02 	sts	0x0278, r24	; 0x800278 <pMergeMQ>
     dc2:	e1 2c       	mov	r14, r1
	/******************************
		Create Tasks
	******************************/
	CreateTask(&TIdleTask,IdleTask,256,1,"Idle",0);
     dc4:	f1 2c       	mov	r15, r1
     dc6:	05 e5       	ldi	r16, 0x55	; 85
     dc8:	11 e0       	ldi	r17, 0x01	; 1
     dca:	21 e0       	ldi	r18, 0x01	; 1
     dcc:	30 e0       	ldi	r19, 0x00	; 0
     dce:	40 e0       	ldi	r20, 0x00	; 0
     dd0:	51 e0       	ldi	r21, 0x01	; 1
     dd2:	61 e4       	ldi	r22, 0x41	; 65
     dd4:	74 e0       	ldi	r23, 0x04	; 4
     dd6:	86 e4       	ldi	r24, 0x46	; 70
     dd8:	92 e0       	ldi	r25, 0x02	; 2
     dda:	aa db       	rcall	.-2220   	; 0x530 <CreateTask>
	Insert(&ActiveTasks,&TIdleTask);
     ddc:	66 e4       	ldi	r22, 0x46	; 70
     dde:	72 e0       	ldi	r23, 0x02	; 2
     de0:	80 e0       	ldi	r24, 0x00	; 0
     de2:	92 e0       	ldi	r25, 0x02	; 2
     de4:	1e d4       	rcall	.+2108   	; 0x1622 <Insert>
     de6:	e0 90 2c 02 	lds	r14, 0x022C	; 0x80022c <pMidi1>
	CreateTask(&TMidiCh1Task,MidiCh1Task,256,10,"Midi1",pMidi1);
     dea:	f0 90 2d 02 	lds	r15, 0x022D	; 0x80022d <pMidi1+0x1>
     dee:	0a e5       	ldi	r16, 0x5A	; 90
     df0:	11 e0       	ldi	r17, 0x01	; 1
     df2:	2a e0       	ldi	r18, 0x0A	; 10
     df4:	30 e0       	ldi	r19, 0x00	; 0
     df6:	40 e0       	ldi	r20, 0x00	; 0
     df8:	51 e0       	ldi	r21, 0x01	; 1
     dfa:	67 ed       	ldi	r22, 0xD7	; 215
     dfc:	75 e0       	ldi	r23, 0x05	; 5
     dfe:	8e e2       	ldi	r24, 0x2E	; 46
     e00:	92 e0       	ldi	r25, 0x02	; 2
     e02:	96 db       	rcall	.-2260   	; 0x530 <CreateTask>
	Insert(&ActiveTasks,&TMidiCh1Task);
     e04:	6e e2       	ldi	r22, 0x2E	; 46
     e06:	72 e0       	ldi	r23, 0x02	; 2
     e08:	80 e0       	ldi	r24, 0x00	; 0
     e0a:	92 e0       	ldi	r25, 0x02	; 2
     e0c:	0a d4       	rcall	.+2068   	; 0x1622 <Insert>
     e0e:	e0 90 5e 02 	lds	r14, 0x025E	; 0x80025e <pMidi2>
	CreateTask(&TMidiCh2Task,MidiCh2Task,256,10,"Midi2",pMidi2);
     e12:	f0 90 5f 02 	lds	r15, 0x025F	; 0x80025f <pMidi2+0x1>
     e16:	00 e6       	ldi	r16, 0x60	; 96
     e18:	11 e0       	ldi	r17, 0x01	; 1
     e1a:	2a e0       	ldi	r18, 0x0A	; 10
     e1c:	30 e0       	ldi	r19, 0x00	; 0
     e1e:	40 e0       	ldi	r20, 0x00	; 0
     e20:	51 e0       	ldi	r21, 0x01	; 1
     e22:	65 e6       	ldi	r22, 0x65	; 101
     e24:	75 e0       	ldi	r23, 0x05	; 5
     e26:	80 e6       	ldi	r24, 0x60	; 96
     e28:	92 e0       	ldi	r25, 0x02	; 2
     e2a:	82 db       	rcall	.-2300   	; 0x530 <CreateTask>
	Insert(&ActiveTasks,&TMidiCh2Task);
     e2c:	60 e6       	ldi	r22, 0x60	; 96
     e2e:	72 e0       	ldi	r23, 0x02	; 2
     e30:	80 e0       	ldi	r24, 0x00	; 0
     e32:	92 e0       	ldi	r25, 0x02	; 2
     e34:	f6 d3       	rcall	.+2028   	; 0x1622 <Insert>
	CreateTask(&TMergTask,MergeTask,256,11,"Merge",pMidi1);
     e36:	e0 90 2c 02 	lds	r14, 0x022C	; 0x80022c <pMidi1>
     e3a:	f0 90 2d 02 	lds	r15, 0x022D	; 0x80022d <pMidi1+0x1>
     e3e:	06 e6       	ldi	r16, 0x66	; 102
     e40:	11 e0       	ldi	r17, 0x01	; 1
     e42:	2b e0       	ldi	r18, 0x0B	; 11
     e44:	30 e0       	ldi	r19, 0x00	; 0
     e46:	40 e0       	ldi	r20, 0x00	; 0
     e48:	51 e0       	ldi	r21, 0x01	; 1
     e4a:	6b e4       	ldi	r22, 0x4B	; 75
     e4c:	74 e0       	ldi	r23, 0x04	; 4
     e4e:	84 e1       	ldi	r24, 0x14	; 20
     e50:	92 e0       	ldi	r25, 0x02	; 2
     e52:	6e db       	rcall	.-2340   	; 0x530 <CreateTask>
     e54:	0e 94 07 10 	call	0x200e	; 0x200e <StartOS>
	StartOS();
     e58:	ff cf       	rjmp	.-2      	; 0xe58 <main+0x12c>

00000e5a <malloc>:
     e5a:	ef 92       	push	r14
		pointer to memory block on success,
		OR NULL on fail
*******************************************/

void *malloc(size_t len)
{
     e5c:	ff 92       	push	r15
     e5e:	0f 93       	push	r16
     e60:	1f 93       	push	r17
     e62:	cf 93       	push	r28
     e64:	df 93       	push	r29
     e66:	8c 01       	movw	r16, r24
	 * Our minimum chunk size is the size of a pointer (plus the
	 * size of the "sz" field, but we don't need to account for
	 * this), otherwise we could not possibly fit a freelist entry
	 * into the chunk later.
	 */
	PendSemaphore(&MallocBlocker,0);
     e68:	60 e0       	ldi	r22, 0x00	; 0
     e6a:	70 e0       	ldi	r23, 0x00	; 0
     e6c:	8e e7       	ldi	r24, 0x7E	; 126
     e6e:	92 e0       	ldi	r25, 0x02	; 2
     e70:	9d d2       	rcall	.+1338   	; 0x13ac <PendSemaphore>
	if (len < sizeof(struct __freelist) - sizeof(size_t))
     e72:	02 30       	cpi	r16, 0x02	; 2
     e74:	11 05       	cpc	r17, r1
     e76:	10 f4       	brcc	.+4      	; 0xe7c <malloc+0x22>
		len = sizeof(struct __freelist) - sizeof(size_t);
     e78:	02 e0       	ldi	r16, 0x02	; 2
     e7a:	10 e0       	ldi	r17, 0x00	; 0
	 * would match exactly.  If we found one, we are done.  While
	 * walking, note down the size of the largest chunk we found
	 * that would still fit the request -- we need it for step 2.
	 *
	 */
	for (s = 0, fp1 = __flp, fp2 = 0;
     e7c:	a0 91 9e 02 	lds	r26, 0x029E	; 0x80029e <__flp>
     e80:	b0 91 9f 02 	lds	r27, 0x029F	; 0x80029f <__flp+0x1>
     e84:	10 97       	sbiw	r26, 0x00	; 0
     e86:	09 f4       	brne	.+2      	; 0xe8a <malloc+0x30>
     e88:	83 c0       	rjmp	.+262    	; 0xf90 <malloc+0x136>
	     fp1;
	     fp2 = fp1, fp1 = fp1->nx) {
		if (fp1->sz == len) {
     e8a:	4d 91       	ld	r20, X+
     e8c:	5c 91       	ld	r21, X
     e8e:	11 97       	sbiw	r26, 0x01	; 1
     e90:	04 17       	cp	r16, r20
     e92:	15 07       	cpc	r17, r21
     e94:	91 f0       	breq	.+36     	; 0xeba <malloc+0x60>
     e96:	ca 01       	movw	r24, r20
     e98:	fd 01       	movw	r30, r26
     e9a:	20 e0       	ldi	r18, 0x00	; 0
     e9c:	30 e0       	ldi	r19, 0x00	; 0
     e9e:	1e c0       	rjmp	.+60     	; 0xedc <malloc+0x82>
     ea0:	88 81       	ld	r24, Y
     ea2:	99 81       	ldd	r25, Y+1	; 0x01
     ea4:	08 17       	cp	r16, r24
     ea6:	19 07       	cpc	r17, r25
     ea8:	c1 f4       	brne	.+48     	; 0xeda <malloc+0x80>
			/*
			 * Found it.  Disconnect the chunk from the
			 * freelist, and return it.
			 */
			if (fp2)
     eaa:	30 97       	sbiw	r30, 0x00	; 0
     eac:	29 f0       	breq	.+10     	; 0xeb8 <malloc+0x5e>
				fp2->nx = fp1->nx;
     eae:	8a 81       	ldd	r24, Y+2	; 0x02
     eb0:	9b 81       	ldd	r25, Y+3	; 0x03
     eb2:	93 83       	std	Z+3, r25	; 0x03
     eb4:	82 83       	std	Z+2, r24	; 0x02
     eb6:	0a c0       	rjmp	.+20     	; 0xecc <malloc+0x72>
	 * that would still fit the request -- we need it for step 2.
	 *
	 */
	for (s = 0, fp1 = __flp, fp2 = 0;
	     fp1;
	     fp2 = fp1, fp1 = fp1->nx) {
     eb8:	de 01       	movw	r26, r28
			 * freelist, and return it.
			 */
			if (fp2)
				fp2->nx = fp1->nx;
			else
				__flp = fp1->nx;
     eba:	12 96       	adiw	r26, 0x02	; 2
     ebc:	8d 91       	ld	r24, X+
     ebe:	9c 91       	ld	r25, X
     ec0:	13 97       	sbiw	r26, 0x03	; 3
     ec2:	90 93 9f 02 	sts	0x029F, r25	; 0x80029f <__flp+0x1>
     ec6:	80 93 9e 02 	sts	0x029E, r24	; 0x80029e <__flp>
     eca:	ed 01       	movw	r28, r26
			PostSemaphore(&MallocBlocker,0);
     ecc:	60 e0       	ldi	r22, 0x00	; 0
     ece:	70 e0       	ldi	r23, 0x00	; 0
     ed0:	8e e7       	ldi	r24, 0x7E	; 126
     ed2:	92 e0       	ldi	r25, 0x02	; 2
     ed4:	d6 d2       	rcall	.+1452   	; 0x1482 <PostSemaphore>
			return &(fp1->nx);
     ed6:	22 96       	adiw	r28, 0x02	; 2
     ed8:	a8 c0       	rjmp	.+336    	; 0x102a <malloc+0x1d0>
	 * that would still fit the request -- we need it for step 2.
	 *
	 */
	for (s = 0, fp1 = __flp, fp2 = 0;
	     fp1;
	     fp2 = fp1, fp1 = fp1->nx) {
     eda:	fe 01       	movw	r30, r28
			else
				__flp = fp1->nx;
			PostSemaphore(&MallocBlocker,0);
			return &(fp1->nx);
		}
		if (fp1->sz > len) {
     edc:	08 17       	cp	r16, r24
     ede:	19 07       	cpc	r17, r25
     ee0:	48 f4       	brcc	.+18     	; 0xef4 <malloc+0x9a>
			if (s == 0 || fp1->sz < s)
     ee2:	21 15       	cp	r18, r1
     ee4:	31 05       	cpc	r19, r1
     ee6:	29 f0       	breq	.+10     	; 0xef2 <malloc+0x98>
     ee8:	82 17       	cp	r24, r18
     eea:	93 07       	cpc	r25, r19
     eec:	18 f4       	brcc	.+6      	; 0xef4 <malloc+0x9a>
     eee:	9c 01       	movw	r18, r24
     ef0:	01 c0       	rjmp	.+2      	; 0xef4 <malloc+0x9a>
     ef2:	9c 01       	movw	r18, r24
	 * that would still fit the request -- we need it for step 2.
	 *
	 */
	for (s = 0, fp1 = __flp, fp2 = 0;
	     fp1;
	     fp2 = fp1, fp1 = fp1->nx) {
     ef4:	c2 81       	ldd	r28, Z+2	; 0x02
     ef6:	d3 81       	ldd	r29, Z+3	; 0x03
	 * would match exactly.  If we found one, we are done.  While
	 * walking, note down the size of the largest chunk we found
	 * that would still fit the request -- we need it for step 2.
	 *
	 */
	for (s = 0, fp1 = __flp, fp2 = 0;
     ef8:	20 97       	sbiw	r28, 0x00	; 0
     efa:	91 f6       	brne	.-92     	; 0xea0 <malloc+0x46>
	 * difference between the requested size and the size of the
	 * chunk found is large enough for another freelist entry; if
	 * not, just enlarge the request size to what we have found,
	 * and use the entire chunk.
	 */
	if (s) {
     efc:	21 15       	cp	r18, r1
     efe:	31 05       	cpc	r19, r1
     f00:	09 f4       	brne	.+2      	; 0xf04 <malloc+0xaa>
     f02:	46 c0       	rjmp	.+140    	; 0xf90 <malloc+0x136>
		if (s - len < sizeof(struct __freelist))
     f04:	c9 01       	movw	r24, r18
     f06:	80 1b       	sub	r24, r16
     f08:	91 0b       	sbc	r25, r17
     f0a:	04 97       	sbiw	r24, 0x04	; 4
     f0c:	08 f4       	brcc	.+2      	; 0xf10 <malloc+0xb6>
     f0e:	87 c0       	rjmp	.+270    	; 0x101e <malloc+0x1c4>
     f10:	87 c0       	rjmp	.+270    	; 0x1020 <malloc+0x1c6>
			len = s;
		for (fp1 = __flp, fp2 = 0;
		     fp1;
		     fp2 = fp1, fp1 = fp1->nx) {
			if (fp1->sz == s) {
     f12:	f7 01       	movw	r30, r14
     f14:	80 81       	ld	r24, Z
     f16:	91 81       	ldd	r25, Z+1	; 0x01
     f18:	28 17       	cp	r18, r24
     f1a:	39 07       	cpc	r19, r25
     f1c:	81 f5       	brne	.+96     	; 0xf7e <malloc+0x124>
				if (len == s) {
     f1e:	20 17       	cp	r18, r16
     f20:	31 07       	cpc	r19, r17
     f22:	d9 f4       	brne	.+54     	; 0xf5a <malloc+0x100>
					/*
					 * Use entire chunk; same as
					 * above.
					 */
					if (fp2)
     f24:	10 97       	sbiw	r26, 0x00	; 0
     f26:	39 f0       	breq	.+14     	; 0xf36 <malloc+0xdc>
						fp2->nx = fp1->nx;
     f28:	82 81       	ldd	r24, Z+2	; 0x02
     f2a:	93 81       	ldd	r25, Z+3	; 0x03
     f2c:	13 96       	adiw	r26, 0x03	; 3
     f2e:	9c 93       	st	X, r25
     f30:	8e 93       	st	-X, r24
     f32:	12 97       	sbiw	r26, 0x02	; 2
     f34:	0a c0       	rjmp	.+20     	; 0xf4a <malloc+0xf0>
	if (s) {
		if (s - len < sizeof(struct __freelist))
			len = s;
		for (fp1 = __flp, fp2 = 0;
		     fp1;
		     fp2 = fp1, fp1 = fp1->nx) {
     f36:	d7 01       	movw	r26, r14
					 * above.
					 */
					if (fp2)
						fp2->nx = fp1->nx;
					else
						__flp = fp1->nx;
     f38:	12 96       	adiw	r26, 0x02	; 2
     f3a:	8d 91       	ld	r24, X+
     f3c:	9c 91       	ld	r25, X
     f3e:	13 97       	sbiw	r26, 0x03	; 3
     f40:	90 93 9f 02 	sts	0x029F, r25	; 0x80029f <__flp+0x1>
     f44:	80 93 9e 02 	sts	0x029E, r24	; 0x80029e <__flp>
     f48:	7d 01       	movw	r14, r26
					PostSemaphore(&MallocBlocker,0);
     f4a:	60 e0       	ldi	r22, 0x00	; 0
     f4c:	70 e0       	ldi	r23, 0x00	; 0
     f4e:	8e e7       	ldi	r24, 0x7E	; 126
     f50:	92 e0       	ldi	r25, 0x02	; 2
     f52:	97 d2       	rcall	.+1326   	; 0x1482 <PostSemaphore>
					return &(fp1->nx);
     f54:	e7 01       	movw	r28, r14
     f56:	22 96       	adiw	r28, 0x02	; 2
     f58:	68 c0       	rjmp	.+208    	; 0x102a <malloc+0x1d0>
				 * entry, and note down the size of
				 * the new chunk before returning it
				 * to the caller.
				 */
				cp = (char *)fp1;
				s -= len;
     f5a:	20 1b       	sub	r18, r16
     f5c:	31 0b       	sbc	r19, r17
				cp += s;
				fp2 = (struct __freelist *)cp;
				fp2->sz = len;
     f5e:	e7 01       	movw	r28, r14
     f60:	c2 0f       	add	r28, r18
     f62:	d3 1f       	adc	r29, r19
     f64:	09 93       	st	Y+, r16
     f66:	19 93       	st	Y+, r17
				fp1->sz = s - sizeof(size_t);
     f68:	22 50       	subi	r18, 0x02	; 2
     f6a:	31 09       	sbc	r19, r1
     f6c:	f7 01       	movw	r30, r14
     f6e:	31 83       	std	Z+1, r19	; 0x01
     f70:	20 83       	st	Z, r18
				PostSemaphore(&MallocBlocker,0);
     f72:	60 e0       	ldi	r22, 0x00	; 0
     f74:	70 e0       	ldi	r23, 0x00	; 0
     f76:	8e e7       	ldi	r24, 0x7E	; 126
     f78:	92 e0       	ldi	r25, 0x02	; 2
     f7a:	83 d2       	rcall	.+1286   	; 0x1482 <PostSemaphore>
				return &(fp2->nx);
     f7c:	56 c0       	rjmp	.+172    	; 0x102a <malloc+0x1d0>
	if (s) {
		if (s - len < sizeof(struct __freelist))
			len = s;
		for (fp1 = __flp, fp2 = 0;
		     fp1;
		     fp2 = fp1, fp1 = fp1->nx) {
     f7e:	d7 01       	movw	r26, r14
     f80:	12 96       	adiw	r26, 0x02	; 2
     f82:	ed 90       	ld	r14, X+
     f84:	fc 90       	ld	r15, X
     f86:	13 97       	sbiw	r26, 0x03	; 3
	 * and use the entire chunk.
	 */
	if (s) {
		if (s - len < sizeof(struct __freelist))
			len = s;
		for (fp1 = __flp, fp2 = 0;
     f88:	e1 14       	cp	r14, r1
     f8a:	f1 04       	cpc	r15, r1
     f8c:	09 f0       	breq	.+2      	; 0xf90 <malloc+0x136>
     f8e:	c1 cf       	rjmp	.-126    	; 0xf12 <malloc+0xb8>
	 * Under Unix, the "break value" was the end of the data
	 * segment as dynamically requested from the operating system.
	 * Since we don't have an operating system, just make sure
	 * that we don't collide with the stack.
	 */
	if (__brkval == 0)
     f90:	80 91 7c 02 	lds	r24, 0x027C	; 0x80027c <__brkval>
     f94:	90 91 7d 02 	lds	r25, 0x027D	; 0x80027d <__brkval+0x1>
     f98:	89 2b       	or	r24, r25
     f9a:	41 f4       	brne	.+16     	; 0xfac <malloc+0x152>
		__brkval = __malloc_heap_start;
     f9c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__malloc_heap_start>
     fa0:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
     fa4:	90 93 7d 02 	sts	0x027D, r25	; 0x80027d <__brkval+0x1>
     fa8:	80 93 7c 02 	sts	0x027C, r24	; 0x80027c <__brkval>
	cp = __malloc_heap_end;
     fac:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     fb0:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
	if (cp == 0)
     fb4:	00 97       	sbiw	r24, 0x00	; 0
     fb6:	41 f4       	brne	.+16     	; 0xfc8 <malloc+0x16e>
		cp = STACK_POINTER() - __malloc_margin;
     fb8:	8d b7       	in	r24, 0x3d	; 61
     fba:	9e b7       	in	r25, 0x3e	; 62
     fbc:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <__malloc_margin>
     fc0:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <__malloc_margin+0x1>
     fc4:	82 1b       	sub	r24, r18
     fc6:	93 0b       	sbc	r25, r19
	avail = cp - __brkval;
     fc8:	c0 91 7c 02 	lds	r28, 0x027C	; 0x80027c <__brkval>
     fcc:	d0 91 7d 02 	lds	r29, 0x027D	; 0x80027d <__brkval+0x1>
     fd0:	8c 1b       	sub	r24, r28
     fd2:	9d 0b       	sbc	r25, r29
	/*
	 * Both tests below are needed to catch the case len >= 0xfffe.
	 */
	if (avail >= len && avail >= len + sizeof(size_t)) {
     fd4:	80 17       	cp	r24, r16
     fd6:	91 07       	cpc	r25, r17
     fd8:	a0 f0       	brcs	.+40     	; 0x1002 <malloc+0x1a8>
     fda:	98 01       	movw	r18, r16
     fdc:	2e 5f       	subi	r18, 0xFE	; 254
     fde:	3f 4f       	sbci	r19, 0xFF	; 255
     fe0:	82 17       	cp	r24, r18
     fe2:	93 07       	cpc	r25, r19
     fe4:	70 f0       	brcs	.+28     	; 0x1002 <malloc+0x1a8>
		fp1 = (struct __freelist *)__brkval;
		__brkval += len + sizeof(size_t);
     fe6:	2c 0f       	add	r18, r28
     fe8:	3d 1f       	adc	r19, r29
     fea:	30 93 7d 02 	sts	0x027D, r19	; 0x80027d <__brkval+0x1>
     fee:	20 93 7c 02 	sts	0x027C, r18	; 0x80027c <__brkval>
		fp1->sz = len;
     ff2:	09 93       	st	Y+, r16
     ff4:	19 93       	st	Y+, r17
		PostSemaphore(&MallocBlocker,0);
     ff6:	60 e0       	ldi	r22, 0x00	; 0
     ff8:	70 e0       	ldi	r23, 0x00	; 0
     ffa:	8e e7       	ldi	r24, 0x7E	; 126
     ffc:	92 e0       	ldi	r25, 0x02	; 2
     ffe:	41 d2       	rcall	.+1154   	; 0x1482 <PostSemaphore>
		return &(fp1->nx);
	}
	/*
	 * Step 4: There's no help, just fail. :-/
	 */
	 PostSemaphore(&MallocBlocker,0);
    1000:	14 c0       	rjmp	.+40     	; 0x102a <malloc+0x1d0>
    1002:	60 e0       	ldi	r22, 0x00	; 0
    1004:	70 e0       	ldi	r23, 0x00	; 0
    1006:	8e e7       	ldi	r24, 0x7E	; 126
    1008:	92 e0       	ldi	r25, 0x02	; 2
    100a:	3b d2       	rcall	.+1142   	; 0x1482 <PostSemaphore>
	return 0;
    100c:	c0 e0       	ldi	r28, 0x00	; 0
    100e:	d0 e0       	ldi	r29, 0x00	; 0
    1010:	0c c0       	rjmp	.+24     	; 0x102a <malloc+0x1d0>
			len = s;
		for (fp1 = __flp, fp2 = 0;
		     fp1;
		     fp2 = fp1, fp1 = fp1->nx) {
			if (fp1->sz == s) {
				if (len == s) {
    1012:	20 17       	cp	r18, r16
    1014:	31 07       	cpc	r19, r17
    1016:	09 f4       	brne	.+2      	; 0x101a <malloc+0x1c0>
    1018:	8f cf       	rjmp	.-226    	; 0xf38 <malloc+0xde>
	 * and use the entire chunk.
	 */
	if (s) {
		if (s - len < sizeof(struct __freelist))
			len = s;
		for (fp1 = __flp, fp2 = 0;
    101a:	7d 01       	movw	r14, r26
    101c:	9e cf       	rjmp	.-196    	; 0xf5a <malloc+0x100>
	 * chunk found is large enough for another freelist entry; if
	 * not, just enlarge the request size to what we have found,
	 * and use the entire chunk.
	 */
	if (s) {
		if (s - len < sizeof(struct __freelist))
    101e:	89 01       	movw	r16, r18
			len = s;
		for (fp1 = __flp, fp2 = 0;
		     fp1;
		     fp2 = fp1, fp1 = fp1->nx) {
			if (fp1->sz == s) {
    1020:	24 17       	cp	r18, r20
    1022:	35 07       	cpc	r19, r21
    1024:	09 f0       	breq	.+2      	; 0x1028 <malloc+0x1ce>
    1026:	ac cf       	rjmp	.-168    	; 0xf80 <malloc+0x126>
    1028:	f4 cf       	rjmp	.-24     	; 0x1012 <malloc+0x1b8>
	/*
	 * Step 4: There's no help, just fail. :-/
	 */
	 PostSemaphore(&MallocBlocker,0);
	return 0;
}
    102a:	ce 01       	movw	r24, r28
    102c:	df 91       	pop	r29
    102e:	cf 91       	pop	r28
    1030:	1f 91       	pop	r17
    1032:	0f 91       	pop	r16
    1034:	ff 90       	pop	r15
    1036:	ef 90       	pop	r14
    1038:	08 95       	ret

0000103a <free>:
		free is thread safe.
	parameters:
		p.....pointer to memory block to free
**************************************************/
void free(void *p)
{
    103a:	0f 93       	push	r16
    103c:	1f 93       	push	r17
    103e:	cf 93       	push	r28
    1040:	df 93       	push	r29
	struct __freelist *fp1, *fp2, *fpnew;
	char *cp1, *cp2, *cpnew;

	/* ISO C says free(NULL) must be a no-op */
	if (p == 0)
    1042:	00 97       	sbiw	r24, 0x00	; 0
    1044:	09 f4       	brne	.+2      	; 0x1048 <free+0xe>
    1046:	84 c0       	rjmp	.+264    	; 0x1150 <free+0x116>
    1048:	8c 01       	movw	r16, r24
		return;

	PendSemaphore(&MallocBlocker,0);
    104a:	60 e0       	ldi	r22, 0x00	; 0
    104c:	70 e0       	ldi	r23, 0x00	; 0
    104e:	8e e7       	ldi	r24, 0x7E	; 126
    1050:	92 e0       	ldi	r25, 0x02	; 2
    1052:	ac d1       	rcall	.+856    	; 0x13ac <PendSemaphore>
	cpnew = p;
	cpnew -= sizeof(size_t);
    1054:	d8 01       	movw	r26, r16
    1056:	12 97       	sbiw	r26, 0x02	; 2
	fpnew = (struct __freelist *)cpnew;
	fpnew->nx = 0;
    1058:	13 96       	adiw	r26, 0x03	; 3
    105a:	1c 92       	st	X, r1
    105c:	1e 92       	st	-X, r1
    105e:	12 97       	sbiw	r26, 0x02	; 2

	/*
	 * Trivial case first: if there's no freelist yet, our entry
	 * will be the only one on it.
	 */
	if (__flp == 0) {
    1060:	e0 91 9e 02 	lds	r30, 0x029E	; 0x80029e <__flp>
    1064:	f0 91 9f 02 	lds	r31, 0x029F	; 0x80029f <__flp+0x1>
    1068:	30 97       	sbiw	r30, 0x00	; 0
    106a:	21 f0       	breq	.+8      	; 0x1074 <free+0x3a>
	 * if possible.
	 */
	for (fp1 = __flp, fp2 = 0;
	     fp1;
	     fp2 = fp1, fp1 = fp1->nx) {
		if (fp1 < fpnew)
    106c:	ea 17       	cp	r30, r26
    106e:	fb 07       	cpc	r31, r27
    1070:	78 f0       	brcs	.+30     	; 0x1090 <free+0x56>
    1072:	5f c0       	rjmp	.+190    	; 0x1132 <free+0xf8>
	/*
	 * Trivial case first: if there's no freelist yet, our entry
	 * will be the only one on it.
	 */
	if (__flp == 0) {
		__flp = fpnew;
    1074:	b0 93 9f 02 	sts	0x029F, r27	; 0x80029f <__flp+0x1>
    1078:	a0 93 9e 02 	sts	0x029E, r26	; 0x80029e <__flp>
		PostSemaphore(&MallocBlocker,0);
    107c:	60 e0       	ldi	r22, 0x00	; 0
    107e:	70 e0       	ldi	r23, 0x00	; 0
    1080:	8e e7       	ldi	r24, 0x7E	; 126
    1082:	92 e0       	ldi	r25, 0x02	; 2
    1084:	fe d1       	rcall	.+1020   	; 0x1482 <PostSemaphore>
		return;
    1086:	64 c0       	rjmp	.+200    	; 0x1150 <free+0x116>
	 * if possible.
	 */
	for (fp1 = __flp, fp2 = 0;
	     fp1;
	     fp2 = fp1, fp1 = fp1->nx) {
		if (fp1 < fpnew)
    1088:	8a 17       	cp	r24, r26
    108a:	9b 07       	cpc	r25, r27
    108c:	30 f4       	brcc	.+12     	; 0x109a <free+0x60>
	 * freelist.  Try to aggregate the chunk with adjacent chunks
	 * if possible.
	 */
	for (fp1 = __flp, fp2 = 0;
	     fp1;
	     fp2 = fp1, fp1 = fp1->nx) {
    108e:	fc 01       	movw	r30, r24
    1090:	82 81       	ldd	r24, Z+2	; 0x02
    1092:	93 81       	ldd	r25, Z+3	; 0x03
	/*
	 * Now, find the position where our new entry belongs onto the
	 * freelist.  Try to aggregate the chunk with adjacent chunks
	 * if possible.
	 */
	for (fp1 = __flp, fp2 = 0;
    1094:	00 97       	sbiw	r24, 0x00	; 0
    1096:	c1 f7       	brne	.-16     	; 0x1088 <free+0x4e>
    1098:	2e c0       	rjmp	.+92     	; 0x10f6 <free+0xbc>
	     fp1;
	     fp2 = fp1, fp1 = fp1->nx) {
		if (fp1 < fpnew)
			continue;
		cp1 = (char *)fp1;
		fpnew->nx = fp1;
    109a:	98 01       	movw	r18, r16
    109c:	22 50       	subi	r18, 0x02	; 2
    109e:	31 09       	sbc	r19, r1
    10a0:	e9 01       	movw	r28, r18
    10a2:	9b 83       	std	Y+3, r25	; 0x03
    10a4:	8a 83       	std	Y+2, r24	; 0x02
		if ((char *)&(fpnew->nx) + fpnew->sz == cp1) {
    10a6:	28 81       	ld	r18, Y
    10a8:	39 81       	ldd	r19, Y+1	; 0x01
    10aa:	a8 01       	movw	r20, r16
    10ac:	42 0f       	add	r20, r18
    10ae:	53 1f       	adc	r21, r19
    10b0:	84 17       	cp	r24, r20
    10b2:	95 07       	cpc	r25, r21
    10b4:	a1 f4       	brne	.+40     	; 0x10de <free+0xa4>
    10b6:	02 c0       	rjmp	.+4      	; 0x10bc <free+0x82>
    10b8:	e0 e0       	ldi	r30, 0x00	; 0
    10ba:	f0 e0       	ldi	r31, 0x00	; 0
			/* upper chunk adjacent, assimilate it */
			fpnew->sz += fp1->sz + sizeof(size_t);
    10bc:	ec 01       	movw	r28, r24
    10be:	68 81       	ld	r22, Y
    10c0:	79 81       	ldd	r23, Y+1	; 0x01
    10c2:	6e 5f       	subi	r22, 0xFE	; 254
    10c4:	7f 4f       	sbci	r23, 0xFF	; 255
    10c6:	26 0f       	add	r18, r22
    10c8:	37 1f       	adc	r19, r23
    10ca:	e8 01       	movw	r28, r16
    10cc:	3a 93       	st	-Y, r19
    10ce:	2a 93       	st	-Y, r18
    10d0:	ae 01       	movw	r20, r28
			fpnew->nx = fp1->nx;
    10d2:	ec 01       	movw	r28, r24
    10d4:	8a 81       	ldd	r24, Y+2	; 0x02
    10d6:	9b 81       	ldd	r25, Y+3	; 0x03
    10d8:	ea 01       	movw	r28, r20
    10da:	9b 83       	std	Y+3, r25	; 0x03
    10dc:	8a 83       	std	Y+2, r24	; 0x02
		}
		if (fp2 == 0) {
    10de:	30 97       	sbiw	r30, 0x00	; 0
    10e0:	51 f4       	brne	.+20     	; 0x10f6 <free+0xbc>
			/* new head of freelist */
			__flp = fpnew;
    10e2:	b0 93 9f 02 	sts	0x029F, r27	; 0x80029f <__flp+0x1>
    10e6:	a0 93 9e 02 	sts	0x029E, r26	; 0x80029e <__flp>
			PostSemaphore(&MallocBlocker,0);
    10ea:	60 e0       	ldi	r22, 0x00	; 0
    10ec:	70 e0       	ldi	r23, 0x00	; 0
    10ee:	8e e7       	ldi	r24, 0x7E	; 126
    10f0:	92 e0       	ldi	r25, 0x02	; 2
    10f2:	c7 d1       	rcall	.+910    	; 0x1482 <PostSemaphore>
			return;
    10f4:	2d c0       	rjmp	.+90     	; 0x1150 <free+0x116>
	 * Note that we get here either if we hit the "break" above,
	 * or if we fell off the end of the loop.  The latter means
	 * we've got a new topmost chunk.  Either way, try aggregating
	 * with the lower chunk if possible.
	 */
	fp2->nx = fpnew;
    10f6:	b3 83       	std	Z+3, r27	; 0x03
    10f8:	a2 83       	std	Z+2, r26	; 0x02
	cp2 = (char *)&(fp2->nx);
	if (cp2 + fp2->sz == cpnew) {
    10fa:	ef 01       	movw	r28, r30
    10fc:	29 91       	ld	r18, Y+
    10fe:	39 91       	ld	r19, Y+
    1100:	ce 01       	movw	r24, r28
    1102:	82 0f       	add	r24, r18
    1104:	93 1f       	adc	r25, r19
    1106:	a8 17       	cp	r26, r24
    1108:	b9 07       	cpc	r27, r25
    110a:	69 f4       	brne	.+26     	; 0x1126 <free+0xec>
		/* lower junk adjacent, merge */
		fp2->sz += fpnew->sz + sizeof(size_t);
    110c:	e8 01       	movw	r28, r16
    110e:	5a 91       	ld	r21, -Y
    1110:	4a 91       	ld	r20, -Y
    1112:	24 0f       	add	r18, r20
    1114:	35 1f       	adc	r19, r21
    1116:	2e 5f       	subi	r18, 0xFE	; 254
    1118:	3f 4f       	sbci	r19, 0xFF	; 255
    111a:	31 83       	std	Z+1, r19	; 0x01
    111c:	20 83       	st	Z, r18
		fp2->nx = fpnew->nx;
    111e:	8a 81       	ldd	r24, Y+2	; 0x02
    1120:	9b 81       	ldd	r25, Y+3	; 0x03
    1122:	93 83       	std	Z+3, r25	; 0x03
    1124:	82 83       	std	Z+2, r24	; 0x02
	}
	PostSemaphore(&MallocBlocker,0);
    1126:	60 e0       	ldi	r22, 0x00	; 0
    1128:	70 e0       	ldi	r23, 0x00	; 0
    112a:	8e e7       	ldi	r24, 0x7E	; 126
    112c:	92 e0       	ldi	r25, 0x02	; 2
    112e:	a9 d1       	rcall	.+850    	; 0x1482 <PostSemaphore>
    1130:	0f c0       	rjmp	.+30     	; 0x1150 <free+0x116>
	     fp1;
	     fp2 = fp1, fp1 = fp1->nx) {
		if (fp1 < fpnew)
			continue;
		cp1 = (char *)fp1;
		fpnew->nx = fp1;
    1132:	c8 01       	movw	r24, r16
    1134:	02 97       	sbiw	r24, 0x02	; 2
    1136:	ec 01       	movw	r28, r24
    1138:	fb 83       	std	Y+3, r31	; 0x03
    113a:	ea 83       	std	Y+2, r30	; 0x02
		if ((char *)&(fpnew->nx) + fpnew->sz == cp1) {
    113c:	28 81       	ld	r18, Y
    113e:	39 81       	ldd	r19, Y+1	; 0x01
    1140:	c8 01       	movw	r24, r16
    1142:	82 0f       	add	r24, r18
    1144:	93 1f       	adc	r25, r19
    1146:	e8 17       	cp	r30, r24
    1148:	f9 07       	cpc	r31, r25
    114a:	09 f4       	brne	.+2      	; 0x114e <free+0x114>
    114c:	b5 cf       	rjmp	.-150    	; 0x10b8 <free+0x7e>
    114e:	c9 cf       	rjmp	.-110    	; 0x10e2 <free+0xa8>
		/* lower junk adjacent, merge */
		fp2->sz += fpnew->sz + sizeof(size_t);
		fp2->nx = fpnew->nx;
	}
	PostSemaphore(&MallocBlocker,0);
}
    1150:	df 91       	pop	r29
    1152:	cf 91       	pop	r28
    1154:	1f 91       	pop	r17
    1156:	0f 91       	pop	r16
    1158:	08 95       	ret

0000115a <OS_InitMalloc>:
// If start == 0, use default value
// If end == 0, use default value
//--------------------------------------------------------------------

void OS_InitMalloc(char *start, char *end)
{
    115a:	0f 93       	push	r16
    115c:	1f 93       	push	r17
    115e:	cf 93       	push	r28
    1160:	df 93       	push	r29
    1162:	8c 01       	movw	r16, r24
    1164:	eb 01       	movw	r28, r22
	CreateSemaphore(&MallocBlocker,1,SEMAPHORE_MODE_BLOCKING,"Malloc");
    1166:	2c e6       	ldi	r18, 0x6C	; 108
    1168:	31 e0       	ldi	r19, 0x01	; 1
    116a:	40 e0       	ldi	r20, 0x00	; 0
    116c:	50 e0       	ldi	r21, 0x00	; 0
    116e:	61 e0       	ldi	r22, 0x01	; 1
    1170:	70 e0       	ldi	r23, 0x00	; 0
    1172:	8e e7       	ldi	r24, 0x7E	; 126
    1174:	92 e0       	ldi	r25, 0x02	; 2
    1176:	7a d9       	rcall	.-3340   	; 0x46c <CreateSemaphore>
	if(start) __malloc_heap_start = start;
    1178:	01 15       	cp	r16, r1
    117a:	11 05       	cpc	r17, r1
    117c:	21 f0       	breq	.+8      	; 0x1186 <OS_InitMalloc+0x2c>
    117e:	10 93 03 01 	sts	0x0103, r17	; 0x800103 <__malloc_heap_start+0x1>
    1182:	00 93 02 01 	sts	0x0102, r16	; 0x800102 <__malloc_heap_start>
	if(end) __malloc_heap_end = end;
    1186:	20 97       	sbiw	r28, 0x00	; 0
    1188:	21 f0       	breq	.+8      	; 0x1192 <OS_InitMalloc+0x38>
    118a:	d0 93 01 01 	sts	0x0101, r29	; 0x800101 <__data_start+0x1>
    118e:	c0 93 00 01 	sts	0x0100, r28	; 0x800100 <__data_start>
}
    1192:	df 91       	pop	r29
    1194:	cf 91       	pop	r28
    1196:	1f 91       	pop	r17
    1198:	0f 91       	pop	r16
    119a:	08 95       	ret

0000119c <MqInit>:
	return value:
		pointer to new message queue
**********************************************/

MESSAGE_QUEUE * MqInit(int size,char *name)
{
    119c:	ef 92       	push	r14
    119e:	ff 92       	push	r15
    11a0:	0f 93       	push	r16
    11a2:	1f 93       	push	r17
    11a4:	cf 93       	push	r28
    11a6:	df 93       	push	r29
    11a8:	8c 01       	movw	r16, r24
    11aa:	7b 01       	movw	r14, r22
	char *buffer = malloc(sizeof(MESSAGE_QUEUE) + size * sizeof(MSG*) );
    11ac:	06 96       	adiw	r24, 0x06	; 6
    11ae:	88 0f       	add	r24, r24
    11b0:	99 1f       	adc	r25, r25
    11b2:	53 de       	rcall	.-858    	; 0xe5a <malloc>
    11b4:	ec 01       	movw	r28, r24
	MESSAGE_QUEUE *rv = (MESSAGE_QUEUE *)buffer;
	MSG **pM = (MSG **)(&buffer[sizeof(MESSAGE_QUEUE)]);
	PendSemaphore(MqBlocker,0);		//protect access
    11b6:	60 e0       	ldi	r22, 0x00	; 0
    11b8:	70 e0       	ldi	r23, 0x00	; 0
    11ba:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <MqBlocker>
    11be:	90 91 a3 01 	lds	r25, 0x01A3	; 0x8001a3 <MqBlocker+0x1>
    11c2:	f4 d0       	rcall	.+488    	; 0x13ac <PendSemaphore>
	rv->Head = 0;
    11c4:	1b 82       	std	Y+3, r1	; 0x03
    11c6:	1a 82       	std	Y+2, r1	; 0x02
	rv->Tail = 0;
    11c8:	1d 82       	std	Y+5, r1	; 0x05
    11ca:	1c 82       	std	Y+4, r1	; 0x04
	rv->nMsg = 0;
    11cc:	1f 82       	std	Y+7, r1	; 0x07
    11ce:	1e 82       	std	Y+6, r1	; 0x06
	rv->b = pM;
    11d0:	ce 01       	movw	r24, r28
    11d2:	0c 96       	adiw	r24, 0x0c	; 12
    11d4:	9b 87       	std	Y+11, r25	; 0x0b
    11d6:	8a 87       	std	Y+10, r24	; 0x0a
	rv->Size = size;
    11d8:	19 87       	std	Y+9, r17	; 0x09
    11da:	08 87       	std	Y+8, r16	; 0x08
	rv->Sem = NewSemaphore(0,SEMAPHORE_MODE_BLOCKING,name);
    11dc:	a7 01       	movw	r20, r14
    11de:	60 e0       	ldi	r22, 0x00	; 0
    11e0:	70 e0       	ldi	r23, 0x00	; 0
    11e2:	80 e0       	ldi	r24, 0x00	; 0
    11e4:	90 e0       	ldi	r25, 0x00	; 0
    11e6:	74 d9       	rcall	.-3352   	; 0x4d0 <NewSemaphore>
    11e8:	99 83       	std	Y+1, r25	; 0x01
    11ea:	88 83       	st	Y, r24
	PostSemaphore(MqBlocker,0);		//release access
    11ec:	60 e0       	ldi	r22, 0x00	; 0
    11ee:	70 e0       	ldi	r23, 0x00	; 0
    11f0:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <MqBlocker>
    11f4:	90 91 a3 01 	lds	r25, 0x01A3	; 0x8001a3 <MqBlocker+0x1>
    11f8:	44 d1       	rcall	.+648    	; 0x1482 <PostSemaphore>
	return rv;
}
    11fa:	ce 01       	movw	r24, r28
    11fc:	df 91       	pop	r29
    11fe:	cf 91       	pop	r28
    1200:	1f 91       	pop	r17
    1202:	0f 91       	pop	r16
    1204:	ff 90       	pop	r15
    1206:	ef 90       	pop	r14
    1208:	08 95       	ret

0000120a <MqPut>:
		mq.....pointer to the message queue
		m......pointer to message to send
*********************************************/

void MqPut(MESSAGE_QUEUE *mq,MSG *m)
{
    120a:	ff 92       	push	r15
    120c:	0f 93       	push	r16
    120e:	1f 93       	push	r17
    1210:	cf 93       	push	r28
    1212:	df 93       	push	r29
	char sr;

	if(mq)	//are we live?
    1214:	00 97       	sbiw	r24, 0x00	; 0
    1216:	09 f4       	brne	.+2      	; 0x121a <MqPut+0x10>
    1218:	3f c0       	rjmp	.+126    	; 0x1298 <MqPut+0x8e>
    121a:	8b 01       	movw	r16, r22
    121c:	ec 01       	movw	r28, r24
	{
		if(!InterruptCount)sr = Disable();		//enter critical section
    121e:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <InterruptCount>
    1222:	90 91 13 02 	lds	r25, 0x0213	; 0x800213 <InterruptCount+0x1>
    1226:	89 2b       	or	r24, r25
    1228:	21 f4       	brne	.+8      	; 0x1232 <MqPut+0x28>
    122a:	0e 94 6e 00 	call	0xdc	; 0xdc <Disable>
    122e:	f8 2e       	mov	r15, r24
    1230:	01 c0       	rjmp	.+2      	; 0x1234 <MqPut+0x2a>
		m......pointer to message to send
*********************************************/

void MqPut(MESSAGE_QUEUE *mq,MSG *m)
{
	char sr;
    1232:	f1 2c       	mov	r15, r1

	if(mq)	//are we live?
	{
		if(!InterruptCount)sr = Disable();		//enter critical section
		if(mq->nMsg < mq->Size)	//is there room?
    1234:	2e 81       	ldd	r18, Y+6	; 0x06
    1236:	3f 81       	ldd	r19, Y+7	; 0x07
    1238:	88 85       	ldd	r24, Y+8	; 0x08
    123a:	99 85       	ldd	r25, Y+9	; 0x09
    123c:	28 17       	cp	r18, r24
    123e:	39 07       	cpc	r19, r25
    1240:	14 f5       	brge	.+68     	; 0x1286 <MqPut+0x7c>
		{
			mq->b[mq->Head++] = m;	//put message into queue
    1242:	ea 85       	ldd	r30, Y+10	; 0x0a
    1244:	fb 85       	ldd	r31, Y+11	; 0x0b
    1246:	8a 81       	ldd	r24, Y+2	; 0x02
    1248:	9b 81       	ldd	r25, Y+3	; 0x03
    124a:	9c 01       	movw	r18, r24
    124c:	2f 5f       	subi	r18, 0xFF	; 255
    124e:	3f 4f       	sbci	r19, 0xFF	; 255
    1250:	3b 83       	std	Y+3, r19	; 0x03
    1252:	2a 83       	std	Y+2, r18	; 0x02
    1254:	88 0f       	add	r24, r24
    1256:	99 1f       	adc	r25, r25
    1258:	e8 0f       	add	r30, r24
    125a:	f9 1f       	adc	r31, r25
    125c:	11 83       	std	Z+1, r17	; 0x01
    125e:	00 83       	st	Z, r16
			if(mq->Head == mq->Size)
    1260:	2a 81       	ldd	r18, Y+2	; 0x02
    1262:	3b 81       	ldd	r19, Y+3	; 0x03
    1264:	88 85       	ldd	r24, Y+8	; 0x08
    1266:	99 85       	ldd	r25, Y+9	; 0x09
    1268:	28 17       	cp	r18, r24
    126a:	39 07       	cpc	r19, r25
    126c:	11 f4       	brne	.+4      	; 0x1272 <MqPut+0x68>
				mq->Head = 0;	//wrap head pointer
    126e:	1b 82       	std	Y+3, r1	; 0x03
    1270:	1a 82       	std	Y+2, r1	; 0x02
			mq->nMsg++;			//increment number of messages
    1272:	8e 81       	ldd	r24, Y+6	; 0x06
    1274:	9f 81       	ldd	r25, Y+7	; 0x07
    1276:	01 96       	adiw	r24, 0x01	; 1
    1278:	9f 83       	std	Y+7, r25	; 0x07
    127a:	8e 83       	std	Y+6, r24	; 0x06
			PostSemaphore(mq->Sem,0);
    127c:	60 e0       	ldi	r22, 0x00	; 0
    127e:	70 e0       	ldi	r23, 0x00	; 0
    1280:	88 81       	ld	r24, Y
    1282:	99 81       	ldd	r25, Y+1	; 0x01
    1284:	fe d0       	rcall	.+508    	; 0x1482 <PostSemaphore>
		}
		if(!InterruptCount)Enable(sr);			//exit critical section
    1286:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <InterruptCount>
    128a:	90 91 13 02 	lds	r25, 0x0213	; 0x800213 <InterruptCount+0x1>
    128e:	89 2b       	or	r24, r25
    1290:	19 f4       	brne	.+6      	; 0x1298 <MqPut+0x8e>
    1292:	8f 2d       	mov	r24, r15
    1294:	0e 94 72 00 	call	0xe4	; 0xe4 <Enable>
	}
}
    1298:	df 91       	pop	r29
    129a:	cf 91       	pop	r28
    129c:	1f 91       	pop	r17
    129e:	0f 91       	pop	r16
    12a0:	ff 90       	pop	r15
    12a2:	08 95       	ret

000012a4 <MqGet>:
		mq.....pointer to message queue
	return value:
		pointer to a message block
************************************************/
MSG *MqGet(MESSAGE_QUEUE *mq)
{
    12a4:	0f 93       	push	r16
    12a6:	1f 93       	push	r17
    12a8:	cf 93       	push	r28
    12aa:	df 93       	push	r29
	char sr;
	MSG *retval = 0;

	if(mq)
    12ac:	00 97       	sbiw	r24, 0x00	; 0
    12ae:	39 f1       	breq	.+78     	; 0x12fe <MqGet+0x5a>
    12b0:	ec 01       	movw	r28, r24
	{
		PendSemaphore(mq->Sem,0);		//wait for message
    12b2:	60 e0       	ldi	r22, 0x00	; 0
    12b4:	70 e0       	ldi	r23, 0x00	; 0
    12b6:	88 81       	ld	r24, Y
    12b8:	99 81       	ldd	r25, Y+1	; 0x01
    12ba:	78 d0       	rcall	.+240    	; 0x13ac <PendSemaphore>
		sr = Disable();				//endter critical section
    12bc:	0e 94 6e 00 	call	0xdc	; 0xdc <Disable>
		retval = mq->b[mq->Tail++];	//remove message from queue
    12c0:	ea 85       	ldd	r30, Y+10	; 0x0a
    12c2:	fb 85       	ldd	r31, Y+11	; 0x0b
    12c4:	2c 81       	ldd	r18, Y+4	; 0x04
    12c6:	3d 81       	ldd	r19, Y+5	; 0x05
    12c8:	a9 01       	movw	r20, r18
    12ca:	4f 5f       	subi	r20, 0xFF	; 255
    12cc:	5f 4f       	sbci	r21, 0xFF	; 255
    12ce:	5d 83       	std	Y+5, r21	; 0x05
    12d0:	4c 83       	std	Y+4, r20	; 0x04
    12d2:	22 0f       	add	r18, r18
    12d4:	33 1f       	adc	r19, r19
    12d6:	e2 0f       	add	r30, r18
    12d8:	f3 1f       	adc	r31, r19
    12da:	00 81       	ld	r16, Z
    12dc:	11 81       	ldd	r17, Z+1	; 0x01
		if(mq->Tail == mq->Size)	//are we at the end of the line
    12de:	28 85       	ldd	r18, Y+8	; 0x08
    12e0:	39 85       	ldd	r19, Y+9	; 0x09
    12e2:	42 17       	cp	r20, r18
    12e4:	53 07       	cpc	r21, r19
    12e6:	11 f4       	brne	.+4      	; 0x12ec <MqGet+0x48>
			mq->Tail = 0;			//wrap tail pointer
    12e8:	1d 82       	std	Y+5, r1	; 0x05
    12ea:	1c 82       	std	Y+4, r1	; 0x04
		mq->nMsg--;					//decrement number of messages in queue
    12ec:	2e 81       	ldd	r18, Y+6	; 0x06
    12ee:	3f 81       	ldd	r19, Y+7	; 0x07
    12f0:	21 50       	subi	r18, 0x01	; 1
    12f2:	31 09       	sbc	r19, r1
    12f4:	3f 83       	std	Y+7, r19	; 0x07
    12f6:	2e 83       	std	Y+6, r18	; 0x06
		Enable(sr);
    12f8:	0e 94 72 00 	call	0xe4	; 0xe4 <Enable>
    12fc:	02 c0       	rjmp	.+4      	; 0x1302 <MqGet+0x5e>
		pointer to a message block
************************************************/
MSG *MqGet(MESSAGE_QUEUE *mq)
{
	char sr;
	MSG *retval = 0;
    12fe:	00 e0       	ldi	r16, 0x00	; 0
    1300:	10 e0       	ldi	r17, 0x00	; 0
			mq->Tail = 0;			//wrap tail pointer
		mq->nMsg--;					//decrement number of messages in queue
		Enable(sr);
	}
	return retval;
}
    1302:	c8 01       	movw	r24, r16
    1304:	df 91       	pop	r29
    1306:	cf 91       	pop	r28
    1308:	1f 91       	pop	r17
    130a:	0f 91       	pop	r16
    130c:	08 95       	ret

0000130e <NewMSG>:
		NULL on fail
		Pointer to Message Block on success
************************************************/

MSG *NewMSG(int payloadSize)
{
    130e:	cf 93       	push	r28
    1310:	df 93       	push	r29
    1312:	ec 01       	movw	r28, r24
	MSG *retval = 0;

	if((retval = (MSG *)malloc(sizeof(MSG) + payloadSize)) != NULL)
    1314:	0d 96       	adiw	r24, 0x0d	; 13
    1316:	a1 dd       	rcall	.-1214   	; 0xe5a <malloc>
    1318:	00 97       	sbiw	r24, 0x00	; 0
    131a:	99 f0       	breq	.+38     	; 0x1342 <NewMSG+0x34>
	{
		MsgAllocCount++;
    131c:	20 91 a0 01 	lds	r18, 0x01A0	; 0x8001a0 <MsgAllocCount>
    1320:	30 91 a1 01 	lds	r19, 0x01A1	; 0x8001a1 <MsgAllocCount+0x1>
    1324:	2f 5f       	subi	r18, 0xFF	; 255
    1326:	3f 4f       	sbci	r19, 0xFF	; 255
    1328:	30 93 a1 01 	sts	0x01A1, r19	; 0x8001a1 <MsgAllocCount+0x1>
    132c:	20 93 a0 01 	sts	0x01A0, r18	; 0x8001a0 <MsgAllocCount>
		retval->MaxPayload = payloadSize;
    1330:	fc 01       	movw	r30, r24
    1332:	d5 83       	std	Z+5, r29	; 0x05
    1334:	c4 83       	std	Z+4, r28	; 0x04
		retval->ReplyHandle = NULL;
    1336:	11 86       	std	Z+9, r1	; 0x09
    1338:	10 86       	std	Z+8, r1	; 0x08
		retval->PayloadSize = 0;
    133a:	13 82       	std	Z+3, r1	; 0x03
    133c:	12 82       	std	Z+2, r1	; 0x02
		retval->next = 0;
    133e:	13 86       	std	Z+11, r1	; 0x0b
    1340:	12 86       	std	Z+10, r1	; 0x0a
		retval->PayloadSize = 0;
	}
	return retval;
}
    1342:	df 91       	pop	r29
    1344:	cf 91       	pop	r28
    1346:	08 95       	ret

00001348 <DeleteMSG>:
void DeleteMSG(MSG *m)
{
	//-------------------------------------
	//put message into message pool
	//-------------------------------------
	free(m);
    1348:	78 ce       	rjmp	.-784    	; 0x103a <free>
    134a:	08 95       	ret

0000134c <InitMessageQueueManager>:
void InitMessageQueueManager(void)
{
	//--------------------------------------
	// Allow access to one task at a time
	//--------------------------------------
	MqBlocker = NewSemaphore(1,SEMAPHORE_MODE_BLOCKING,"MSG_BLOCKER");
    134c:	43 e7       	ldi	r20, 0x73	; 115
    134e:	51 e0       	ldi	r21, 0x01	; 1
    1350:	60 e0       	ldi	r22, 0x00	; 0
    1352:	70 e0       	ldi	r23, 0x00	; 0
    1354:	81 e0       	ldi	r24, 0x01	; 1
    1356:	90 e0       	ldi	r25, 0x00	; 0
    1358:	bb d8       	rcall	.-3722   	; 0x4d0 <NewSemaphore>
    135a:	90 93 a3 01 	sts	0x01A3, r25	; 0x8001a3 <MqBlocker+0x1>
    135e:	80 93 a2 01 	sts	0x01A2, r24	; 0x8001a2 <MqBlocker>
    1362:	08 95       	ret

00001364 <PriorityCompare>:
//		positive....priority of s1 > s2
//		negative....priority of s1 < s2
//----------------------------------------------------------------------
//
static int PriorityCompare(void **s1, void **s2)
{
    1364:	cf 93       	push	r28
    1366:	df 93       	push	r29
	int r;

	//check priority levels
	if( (r = ((TCB *)*s1)->priority - ((TCB *)*s2)->priority) != 0)
    1368:	dc 01       	movw	r26, r24
    136a:	ed 91       	ld	r30, X+
    136c:	fc 91       	ld	r31, X
    136e:	eb 01       	movw	r28, r22
    1370:	a8 81       	ld	r26, Y
    1372:	b9 81       	ldd	r27, Y+1	; 0x01
    1374:	86 81       	ldd	r24, Z+6	; 0x06
    1376:	97 81       	ldd	r25, Z+7	; 0x07
    1378:	16 96       	adiw	r26, 0x06	; 6
    137a:	2d 91       	ld	r18, X+
    137c:	3c 91       	ld	r19, X
    137e:	17 97       	sbiw	r26, 0x07	; 7
    1380:	82 1b       	sub	r24, r18
    1382:	93 0b       	sbc	r25, r19
    1384:	41 f4       	brne	.+16     	; 0x1396 <PriorityCompare+0x32>
		return r;
	//if priority levels are the same, then check time stamps
	return (int)(((TCB *)*s2)->TimeStamp - ((TCB *)*s1)->TimeStamp);
    1386:	1c 96       	adiw	r26, 0x0c	; 12
    1388:	8d 91       	ld	r24, X+
    138a:	9c 91       	ld	r25, X
    138c:	1d 97       	sbiw	r26, 0x0d	; 13
    138e:	24 85       	ldd	r18, Z+12	; 0x0c
    1390:	35 85       	ldd	r19, Z+13	; 0x0d
    1392:	82 1b       	sub	r24, r18
    1394:	93 0b       	sbc	r25, r19
}
    1396:	df 91       	pop	r29
    1398:	cf 91       	pop	r28
    139a:	08 95       	ret

0000139c <OSInit>:
//	parameters:
//		none
//---------------------------------------------------------------------------
void OSInit(void)
{
	InitPQ(&ActiveTasks,32,PriorityCompare);
    139c:	42 eb       	ldi	r20, 0xB2	; 178
    139e:	59 e0       	ldi	r21, 0x09	; 9
    13a0:	60 e2       	ldi	r22, 0x20	; 32
    13a2:	70 e0       	ldi	r23, 0x00	; 0
    13a4:	80 e0       	ldi	r24, 0x00	; 0
    13a6:	92 e0       	ldi	r25, 0x02	; 2
    13a8:	d8 c0       	rjmp	.+432    	; 0x155a <InitPQ>
    13aa:	08 95       	ret

000013ac <PendSemaphore>:
**	Inidicates status of operation.  0 or positive is normal,
**		negative is error
**************************************************************************/

int PendSemaphore(ECB *e, int Timeout)	//wait for semaphore availiable
{
    13ac:	ef 92       	push	r14
    13ae:	ff 92       	push	r15
    13b0:	1f 93       	push	r17
    13b2:	cf 93       	push	r28
    13b4:	df 93       	push	r29
    13b6:	ec 01       	movw	r28, r24
    13b8:	7b 01       	movw	r14, r22
	char sr;
	int retval;
	sr = Disable();
    13ba:	0e 94 6e 00 	call	0xdc	; 0xdc <Disable>
    13be:	18 2f       	mov	r17, r24
	if(e->EventCount > 0)	/*	is resource availiable?	*/
    13c0:	8a 85       	ldd	r24, Y+10	; 0x0a
    13c2:	9b 85       	ldd	r25, Y+11	; 0x0b
    13c4:	18 16       	cp	r1, r24
    13c6:	19 06       	cpc	r1, r25
    13c8:	4c f4       	brge	.+18     	; 0x13dc <PendSemaphore+0x30>
	{
		/*	yes	*/
		--e->EventCount;
    13ca:	01 97       	sbiw	r24, 0x01	; 1
    13cc:	9b 87       	std	Y+11, r25	; 0x0b
    13ce:	8a 87       	std	Y+10, r24	; 0x0a
		Enable(sr);
    13d0:	81 2f       	mov	r24, r17
    13d2:	0e 94 72 00 	call	0xe4	; 0xe4 <Enable>
		retval = EVENT_NOERROR;	//everything is peachy
    13d6:	80 e0       	ldi	r24, 0x00	; 0
    13d8:	90 e0       	ldi	r25, 0x00	; 0
    13da:	4d c0       	rjmp	.+154    	; 0x1476 <PendSemaphore+0xca>
	}
	else
	{
		/*	no	*/
		--e->EventCount;
    13dc:	01 97       	sbiw	r24, 0x01	; 1
    13de:	9b 87       	std	Y+11, r25	; 0x0b
    13e0:	8a 87       	std	Y+10, r24	; 0x0a
		if(!e->task_h)		//make linked list of waiting tasks
    13e2:	88 81       	ld	r24, Y
    13e4:	99 81       	ldd	r25, Y+1	; 0x01
    13e6:	89 2b       	or	r24, r25
    13e8:	39 f4       	brne	.+14     	; 0x13f8 <PendSemaphore+0x4c>
			e->task_h = CurrentTask;
    13ea:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <CurrentTask>
    13ee:	90 91 0f 02 	lds	r25, 0x020F	; 0x80020f <CurrentTask+0x1>
    13f2:	99 83       	std	Y+1, r25	; 0x01
    13f4:	88 83       	st	Y, r24
    13f6:	08 c0       	rjmp	.+16     	; 0x1408 <PendSemaphore+0x5c>
		else
			e->task_t->next = CurrentTask;
    13f8:	ea 81       	ldd	r30, Y+2	; 0x02
    13fa:	fb 81       	ldd	r31, Y+3	; 0x03
    13fc:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <CurrentTask>
    1400:	90 91 0f 02 	lds	r25, 0x020F	; 0x80020f <CurrentTask+0x1>
    1404:	95 8b       	std	Z+21, r25	; 0x15
    1406:	84 8b       	std	Z+20, r24	; 0x14
		e->task_t = CurrentTask;
    1408:	e0 91 0e 02 	lds	r30, 0x020E	; 0x80020e <CurrentTask>
    140c:	f0 91 0f 02 	lds	r31, 0x020F	; 0x80020f <CurrentTask+0x1>
    1410:	fb 83       	std	Y+3, r31	; 0x03
    1412:	ea 83       	std	Y+2, r30	; 0x02
		CurrentTask->status = EVENT_NOERROR;
    1414:	11 86       	std	Z+9, r1	; 0x09
    1416:	10 86       	std	Z+8, r1	; 0x08
		if(e->SemaphoreMode)
    1418:	88 85       	ldd	r24, Y+8	; 0x08
    141a:	99 85       	ldd	r25, Y+9	; 0x09
    141c:	89 2b       	or	r24, r25
    141e:	11 f0       	breq	.+4      	; 0x1424 <PendSemaphore+0x78>
			CurrentTask->timeout = Timeout;
    1420:	f1 8a       	std	Z+17, r15	; 0x11
    1422:	e0 8a       	std	Z+16, r14	; 0x10

		//swap out current task
		//Update the time stamp on current task
		CurrentTask->TimeStamp = TStamp;
    1424:	80 91 a0 02 	lds	r24, 0x02A0	; 0x8002a0 <TStamp>
    1428:	90 91 a1 02 	lds	r25, 0x02A1	; 0x8002a1 <TStamp+0x1>
    142c:	95 87       	std	Z+13, r25	; 0x0d
    142e:	84 87       	std	Z+12, r24	; 0x0c
		//get highest priority task from queue
		if(Delete(&ActiveTasks,(void **)&NextTask))	
    1430:	6a e0       	ldi	r22, 0x0A	; 10
    1432:	72 e0       	ldi	r23, 0x02	; 2
    1434:	80 e0       	ldi	r24, 0x00	; 0
    1436:	92 e0       	ldi	r25, 0x02	; 2
    1438:	84 d1       	rcall	.+776    	; 0x1742 <Delete>
    143a:	89 2b       	or	r24, r25
    143c:	59 f0       	breq	.+22     	; 0x1454 <PendSemaphore+0xa8>
		{
			//increment swaps on new task
			NextTask->TcbSwaps++;
    143e:	e0 91 0a 02 	lds	r30, 0x020A	; 0x80020a <NextTask>
    1442:	f0 91 0b 02 	lds	r31, 0x020B	; 0x80020b <NextTask+0x1>
    1446:	86 85       	ldd	r24, Z+14	; 0x0e
    1448:	97 85       	ldd	r25, Z+15	; 0x0f
    144a:	01 96       	adiw	r24, 0x01	; 1
    144c:	97 87       	std	Z+15, r25	; 0x0f
			DoSwap();		//do context swap
    144e:	86 87       	std	Z+14, r24	; 0x0e
    1450:	32 d9       	rcall	.-3484   	; 0x6b6 <DoSwap>
    1452:	08 c0       	rjmp	.+16     	; 0x1464 <PendSemaphore+0xb8>
		}
		else
		{
			//there were no tasks in the queue
			//set status to error and return
			CurrentTask->status = EVENT_NOTASKS;
    1454:	e0 91 0e 02 	lds	r30, 0x020E	; 0x80020e <CurrentTask>
    1458:	f0 91 0f 02 	lds	r31, 0x020F	; 0x80020f <CurrentTask+0x1>
    145c:	8f ef       	ldi	r24, 0xFF	; 255
    145e:	9f ef       	ldi	r25, 0xFF	; 255
    1460:	91 87       	std	Z+9, r25	; 0x09
    1462:	80 87       	std	Z+8, r24	; 0x08
		}
		//-----------------------
		// Pend is over, check status
		//-----------------------

		Enable(sr);
    1464:	81 2f       	mov	r24, r17
    1466:	0e 94 72 00 	call	0xe4	; 0xe4 <Enable>
		retval = CurrentTask->status;	//return this value
    146a:	e0 91 0e 02 	lds	r30, 0x020E	; 0x80020e <CurrentTask>
    146e:	f0 91 0f 02 	lds	r31, 0x020F	; 0x80020f <CurrentTask+0x1>
    1472:	80 85       	ldd	r24, Z+8	; 0x08
    1474:	91 85       	ldd	r25, Z+9	; 0x09
	}
	return retval;
}
    1476:	df 91       	pop	r29
    1478:	cf 91       	pop	r28
    147a:	1f 91       	pop	r17
    147c:	ff 90       	pop	r15
    147e:	ef 90       	pop	r14
    1480:	08 95       	ret

00001482 <PostSemaphore>:
**
** return value: 0 = No Error, negative indicates error
***************************************************************************/

int PostSemaphore(ECB *e, int Value)	//signal semaphore availiable
{
    1482:	ef 92       	push	r14
    1484:	ff 92       	push	r15
    1486:	1f 93       	push	r17
    1488:	cf 93       	push	r28
    148a:	df 93       	push	r29
    148c:	ec 01       	movw	r28, r24
    148e:	7b 01       	movw	r14, r22
	char sr=0;
	//------------------------------
	// do not disable IRQ if inside
	// of an interrupt routine
	//------------------------------
	if(!InterruptCount)sr = Disable();
    1490:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <InterruptCount>
    1494:	90 91 13 02 	lds	r25, 0x0213	; 0x800213 <InterruptCount+0x1>
    1498:	89 2b       	or	r24, r25
    149a:	21 f4       	brne	.+8      	; 0x14a4 <PostSemaphore+0x22>
    149c:	0e 94 6e 00 	call	0xdc	; 0xdc <Disable>
    14a0:	18 2f       	mov	r17, r24
    14a2:	01 c0       	rjmp	.+2      	; 0x14a6 <PostSemaphore+0x24>
***************************************************************************/

int PostSemaphore(ECB *e, int Value)	//signal semaphore availiable
{
	TCB *t;
	char sr=0;
    14a4:	10 e0       	ldi	r17, 0x00	; 0
	//------------------------------
	// do not disable IRQ if inside
	// of an interrupt routine
	//------------------------------
	if(!InterruptCount)sr = Disable();
	if(e->EventCount < 32766)	//is it going to overflow??
    14a6:	8a 85       	ldd	r24, Y+10	; 0x0a
    14a8:	9b 85       	ldd	r25, Y+11	; 0x0b
    14aa:	8e 3f       	cpi	r24, 0xFE	; 254
    14ac:	2f e7       	ldi	r18, 0x7F	; 127
    14ae:	92 07       	cpc	r25, r18
    14b0:	cc f5       	brge	.+114    	; 0x1524 <PostSemaphore+0xa2>
	{
		if(e->EventCount >= 0)	//increment semaphore
    14b2:	99 23       	and	r25, r25
    14b4:	6c f0       	brlt	.+26     	; 0x14d0 <PostSemaphore+0x4e>
		{
			++e->EventCount;
    14b6:	01 96       	adiw	r24, 0x01	; 1
    14b8:	9b 87       	std	Y+11, r25	; 0x0b
    14ba:	8a 87       	std	Y+10, r24	; 0x0a
			if(!InterruptCount)Enable(sr);
    14bc:	c0 91 12 02 	lds	r28, 0x0212	; 0x800212 <InterruptCount>
    14c0:	d0 91 13 02 	lds	r29, 0x0213	; 0x800213 <InterruptCount+0x1>
    14c4:	20 97       	sbiw	r28, 0x00	; 0
    14c6:	d1 f5       	brne	.+116    	; 0x153c <PostSemaphore+0xba>
    14c8:	81 2f       	mov	r24, r17
    14ca:	0e 94 72 00 	call	0xe4	; 0xe4 <Enable>
    14ce:	3e c0       	rjmp	.+124    	; 0x154c <PostSemaphore+0xca>
		}
		else
		{
			++e->EventCount;
    14d0:	01 96       	adiw	r24, 0x01	; 1
    14d2:	9b 87       	std	Y+11, r25	; 0x0b
    14d4:	8a 87       	std	Y+10, r24	; 0x0a
			if(e->task_h)				//is there really a task waiting?
    14d6:	e8 81       	ld	r30, Y
    14d8:	f9 81       	ldd	r31, Y+1	; 0x01
    14da:	30 97       	sbiw	r30, 0x00	; 0
    14dc:	c9 f0       	breq	.+50     	; 0x1510 <PostSemaphore+0x8e>
			{
				t = e->task_h;		//get first task in
				e->task_h = t->next;       //remove from list
    14de:	84 89       	ldd	r24, Z+20	; 0x14
    14e0:	95 89       	ldd	r25, Z+21	; 0x15
    14e2:	99 83       	std	Y+1, r25	; 0x01
    14e4:	88 83       	st	Y, r24
				t->next = (TCB *)0;
    14e6:	15 8a       	std	Z+21, r1	; 0x15
    14e8:	14 8a       	std	Z+20, r1	; 0x14
				t->status = Value;			//return this value
    14ea:	f1 86       	std	Z+9, r15	; 0x09
    14ec:	e0 86       	std	Z+8, r14	; 0x08
				Insert(&ActiveTasks,t);	//put task back onto active list
    14ee:	bf 01       	movw	r22, r30
    14f0:	80 e0       	ldi	r24, 0x00	; 0
    14f2:	92 e0       	ldi	r25, 0x02	; 2
    14f4:	96 d0       	rcall	.+300    	; 0x1622 <Insert>
				if(!InterruptCount)Enable(sr);
    14f6:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <InterruptCount>
    14fa:	90 91 13 02 	lds	r25, 0x0213	; 0x800213 <InterruptCount+0x1>
    14fe:	89 2b       	or	r24, r25
    1500:	19 f4       	brne	.+6      	; 0x1508 <PostSemaphore+0x86>
    1502:	81 2f       	mov	r24, r17
    1504:	0e 94 72 00 	call	0xe4	; 0xe4 <Enable>
				Yield();
    1508:	12 d6       	rcall	.+3108   	; 0x212e <Yield>
			else
			{
				if(!InterruptCount)Enable(sr);
			}
		}
		return EVENT_NOERROR;
    150a:	c0 e0       	ldi	r28, 0x00	; 0
    150c:	d0 e0       	ldi	r29, 0x00	; 0
    150e:	1e c0       	rjmp	.+60     	; 0x154c <PostSemaphore+0xca>
				if(!InterruptCount)Enable(sr);
				Yield();
			}
			else
			{
				if(!InterruptCount)Enable(sr);
    1510:	c0 91 12 02 	lds	r28, 0x0212	; 0x800212 <InterruptCount>
    1514:	d0 91 13 02 	lds	r29, 0x0213	; 0x800213 <InterruptCount+0x1>
    1518:	20 97       	sbiw	r28, 0x00	; 0
    151a:	99 f4       	brne	.+38     	; 0x1542 <PostSemaphore+0xc0>
    151c:	81 2f       	mov	r24, r17
    151e:	0e 94 72 00 	call	0xe4	; 0xe4 <Enable>
    1522:	14 c0       	rjmp	.+40     	; 0x154c <PostSemaphore+0xca>
		}
		return EVENT_NOERROR;
	}
	else
	{
		if(!InterruptCount)Enable(sr);
    1524:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <InterruptCount>
    1528:	90 91 13 02 	lds	r25, 0x0213	; 0x800213 <InterruptCount+0x1>
    152c:	89 2b       	or	r24, r25
    152e:	61 f4       	brne	.+24     	; 0x1548 <PostSemaphore+0xc6>
    1530:	81 2f       	mov	r24, r17
    1532:	0e 94 72 00 	call	0xe4	; 0xe4 <Enable>
		return(EVENT_OVERFLOW);
    1536:	ce ef       	ldi	r28, 0xFE	; 254
    1538:	df ef       	ldi	r29, 0xFF	; 255
    153a:	08 c0       	rjmp	.+16     	; 0x154c <PostSemaphore+0xca>
			else
			{
				if(!InterruptCount)Enable(sr);
			}
		}
		return EVENT_NOERROR;
    153c:	c0 e0       	ldi	r28, 0x00	; 0
    153e:	d0 e0       	ldi	r29, 0x00	; 0
    1540:	05 c0       	rjmp	.+10     	; 0x154c <PostSemaphore+0xca>
    1542:	c0 e0       	ldi	r28, 0x00	; 0
    1544:	d0 e0       	ldi	r29, 0x00	; 0
    1546:	02 c0       	rjmp	.+4      	; 0x154c <PostSemaphore+0xca>
	}
	else
	{
		if(!InterruptCount)Enable(sr);
		return(EVENT_OVERFLOW);
    1548:	ce ef       	ldi	r28, 0xFE	; 254
    154a:	df ef       	ldi	r29, 0xFF	; 255
	}
}
    154c:	ce 01       	movw	r24, r28
    154e:	df 91       	pop	r29
    1550:	cf 91       	pop	r28
    1552:	1f 91       	pop	r17
    1554:	ff 90       	pop	r15
    1556:	ef 90       	pop	r14
    1558:	08 95       	ret

0000155a <InitPQ>:
{
	void *pTemp;

	pTemp = *ppS1;
	*ppS1 = *ppS2;
	*ppS2 = pTemp;
    155a:	cf 93       	push	r28
    155c:	df 93       	push	r29
    155e:	ec 01       	movw	r28, r24
    1560:	59 83       	std	Y+1, r21	; 0x01
    1562:	48 83       	st	Y, r20
    1564:	1b 82       	std	Y+3, r1	; 0x03
    1566:	1a 82       	std	Y+2, r1	; 0x02
    1568:	7d 83       	std	Y+5, r23	; 0x05
    156a:	6c 83       	std	Y+4, r22	; 0x04
    156c:	cb 01       	movw	r24, r22
    156e:	88 0f       	add	r24, r24
    1570:	99 1f       	adc	r25, r25
    1572:	73 dc       	rcall	.-1818   	; 0xe5a <malloc>
    1574:	99 87       	std	Y+9, r25	; 0x09
    1576:	88 87       	std	Y+8, r24	; 0x08
    1578:	02 97       	sbiw	r24, 0x02	; 2
    157a:	9f 83       	std	Y+7, r25	; 0x07
    157c:	8e 83       	std	Y+6, r24	; 0x06
    157e:	df 91       	pop	r29
    1580:	cf 91       	pop	r28
    1582:	08 95       	ret

00001584 <ReheapUp>:
**
**	parameter:
**		q......pointer to priority queue
***************************************************/
void ReheapUp(PQ* q)
{
    1584:	cf 92       	push	r12
    1586:	df 92       	push	r13
    1588:	ef 92       	push	r14
    158a:	ff 92       	push	r15
    158c:	0f 93       	push	r16
    158e:	1f 93       	push	r17
    1590:	cf 93       	push	r28
    1592:	df 93       	push	r29
    1594:	6c 01       	movw	r12, r24
	void **ppChild;	//pointer to child

	//-------------------------
	// Index of child node
	//-------------------------
	child = q->m_nItems - 1;
    1596:	dc 01       	movw	r26, r24
    1598:	12 96       	adiw	r26, 0x02	; 2
    159a:	8d 91       	ld	r24, X+
    159c:	9c 91       	ld	r25, X
    159e:	13 97       	sbiw	r26, 0x03	; 3
    15a0:	ec 01       	movw	r28, r24
    15a2:	21 97       	sbiw	r28, 0x01	; 1
	//-------------------------
	// Index of parent node
	// Keep looping while
	// parent is valid (>= 0)
	//-------------------------
	while((parent = (child - 1)/2) >= 0)
    15a4:	02 97       	sbiw	r24, 0x02	; 2
    15a6:	7c 01       	movw	r14, r24
    15a8:	1a f4       	brpl	.+6      	; 0x15b0 <ReheapUp+0x2c>
    15aa:	bf ef       	ldi	r27, 0xFF	; 255
    15ac:	eb 1a       	sub	r14, r27
    15ae:	fb 0a       	sbc	r15, r27
    15b0:	f5 94       	asr	r15
    15b2:	e7 94       	ror	r14
    15b4:	ff 20       	and	r15, r15
    15b6:	14 f4       	brge	.+4      	; 0x15bc <ReheapUp+0x38>
    15b8:	2b c0       	rjmp	.+86     	; 0x1610 <ReheapUp+0x8c>
    15ba:	7c 01       	movw	r14, r24
	{
		//-----------------------------
		// get pointers to parent
		// and child nodes
		//------------------------------
		ppChild = &q->m_ppHeap[child];
    15bc:	f6 01       	movw	r30, r12
    15be:	80 85       	ldd	r24, Z+8	; 0x08
    15c0:	91 85       	ldd	r25, Z+9	; 0x09
    15c2:	cc 0f       	add	r28, r28
    15c4:	dd 1f       	adc	r29, r29
    15c6:	c8 0f       	add	r28, r24
    15c8:	d9 1f       	adc	r29, r25
		ppParent = &q->m_ppHeap[parent];
    15ca:	87 01       	movw	r16, r14
    15cc:	00 0f       	add	r16, r16
    15ce:	11 1f       	adc	r17, r17
    15d0:	08 0f       	add	r16, r24
    15d2:	19 1f       	adc	r17, r25
		// If the priority of the parent
		// is greater than or equal to
		// the priority of the child,
		// we are done, break from the loop
		//---------------------------------
		if( (*q->m_Cmp)(ppParent,ppChild) >= 0)
    15d4:	01 90       	ld	r0, Z+
    15d6:	f0 81       	ld	r31, Z
    15d8:	e0 2d       	mov	r30, r0
    15da:	be 01       	movw	r22, r28
    15dc:	c8 01       	movw	r24, r16
    15de:	09 95       	icall
    15e0:	99 23       	and	r25, r25
    15e2:	b4 f4       	brge	.+44     	; 0x1610 <ReheapUp+0x8c>

void swap(void **ppS1,void **ppS2)
{
	void *pTemp;

	pTemp = *ppS1;
    15e4:	d8 01       	movw	r26, r16
    15e6:	8d 91       	ld	r24, X+
    15e8:	9c 91       	ld	r25, X
    15ea:	11 97       	sbiw	r26, 0x01	; 1
	*ppS1 = *ppS2;
    15ec:	28 81       	ld	r18, Y
    15ee:	39 81       	ldd	r19, Y+1	; 0x01
    15f0:	2d 93       	st	X+, r18
    15f2:	3c 93       	st	X, r19
	*ppS2 = pTemp;
    15f4:	99 83       	std	Y+1, r25	; 0x01
    15f6:	88 83       	st	Y, r24
	//-------------------------
	// Index of parent node
	// Keep looping while
	// parent is valid (>= 0)
	//-------------------------
	while((parent = (child - 1)/2) >= 0)
    15f8:	97 01       	movw	r18, r14
    15fa:	21 50       	subi	r18, 0x01	; 1
    15fc:	31 09       	sbc	r19, r1
    15fe:	c9 01       	movw	r24, r18
    1600:	99 23       	and	r25, r25
    1602:	0c f4       	brge	.+2      	; 0x1606 <ReheapUp+0x82>
    1604:	01 96       	adiw	r24, 0x01	; 1
    1606:	95 95       	asr	r25
    1608:	87 95       	ror	r24
    160a:	e7 01       	movw	r28, r14
    160c:	99 23       	and	r25, r25
    160e:	ac f6       	brge	.-86     	; 0x15ba <ReheapUp+0x36>
		//----------------------------------
		// the new parent is the child
		//----------------------------------
		child = parent;
	}	//end of while statement
}
    1610:	df 91       	pop	r29
    1612:	cf 91       	pop	r28
    1614:	1f 91       	pop	r17
    1616:	0f 91       	pop	r16
    1618:	ff 90       	pop	r15
    161a:	ef 90       	pop	r14
    161c:	df 90       	pop	r13
    161e:	cf 90       	pop	r12
    1620:	08 95       	ret

00001622 <Insert>:
//		space available in queue
//
//---------------------------------------------------------
//
int Insert(PQ* q,void *item)
{
    1622:	cf 93       	push	r28
    1624:	df 93       	push	r29
	int space_avail;

	space_avail = q->m_Maxitems - q->m_nItems;
    1626:	fc 01       	movw	r30, r24
    1628:	22 81       	ldd	r18, Z+2	; 0x02
    162a:	33 81       	ldd	r19, Z+3	; 0x03
    162c:	c4 81       	ldd	r28, Z+4	; 0x04
    162e:	d5 81       	ldd	r29, Z+5	; 0x05
    1630:	c2 1b       	sub	r28, r18
    1632:	d3 0b       	sbc	r29, r19
	if((space_avail) > 0)
    1634:	1c 16       	cp	r1, r28
    1636:	1d 06       	cpc	r1, r29
    1638:	94 f4       	brge	.+36     	; 0x165e <Insert+0x3c>
    163a:	dc 01       	movw	r26, r24
	{
		++q->m_nItems;
    163c:	2f 5f       	subi	r18, 0xFF	; 255
    163e:	3f 4f       	sbci	r19, 0xFF	; 255
    1640:	33 83       	std	Z+3, r19	; 0x03
    1642:	22 83       	std	Z+2, r18	; 0x02
		*(++q->m_ppBottom) = item;
    1644:	06 80       	ldd	r0, Z+6	; 0x06
    1646:	f7 81       	ldd	r31, Z+7	; 0x07
    1648:	e0 2d       	mov	r30, r0
    164a:	9f 01       	movw	r18, r30
    164c:	2e 5f       	subi	r18, 0xFE	; 254
    164e:	3f 4f       	sbci	r19, 0xFF	; 255
    1650:	17 96       	adiw	r26, 0x07	; 7
    1652:	3c 93       	st	X, r19
    1654:	2e 93       	st	-X, r18
    1656:	16 97       	sbiw	r26, 0x06	; 6
    1658:	73 83       	std	Z+3, r23	; 0x03
    165a:	62 83       	std	Z+2, r22	; 0x02
		ReheapUp(q);
    165c:	93 df       	rcall	.-218    	; 0x1584 <ReheapUp>
	}
	return space_avail;
}
    165e:	ce 01       	movw	r24, r28
    1660:	df 91       	pop	r29
    1662:	cf 91       	pop	r28
    1664:	08 95       	ret

00001666 <ReheapDown>:
**	parameters:
**		q........pointer to the priority queue
**
***********************************************/
void ReheapDown(PQ* q)
{
    1666:	6f 92       	push	r6
    1668:	7f 92       	push	r7
    166a:	8f 92       	push	r8
    166c:	9f 92       	push	r9
    166e:	af 92       	push	r10
    1670:	bf 92       	push	r11
    1672:	cf 92       	push	r12
    1674:	df 92       	push	r13
    1676:	ef 92       	push	r14
    1678:	ff 92       	push	r15
    167a:	0f 93       	push	r16
    167c:	1f 93       	push	r17
    167e:	cf 93       	push	r28
    1680:	df 93       	push	r29
	void **ppParent;	//pointer to parent
	void **ppChild;   //pointer to child
	void **ppSibling;	//pointer to sibling
	void **ppHeap;	//pointer to m_ppHeap

	ppHeap = q->m_ppHeap;
    1682:	dc 01       	movw	r26, r24
    1684:	18 96       	adiw	r26, 0x08	; 8
    1686:	ad 90       	ld	r10, X+
    1688:	bc 90       	ld	r11, X
    168a:	19 97       	sbiw	r26, 0x09	; 9
	for(parent=0,child=1;child < q->m_nItems;)
    168c:	12 96       	adiw	r26, 0x02	; 2
    168e:	2d 91       	ld	r18, X+
    1690:	3c 91       	ld	r19, X
    1692:	13 97       	sbiw	r26, 0x03	; 3
    1694:	22 30       	cpi	r18, 0x02	; 2
    1696:	31 05       	cpc	r19, r1
    1698:	0c f4       	brge	.+2      	; 0x169c <ReheapDown+0x36>
    169a:	44 c0       	rjmp	.+136    	; 0x1724 <ReheapDown+0xbe>
    169c:	6c 01       	movw	r12, r24
    169e:	ee 24       	eor	r14, r14
    16a0:	e3 94       	inc	r14
    16a2:	f1 2c       	mov	r15, r1
    16a4:	c0 e0       	ldi	r28, 0x00	; 0
    16a6:	d0 e0       	ldi	r29, 0x00	; 0
    16a8:	02 c0       	rjmp	.+4      	; 0x16ae <ReheapDown+0x48>
		//----------------------------------
		swap(ppParent,ppChild);
		//----------------------------------
		// new parent is the child
		//----------------------------------
		parent = child;
    16aa:	e7 01       	movw	r28, r14
		//----------------------------------
		// calculate new child index
		//----------------------------------
		child = parent * 2 + 1;
    16ac:	7c 01       	movw	r14, r24
	for(parent=0,child=1;child < q->m_nItems;)
	{
		//----------------------------------
		// get pointer to parent and child nodes
		//----------------------------------
		ppParent = &ppHeap[parent];
    16ae:	cc 0f       	add	r28, r28
    16b0:	dd 1f       	adc	r29, r29
    16b2:	ca 0d       	add	r28, r10
    16b4:	db 1d       	adc	r29, r11
		ppChild = &ppHeap[child];
    16b6:	87 01       	movw	r16, r14
    16b8:	00 0f       	add	r16, r16
    16ba:	11 1f       	adc	r17, r17
    16bc:	0a 0d       	add	r16, r10
    16be:	1b 1d       	adc	r17, r11
		//-----------------------------------
		// is there a possible sibling to
		// the child node?
		//------------------------------------
		if(child + 1 < q->m_nItems)
    16c0:	37 01       	movw	r6, r14
    16c2:	bf ef       	ldi	r27, 0xFF	; 255
    16c4:	6b 1a       	sub	r6, r27
    16c6:	7b 0a       	sbc	r7, r27
    16c8:	62 16       	cp	r6, r18
    16ca:	73 06       	cpc	r7, r19
    16cc:	74 f4       	brge	.+28     	; 0x16ea <ReheapDown+0x84>
		{
			//---------------------------------
			// get a pointer to the sibling
			//---------------------------------
			ppSibling = ppChild + 1;
    16ce:	48 01       	movw	r8, r16
    16d0:	e2 e0       	ldi	r30, 0x02	; 2
    16d2:	8e 0e       	add	r8, r30
    16d4:	91 1c       	adc	r9, r1
			//---------------------------------
			// is priority of child less than
			// that of the sibling?
			//---------------------------------
			if((*q->m_Cmp)(ppChild,ppSibling) < 0)
    16d6:	d6 01       	movw	r26, r12
    16d8:	ed 91       	ld	r30, X+
    16da:	fc 91       	ld	r31, X
    16dc:	b4 01       	movw	r22, r8
    16de:	c8 01       	movw	r24, r16
    16e0:	09 95       	icall
    16e2:	99 23       	and	r25, r25
    16e4:	14 f4       	brge	.+4      	; 0x16ea <ReheapDown+0x84>
			{
				//--------------------------------
				// make the child equal to sibling
				//---------------------------------
				ppChild = ppSibling;
    16e6:	84 01       	movw	r16, r8
				//--------------------------------
				// make child index equal to that
				// of the sibling
				//--------------------------------
				child++;
    16e8:	73 01       	movw	r14, r6
		//-------------------------------------
		// if the priority of the parent is
		// greater than or equal to the child
		// we are done, break out of the loop
		//------------------------------------
		if((*q->m_Cmp)(ppParent,ppChild) >= 0)
    16ea:	d6 01       	movw	r26, r12
    16ec:	ed 91       	ld	r30, X+
    16ee:	fc 91       	ld	r31, X
    16f0:	b8 01       	movw	r22, r16
    16f2:	ce 01       	movw	r24, r28
    16f4:	09 95       	icall
    16f6:	99 23       	and	r25, r25
    16f8:	ac f4       	brge	.+42     	; 0x1724 <ReheapDown+0xbe>

void swap(void **ppS1,void **ppS2)
{
	void *pTemp;

	pTemp = *ppS1;
    16fa:	88 81       	ld	r24, Y
    16fc:	99 81       	ldd	r25, Y+1	; 0x01
	*ppS1 = *ppS2;
    16fe:	f8 01       	movw	r30, r16
    1700:	20 81       	ld	r18, Z
    1702:	31 81       	ldd	r19, Z+1	; 0x01
    1704:	39 83       	std	Y+1, r19	; 0x01
    1706:	28 83       	st	Y, r18
	*ppS2 = pTemp;
    1708:	91 83       	std	Z+1, r25	; 0x01
    170a:	80 83       	st	Z, r24
		//----------------------------------
		parent = child;
		//----------------------------------
		// calculate new child index
		//----------------------------------
		child = parent * 2 + 1;
    170c:	c7 01       	movw	r24, r14
    170e:	88 0f       	add	r24, r24
    1710:	99 1f       	adc	r25, r25
    1712:	01 96       	adiw	r24, 0x01	; 1
	void **ppChild;   //pointer to child
	void **ppSibling;	//pointer to sibling
	void **ppHeap;	//pointer to m_ppHeap

	ppHeap = q->m_ppHeap;
	for(parent=0,child=1;child < q->m_nItems;)
    1714:	d6 01       	movw	r26, r12
    1716:	12 96       	adiw	r26, 0x02	; 2
    1718:	2d 91       	ld	r18, X+
    171a:	3c 91       	ld	r19, X
    171c:	13 97       	sbiw	r26, 0x03	; 3
    171e:	82 17       	cp	r24, r18
    1720:	93 07       	cpc	r25, r19
    1722:	1c f2       	brlt	.-122    	; 0x16aa <ReheapDown+0x44>
		//----------------------------------
		// calculate new child index
		//----------------------------------
		child = parent * 2 + 1;
	}	//end of for loop
}
    1724:	df 91       	pop	r29
    1726:	cf 91       	pop	r28
    1728:	1f 91       	pop	r17
    172a:	0f 91       	pop	r16
    172c:	ff 90       	pop	r15
    172e:	ef 90       	pop	r14
    1730:	df 90       	pop	r13
    1732:	cf 90       	pop	r12
    1734:	bf 90       	pop	r11
    1736:	af 90       	pop	r10
    1738:	9f 90       	pop	r9
    173a:	8f 90       	pop	r8
    173c:	7f 90       	pop	r7
    173e:	6f 90       	pop	r6
    1740:	08 95       	ret

00001742 <Delete>:
// return value:
//		returns slots in use in the queue
//---------------------------------------------------------

int Delete(PQ* q,void **target)
{
    1742:	cf 93       	push	r28
    1744:	df 93       	push	r29
	int SlotsInUse;

	if((SlotsInUse = q->m_nItems) > 0)
    1746:	dc 01       	movw	r26, r24
    1748:	12 96       	adiw	r26, 0x02	; 2
    174a:	cd 91       	ld	r28, X+
    174c:	dc 91       	ld	r29, X
    174e:	13 97       	sbiw	r26, 0x03	; 3
    1750:	1c 16       	cp	r1, r28
    1752:	1d 06       	cpc	r1, r29
    1754:	ec f4       	brge	.+58     	; 0x1790 <Delete+0x4e>
    1756:	fc 01       	movw	r30, r24
	{
		*target = *q->m_ppHeap;		//get item from top of m_ppHeap
    1758:	a0 85       	ldd	r26, Z+8	; 0x08
    175a:	b1 85       	ldd	r27, Z+9	; 0x09
    175c:	8d 91       	ld	r24, X+
    175e:	9c 91       	ld	r25, X
    1760:	db 01       	movw	r26, r22
    1762:	8d 93       	st	X+, r24
    1764:	9c 93       	st	X, r25
		*q->m_ppHeap = *q->m_ppBottom--;
    1766:	80 85       	ldd	r24, Z+8	; 0x08
    1768:	91 85       	ldd	r25, Z+9	; 0x09
    176a:	a6 81       	ldd	r26, Z+6	; 0x06
    176c:	b7 81       	ldd	r27, Z+7	; 0x07
    176e:	9d 01       	movw	r18, r26
    1770:	22 50       	subi	r18, 0x02	; 2
    1772:	31 09       	sbc	r19, r1
    1774:	37 83       	std	Z+7, r19	; 0x07
    1776:	26 83       	std	Z+6, r18	; 0x06
    1778:	2d 91       	ld	r18, X+
    177a:	3c 91       	ld	r19, X
    177c:	dc 01       	movw	r26, r24
    177e:	2d 93       	st	X+, r18
    1780:	3c 93       	st	X, r19
		--q->m_nItems;
    1782:	82 81       	ldd	r24, Z+2	; 0x02
    1784:	93 81       	ldd	r25, Z+3	; 0x03
    1786:	01 97       	sbiw	r24, 0x01	; 1
    1788:	93 83       	std	Z+3, r25	; 0x03
    178a:	82 83       	std	Z+2, r24	; 0x02
		ReheapDown(q);
    178c:	cf 01       	movw	r24, r30
    178e:	6b df       	rcall	.-298    	; 0x1666 <ReheapDown>
	}
	return SlotsInUse;
}
    1790:	ce 01       	movw	r24, r28
    1792:	df 91       	pop	r29
    1794:	cf 91       	pop	r28
    1796:	08 95       	ret

00001798 <Replace>:
//	return value:
//		returns number of slots in use
//-----------------------------------------------------------

int Replace(PQ* q,void **target,void *item)
{
    1798:	cf 92       	push	r12
    179a:	df 92       	push	r13
    179c:	ef 92       	push	r14
    179e:	ff 92       	push	r15
    17a0:	0f 93       	push	r16
    17a2:	1f 93       	push	r17
    17a4:	cf 93       	push	r28
    17a6:	df 93       	push	r29
    17a8:	00 d0       	rcall	.+0      	; 0x17aa <Replace+0x12>
    17aa:	cd b7       	in	r28, 0x3d	; 61
    17ac:	de b7       	in	r29, 0x3e	; 62
    17ae:	5a 83       	std	Y+2, r21	; 0x02
    17b0:	49 83       	std	Y+1, r20	; 0x01
	int SlotsInUse;

	if((SlotsInUse = q->m_nItems) > 0)
    17b2:	dc 01       	movw	r26, r24
    17b4:	12 96       	adiw	r26, 0x02	; 2
    17b6:	cd 90       	ld	r12, X+
    17b8:	dc 90       	ld	r13, X
    17ba:	13 97       	sbiw	r26, 0x03	; 3
    17bc:	1c 14       	cp	r1, r12
    17be:	1d 04       	cpc	r1, r13
    17c0:	4c f5       	brge	.+82     	; 0x1814 <Replace+0x7c>
    17c2:	7b 01       	movw	r14, r22
    17c4:	8c 01       	movw	r16, r24
	{
		if ((*q->m_Cmp)(&item,q->m_ppHeap) > 0)	//only replace if priority is less
    17c6:	fc 01       	movw	r30, r24
    17c8:	60 85       	ldd	r22, Z+8	; 0x08
    17ca:	71 85       	ldd	r23, Z+9	; 0x09
    17cc:	01 90       	ld	r0, Z+
    17ce:	f0 81       	ld	r31, Z
    17d0:	e0 2d       	mov	r30, r0
    17d2:	ce 01       	movw	r24, r28
    17d4:	01 96       	adiw	r24, 0x01	; 1
    17d6:	09 95       	icall
    17d8:	18 16       	cp	r1, r24
    17da:	19 06       	cpc	r1, r25
    17dc:	34 f4       	brge	.+12     	; 0x17ea <Replace+0x52>
		{
			*target = item;		//item is higher priority
    17de:	89 81       	ldd	r24, Y+1	; 0x01
    17e0:	9a 81       	ldd	r25, Y+2	; 0x02
    17e2:	d7 01       	movw	r26, r14
    17e4:	8d 93       	st	X+, r24
    17e6:	9c 93       	st	X, r25
    17e8:	1a c0       	rjmp	.+52     	; 0x181e <Replace+0x86>
		}
		else
		{
			*target = *q->m_ppHeap;
    17ea:	d8 01       	movw	r26, r16
    17ec:	18 96       	adiw	r26, 0x08	; 8
    17ee:	ed 91       	ld	r30, X+
    17f0:	fc 91       	ld	r31, X
    17f2:	19 97       	sbiw	r26, 0x09	; 9
    17f4:	80 81       	ld	r24, Z
    17f6:	91 81       	ldd	r25, Z+1	; 0x01
    17f8:	f7 01       	movw	r30, r14
    17fa:	91 83       	std	Z+1, r25	; 0x01
    17fc:	80 83       	st	Z, r24
			*q->m_ppHeap = item;
    17fe:	18 96       	adiw	r26, 0x08	; 8
    1800:	ed 91       	ld	r30, X+
    1802:	fc 91       	ld	r31, X
    1804:	19 97       	sbiw	r26, 0x09	; 9
    1806:	89 81       	ldd	r24, Y+1	; 0x01
    1808:	9a 81       	ldd	r25, Y+2	; 0x02
    180a:	91 83       	std	Z+1, r25	; 0x01
    180c:	80 83       	st	Z, r24
			ReheapDown(q);
    180e:	c8 01       	movw	r24, r16
    1810:	2a df       	rcall	.-428    	; 0x1666 <ReheapDown>
    1812:	05 c0       	rjmp	.+10     	; 0x181e <Replace+0x86>
		}
	}
	else
		*target = item;
    1814:	89 81       	ldd	r24, Y+1	; 0x01
    1816:	9a 81       	ldd	r25, Y+2	; 0x02
    1818:	db 01       	movw	r26, r22
    181a:	8d 93       	st	X+, r24
    181c:	9c 93       	st	X, r25
	return SlotsInUse;
}
    181e:	c6 01       	movw	r24, r12
    1820:	0f 90       	pop	r0
    1822:	0f 90       	pop	r0
    1824:	df 91       	pop	r29
    1826:	cf 91       	pop	r28
    1828:	1f 91       	pop	r17
    182a:	0f 91       	pop	r16
    182c:	ff 90       	pop	r15
    182e:	ef 90       	pop	r14
    1830:	df 90       	pop	r13
    1832:	cf 90       	pop	r12
    1834:	08 95       	ret

00001836 <RStatus>:
*******************************************************/
static int RStatus(IOCB *pIOCB,int m)
{
	int rv=0;

	SERIAL *pI = (SERIAL *)pIOCB->p;
    1836:	dc 01       	movw	r26, r24
    1838:	18 96       	adiw	r26, 0x08	; 8
    183a:	ed 91       	ld	r30, X+
    183c:	fc 91       	ld	r31, X
    183e:	19 97       	sbiw	r26, 0x09	; 9
	switch(m)
    1840:	61 15       	cp	r22, r1
    1842:	71 05       	cpc	r23, r1
    1844:	21 f0       	breq	.+8      	; 0x184e <RStatus+0x18>
    1846:	61 30       	cpi	r22, 0x01	; 1
    1848:	71 05       	cpc	r23, r1
    184a:	21 f0       	breq	.+8      	; 0x1854 <RStatus+0x1e>
    184c:	0b c0       	rjmp	.+22     	; 0x1864 <RStatus+0x2e>
	{
		case RS232_STAT_NREC:
			rv = pI->Rx.nChar;
    184e:	84 81       	ldd	r24, Z+4	; 0x04
    1850:	95 81       	ldd	r25, Z+5	; 0x05
			break;
    1852:	08 95       	ret
	Return Value:
		returns result of status operation
*******************************************************/
static int RStatus(IOCB *pIOCB,int m)
{
	int rv=0;
    1854:	81 e0       	ldi	r24, 0x01	; 1
    1856:	90 e0       	ldi	r25, 0x00	; 0
    1858:	24 89       	ldd	r18, Z+20	; 0x14
    185a:	35 89       	ldd	r19, Z+21	; 0x15
    185c:	23 2b       	or	r18, r19
    185e:	21 f0       	breq	.+8      	; 0x1868 <RStatus+0x32>
    1860:	80 e0       	ldi	r24, 0x00	; 0
    1862:	08 95       	ret
    1864:	80 e0       	ldi	r24, 0x00	; 0
    1866:	90 e0       	ldi	r25, 0x00	; 0
			if(pI->Tx.nChar == 0) rv = 1;
			else rv = 0;
			break;
	}
	return rv;	//return number of chars in receive buffer
}
    1868:	08 95       	ret

0000186a <RXIO>:
	return value
		depends on operation
			cmd=RS232_XIO_SETBAUD:returns 0
****************************************************/
static int RXIO(IOCB *pIOCB,int cmd,void *pP)
{
    186a:	cf 93       	push	r28
    186c:	df 93       	push	r29
	long *pL;
	SERIAL *pI = (SERIAL *)pIOCB->p;

	int rv = 0;
	switch(cmd)
    186e:	67 2b       	or	r22, r23
    1870:	c1 f4       	brne	.+48     	; 0x18a2 <RXIO+0x38>
	{
		case RS232_XIO_SETBAUD:
			pL = (long *)pP;
			*pI->regs->pUBRR = CalculateBaudRate(*pL);
    1872:	dc 01       	movw	r26, r24
    1874:	18 96       	adiw	r26, 0x08	; 8
    1876:	ed 91       	ld	r30, X+
    1878:	fc 91       	ld	r31, X
    187a:	19 97       	sbiw	r26, 0x09	; 9
    187c:	00 a0       	ldd	r0, Z+32	; 0x20
    187e:	f1 a1       	ldd	r31, Z+33	; 0x21
    1880:	e0 2d       	mov	r30, r0
    1882:	c0 85       	ldd	r28, Z+8	; 0x08
    1884:	d1 85       	ldd	r29, Z+9	; 0x09
    1886:	fa 01       	movw	r30, r20
    1888:	20 81       	ld	r18, Z
    188a:	31 81       	ldd	r19, Z+1	; 0x01
    188c:	42 81       	ldd	r20, Z+2	; 0x02
    188e:	53 81       	ldd	r21, Z+3	; 0x03
    1890:	60 e4       	ldi	r22, 0x40	; 64
    1892:	72 e4       	ldi	r23, 0x42	; 66
    1894:	8f e0       	ldi	r24, 0x0F	; 15
    1896:	90 e0       	ldi	r25, 0x00	; 0
    1898:	74 d4       	rcall	.+2280   	; 0x2182 <__divmodsi4>
    189a:	21 50       	subi	r18, 0x01	; 1
    189c:	31 09       	sbc	r19, r1
    189e:	39 83       	std	Y+1, r19	; 0x01
    18a0:	28 83       	st	Y, r18
			break;
	}
	return rv;
}
    18a2:	80 e0       	ldi	r24, 0x00	; 0
    18a4:	90 e0       	ldi	r25, 0x00	; 0
    18a6:	df 91       	pop	r29
    18a8:	cf 91       	pop	r28
    18aa:	08 95       	ret

000018ac <RInit>:
	return value:
		returns 0
***************************************************/
int RInit(void)
{
	CioAddHandler("COM",&RJump);
    18ac:	6a e1       	ldi	r22, 0x1A	; 26
    18ae:	71 e0       	ldi	r23, 0x01	; 1
    18b0:	8f e7       	ldi	r24, 0x7F	; 127
    18b2:	91 e0       	ldi	r25, 0x01	; 1
    18b4:	0e 94 fd 00 	call	0x1fa	; 0x1fa <CioAddHandler>
	return 0;
}
    18b8:	80 e0       	ldi	r24, 0x00	; 0
    18ba:	90 e0       	ldi	r25, 0x00	; 0
    18bc:	08 95       	ret

000018be <RxIsr>:
	parameters:
		pI.....pointer to serial descriptor
************************************************************/

static void RxIsr(SERIAL *pI)
{
    18be:	cf 93       	push	r28
    18c0:	df 93       	push	r29
    18c2:	ec 01       	movw	r28, r24
	while(*pI->regs->pUCSRnA & BIT(RXC0))	//while chars available
    18c4:	e8 a1       	ldd	r30, Y+32	; 0x20
    18c6:	f9 a1       	ldd	r31, Y+33	; 0x21
    18c8:	a2 81       	ldd	r26, Z+2	; 0x02
    18ca:	b3 81       	ldd	r27, Z+3	; 0x03
    18cc:	8c 91       	ld	r24, X
    18ce:	88 23       	and	r24, r24
    18d0:	b4 f5       	brge	.+108    	; 0x193e <RxIsr+0x80>
	{
		if(*pI->regs->pUCSRnA & (BIT(DOR0) ) )  RSerrors++;
    18d2:	83 ff       	sbrs	r24, 3
    18d4:	09 c0       	rjmp	.+18     	; 0x18e8 <RxIsr+0x2a>
    18d6:	80 91 a8 01 	lds	r24, 0x01A8	; 0x8001a8 <RSerrors>
    18da:	90 91 a9 01 	lds	r25, 0x01A9	; 0x8001a9 <RSerrors+0x1>
    18de:	01 96       	adiw	r24, 0x01	; 1
    18e0:	90 93 a9 01 	sts	0x01A9, r25	; 0x8001a9 <RSerrors+0x1>
    18e4:	80 93 a8 01 	sts	0x01A8, r24	; 0x8001a8 <RSerrors>
		pI->Rx.buff[pI->Rx.head++] = *pI->regs->pUDR;	//get char from UART
    18e8:	4e 85       	ldd	r20, Y+14	; 0x0e
    18ea:	5f 85       	ldd	r21, Y+15	; 0x0f
    18ec:	88 81       	ld	r24, Y
    18ee:	99 81       	ldd	r25, Y+1	; 0x01
    18f0:	9c 01       	movw	r18, r24
    18f2:	2f 5f       	subi	r18, 0xFF	; 255
    18f4:	3f 4f       	sbci	r19, 0xFF	; 255
    18f6:	39 83       	std	Y+1, r19	; 0x01
    18f8:	28 83       	st	Y, r18
    18fa:	01 90       	ld	r0, Z+
    18fc:	f0 81       	ld	r31, Z
    18fe:	e0 2d       	mov	r30, r0
    1900:	20 81       	ld	r18, Z
    1902:	fa 01       	movw	r30, r20
    1904:	e8 0f       	add	r30, r24
    1906:	f9 1f       	adc	r31, r25
    1908:	20 83       	st	Z, r18
		if(pI->Rx.head == pI->Rx.size) pI->Rx.head = 0;
    190a:	28 81       	ld	r18, Y
    190c:	39 81       	ldd	r19, Y+1	; 0x01
    190e:	8e 81       	ldd	r24, Y+6	; 0x06
    1910:	9f 81       	ldd	r25, Y+7	; 0x07
    1912:	28 17       	cp	r18, r24
    1914:	39 07       	cpc	r19, r25
    1916:	11 f4       	brne	.+4      	; 0x191c <RxIsr+0x5e>
    1918:	19 82       	std	Y+1, r1	; 0x01
    191a:	18 82       	st	Y, r1
		pI->Rx.nChar++;	//increment number of chars in buffer
    191c:	8c 81       	ldd	r24, Y+4	; 0x04
    191e:	9d 81       	ldd	r25, Y+5	; 0x05
    1920:	01 96       	adiw	r24, 0x01	; 1
    1922:	9d 83       	std	Y+5, r25	; 0x05
    1924:	8c 83       	std	Y+4, r24	; 0x04
		PostSemaphore(pI->Rx.pSem,0);
    1926:	60 e0       	ldi	r22, 0x00	; 0
    1928:	70 e0       	ldi	r23, 0x00	; 0
    192a:	8a 85       	ldd	r24, Y+10	; 0x0a
    192c:	9b 85       	ldd	r25, Y+11	; 0x0b
    192e:	a9 dd       	rcall	.-1198   	; 0x1482 <PostSemaphore>
		pI.....pointer to serial descriptor
************************************************************/

static void RxIsr(SERIAL *pI)
{
	while(*pI->regs->pUCSRnA & BIT(RXC0))	//while chars available
    1930:	e8 a1       	ldd	r30, Y+32	; 0x20
    1932:	f9 a1       	ldd	r31, Y+33	; 0x21
    1934:	a2 81       	ldd	r26, Z+2	; 0x02
    1936:	b3 81       	ldd	r27, Z+3	; 0x03
    1938:	8c 91       	ld	r24, X
    193a:	88 23       	and	r24, r24
    193c:	54 f2       	brlt	.-108    	; 0x18d2 <RxIsr+0x14>
		pI->Rx.buff[pI->Rx.head++] = *pI->regs->pUDR;	//get char from UART
		if(pI->Rx.head == pI->Rx.size) pI->Rx.head = 0;
		pI->Rx.nChar++;	//increment number of chars in buffer
		PostSemaphore(pI->Rx.pSem,0);
	}
}
    193e:	df 91       	pop	r29
    1940:	cf 91       	pop	r28
    1942:	08 95       	ret

00001944 <TxIsr>:
	parameters:
		pI....pointer to serial descriptor
*****************************************************/

static void TxIsr(SERIAL *pI)
{
    1944:	0f 93       	push	r16
    1946:	1f 93       	push	r17
    1948:	cf 93       	push	r28
    194a:	df 93       	push	r29
    194c:	ec 01       	movw	r28, r24
	char loop = 1;
    194e:	01 e0       	ldi	r16, 0x01	; 1
		}
		else
		{
			//we have run out of characters...disable interrupt
			*pI->regs->pUCSRnB &= ~(BIT(UDRIE0));	//disable tx interrupts
			loop = 0;	//terminate loop
    1950:	10 e0       	ldi	r17, 0x00	; 0

static void TxIsr(SERIAL *pI)
{
	char loop = 1;

	while((*pI->regs->pUCSRnA & BIT(UDRE0)) && loop)	//while space available in TX
    1952:	39 c0       	rjmp	.+114    	; 0x19c6 <TxIsr+0x82>
	{
		if(pI->Tx.nChar == 128) PostSemaphore(pI->Tx.pSem,0);	//buffer somewhat empty now
    1954:	8c 89       	ldd	r24, Y+20	; 0x14
    1956:	9d 89       	ldd	r25, Y+21	; 0x15
    1958:	80 38       	cpi	r24, 0x80	; 128
    195a:	91 05       	cpc	r25, r1
    195c:	29 f4       	brne	.+10     	; 0x1968 <TxIsr+0x24>
    195e:	60 e0       	ldi	r22, 0x00	; 0
    1960:	70 e0       	ldi	r23, 0x00	; 0
    1962:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1964:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1966:	8d dd       	rcall	.-1254   	; 0x1482 <PostSemaphore>
		if(pI->Tx.nChar)	//while there are characters
    1968:	8c 89       	ldd	r24, Y+20	; 0x14
    196a:	9d 89       	ldd	r25, Y+21	; 0x15
    196c:	89 2b       	or	r24, r25
    196e:	11 f1       	breq	.+68     	; 0x19b4 <TxIsr+0x70>
		{
			*pI->regs->pUDR = pI->Tx.buff[pI->Tx.tail++];	//stuff char
    1970:	e8 a1       	ldd	r30, Y+32	; 0x20
    1972:	f9 a1       	ldd	r31, Y+33	; 0x21
    1974:	01 90       	ld	r0, Z+
    1976:	f0 81       	ld	r31, Z
    1978:	e0 2d       	mov	r30, r0
    197a:	2e 8d       	ldd	r18, Y+30	; 0x1e
    197c:	3f 8d       	ldd	r19, Y+31	; 0x1f
    197e:	8a 89       	ldd	r24, Y+18	; 0x12
    1980:	9b 89       	ldd	r25, Y+19	; 0x13
    1982:	ac 01       	movw	r20, r24
    1984:	4f 5f       	subi	r20, 0xFF	; 255
    1986:	5f 4f       	sbci	r21, 0xFF	; 255
    1988:	5b 8b       	std	Y+19, r21	; 0x13
    198a:	4a 8b       	std	Y+18, r20	; 0x12
    198c:	d9 01       	movw	r26, r18
    198e:	a8 0f       	add	r26, r24
    1990:	b9 1f       	adc	r27, r25
    1992:	8c 91       	ld	r24, X
    1994:	80 83       	st	Z, r24
			if(pI->Tx.tail == pI->Tx.size) pI->Tx.tail = 0;
    1996:	2a 89       	ldd	r18, Y+18	; 0x12
    1998:	3b 89       	ldd	r19, Y+19	; 0x13
    199a:	8e 89       	ldd	r24, Y+22	; 0x16
    199c:	9f 89       	ldd	r25, Y+23	; 0x17
    199e:	28 17       	cp	r18, r24
    19a0:	39 07       	cpc	r19, r25
    19a2:	11 f4       	brne	.+4      	; 0x19a8 <TxIsr+0x64>
    19a4:	1b 8a       	std	Y+19, r1	; 0x13
    19a6:	1a 8a       	std	Y+18, r1	; 0x12
			pI->Tx.nChar--;	//decrement number of chars in buffer
    19a8:	8c 89       	ldd	r24, Y+20	; 0x14
    19aa:	9d 89       	ldd	r25, Y+21	; 0x15
    19ac:	01 97       	sbiw	r24, 0x01	; 1
    19ae:	9d 8b       	std	Y+21, r25	; 0x15
    19b0:	8c 8b       	std	Y+20, r24	; 0x14
    19b2:	09 c0       	rjmp	.+18     	; 0x19c6 <TxIsr+0x82>
		}
		else
		{
			//we have run out of characters...disable interrupt
			*pI->regs->pUCSRnB &= ~(BIT(UDRIE0));	//disable tx interrupts
    19b4:	e8 a1       	ldd	r30, Y+32	; 0x20
    19b6:	f9 a1       	ldd	r31, Y+33	; 0x21
    19b8:	04 80       	ldd	r0, Z+4	; 0x04
    19ba:	f5 81       	ldd	r31, Z+5	; 0x05
    19bc:	e0 2d       	mov	r30, r0
    19be:	80 81       	ld	r24, Z
    19c0:	8f 7d       	andi	r24, 0xDF	; 223
    19c2:	80 83       	st	Z, r24
			loop = 0;	//terminate loop
    19c4:	01 2f       	mov	r16, r17

static void TxIsr(SERIAL *pI)
{
	char loop = 1;

	while((*pI->regs->pUCSRnA & BIT(UDRE0)) && loop)	//while space available in TX
    19c6:	e8 a1       	ldd	r30, Y+32	; 0x20
    19c8:	f9 a1       	ldd	r31, Y+33	; 0x21
    19ca:	02 80       	ldd	r0, Z+2	; 0x02
    19cc:	f3 81       	ldd	r31, Z+3	; 0x03
    19ce:	e0 2d       	mov	r30, r0
    19d0:	80 81       	ld	r24, Z
    19d2:	85 ff       	sbrs	r24, 5
    19d4:	02 c0       	rjmp	.+4      	; 0x19da <TxIsr+0x96>
    19d6:	01 11       	cpse	r16, r1
    19d8:	bd cf       	rjmp	.-134    	; 0x1954 <TxIsr+0x10>
			//we have run out of characters...disable interrupt
			*pI->regs->pUCSRnB &= ~(BIT(UDRIE0));	//disable tx interrupts
			loop = 0;	//terminate loop
		}
	}
}
    19da:	df 91       	pop	r29
    19dc:	cf 91       	pop	r28
    19de:	1f 91       	pop	r17
    19e0:	0f 91       	pop	r16
    19e2:	08 95       	ret

000019e4 <RPutC>:
		c.......character to write to device
	return value:
		returns 0
*******************************************/
static int RPutC(IOCB *pIOCB,int c)
{
    19e4:	1f 93       	push	r17
    19e6:	cf 93       	push	r28
    19e8:	df 93       	push	r29
    19ea:	16 2f       	mov	r17, r22
	char sr;
	SERIAL *pI = (SERIAL *)pIOCB->p;
    19ec:	fc 01       	movw	r30, r24
    19ee:	c0 85       	ldd	r28, Z+8	; 0x08
    19f0:	d1 85       	ldd	r29, Z+9	; 0x09

	if(pI->Tx.nChar == pI->Tx.size)
    19f2:	2c 89       	ldd	r18, Y+20	; 0x14
    19f4:	3d 89       	ldd	r19, Y+21	; 0x15
    19f6:	8e 89       	ldd	r24, Y+22	; 0x16
    19f8:	9f 89       	ldd	r25, Y+23	; 0x17
    19fa:	28 17       	cp	r18, r24
    19fc:	39 07       	cpc	r19, r25
    19fe:	29 f4       	brne	.+10     	; 0x1a0a <RPutC+0x26>
		PendSemaphore(pI->Tx.pSem,0);	//wait for buffer to free up
    1a00:	60 e0       	ldi	r22, 0x00	; 0
    1a02:	70 e0       	ldi	r23, 0x00	; 0
    1a04:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1a06:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1a08:	d1 dc       	rcall	.-1630   	; 0x13ac <PendSemaphore>
	sr = Disable();		//enter critical section
    1a0a:	0e 94 6e 00 	call	0xdc	; 0xdc <Disable>
	if(pI->Tx.nChar < pI->Tx.size)	//and room?
    1a0e:	4c 89       	ldd	r20, Y+20	; 0x14
    1a10:	5d 89       	ldd	r21, Y+21	; 0x15
    1a12:	2e 89       	ldd	r18, Y+22	; 0x16
    1a14:	3f 89       	ldd	r19, Y+23	; 0x17
    1a16:	42 17       	cp	r20, r18
    1a18:	53 07       	cpc	r21, r19
    1a1a:	48 f5       	brcc	.+82     	; 0x1a6e <RPutC+0x8a>
	{
		pI->Tx.buff[pI->Tx.head++] = (unsigned char)c;
    1a1c:	4e 8d       	ldd	r20, Y+30	; 0x1e
    1a1e:	5f 8d       	ldd	r21, Y+31	; 0x1f
    1a20:	28 89       	ldd	r18, Y+16	; 0x10
    1a22:	39 89       	ldd	r19, Y+17	; 0x11
    1a24:	b9 01       	movw	r22, r18
    1a26:	6f 5f       	subi	r22, 0xFF	; 255
    1a28:	7f 4f       	sbci	r23, 0xFF	; 255
    1a2a:	79 8b       	std	Y+17, r23	; 0x11
    1a2c:	68 8b       	std	Y+16, r22	; 0x10
    1a2e:	fa 01       	movw	r30, r20
    1a30:	e2 0f       	add	r30, r18
    1a32:	f3 1f       	adc	r31, r19
    1a34:	10 83       	st	Z, r17
		if(pI->Tx.head == pI->Tx.size) pI->Tx.head = 0;	//check head pointer
    1a36:	48 89       	ldd	r20, Y+16	; 0x10
    1a38:	59 89       	ldd	r21, Y+17	; 0x11
    1a3a:	2e 89       	ldd	r18, Y+22	; 0x16
    1a3c:	3f 89       	ldd	r19, Y+23	; 0x17
    1a3e:	42 17       	cp	r20, r18
    1a40:	53 07       	cpc	r21, r19
    1a42:	11 f4       	brne	.+4      	; 0x1a48 <RPutC+0x64>
    1a44:	19 8a       	std	Y+17, r1	; 0x11
    1a46:	18 8a       	std	Y+16, r1	; 0x10
		if(!pI->Tx.nChar)	//if first char
    1a48:	2c 89       	ldd	r18, Y+20	; 0x14
    1a4a:	3d 89       	ldd	r19, Y+21	; 0x15
    1a4c:	23 2b       	or	r18, r19
    1a4e:	41 f4       	brne	.+16     	; 0x1a60 <RPutC+0x7c>
			*pI->regs->pUCSRnB |= BIT(UDRIE0);	//enable tx interrupts
    1a50:	e8 a1       	ldd	r30, Y+32	; 0x20
    1a52:	f9 a1       	ldd	r31, Y+33	; 0x21
    1a54:	04 80       	ldd	r0, Z+4	; 0x04
    1a56:	f5 81       	ldd	r31, Z+5	; 0x05
    1a58:	e0 2d       	mov	r30, r0
    1a5a:	90 81       	ld	r25, Z
    1a5c:	90 62       	ori	r25, 0x20	; 32
    1a5e:	90 83       	st	Z, r25
		pI->Tx.nChar++;		//increment number of chars in buffer
    1a60:	2c 89       	ldd	r18, Y+20	; 0x14
    1a62:	3d 89       	ldd	r19, Y+21	; 0x15
    1a64:	2f 5f       	subi	r18, 0xFF	; 255
    1a66:	3f 4f       	sbci	r19, 0xFF	; 255
    1a68:	3d 8b       	std	Y+21, r19	; 0x15
    1a6a:	2c 8b       	std	Y+20, r18	; 0x14
    1a6c:	06 c0       	rjmp	.+12     	; 0x1a7a <RPutC+0x96>
	}
	else
		pI->Tx.Errors++;		//increment buffer overrun errors
    1a6e:	28 8d       	ldd	r18, Y+24	; 0x18
    1a70:	39 8d       	ldd	r19, Y+25	; 0x19
    1a72:	2f 5f       	subi	r18, 0xFF	; 255
    1a74:	3f 4f       	sbci	r19, 0xFF	; 255
    1a76:	39 8f       	std	Y+25, r19	; 0x19
    1a78:	28 8f       	std	Y+24, r18	; 0x18
	Enable(sr);	//exit critical section
    1a7a:	0e 94 72 00 	call	0xe4	; 0xe4 <Enable>
	return 0;
}
    1a7e:	80 e0       	ldi	r24, 0x00	; 0
    1a80:	90 e0       	ldi	r25, 0x00	; 0
    1a82:	df 91       	pop	r29
    1a84:	cf 91       	pop	r28
    1a86:	1f 91       	pop	r17
    1a88:	08 95       	ret

00001a8a <RWrite>:
	return Value:
		returns number of bytes written
********************************************/

static int RWrite(IOCB *pIOCB,char *b,int l)
{
    1a8a:	8f 92       	push	r8
    1a8c:	9f 92       	push	r9
    1a8e:	af 92       	push	r10
    1a90:	bf 92       	push	r11
    1a92:	cf 92       	push	r12
    1a94:	df 92       	push	r13
    1a96:	ef 92       	push	r14
    1a98:	ff 92       	push	r15
    1a9a:	0f 93       	push	r16
    1a9c:	1f 93       	push	r17
    1a9e:	cf 93       	push	r28
    1aa0:	df 93       	push	r29
    1aa2:	8c 01       	movw	r16, r24
    1aa4:	7b 01       	movw	r14, r22
    1aa6:	6a 01       	movw	r12, r20
	int i = 0;
	SERIAL *pI = (SERIAL *)pIOCB->p;
    1aa8:	fc 01       	movw	r30, r24
    1aaa:	a0 84       	ldd	r10, Z+8	; 0x08
    1aac:	b1 84       	ldd	r11, Z+9	; 0x09

	PendSemaphore(pI->Tx.pSemBlkr,0);	//lock access
    1aae:	60 e0       	ldi	r22, 0x00	; 0
    1ab0:	70 e0       	ldi	r23, 0x00	; 0
    1ab2:	f5 01       	movw	r30, r10
    1ab4:	84 8d       	ldd	r24, Z+28	; 0x1c
    1ab6:	95 8d       	ldd	r25, Z+29	; 0x1d
    1ab8:	79 dc       	rcall	.-1806   	; 0x13ac <PendSemaphore>
	for(i=0;i<l;++i)
    1aba:	1c 14       	cp	r1, r12
    1abc:	1d 04       	cpc	r1, r13
    1abe:	cc f4       	brge	.+50     	; 0x1af2 <RWrite+0x68>
    1ac0:	e7 01       	movw	r28, r14
    1ac2:	ec 0c       	add	r14, r12
    1ac4:	fd 1c       	adc	r15, r13
    1ac6:	4e 01       	movw	r8, r28
	{
		if(b[i] == '\n')
    1ac8:	88 81       	ld	r24, Y
    1aca:	8a 30       	cpi	r24, 0x0A	; 10
    1acc:	41 f4       	brne	.+16     	; 0x1ade <RWrite+0x54>
			if(pIOCB->mode & FCNTL_TEXT)
    1ace:	f8 01       	movw	r30, r16
    1ad0:	86 81       	ldd	r24, Z+6	; 0x06
    1ad2:	86 ff       	sbrs	r24, 6
    1ad4:	04 c0       	rjmp	.+8      	; 0x1ade <RWrite+0x54>
				RPutC(pIOCB,'\r');
    1ad6:	6d e0       	ldi	r22, 0x0D	; 13
    1ad8:	70 e0       	ldi	r23, 0x00	; 0
    1ada:	c8 01       	movw	r24, r16
    1adc:	83 df       	rcall	.-250    	; 0x19e4 <RPutC>
    1ade:	21 96       	adiw	r28, 0x01	; 1
		RPutC(pIOCB,b[i]);	//output characters
    1ae0:	f4 01       	movw	r30, r8
    1ae2:	60 81       	ld	r22, Z
    1ae4:	70 e0       	ldi	r23, 0x00	; 0
    1ae6:	c8 01       	movw	r24, r16
    1ae8:	7d df       	rcall	.-262    	; 0x19e4 <RPutC>
{
	int i = 0;
	SERIAL *pI = (SERIAL *)pIOCB->p;

	PendSemaphore(pI->Tx.pSemBlkr,0);	//lock access
	for(i=0;i<l;++i)
    1aea:	ce 15       	cp	r28, r14
    1aec:	df 05       	cpc	r29, r15
    1aee:	59 f7       	brne	.-42     	; 0x1ac6 <RWrite+0x3c>
    1af0:	02 c0       	rjmp	.+4      	; 0x1af6 <RWrite+0x6c>
    1af2:	c1 2c       	mov	r12, r1
    1af4:	d1 2c       	mov	r13, r1
		if(b[i] == '\n')
			if(pIOCB->mode & FCNTL_TEXT)
				RPutC(pIOCB,'\r');
		RPutC(pIOCB,b[i]);	//output characters
	}
	PostSemaphore(pI->Tx.pSemBlkr,0);	//release lock
    1af6:	60 e0       	ldi	r22, 0x00	; 0
    1af8:	70 e0       	ldi	r23, 0x00	; 0
    1afa:	f5 01       	movw	r30, r10
    1afc:	84 8d       	ldd	r24, Z+28	; 0x1c
    1afe:	95 8d       	ldd	r25, Z+29	; 0x1d
    1b00:	c0 dc       	rcall	.-1664   	; 0x1482 <PostSemaphore>
	return i;
}
    1b02:	c6 01       	movw	r24, r12
    1b04:	df 91       	pop	r29
    1b06:	cf 91       	pop	r28
    1b08:	1f 91       	pop	r17
    1b0a:	0f 91       	pop	r16
    1b0c:	ff 90       	pop	r15
    1b0e:	ef 90       	pop	r14
    1b10:	df 90       	pop	r13
    1b12:	cf 90       	pop	r12
    1b14:	bf 90       	pop	r11
    1b16:	af 90       	pop	r10
    1b18:	9f 90       	pop	r9
    1b1a:	8f 90       	pop	r8
    1b1c:	08 95       	ret

00001b1e <RGetC>:
		returns a character from the buffer
		OR -1 on fail (no chars)
************************************/

static int RGetC(IOCB *pIOCB,int to)
{
    1b1e:	0f 93       	push	r16
    1b20:	1f 93       	push	r17
    1b22:	cf 93       	push	r28
    1b24:	df 93       	push	r29
	int retval;
	char sr;
	SERIAL *pI = (SERIAL *)pIOCB->p;
    1b26:	dc 01       	movw	r26, r24
    1b28:	18 96       	adiw	r26, 0x08	; 8
    1b2a:	0d 91       	ld	r16, X+
    1b2c:	1c 91       	ld	r17, X
    1b2e:	19 97       	sbiw	r26, 0x09	; 9

	retval = PendSemaphore(pI->Rx.pSem,to);
    1b30:	f8 01       	movw	r30, r16
    1b32:	82 85       	ldd	r24, Z+10	; 0x0a
    1b34:	93 85       	ldd	r25, Z+11	; 0x0b
    1b36:	3a dc       	rcall	.-1932   	; 0x13ac <PendSemaphore>
    1b38:	ec 01       	movw	r28, r24
	//------------------------------------
	// If PendSemaphore returns an error
	// then just return
	//------------------------------------
	if(retval == 0)
    1b3a:	89 2b       	or	r24, r25
    1b3c:	91 f5       	brne	.+100    	; 0x1ba2 <RGetC+0x84>
	{
		sr = Disable();		//enter critical section
    1b3e:	0e 94 6e 00 	call	0xdc	; 0xdc <Disable>
		if(pI->Rx.nChar)	//are there any characters to receive
    1b42:	d8 01       	movw	r26, r16
    1b44:	14 96       	adiw	r26, 0x04	; 4
    1b46:	2d 91       	ld	r18, X+
    1b48:	3c 91       	ld	r19, X
    1b4a:	15 97       	sbiw	r26, 0x05	; 5
    1b4c:	21 15       	cp	r18, r1
    1b4e:	31 05       	cpc	r19, r1
    1b50:	21 f1       	breq	.+72     	; 0x1b9a <RGetC+0x7c>
		{
			retval = (int)pI->Rx.buff[pI->Rx.tail++];	//get character	
    1b52:	1e 96       	adiw	r26, 0x0e	; 14
    1b54:	ed 91       	ld	r30, X+
    1b56:	fc 91       	ld	r31, X
    1b58:	1f 97       	sbiw	r26, 0x0f	; 15
    1b5a:	12 96       	adiw	r26, 0x02	; 2
    1b5c:	4d 91       	ld	r20, X+
    1b5e:	5c 91       	ld	r21, X
    1b60:	13 97       	sbiw	r26, 0x03	; 3
    1b62:	ba 01       	movw	r22, r20
    1b64:	6f 5f       	subi	r22, 0xFF	; 255
    1b66:	7f 4f       	sbci	r23, 0xFF	; 255
    1b68:	13 96       	adiw	r26, 0x03	; 3
    1b6a:	7c 93       	st	X, r23
    1b6c:	6e 93       	st	-X, r22
    1b6e:	12 97       	sbiw	r26, 0x02	; 2
    1b70:	e4 0f       	add	r30, r20
    1b72:	f5 1f       	adc	r31, r21
    1b74:	c0 81       	ld	r28, Z
    1b76:	d0 e0       	ldi	r29, 0x00	; 0
			if(pI->Rx.tail == pI->Rx.size) pI->Rx.tail = 0;	//check tail pointer
    1b78:	16 96       	adiw	r26, 0x06	; 6
    1b7a:	4d 91       	ld	r20, X+
    1b7c:	5c 91       	ld	r21, X
    1b7e:	17 97       	sbiw	r26, 0x07	; 7
    1b80:	64 17       	cp	r22, r20
    1b82:	75 07       	cpc	r23, r21
    1b84:	21 f4       	brne	.+8      	; 0x1b8e <RGetC+0x70>
    1b86:	13 96       	adiw	r26, 0x03	; 3
    1b88:	1c 92       	st	X, r1
    1b8a:	1e 92       	st	-X, r1
    1b8c:	12 97       	sbiw	r26, 0x02	; 2
			pI->Rx.nChar--;		//decrement the number of chars in buffer
    1b8e:	21 50       	subi	r18, 0x01	; 1
    1b90:	31 09       	sbc	r19, r1
    1b92:	f8 01       	movw	r30, r16
    1b94:	35 83       	std	Z+5, r19	; 0x05
    1b96:	24 83       	std	Z+4, r18	; 0x04
    1b98:	02 c0       	rjmp	.+4      	; 0x1b9e <RGetC+0x80>
		}
		else
			retval = -1;	//return error
    1b9a:	cf ef       	ldi	r28, 0xFF	; 255
    1b9c:	df ef       	ldi	r29, 0xFF	; 255
		Enable(sr);	//exit critical section
    1b9e:	0e 94 72 00 	call	0xe4	; 0xe4 <Enable>
	}
	return retval;
}
    1ba2:	ce 01       	movw	r24, r28
    1ba4:	df 91       	pop	r29
    1ba6:	cf 91       	pop	r28
    1ba8:	1f 91       	pop	r17
    1baa:	0f 91       	pop	r16
    1bac:	08 95       	ret

00001bae <ROpen>:
		returns 0 on success
		returns negative on fail
**************************************************/

static int ROpen(IOCB *pIOCB)
{
    1bae:	af 92       	push	r10
    1bb0:	bf 92       	push	r11
    1bb2:	cf 92       	push	r12
    1bb4:	df 92       	push	r13
    1bb6:	ef 92       	push	r14
    1bb8:	ff 92       	push	r15
    1bba:	0f 93       	push	r16
    1bbc:	1f 93       	push	r17
    1bbe:	cf 93       	push	r28
    1bc0:	df 93       	push	r29
	int rV = -1;

	if(pIOCB->devnum < RS232_N_PORTS)
    1bc2:	dc 01       	movw	r26, r24
    1bc4:	12 96       	adiw	r26, 0x02	; 2
    1bc6:	0d 91       	ld	r16, X+
    1bc8:	1c 91       	ld	r17, X
    1bca:	13 97       	sbiw	r26, 0x03	; 3
    1bcc:	02 30       	cpi	r16, 0x02	; 2
    1bce:	11 05       	cpc	r17, r1
    1bd0:	0c f0       	brlt	.+2      	; 0x1bd4 <ROpen+0x26>
    1bd2:	b0 c0       	rjmp	.+352    	; 0x1d34 <ROpen+0x186>
    1bd4:	7c 01       	movw	r14, r24
	{
		pIOCB->p = (void *)malloc(sizeof(SERIAL));	//allocate space for serial control block
    1bd6:	82 e2       	ldi	r24, 0x22	; 34
    1bd8:	90 e0       	ldi	r25, 0x00	; 0
    1bda:	3f d9       	rcall	.-3458   	; 0xe5a <malloc>
    1bdc:	ec 01       	movw	r28, r24
    1bde:	f7 01       	movw	r30, r14
    1be0:	91 87       	std	Z+9, r25	; 0x09
    1be2:	80 87       	std	Z+8, r24	; 0x08
************************************************/
static void InitPort(SERIAL *pS,unsigned short nTSize,unsigned short nRSize, unsigned short nPort,long nBaudRate)
{
	int i;

	pS->regs = &SAdr[nPort];
    1be4:	c8 01       	movw	r24, r16
    1be6:	88 0f       	add	r24, r24
    1be8:	99 1f       	adc	r25, r25
    1bea:	88 0f       	add	r24, r24
    1bec:	99 1f       	adc	r25, r25
    1bee:	88 0f       	add	r24, r24
    1bf0:	99 1f       	adc	r25, r25
    1bf2:	98 01       	movw	r18, r16
    1bf4:	22 0f       	add	r18, r18
    1bf6:	33 1f       	adc	r19, r19
    1bf8:	82 0f       	add	r24, r18
    1bfa:	93 1f       	adc	r25, r19
    1bfc:	8a 5f       	subi	r24, 0xFA	; 250
    1bfe:	9e 4f       	sbci	r25, 0xFE	; 254
    1c00:	99 a3       	std	Y+33, r25	; 0x21
    1c02:	88 a3       	std	Y+32, r24	; 0x20
	pS->Tx.buff = malloc(nTSize);
    1c04:	80 e0       	ldi	r24, 0x00	; 0
    1c06:	91 e0       	ldi	r25, 0x01	; 1
    1c08:	28 d9       	rcall	.-3504   	; 0xe5a <malloc>
    1c0a:	9f 8f       	std	Y+31, r25	; 0x1f
    1c0c:	8e 8f       	std	Y+30, r24	; 0x1e
    1c0e:	20 e0       	ldi	r18, 0x00	; 0
    1c10:	30 e0       	ldi	r19, 0x00	; 0
	for(i=0;i<nTSize;++i)
		pS->Tx.buff[i] = 0;
    1c12:	ee 8d       	ldd	r30, Y+30	; 0x1e
    1c14:	ff 8d       	ldd	r31, Y+31	; 0x1f
    1c16:	e2 0f       	add	r30, r18
    1c18:	f3 1f       	adc	r31, r19
    1c1a:	10 82       	st	Z, r1
{
	int i;

	pS->regs = &SAdr[nPort];
	pS->Tx.buff = malloc(nTSize);
	for(i=0;i<nTSize;++i)
    1c1c:	2f 5f       	subi	r18, 0xFF	; 255
    1c1e:	3f 4f       	sbci	r19, 0xFF	; 255
    1c20:	21 15       	cp	r18, r1
    1c22:	f1 e0       	ldi	r31, 0x01	; 1
    1c24:	3f 07       	cpc	r19, r31
    1c26:	a9 f7       	brne	.-22     	; 0x1c12 <ROpen+0x64>
		pS->Tx.buff[i] = 0;
	pS->Tx.Errors = 0;
    1c28:	19 8e       	std	Y+25, r1	; 0x19
    1c2a:	18 8e       	std	Y+24, r1	; 0x18
	pS->Tx.head = 0;
    1c2c:	19 8a       	std	Y+17, r1	; 0x11
    1c2e:	18 8a       	std	Y+16, r1	; 0x10
	pS->Tx.tail = 0;
    1c30:	1b 8a       	std	Y+19, r1	; 0x13
    1c32:	1a 8a       	std	Y+18, r1	; 0x12
	pS->Tx.nChar = 0;
    1c34:	1d 8a       	std	Y+21, r1	; 0x15
    1c36:	1c 8a       	std	Y+20, r1	; 0x14
	pS->Tx.size = nTSize;
    1c38:	c1 2c       	mov	r12, r1
    1c3a:	dd 24       	eor	r13, r13
    1c3c:	d3 94       	inc	r13
    1c3e:	df 8a       	std	Y+23, r13	; 0x17
    1c40:	ce 8a       	std	Y+22, r12	; 0x16
	pS->Tx.pSemBlkr = NewSemaphore(1,SEMAPHORE_MODE_BLOCKING,TNames[nPort]);
    1c42:	f8 01       	movw	r30, r16
    1c44:	ee 0f       	add	r30, r30
    1c46:	ff 1f       	adc	r31, r31
    1c48:	ed 56       	subi	r30, 0x6D	; 109
    1c4a:	fe 4f       	sbci	r31, 0xFE	; 254
    1c4c:	a0 80       	ld	r10, Z
    1c4e:	b1 80       	ldd	r11, Z+1	; 0x01
    1c50:	a5 01       	movw	r20, r10
    1c52:	60 e0       	ldi	r22, 0x00	; 0
    1c54:	70 e0       	ldi	r23, 0x00	; 0
    1c56:	81 e0       	ldi	r24, 0x01	; 1
    1c58:	90 e0       	ldi	r25, 0x00	; 0
    1c5a:	0e 94 68 02 	call	0x4d0	; 0x4d0 <NewSemaphore>
    1c5e:	9d 8f       	std	Y+29, r25	; 0x1d
    1c60:	8c 8f       	std	Y+28, r24	; 0x1c
	pS->Tx.pSem = NewSemaphore(0,SEMAPHORE_MODE_TIMEOUT,TNames[nPort]);
    1c62:	a5 01       	movw	r20, r10
    1c64:	61 e0       	ldi	r22, 0x01	; 1
    1c66:	70 e0       	ldi	r23, 0x00	; 0
    1c68:	80 e0       	ldi	r24, 0x00	; 0
    1c6a:	90 e0       	ldi	r25, 0x00	; 0
    1c6c:	0e 94 68 02 	call	0x4d0	; 0x4d0 <NewSemaphore>
    1c70:	9b 8f       	std	Y+27, r25	; 0x1b
    1c72:	8a 8f       	std	Y+26, r24	; 0x1a
	pS->Rx.Errors = 0;
    1c74:	19 86       	std	Y+9, r1	; 0x09
    1c76:	18 86       	std	Y+8, r1	; 0x08
	pS->Rx.buff = malloc(nRSize);
    1c78:	80 e0       	ldi	r24, 0x00	; 0
    1c7a:	91 e0       	ldi	r25, 0x01	; 1
    1c7c:	ee d8       	rcall	.-3620   	; 0xe5a <malloc>
    1c7e:	9f 87       	std	Y+15, r25	; 0x0f
    1c80:	8e 87       	std	Y+14, r24	; 0x0e
	pS->Rx.head = 0;
    1c82:	19 82       	std	Y+1, r1	; 0x01
    1c84:	18 82       	st	Y, r1
	pS->Rx.tail = 0;
    1c86:	1b 82       	std	Y+3, r1	; 0x03
    1c88:	1a 82       	std	Y+2, r1	; 0x02
	pS->Rx.nChar = 0;
    1c8a:	1d 82       	std	Y+5, r1	; 0x05
    1c8c:	1c 82       	std	Y+4, r1	; 0x04
	pS->Rx.size = nRSize;
    1c8e:	df 82       	std	Y+7, r13	; 0x07
    1c90:	ce 82       	std	Y+6, r12	; 0x06
    1c92:	20 e0       	ldi	r18, 0x00	; 0
    1c94:	30 e0       	ldi	r19, 0x00	; 0
	for(i=0;i<nRSize;++i)
		pS->Rx.buff[i] = 0;
    1c96:	ee 85       	ldd	r30, Y+14	; 0x0e
    1c98:	ff 85       	ldd	r31, Y+15	; 0x0f
    1c9a:	e2 0f       	add	r30, r18
    1c9c:	f3 1f       	adc	r31, r19
    1c9e:	10 82       	st	Z, r1
	pS->Rx.buff = malloc(nRSize);
	pS->Rx.head = 0;
	pS->Rx.tail = 0;
	pS->Rx.nChar = 0;
	pS->Rx.size = nRSize;
	for(i=0;i<nRSize;++i)
    1ca0:	2f 5f       	subi	r18, 0xFF	; 255
    1ca2:	3f 4f       	sbci	r19, 0xFF	; 255
    1ca4:	21 15       	cp	r18, r1
    1ca6:	81 e0       	ldi	r24, 0x01	; 1
    1ca8:	38 07       	cpc	r19, r24
    1caa:	a9 f7       	brne	.-22     	; 0x1c96 <ROpen+0xe8>
		pS->Rx.buff[i] = 0;
	pS->Rx.pSem = NewSemaphore(0,SEMAPHORE_MODE_BLOCKING,PNames[nPort]);
    1cac:	00 0f       	add	r16, r16
    1cae:	11 1f       	adc	r17, r17
    1cb0:	f8 01       	movw	r30, r16
    1cb2:	e9 56       	subi	r30, 0x69	; 105
    1cb4:	fe 4f       	sbci	r31, 0xFE	; 254
    1cb6:	40 81       	ld	r20, Z
    1cb8:	51 81       	ldd	r21, Z+1	; 0x01
    1cba:	60 e0       	ldi	r22, 0x00	; 0
    1cbc:	70 e0       	ldi	r23, 0x00	; 0
    1cbe:	80 e0       	ldi	r24, 0x00	; 0
    1cc0:	90 e0       	ldi	r25, 0x00	; 0
    1cc2:	0e 94 68 02 	call	0x4d0	; 0x4d0 <NewSemaphore>
    1cc6:	9b 87       	std	Y+11, r25	; 0x0b
    1cc8:	8a 87       	std	Y+10, r24	; 0x0a
	*pS->regs->pUCSRnB = 0x00; 	//disable while setting baud rate
    1cca:	e8 a1       	ldd	r30, Y+32	; 0x20
    1ccc:	f9 a1       	ldd	r31, Y+33	; 0x21
    1cce:	04 80       	ldd	r0, Z+4	; 0x04
    1cd0:	f5 81       	ldd	r31, Z+5	; 0x05
    1cd2:	e0 2d       	mov	r30, r0
    1cd4:	10 82       	st	Z, r1
	*pS->regs->pUCSRnA = 0x00;	//Normal UART Mode (bits 1 and 0)
    1cd6:	e8 a1       	ldd	r30, Y+32	; 0x20
    1cd8:	f9 a1       	ldd	r31, Y+33	; 0x21
    1cda:	02 80       	ldd	r0, Z+2	; 0x02
    1cdc:	f3 81       	ldd	r31, Z+3	; 0x03
    1cde:	e0 2d       	mov	r30, r0
    1ce0:	10 82       	st	Z, r1
	*pS->regs->pUCSRnC = BIT(UCSZ01) | BIT(UCSZ00);	//8 bits, 1 Stop Bit, No Parity
    1ce2:	e8 a1       	ldd	r30, Y+32	; 0x20
    1ce4:	f9 a1       	ldd	r31, Y+33	; 0x21
    1ce6:	06 80       	ldd	r0, Z+6	; 0x06
    1ce8:	f7 81       	ldd	r31, Z+7	; 0x07
    1cea:	e0 2d       	mov	r30, r0
    1cec:	86 e0       	ldi	r24, 0x06	; 6
    1cee:	80 83       	st	Z, r24
	*pS->regs->pUBRR = CalculateBaudRate(nBaudRate);
    1cf0:	e8 a1       	ldd	r30, Y+32	; 0x20
    1cf2:	f9 a1       	ldd	r31, Y+33	; 0x21
    1cf4:	00 84       	ldd	r0, Z+8	; 0x08
    1cf6:	f1 85       	ldd	r31, Z+9	; 0x09
    1cf8:	e0 2d       	mov	r30, r0
    1cfa:	83 e3       	ldi	r24, 0x33	; 51
    1cfc:	90 e0       	ldi	r25, 0x00	; 0
    1cfe:	91 83       	std	Z+1, r25	; 0x01
    1d00:	80 83       	st	Z, r24
	*pS->regs->pUCSRnB = BIT(RXCIE0) | BIT(RXEN0) | BIT(TXEN0); 	//Enable UART
    1d02:	e8 a1       	ldd	r30, Y+32	; 0x20
    1d04:	f9 a1       	ldd	r31, Y+33	; 0x21
    1d06:	04 80       	ldd	r0, Z+4	; 0x04
    1d08:	f5 81       	ldd	r31, Z+5	; 0x05
    1d0a:	e0 2d       	mov	r30, r0
    1d0c:	88 e9       	ldi	r24, 0x98	; 152
    1d0e:	80 83       	st	Z, r24

	if(pIOCB->devnum < RS232_N_PORTS)
	{
		pIOCB->p = (void *)malloc(sizeof(SERIAL));	//allocate space for serial control block
		InitPort((SERIAL *)pIOCB->p,RS232_DEF_T_BUFF_SIZE,RS232_DEF_R_BUFF_SIZE,pIOCB->devnum,RS232_DEF_BAUDRATE);
		gSerial[pIOCB->devnum] = (SERIAL *)pIOCB->p;
    1d10:	d7 01       	movw	r26, r14
    1d12:	12 96       	adiw	r26, 0x02	; 2
    1d14:	ed 91       	ld	r30, X+
    1d16:	fc 91       	ld	r31, X
    1d18:	13 97       	sbiw	r26, 0x03	; 3
    1d1a:	ee 0f       	add	r30, r30
    1d1c:	ff 1f       	adc	r31, r31
    1d1e:	ec 55       	subi	r30, 0x5C	; 92
    1d20:	fe 4f       	sbci	r31, 0xFE	; 254
    1d22:	18 96       	adiw	r26, 0x08	; 8
    1d24:	8d 91       	ld	r24, X+
    1d26:	9c 91       	ld	r25, X
    1d28:	19 97       	sbiw	r26, 0x09	; 9
    1d2a:	91 83       	std	Z+1, r25	; 0x01
    1d2c:	80 83       	st	Z, r24
		rV = 0;	//success
    1d2e:	80 e0       	ldi	r24, 0x00	; 0
    1d30:	90 e0       	ldi	r25, 0x00	; 0
    1d32:	02 c0       	rjmp	.+4      	; 0x1d38 <ROpen+0x18a>
		returns negative on fail
**************************************************/

static int ROpen(IOCB *pIOCB)
{
	int rV = -1;
    1d34:	8f ef       	ldi	r24, 0xFF	; 255
    1d36:	9f ef       	ldi	r25, 0xFF	; 255
		InitPort((SERIAL *)pIOCB->p,RS232_DEF_T_BUFF_SIZE,RS232_DEF_R_BUFF_SIZE,pIOCB->devnum,RS232_DEF_BAUDRATE);
		gSerial[pIOCB->devnum] = (SERIAL *)pIOCB->p;
		rV = 0;	//success
	}
	return rV;
}
    1d38:	df 91       	pop	r29
    1d3a:	cf 91       	pop	r28
    1d3c:	1f 91       	pop	r17
    1d3e:	0f 91       	pop	r16
    1d40:	ff 90       	pop	r15
    1d42:	ef 90       	pop	r14
    1d44:	df 90       	pop	r13
    1d46:	cf 90       	pop	r12
    1d48:	bf 90       	pop	r11
    1d4a:	af 90       	pop	r10
    1d4c:	08 95       	ret

00001d4e <__vector_20>:
}

void USART0_RX_vect(void) __attribute__ ((naked));
void USART0_RX_vect(void)
{
	SAVE_IRQ();
    1d4e:	ff 93       	push	r31
    1d50:	ff b7       	in	r31, 0x3f	; 63
    1d52:	f0 68       	ori	r31, 0x80	; 128
    1d54:	ff 93       	push	r31
    1d56:	ef 93       	push	r30
    1d58:	df 93       	push	r29
    1d5a:	cf 93       	push	r28
    1d5c:	bf 93       	push	r27
    1d5e:	af 93       	push	r26
    1d60:	9f 93       	push	r25
    1d62:	8f 93       	push	r24
    1d64:	7f 93       	push	r23
    1d66:	6f 93       	push	r22
    1d68:	5f 93       	push	r21
    1d6a:	4f 93       	push	r20
    1d6c:	3f 93       	push	r19
    1d6e:	2f 93       	push	r18
    1d70:	1f 93       	push	r17
    1d72:	0f 93       	push	r16
    1d74:	ff 92       	push	r15
    1d76:	ef 92       	push	r14
    1d78:	df 92       	push	r13
    1d7a:	cf 92       	push	r12
    1d7c:	bf 92       	push	r11
    1d7e:	af 92       	push	r10
    1d80:	9f 92       	push	r9
    1d82:	8f 92       	push	r8
    1d84:	7f 92       	push	r7
    1d86:	6f 92       	push	r6
    1d88:	5f 92       	push	r5
    1d8a:	4f 92       	push	r4
    1d8c:	3f 92       	push	r3
    1d8e:	2f 92       	push	r2
    1d90:	1f 92       	push	r1
    1d92:	11 24       	eor	r1, r1
    1d94:	0f 92       	push	r0
	++InterruptCount;
    1d96:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <InterruptCount>
    1d9a:	90 91 13 02 	lds	r25, 0x0213	; 0x800213 <InterruptCount+0x1>
    1d9e:	01 96       	adiw	r24, 0x01	; 1
    1da0:	90 93 13 02 	sts	0x0213, r25	; 0x800213 <InterruptCount+0x1>
    1da4:	80 93 12 02 	sts	0x0212, r24	; 0x800212 <InterruptCount>
	RxIsr(gSerial[0]);
    1da8:	80 91 a4 01 	lds	r24, 0x01A4	; 0x8001a4 <gSerial>
    1dac:	90 91 a5 01 	lds	r25, 0x01A5	; 0x8001a5 <gSerial+0x1>
    1db0:	86 dd       	rcall	.-1268   	; 0x18be <RxIsr>
	ExitInterrupt();
    1db2:	0e 94 c0 03 	call	0x780	; 0x780 <ExitInterrupt>
	RESTORE_IRQ();
    1db6:	0f 90       	pop	r0
    1db8:	1f 90       	pop	r1
    1dba:	2f 90       	pop	r2
    1dbc:	3f 90       	pop	r3
    1dbe:	4f 90       	pop	r4
    1dc0:	5f 90       	pop	r5
    1dc2:	6f 90       	pop	r6
    1dc4:	7f 90       	pop	r7
    1dc6:	8f 90       	pop	r8
    1dc8:	9f 90       	pop	r9
    1dca:	af 90       	pop	r10
    1dcc:	bf 90       	pop	r11
    1dce:	cf 90       	pop	r12
    1dd0:	df 90       	pop	r13
    1dd2:	ef 90       	pop	r14
    1dd4:	ff 90       	pop	r15
    1dd6:	0f 91       	pop	r16
    1dd8:	1f 91       	pop	r17
    1dda:	2f 91       	pop	r18
    1ddc:	3f 91       	pop	r19
    1dde:	4f 91       	pop	r20
    1de0:	5f 91       	pop	r21
    1de2:	6f 91       	pop	r22
    1de4:	7f 91       	pop	r23
    1de6:	8f 91       	pop	r24
    1de8:	9f 91       	pop	r25
    1dea:	af 91       	pop	r26
    1dec:	bf 91       	pop	r27
    1dee:	cf 91       	pop	r28
    1df0:	df 91       	pop	r29
    1df2:	ef 91       	pop	r30
    1df4:	ff 91       	pop	r31
    1df6:	ff 77       	andi	r31, 0x7F	; 127
    1df8:	ff bf       	out	0x3f, r31	; 63
    1dfa:	ff 91       	pop	r31
    1dfc:	18 95       	reti

00001dfe <__vector_21>:
}

void USART0_UDRE_vect(void) __attribute__ ((naked));
void USART0_UDRE_vect(void)
{
	SAVE_IRQ();
    1dfe:	ff 93       	push	r31
    1e00:	ff b7       	in	r31, 0x3f	; 63
    1e02:	f0 68       	ori	r31, 0x80	; 128
    1e04:	ff 93       	push	r31
    1e06:	ef 93       	push	r30
    1e08:	df 93       	push	r29
    1e0a:	cf 93       	push	r28
    1e0c:	bf 93       	push	r27
    1e0e:	af 93       	push	r26
    1e10:	9f 93       	push	r25
    1e12:	8f 93       	push	r24
    1e14:	7f 93       	push	r23
    1e16:	6f 93       	push	r22
    1e18:	5f 93       	push	r21
    1e1a:	4f 93       	push	r20
    1e1c:	3f 93       	push	r19
    1e1e:	2f 93       	push	r18
    1e20:	1f 93       	push	r17
    1e22:	0f 93       	push	r16
    1e24:	ff 92       	push	r15
    1e26:	ef 92       	push	r14
    1e28:	df 92       	push	r13
    1e2a:	cf 92       	push	r12
    1e2c:	bf 92       	push	r11
    1e2e:	af 92       	push	r10
    1e30:	9f 92       	push	r9
    1e32:	8f 92       	push	r8
    1e34:	7f 92       	push	r7
    1e36:	6f 92       	push	r6
    1e38:	5f 92       	push	r5
    1e3a:	4f 92       	push	r4
    1e3c:	3f 92       	push	r3
    1e3e:	2f 92       	push	r2
    1e40:	1f 92       	push	r1
    1e42:	11 24       	eor	r1, r1
    1e44:	0f 92       	push	r0
	++InterruptCount;
    1e46:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <InterruptCount>
    1e4a:	90 91 13 02 	lds	r25, 0x0213	; 0x800213 <InterruptCount+0x1>
    1e4e:	01 96       	adiw	r24, 0x01	; 1
    1e50:	90 93 13 02 	sts	0x0213, r25	; 0x800213 <InterruptCount+0x1>
    1e54:	80 93 12 02 	sts	0x0212, r24	; 0x800212 <InterruptCount>
	TxIsr(gSerial[0]);
    1e58:	80 91 a4 01 	lds	r24, 0x01A4	; 0x8001a4 <gSerial>
    1e5c:	90 91 a5 01 	lds	r25, 0x01A5	; 0x8001a5 <gSerial+0x1>
    1e60:	71 dd       	rcall	.-1310   	; 0x1944 <TxIsr>
	ExitInterrupt();
    1e62:	0e 94 c0 03 	call	0x780	; 0x780 <ExitInterrupt>
	RESTORE_IRQ();
    1e66:	0f 90       	pop	r0
    1e68:	1f 90       	pop	r1
    1e6a:	2f 90       	pop	r2
    1e6c:	3f 90       	pop	r3
    1e6e:	4f 90       	pop	r4
    1e70:	5f 90       	pop	r5
    1e72:	6f 90       	pop	r6
    1e74:	7f 90       	pop	r7
    1e76:	8f 90       	pop	r8
    1e78:	9f 90       	pop	r9
    1e7a:	af 90       	pop	r10
    1e7c:	bf 90       	pop	r11
    1e7e:	cf 90       	pop	r12
    1e80:	df 90       	pop	r13
    1e82:	ef 90       	pop	r14
    1e84:	ff 90       	pop	r15
    1e86:	0f 91       	pop	r16
    1e88:	1f 91       	pop	r17
    1e8a:	2f 91       	pop	r18
    1e8c:	3f 91       	pop	r19
    1e8e:	4f 91       	pop	r20
    1e90:	5f 91       	pop	r21
    1e92:	6f 91       	pop	r22
    1e94:	7f 91       	pop	r23
    1e96:	8f 91       	pop	r24
    1e98:	9f 91       	pop	r25
    1e9a:	af 91       	pop	r26
    1e9c:	bf 91       	pop	r27
    1e9e:	cf 91       	pop	r28
    1ea0:	df 91       	pop	r29
    1ea2:	ef 91       	pop	r30
    1ea4:	ff 91       	pop	r31
    1ea6:	ff 77       	andi	r31, 0x7F	; 127
    1ea8:	ff bf       	out	0x3f, r31	; 63
    1eaa:	ff 91       	pop	r31
    1eac:	18 95       	reti

00001eae <__vector_28>:
}

void USART1_RX_vect(void) __attribute__ ((naked));
void USART1_RX_vect(void)
{
	SAVE_IRQ();
    1eae:	ff 93       	push	r31
    1eb0:	ff b7       	in	r31, 0x3f	; 63
    1eb2:	f0 68       	ori	r31, 0x80	; 128
    1eb4:	ff 93       	push	r31
    1eb6:	ef 93       	push	r30
    1eb8:	df 93       	push	r29
    1eba:	cf 93       	push	r28
    1ebc:	bf 93       	push	r27
    1ebe:	af 93       	push	r26
    1ec0:	9f 93       	push	r25
    1ec2:	8f 93       	push	r24
    1ec4:	7f 93       	push	r23
    1ec6:	6f 93       	push	r22
    1ec8:	5f 93       	push	r21
    1eca:	4f 93       	push	r20
    1ecc:	3f 93       	push	r19
    1ece:	2f 93       	push	r18
    1ed0:	1f 93       	push	r17
    1ed2:	0f 93       	push	r16
    1ed4:	ff 92       	push	r15
    1ed6:	ef 92       	push	r14
    1ed8:	df 92       	push	r13
    1eda:	cf 92       	push	r12
    1edc:	bf 92       	push	r11
    1ede:	af 92       	push	r10
    1ee0:	9f 92       	push	r9
    1ee2:	8f 92       	push	r8
    1ee4:	7f 92       	push	r7
    1ee6:	6f 92       	push	r6
    1ee8:	5f 92       	push	r5
    1eea:	4f 92       	push	r4
    1eec:	3f 92       	push	r3
    1eee:	2f 92       	push	r2
    1ef0:	1f 92       	push	r1
    1ef2:	11 24       	eor	r1, r1
    1ef4:	0f 92       	push	r0
	++InterruptCount;
    1ef6:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <InterruptCount>
    1efa:	90 91 13 02 	lds	r25, 0x0213	; 0x800213 <InterruptCount+0x1>
    1efe:	01 96       	adiw	r24, 0x01	; 1
    1f00:	90 93 13 02 	sts	0x0213, r25	; 0x800213 <InterruptCount+0x1>
    1f04:	80 93 12 02 	sts	0x0212, r24	; 0x800212 <InterruptCount>
	RxIsr(gSerial[1]);
    1f08:	80 91 a6 01 	lds	r24, 0x01A6	; 0x8001a6 <gSerial+0x2>
    1f0c:	90 91 a7 01 	lds	r25, 0x01A7	; 0x8001a7 <gSerial+0x3>
    1f10:	d6 dc       	rcall	.-1620   	; 0x18be <RxIsr>
	ExitInterrupt();
    1f12:	0e 94 c0 03 	call	0x780	; 0x780 <ExitInterrupt>
	RESTORE_IRQ();
    1f16:	0f 90       	pop	r0
    1f18:	1f 90       	pop	r1
    1f1a:	2f 90       	pop	r2
    1f1c:	3f 90       	pop	r3
    1f1e:	4f 90       	pop	r4
    1f20:	5f 90       	pop	r5
    1f22:	6f 90       	pop	r6
    1f24:	7f 90       	pop	r7
    1f26:	8f 90       	pop	r8
    1f28:	9f 90       	pop	r9
    1f2a:	af 90       	pop	r10
    1f2c:	bf 90       	pop	r11
    1f2e:	cf 90       	pop	r12
    1f30:	df 90       	pop	r13
    1f32:	ef 90       	pop	r14
    1f34:	ff 90       	pop	r15
    1f36:	0f 91       	pop	r16
    1f38:	1f 91       	pop	r17
    1f3a:	2f 91       	pop	r18
    1f3c:	3f 91       	pop	r19
    1f3e:	4f 91       	pop	r20
    1f40:	5f 91       	pop	r21
    1f42:	6f 91       	pop	r22
    1f44:	7f 91       	pop	r23
    1f46:	8f 91       	pop	r24
    1f48:	9f 91       	pop	r25
    1f4a:	af 91       	pop	r26
    1f4c:	bf 91       	pop	r27
    1f4e:	cf 91       	pop	r28
    1f50:	df 91       	pop	r29
    1f52:	ef 91       	pop	r30
    1f54:	ff 91       	pop	r31
    1f56:	ff 77       	andi	r31, 0x7F	; 127
    1f58:	ff bf       	out	0x3f, r31	; 63
    1f5a:	ff 91       	pop	r31
    1f5c:	18 95       	reti

00001f5e <__vector_29>:
}

void USART1_UDRE_vect(void) __attribute__ ((naked));
void USART1_UDRE_vect(void)
{
	SAVE_IRQ();
    1f5e:	ff 93       	push	r31
    1f60:	ff b7       	in	r31, 0x3f	; 63
    1f62:	f0 68       	ori	r31, 0x80	; 128
    1f64:	ff 93       	push	r31
    1f66:	ef 93       	push	r30
    1f68:	df 93       	push	r29
    1f6a:	cf 93       	push	r28
    1f6c:	bf 93       	push	r27
    1f6e:	af 93       	push	r26
    1f70:	9f 93       	push	r25
    1f72:	8f 93       	push	r24
    1f74:	7f 93       	push	r23
    1f76:	6f 93       	push	r22
    1f78:	5f 93       	push	r21
    1f7a:	4f 93       	push	r20
    1f7c:	3f 93       	push	r19
    1f7e:	2f 93       	push	r18
    1f80:	1f 93       	push	r17
    1f82:	0f 93       	push	r16
    1f84:	ff 92       	push	r15
    1f86:	ef 92       	push	r14
    1f88:	df 92       	push	r13
    1f8a:	cf 92       	push	r12
    1f8c:	bf 92       	push	r11
    1f8e:	af 92       	push	r10
    1f90:	9f 92       	push	r9
    1f92:	8f 92       	push	r8
    1f94:	7f 92       	push	r7
    1f96:	6f 92       	push	r6
    1f98:	5f 92       	push	r5
    1f9a:	4f 92       	push	r4
    1f9c:	3f 92       	push	r3
    1f9e:	2f 92       	push	r2
    1fa0:	1f 92       	push	r1
    1fa2:	11 24       	eor	r1, r1
    1fa4:	0f 92       	push	r0
	++InterruptCount;
    1fa6:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <InterruptCount>
    1faa:	90 91 13 02 	lds	r25, 0x0213	; 0x800213 <InterruptCount+0x1>
    1fae:	01 96       	adiw	r24, 0x01	; 1
    1fb0:	90 93 13 02 	sts	0x0213, r25	; 0x800213 <InterruptCount+0x1>
    1fb4:	80 93 12 02 	sts	0x0212, r24	; 0x800212 <InterruptCount>
	TxIsr(gSerial[1]);
    1fb8:	80 91 a6 01 	lds	r24, 0x01A6	; 0x8001a6 <gSerial+0x2>
    1fbc:	90 91 a7 01 	lds	r25, 0x01A7	; 0x8001a7 <gSerial+0x3>
    1fc0:	c1 dc       	rcall	.-1662   	; 0x1944 <TxIsr>
	ExitInterrupt();
    1fc2:	0e 94 c0 03 	call	0x780	; 0x780 <ExitInterrupt>
	RESTORE_IRQ();
    1fc6:	0f 90       	pop	r0
    1fc8:	1f 90       	pop	r1
    1fca:	2f 90       	pop	r2
    1fcc:	3f 90       	pop	r3
    1fce:	4f 90       	pop	r4
    1fd0:	5f 90       	pop	r5
    1fd2:	6f 90       	pop	r6
    1fd4:	7f 90       	pop	r7
    1fd6:	8f 90       	pop	r8
    1fd8:	9f 90       	pop	r9
    1fda:	af 90       	pop	r10
    1fdc:	bf 90       	pop	r11
    1fde:	cf 90       	pop	r12
    1fe0:	df 90       	pop	r13
    1fe2:	ef 90       	pop	r14
    1fe4:	ff 90       	pop	r15
    1fe6:	0f 91       	pop	r16
    1fe8:	1f 91       	pop	r17
    1fea:	2f 91       	pop	r18
    1fec:	3f 91       	pop	r19
    1fee:	4f 91       	pop	r20
    1ff0:	5f 91       	pop	r21
    1ff2:	6f 91       	pop	r22
    1ff4:	7f 91       	pop	r23
    1ff6:	8f 91       	pop	r24
    1ff8:	9f 91       	pop	r25
    1ffa:	af 91       	pop	r26
    1ffc:	bf 91       	pop	r27
    1ffe:	cf 91       	pop	r28
    2000:	df 91       	pop	r29
    2002:	ef 91       	pop	r30
    2004:	ff 91       	pop	r31
    2006:	ff 77       	andi	r31, 0x7F	; 127
    2008:	ff bf       	out	0x3f, r31	; 63
    200a:	ff 91       	pop	r31
    200c:	18 95       	reti

0000200e <StartOS>:
	// Remove task from priorty queue
	// Restore its context
	// and then jump to the first task using
	// return from subroutine
	//---------------------------------------
	Delete(&ActiveTasks,(void **)&NextTask);
    200e:	6a e0       	ldi	r22, 0x0A	; 10
    2010:	72 e0       	ldi	r23, 0x02	; 2
    2012:	80 e0       	ldi	r24, 0x00	; 0
    2014:	92 e0       	ldi	r25, 0x02	; 2
    2016:	95 db       	rcall	.-2262   	; 0x1742 <Delete>
	CurrentTask = NextTask;
    2018:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <NextTask>
    201c:	90 91 0b 02 	lds	r25, 0x020B	; 0x80020b <NextTask+0x1>
    2020:	90 93 0f 02 	sts	0x020F, r25	; 0x80020f <CurrentTask+0x1>
    2024:	80 93 0e 02 	sts	0x020E, r24	; 0x80020e <CurrentTask>
	RESTORE_CONTEXT();
    2028:	a0 91 0a 02 	lds	r26, 0x020A	; 0x80020a <NextTask>
    202c:	b0 91 0b 02 	lds	r27, 0x020B	; 0x80020b <NextTask+0x1>
    2030:	cd 91       	ld	r28, X+
    2032:	cd bf       	out	0x3d, r28	; 61
    2034:	dd 91       	ld	r29, X+
    2036:	de bf       	out	0x3e, r29	; 62
    2038:	0f 90       	pop	r0
    203a:	1f 90       	pop	r1
    203c:	2f 90       	pop	r2
    203e:	3f 90       	pop	r3
    2040:	4f 90       	pop	r4
    2042:	5f 90       	pop	r5
    2044:	6f 90       	pop	r6
    2046:	7f 90       	pop	r7
    2048:	8f 90       	pop	r8
    204a:	9f 90       	pop	r9
    204c:	af 90       	pop	r10
    204e:	bf 90       	pop	r11
    2050:	cf 90       	pop	r12
    2052:	df 90       	pop	r13
    2054:	ef 90       	pop	r14
    2056:	ff 90       	pop	r15
    2058:	0f 91       	pop	r16
    205a:	1f 91       	pop	r17
    205c:	2f 91       	pop	r18
    205e:	3f 91       	pop	r19
    2060:	4f 91       	pop	r20
    2062:	5f 91       	pop	r21
    2064:	6f 91       	pop	r22
    2066:	7f 91       	pop	r23
    2068:	8f 91       	pop	r24
    206a:	9f 91       	pop	r25
    206c:	af 91       	pop	r26
    206e:	bf 91       	pop	r27
    2070:	cf 91       	pop	r28
    2072:	df 91       	pop	r29
    2074:	ef 91       	pop	r30
    2076:	ff 91       	pop	r31
    2078:	f7 fd       	sbrc	r31, 7
    207a:	03 c0       	rjmp	.+6      	; 0x2082 <irqen>
    207c:	ff bf       	out	0x3f, r31	; 63
    207e:	ff 91       	pop	r31
    2080:	08 95       	ret

00002082 <irqen>:
    2082:	ff 77       	andi	r31, 0x7F	; 127
    2084:	ff bf       	out	0x3f, r31	; 63
    2086:	ff 91       	pop	r31
    2088:	18 95       	reti

0000208a <TimerTicker>:
**  Control Blocks looking for timed out events.                      **
**                                                                    **
***********************************************************************/

void TimerTicker(void)
{
    208a:	ef 92       	push	r14
    208c:	ff 92       	push	r15
    208e:	0f 93       	push	r16
    2090:	1f 93       	push	r17
    2092:	cf 93       	push	r28
    2094:	df 93       	push	r29
	TCB *t,**prev;

	//------------------------------
	// Increment the time stamp
	//------------------------------
	++TStamp;
    2096:	80 91 a0 02 	lds	r24, 0x02A0	; 0x8002a0 <TStamp>
    209a:	90 91 a1 02 	lds	r25, 0x02A1	; 0x8002a1 <TStamp+0x1>
    209e:	01 96       	adiw	r24, 0x01	; 1
    20a0:	90 93 a1 02 	sts	0x02A1, r25	; 0x8002a1 <TStamp+0x1>
    20a4:	80 93 a0 02 	sts	0x02A0, r24	; 0x8002a0 <TStamp>
	// gone to zero, put the tasks that
	// are waiting on those semaphores
	// back into the queue so that they
	// can execute.
	//-----------------------------------
	for(e = TimeoutList;e;e=e->Tnext)	//go through whole list
    20a8:	e0 90 fe 01 	lds	r14, 0x01FE	; 0x8001fe <TimeoutList>
    20ac:	f0 90 ff 01 	lds	r15, 0x01FF	; 0x8001ff <TimeoutList+0x1>
    20b0:	e1 14       	cp	r14, r1
    20b2:	f1 04       	cpc	r15, r1
    20b4:	a9 f1       	breq	.+106    	; 0x2120 <TimerTicker+0x96>
			if(t->timeout > 0)	//if less than zero, infinite timeout
			{
				if( --(t->timeout) <= 0)	//decrement timeout counter
				{
					e->EventCount++;		//fake a post
					t->status = EVENT_TIMEOUT;	//event caused by semaphore
    20b6:	0d ef       	ldi	r16, 0xFD	; 253
    20b8:	1f ef       	ldi	r17, 0xFF	; 255
	// back into the queue so that they
	// can execute.
	//-----------------------------------
	for(e = TimeoutList;e;e=e->Tnext)	//go through whole list
	{
		for(prev = &(e->task_h),t = e->task_h;t;)
    20ba:	f7 01       	movw	r30, r14
    20bc:	c0 81       	ld	r28, Z
    20be:	d1 81       	ldd	r29, Z+1	; 0x01
    20c0:	20 97       	sbiw	r28, 0x00	; 0
    20c2:	41 f1       	breq	.+80     	; 0x2114 <TimerTicker+0x8a>
		{
			if(t->timeout > 0)	//if less than zero, infinite timeout
    20c4:	88 89       	ldd	r24, Y+16	; 0x10
    20c6:	99 89       	ldd	r25, Y+17	; 0x11
    20c8:	18 16       	cp	r1, r24
    20ca:	19 06       	cpc	r1, r25
    20cc:	e4 f4       	brge	.+56     	; 0x2106 <TimerTicker+0x7c>
			{
				if( --(t->timeout) <= 0)	//decrement timeout counter
    20ce:	01 97       	sbiw	r24, 0x01	; 1
    20d0:	99 8b       	std	Y+17, r25	; 0x11
    20d2:	88 8b       	std	Y+16, r24	; 0x10
    20d4:	18 16       	cp	r1, r24
    20d6:	19 06       	cpc	r1, r25
    20d8:	b4 f0       	brlt	.+44     	; 0x2106 <TimerTicker+0x7c>
				{
					e->EventCount++;		//fake a post
    20da:	d7 01       	movw	r26, r14
    20dc:	1a 96       	adiw	r26, 0x0a	; 10
    20de:	8d 91       	ld	r24, X+
    20e0:	9c 91       	ld	r25, X
    20e2:	1b 97       	sbiw	r26, 0x0b	; 11
    20e4:	01 96       	adiw	r24, 0x01	; 1
    20e6:	1b 96       	adiw	r26, 0x0b	; 11
    20e8:	9c 93       	st	X, r25
    20ea:	8e 93       	st	-X, r24
    20ec:	1a 97       	sbiw	r26, 0x0a	; 10
					t->status = EVENT_TIMEOUT;	//event caused by semaphore
    20ee:	19 87       	std	Y+9, r17	; 0x09
    20f0:	08 87       	std	Y+8, r16	; 0x08
					*prev = t->next;	//remove t from list
    20f2:	8c 89       	ldd	r24, Y+20	; 0x14
    20f4:	9d 89       	ldd	r25, Y+21	; 0x15
    20f6:	91 83       	std	Z+1, r25	; 0x01
    20f8:	80 83       	st	Z, r24
					t->next = 0;
    20fa:	1d 8a       	std	Y+21, r1	; 0x15
    20fc:	1c 8a       	std	Y+20, r1	; 0x14
					Insert(&ActiveTasks,t);//put it back in queue
    20fe:	be 01       	movw	r22, r28
    2100:	80 e0       	ldi	r24, 0x00	; 0
    2102:	92 e0       	ldi	r25, 0x02	; 2
    2104:	8e da       	rcall	.-2788   	; 0x1622 <Insert>
				}
			}
			prev = &(t->next);
    2106:	fe 01       	movw	r30, r28
    2108:	74 96       	adiw	r30, 0x14	; 20
			t = t->next;
    210a:	0c 88       	ldd	r0, Y+20	; 0x14
    210c:	dd 89       	ldd	r29, Y+21	; 0x15
    210e:	c0 2d       	mov	r28, r0
	// back into the queue so that they
	// can execute.
	//-----------------------------------
	for(e = TimeoutList;e;e=e->Tnext)	//go through whole list
	{
		for(prev = &(e->task_h),t = e->task_h;t;)
    2110:	20 97       	sbiw	r28, 0x00	; 0
    2112:	c1 f6       	brne	.-80     	; 0x20c4 <TimerTicker+0x3a>
	// gone to zero, put the tasks that
	// are waiting on those semaphores
	// back into the queue so that they
	// can execute.
	//-----------------------------------
	for(e = TimeoutList;e;e=e->Tnext)	//go through whole list
    2114:	f7 01       	movw	r30, r14
    2116:	e4 80       	ldd	r14, Z+4	; 0x04
    2118:	f5 80       	ldd	r15, Z+5	; 0x05
    211a:	e1 14       	cp	r14, r1
    211c:	f1 04       	cpc	r15, r1
    211e:	69 f6       	brne	.-102    	; 0x20ba <TimerTicker+0x30>
			}
			prev = &(t->next);
			t = t->next;
		}
	}
}
    2120:	df 91       	pop	r29
    2122:	cf 91       	pop	r28
    2124:	1f 91       	pop	r17
    2126:	0f 91       	pop	r16
    2128:	ff 90       	pop	r15
    212a:	ef 90       	pop	r14
    212c:	08 95       	ret

0000212e <Yield>:
** are in an interrupt
** routine
*********************************************************************/

void Yield(void)
{
    212e:	cf 93       	push	r28
	char sr;

	// Do not yield if at the interrupt level
	if(!InterruptCount)
    2130:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <InterruptCount>
    2134:	90 91 13 02 	lds	r25, 0x0213	; 0x800213 <InterruptCount+0x1>
    2138:	89 2b       	or	r24, r25
    213a:	09 f5       	brne	.+66     	; 0x217e <Yield+0x50>
	{
		sr = Disable();
    213c:	0e 94 6e 00 	call	0xdc	; 0xdc <Disable>
    2140:	c8 2f       	mov	r28, r24
		//update the time stamp in current task
		CurrentTask->TimeStamp = TStamp;
    2142:	40 91 0e 02 	lds	r20, 0x020E	; 0x80020e <CurrentTask>
    2146:	50 91 0f 02 	lds	r21, 0x020F	; 0x80020f <CurrentTask+0x1>
    214a:	80 91 a0 02 	lds	r24, 0x02A0	; 0x8002a0 <TStamp>
    214e:	90 91 a1 02 	lds	r25, 0x02A1	; 0x8002a1 <TStamp+0x1>
    2152:	fa 01       	movw	r30, r20
    2154:	95 87       	std	Z+13, r25	; 0x0d
    2156:	84 87       	std	Z+12, r24	; 0x0c
		//Insert current task back into queue
		//and get a new task
		Replace(&ActiveTasks,(void **)&NextTask,(void *)CurrentTask);
    2158:	6a e0       	ldi	r22, 0x0A	; 10
    215a:	72 e0       	ldi	r23, 0x02	; 2
    215c:	80 e0       	ldi	r24, 0x00	; 0
    215e:	92 e0       	ldi	r25, 0x02	; 2
    2160:	1b db       	rcall	.-2506   	; 0x1798 <Replace>
		//increment task swaps
		NextTask->TcbSwaps++;
    2162:	e0 91 0a 02 	lds	r30, 0x020A	; 0x80020a <NextTask>
    2166:	f0 91 0b 02 	lds	r31, 0x020B	; 0x80020b <NextTask+0x1>
    216a:	86 85       	ldd	r24, Z+14	; 0x0e
    216c:	97 85       	ldd	r25, Z+15	; 0x0f
    216e:	01 96       	adiw	r24, 0x01	; 1
    2170:	97 87       	std	Z+15, r25	; 0x0f
    2172:	86 87       	std	Z+14, r24	; 0x0e
		//swap tasks
		DoSwap();
    2174:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <DoSwap>
		Enable(sr);
    2178:	8c 2f       	mov	r24, r28
    217a:	0e 94 72 00 	call	0xe4	; 0xe4 <Enable>
	}
}
    217e:	cf 91       	pop	r28
    2180:	08 95       	ret

00002182 <__divmodsi4>:
    2182:	05 2e       	mov	r0, r21
    2184:	97 fb       	bst	r25, 7
    2186:	16 f4       	brtc	.+4      	; 0x218c <__divmodsi4+0xa>
    2188:	00 94       	com	r0
    218a:	0f d0       	rcall	.+30     	; 0x21aa <__negsi2>
    218c:	57 fd       	sbrc	r21, 7
    218e:	05 d0       	rcall	.+10     	; 0x219a <__divmodsi4_neg2>
    2190:	1d d0       	rcall	.+58     	; 0x21cc <__udivmodsi4>
    2192:	07 fc       	sbrc	r0, 7
    2194:	02 d0       	rcall	.+4      	; 0x219a <__divmodsi4_neg2>
    2196:	46 f4       	brtc	.+16     	; 0x21a8 <__divmodsi4_exit>
    2198:	08 c0       	rjmp	.+16     	; 0x21aa <__negsi2>

0000219a <__divmodsi4_neg2>:
    219a:	50 95       	com	r21
    219c:	40 95       	com	r20
    219e:	30 95       	com	r19
    21a0:	21 95       	neg	r18
    21a2:	3f 4f       	sbci	r19, 0xFF	; 255
    21a4:	4f 4f       	sbci	r20, 0xFF	; 255
    21a6:	5f 4f       	sbci	r21, 0xFF	; 255

000021a8 <__divmodsi4_exit>:
    21a8:	08 95       	ret

000021aa <__negsi2>:
    21aa:	90 95       	com	r25
    21ac:	80 95       	com	r24
    21ae:	70 95       	com	r23
    21b0:	61 95       	neg	r22
    21b2:	7f 4f       	sbci	r23, 0xFF	; 255
    21b4:	8f 4f       	sbci	r24, 0xFF	; 255
    21b6:	9f 4f       	sbci	r25, 0xFF	; 255
    21b8:	08 95       	ret

000021ba <__tablejump2__>:
    21ba:	ee 0f       	add	r30, r30
    21bc:	ff 1f       	adc	r31, r31
    21be:	00 24       	eor	r0, r0
    21c0:	00 1c       	adc	r0, r0
    21c2:	0b be       	out	0x3b, r0	; 59
    21c4:	07 90       	elpm	r0, Z+
    21c6:	f6 91       	elpm	r31, Z
    21c8:	e0 2d       	mov	r30, r0
    21ca:	09 94       	ijmp

000021cc <__udivmodsi4>:
    21cc:	a1 e2       	ldi	r26, 0x21	; 33
    21ce:	1a 2e       	mov	r1, r26
    21d0:	aa 1b       	sub	r26, r26
    21d2:	bb 1b       	sub	r27, r27
    21d4:	fd 01       	movw	r30, r26
    21d6:	0d c0       	rjmp	.+26     	; 0x21f2 <__udivmodsi4_ep>

000021d8 <__udivmodsi4_loop>:
    21d8:	aa 1f       	adc	r26, r26
    21da:	bb 1f       	adc	r27, r27
    21dc:	ee 1f       	adc	r30, r30
    21de:	ff 1f       	adc	r31, r31
    21e0:	a2 17       	cp	r26, r18
    21e2:	b3 07       	cpc	r27, r19
    21e4:	e4 07       	cpc	r30, r20
    21e6:	f5 07       	cpc	r31, r21
    21e8:	20 f0       	brcs	.+8      	; 0x21f2 <__udivmodsi4_ep>
    21ea:	a2 1b       	sub	r26, r18
    21ec:	b3 0b       	sbc	r27, r19
    21ee:	e4 0b       	sbc	r30, r20
    21f0:	f5 0b       	sbc	r31, r21

000021f2 <__udivmodsi4_ep>:
    21f2:	66 1f       	adc	r22, r22
    21f4:	77 1f       	adc	r23, r23
    21f6:	88 1f       	adc	r24, r24
    21f8:	99 1f       	adc	r25, r25
    21fa:	1a 94       	dec	r1
    21fc:	69 f7       	brne	.-38     	; 0x21d8 <__udivmodsi4_loop>
    21fe:	60 95       	com	r22
    2200:	70 95       	com	r23
    2202:	80 95       	com	r24
    2204:	90 95       	com	r25
    2206:	9b 01       	movw	r18, r22
    2208:	ac 01       	movw	r20, r24
    220a:	bd 01       	movw	r22, r26
    220c:	cf 01       	movw	r24, r30
    220e:	08 95       	ret

00002210 <atoi>:
    2210:	fc 01       	movw	r30, r24
    2212:	88 27       	eor	r24, r24
    2214:	99 27       	eor	r25, r25
    2216:	e8 94       	clt
    2218:	21 91       	ld	r18, Z+
    221a:	20 32       	cpi	r18, 0x20	; 32
    221c:	e9 f3       	breq	.-6      	; 0x2218 <atoi+0x8>
    221e:	29 30       	cpi	r18, 0x09	; 9
    2220:	10 f0       	brcs	.+4      	; 0x2226 <atoi+0x16>
    2222:	2e 30       	cpi	r18, 0x0E	; 14
    2224:	c8 f3       	brcs	.-14     	; 0x2218 <atoi+0x8>
    2226:	2b 32       	cpi	r18, 0x2B	; 43
    2228:	39 f0       	breq	.+14     	; 0x2238 <atoi+0x28>
    222a:	2d 32       	cpi	r18, 0x2D	; 45
    222c:	31 f4       	brne	.+12     	; 0x223a <atoi+0x2a>
    222e:	68 94       	set
    2230:	03 c0       	rjmp	.+6      	; 0x2238 <atoi+0x28>
    2232:	3e d0       	rcall	.+124    	; 0x22b0 <__mulhi_const_10>
    2234:	82 0f       	add	r24, r18
    2236:	91 1d       	adc	r25, r1
    2238:	21 91       	ld	r18, Z+
    223a:	20 53       	subi	r18, 0x30	; 48
    223c:	2a 30       	cpi	r18, 0x0A	; 10
    223e:	c8 f3       	brcs	.-14     	; 0x2232 <atoi+0x22>
    2240:	1e f4       	brtc	.+6      	; 0x2248 <atoi+0x38>
    2242:	90 95       	com	r25
    2244:	81 95       	neg	r24
    2246:	9f 4f       	sbci	r25, 0xFF	; 255
    2248:	08 95       	ret

0000224a <strcpy>:
    224a:	fb 01       	movw	r30, r22
    224c:	dc 01       	movw	r26, r24
    224e:	01 90       	ld	r0, Z+
    2250:	0d 92       	st	X+, r0
    2252:	00 20       	and	r0, r0
    2254:	e1 f7       	brne	.-8      	; 0x224e <strcpy+0x4>
    2256:	08 95       	ret

00002258 <strcspn>:
    2258:	dc 01       	movw	r26, r24
    225a:	5d 91       	ld	r21, X+
    225c:	55 23       	and	r21, r21
    225e:	31 f0       	breq	.+12     	; 0x226c <strcspn+0x14>
    2260:	fb 01       	movw	r30, r22
    2262:	01 90       	ld	r0, Z+
    2264:	05 16       	cp	r0, r21
    2266:	01 10       	cpse	r0, r1
    2268:	e1 f7       	brne	.-8      	; 0x2262 <strcspn+0xa>
    226a:	b9 f7       	brne	.-18     	; 0x225a <strcspn+0x2>
    226c:	80 95       	com	r24
    226e:	90 95       	com	r25
    2270:	8a 0f       	add	r24, r26
    2272:	9b 1f       	adc	r25, r27
    2274:	08 95       	ret

00002276 <strncmp>:
    2276:	fb 01       	movw	r30, r22
    2278:	dc 01       	movw	r26, r24
    227a:	41 50       	subi	r20, 0x01	; 1
    227c:	50 40       	sbci	r21, 0x00	; 0
    227e:	30 f0       	brcs	.+12     	; 0x228c <strncmp+0x16>
    2280:	8d 91       	ld	r24, X+
    2282:	01 90       	ld	r0, Z+
    2284:	80 19       	sub	r24, r0
    2286:	19 f4       	brne	.+6      	; 0x228e <strncmp+0x18>
    2288:	00 20       	and	r0, r0
    228a:	b9 f7       	brne	.-18     	; 0x227a <strncmp+0x4>
    228c:	88 1b       	sub	r24, r24
    228e:	99 0b       	sbc	r25, r25
    2290:	08 95       	ret

00002292 <strncpy>:
    2292:	fb 01       	movw	r30, r22
    2294:	dc 01       	movw	r26, r24
    2296:	41 50       	subi	r20, 0x01	; 1
    2298:	50 40       	sbci	r21, 0x00	; 0
    229a:	48 f0       	brcs	.+18     	; 0x22ae <strncpy+0x1c>
    229c:	01 90       	ld	r0, Z+
    229e:	0d 92       	st	X+, r0
    22a0:	00 20       	and	r0, r0
    22a2:	c9 f7       	brne	.-14     	; 0x2296 <strncpy+0x4>
    22a4:	01 c0       	rjmp	.+2      	; 0x22a8 <strncpy+0x16>
    22a6:	1d 92       	st	X+, r1
    22a8:	41 50       	subi	r20, 0x01	; 1
    22aa:	50 40       	sbci	r21, 0x00	; 0
    22ac:	e0 f7       	brcc	.-8      	; 0x22a6 <strncpy+0x14>
    22ae:	08 95       	ret

000022b0 <__mulhi_const_10>:
    22b0:	7a e0       	ldi	r23, 0x0A	; 10
    22b2:	97 9f       	mul	r25, r23
    22b4:	90 2d       	mov	r25, r0
    22b6:	87 9f       	mul	r24, r23
    22b8:	80 2d       	mov	r24, r0
    22ba:	91 0d       	add	r25, r1
    22bc:	11 24       	eor	r1, r1
    22be:	08 95       	ret

000022c0 <_exit>:
    22c0:	f8 94       	cli

000022c2 <__stop_program>:
    22c2:	ff cf       	rjmp	.-2      	; 0x22c2 <__stop_program>
