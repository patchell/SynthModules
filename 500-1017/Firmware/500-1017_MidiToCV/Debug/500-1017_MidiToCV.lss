
500-1017_MidiToCV.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000a8  00800100  000027a6  0000283a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000027a6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000110  008001a8  008001a8  000028e2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000028e2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002914  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000590  00000000  00000000  00002958  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000076ac  00000000  00000000  00002ee8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000027c8  00000000  00000000  0000a594  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002b7b  00000000  00000000  0000cd5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000cc4  00000000  00000000  0000f8d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000107d  00000000  00000000  0001059c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00004044  00000000  00000000  00011619  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000400  00000000  00000000  0001565d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
       2:	00 00       	nop
       4:	0d c5       	rjmp	.+2586   	; 0xa20 <__vector_1>
       6:	00 00       	nop
       8:	5f c0       	rjmp	.+190    	; 0xc8 <__bad_interrupt>
       a:	00 00       	nop
       c:	5d c0       	rjmp	.+186    	; 0xc8 <__bad_interrupt>
       e:	00 00       	nop
      10:	5b c0       	rjmp	.+182    	; 0xc8 <__bad_interrupt>
      12:	00 00       	nop
      14:	59 c0       	rjmp	.+178    	; 0xc8 <__bad_interrupt>
      16:	00 00       	nop
      18:	57 c0       	rjmp	.+174    	; 0xc8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	55 c0       	rjmp	.+170    	; 0xc8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	53 c0       	rjmp	.+166    	; 0xc8 <__bad_interrupt>
      22:	00 00       	nop
      24:	51 c0       	rjmp	.+162    	; 0xc8 <__bad_interrupt>
      26:	00 00       	nop
      28:	4f c0       	rjmp	.+158    	; 0xc8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4d c0       	rjmp	.+154    	; 0xc8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	4b c0       	rjmp	.+150    	; 0xc8 <__bad_interrupt>
      32:	00 00       	nop
      34:	49 c0       	rjmp	.+146    	; 0xc8 <__bad_interrupt>
      36:	00 00       	nop
      38:	47 c0       	rjmp	.+142    	; 0xc8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	45 c0       	rjmp	.+138    	; 0xc8 <__bad_interrupt>
      3e:	00 00       	nop
      40:	43 c0       	rjmp	.+134    	; 0xc8 <__bad_interrupt>
      42:	00 00       	nop
      44:	41 c0       	rjmp	.+130    	; 0xc8 <__bad_interrupt>
      46:	00 00       	nop
      48:	3e c5       	rjmp	.+2684   	; 0xac6 <__vector_18>
      4a:	00 00       	nop
      4c:	0c 94 d6 11 	jmp	0x23ac	; 0x23ac <__vector_19>
      50:	0c 94 76 10 	jmp	0x20ec	; 0x20ec <__vector_20>
      54:	0c 94 ce 10 	jmp	0x219c	; 0x219c <__vector_21>
      58:	37 c0       	rjmp	.+110    	; 0xc8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	35 c0       	rjmp	.+106    	; 0xc8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	33 c0       	rjmp	.+102    	; 0xc8 <__bad_interrupt>
      62:	00 00       	nop
      64:	31 c0       	rjmp	.+98     	; 0xc8 <__bad_interrupt>
      66:	00 00       	nop
      68:	2f c0       	rjmp	.+94     	; 0xc8 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2d c0       	rjmp	.+90     	; 0xc8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	0c 94 26 11 	jmp	0x224c	; 0x224c <__vector_28>
      74:	0c 94 7e 11 	jmp	0x22fc	; 0x22fc <__vector_29>
      78:	27 c0       	rjmp	.+78     	; 0xc8 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	25 c0       	rjmp	.+74     	; 0xc8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	23 c0       	rjmp	.+70     	; 0xc8 <__bad_interrupt>
      82:	00 00       	nop
      84:	21 c0       	rjmp	.+66     	; 0xc8 <__bad_interrupt>
      86:	00 00       	nop
      88:	1f c0       	rjmp	.+62     	; 0xc8 <__bad_interrupt>
	...

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e4       	ldi	r29, 0x40	; 64
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e6 ea       	ldi	r30, 0xA6	; 166
      a0:	f7 e2       	ldi	r31, 0x27	; 39
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a8 3a       	cpi	r26, 0xA8	; 168
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	22 e0       	ldi	r18, 0x02	; 2
      b4:	a8 ea       	ldi	r26, 0xA8	; 168
      b6:	b1 e0       	ldi	r27, 0x01	; 1
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a8 3b       	cpi	r26, 0xB8	; 184
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	4f d5       	rcall	.+2718   	; 0xb62 <main>
      c4:	0c 94 d1 13 	jmp	0x27a2	; 0x27a2 <_exit>

000000c8 <__bad_interrupt>:
      c8:	9b cf       	rjmp	.-202    	; 0x0 <__vectors>

000000ca <Disable>:
	.global Disable
	.global Enable

Disable:

	in	r24,_SFR_IO_ADDR(SREG)		;get status register
      ca:	8f b7       	in	r24, 0x3f	; 63
	cli								;disable interrupt
      cc:	f8 94       	cli
	andi r24,0x80					;strip off interrupt bit
      ce:	80 78       	andi	r24, 0x80	; 128
	ret
      d0:	08 95       	ret

000000d2 <Enable>:

Enable:
	in r25,_SFR_IO_ADDR(SREG)	;get the status register
      d2:	9f b7       	in	r25, 0x3f	; 63
	or r25,r24					;set bits in status reg
      d4:	98 2b       	or	r25, r24
	out _SFR_IO_ADDR(SREG),r25	;save new status register
      d6:	9f bf       	out	0x3f, r25	; 63
	ret
      d8:	08 95       	ret

000000da <CioInit>:
	CioInit
		Initialize the central IO routines
***************************************/
void CioInit(void)
{
	last_dev = 0;
      da:	10 92 a9 01 	sts	0x01A9, r1	; 0x8001a9 <__data_end+0x1>
      de:	10 92 a8 01 	sts	0x01A8, r1	; 0x8001a8 <__data_end>
	IOCBBlocker = NewSemaphore(1,SEMAPHORE_MODE_BLOCKING,"IOCBBlocker");
      e2:	4c e2       	ldi	r20, 0x2C	; 44
      e4:	51 e0       	ldi	r21, 0x01	; 1
      e6:	60 e0       	ldi	r22, 0x00	; 0
      e8:	70 e0       	ldi	r23, 0x00	; 0
      ea:	81 e0       	ldi	r24, 0x01	; 1
      ec:	90 e0       	ldi	r25, 0x00	; 0
      ee:	77 d1       	rcall	.+750    	; 0x3de <NewSemaphore>
      f0:	90 93 09 02 	sts	0x0209, r25	; 0x800209 <IOCBBlocker+0x1>
      f4:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <IOCBBlocker>
      f8:	08 95       	ret

000000fa <FreeIOCB>:
	parameters:
		I.......pointer to IOCB to free
***********************************************/

static void FreeIOCB(IOCB *I)
{
      fa:	cf 93       	push	r28
      fc:	df 93       	push	r29
      fe:	ec 01       	movw	r28, r24
	// block access to other tasks
	PendSemaphore(IOCBBlocker,0);
     100:	60 e0       	ldi	r22, 0x00	; 0
     102:	70 e0       	ldi	r23, 0x00	; 0
     104:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <IOCBBlocker>
     108:	90 91 09 02 	lds	r25, 0x0209	; 0x800209 <IOCBBlocker+0x1>
     10c:	0e 94 b3 0b 	call	0x1766	; 0x1766 <PendSemaphore>
	// Add IOCB to front of pool list
	I->next = PoolList;
     110:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <PoolList>
     114:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <PoolList+0x1>
     118:	9b 87       	std	Y+11, r25	; 0x0b
     11a:	8a 87       	std	Y+10, r24	; 0x0a
	PoolList = I;
     11c:	d0 93 b7 01 	sts	0x01B7, r29	; 0x8001b7 <PoolList+0x1>
     120:	c0 93 b6 01 	sts	0x01B6, r28	; 0x8001b6 <PoolList>
	// unblock access to other tasks
	PostSemaphore(IOCBBlocker,0);
     124:	60 e0       	ldi	r22, 0x00	; 0
     126:	70 e0       	ldi	r23, 0x00	; 0
     128:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <IOCBBlocker>
     12c:	90 91 09 02 	lds	r25, 0x0209	; 0x800209 <IOCBBlocker+0x1>
     130:	0e 94 1f 0c 	call	0x183e	; 0x183e <PostSemaphore>
}
     134:	df 91       	pop	r29
     136:	cf 91       	pop	r28
     138:	08 95       	ret

0000013a <CioAddHandler>:
// return value:
//	returns 0 on success, nonzero on fail
//**************************************************************************

int CioAddHandler(char * devname,H_JVEC *t)
{
     13a:	0f 93       	push	r16
     13c:	1f 93       	push	r17
     13e:	cf 93       	push	r28
     140:	df 93       	push	r29
     142:	8c 01       	movw	r16, r24
     144:	eb 01       	movw	r28, r22
	int retval = 0;
	int sr;

	//enter critical section, disable interrupts
	sr = Disable();
     146:	c1 df       	rcall	.-126    	; 0xca <Disable>
	//check to see if there is room for another device
	if(last_dev >= CIO_MAX_DEV) retval = CIO_DEVTABLE_FULL;
     148:	20 91 a8 01 	lds	r18, 0x01A8	; 0x8001a8 <__data_end>
     14c:	30 91 a9 01 	lds	r19, 0x01A9	; 0x8001a9 <__data_end+0x1>
     150:	24 31       	cpi	r18, 0x14	; 20
     152:	31 05       	cpc	r19, r1
     154:	a4 f4       	brge	.+40     	; 0x17e <CioAddHandler+0x44>
	else
	{
		htabs[last_dev].dev_name = devname;	/*	device name	*/
     156:	f9 01       	movw	r30, r18
     158:	ee 0f       	add	r30, r30
     15a:	ff 1f       	adc	r31, r31
     15c:	ee 0f       	add	r30, r30
     15e:	ff 1f       	adc	r31, r31
     160:	e8 54       	subi	r30, 0x48	; 72
     162:	fe 4f       	sbci	r31, 0xFE	; 254
     164:	11 83       	std	Z+1, r17	; 0x01
     166:	00 83       	st	Z, r16
		htabs[last_dev].HtabsEntry = t;	/*	address of table	*/
     168:	d3 83       	std	Z+3, r29	; 0x03
     16a:	c2 83       	std	Z+2, r28	; 0x02
		++last_dev;
     16c:	2f 5f       	subi	r18, 0xFF	; 255
     16e:	3f 4f       	sbci	r19, 0xFF	; 255
     170:	30 93 a9 01 	sts	0x01A9, r19	; 0x8001a9 <__data_end+0x1>
     174:	20 93 a8 01 	sts	0x01A8, r18	; 0x8001a8 <__data_end>
//	returns 0 on success, nonzero on fail
//**************************************************************************

int CioAddHandler(char * devname,H_JVEC *t)
{
	int retval = 0;
     178:	c0 e0       	ldi	r28, 0x00	; 0
     17a:	d0 e0       	ldi	r29, 0x00	; 0
     17c:	02 c0       	rjmp	.+4      	; 0x182 <CioAddHandler+0x48>
	int sr;

	//enter critical section, disable interrupts
	sr = Disable();
	//check to see if there is room for another device
	if(last_dev >= CIO_MAX_DEV) retval = CIO_DEVTABLE_FULL;
     17e:	c0 ec       	ldi	r28, 0xC0	; 192
		htabs[last_dev].dev_name = devname;	/*	device name	*/
		htabs[last_dev].HtabsEntry = t;	/*	address of table	*/
		++last_dev;
	}
	//Exit critical section, enable interrupts
	Enable(sr);
     180:	df ef       	ldi	r29, 0xFF	; 255
     182:	a7 df       	rcall	.-178    	; 0xd2 <Enable>
	return retval;
}
     184:	ce 01       	movw	r24, r28
     186:	df 91       	pop	r29
     188:	cf 91       	pop	r28
     18a:	1f 91       	pop	r17
     18c:	0f 91       	pop	r16
     18e:	08 95       	ret

00000190 <CioOpen>:
**		this can be 0->9.  If the unit number is
** omitted, the default unit number is '0'
--------------------------------------------------*/

IOCB *CioOpen(char *devname,int mode)
{
     190:	8f 92       	push	r8
     192:	9f 92       	push	r9
     194:	af 92       	push	r10
     196:	bf 92       	push	r11
     198:	cf 92       	push	r12
     19a:	df 92       	push	r13
     19c:	ef 92       	push	r14
     19e:	ff 92       	push	r15
     1a0:	0f 93       	push	r16
     1a2:	1f 93       	push	r17
     1a4:	cf 93       	push	r28
     1a6:	df 93       	push	r29
     1a8:	00 d0       	rcall	.+0      	; 0x1aa <CioOpen+0x1a>
     1aa:	00 d0       	rcall	.+0      	; 0x1ac <CioOpen+0x1c>
     1ac:	cd b7       	in	r28, 0x3d	; 61
     1ae:	de b7       	in	r29, 0x3e	; 62
     1b0:	6c 01       	movw	r12, r24
     1b2:	8b 01       	movw	r16, r22
	// first check the IOCB pool to see if
	// there are any unused IOCBs in there
	// If there are none, then allocate a
	// new one from the heap
	//--------------------------------------
	if(PoolList == NULL)
     1b4:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <PoolList>
     1b8:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <PoolList+0x1>
     1bc:	89 2b       	or	r24, r25
     1be:	29 f4       	brne	.+10     	; 0x1ca <CioOpen+0x3a>
		retval = (IOCB *)malloc(sizeof(IOCB));
     1c0:	8c e0       	ldi	r24, 0x0C	; 12
     1c2:	90 e0       	ldi	r25, 0x00	; 0
     1c4:	56 d5       	rcall	.+2732   	; 0xc72 <malloc>
     1c6:	4c 01       	movw	r8, r24
     1c8:	1b c0       	rjmp	.+54     	; 0x200 <CioOpen+0x70>
	else
	{
		//block access to other tasks
		PendSemaphore(IOCBBlocker,0);
     1ca:	60 e0       	ldi	r22, 0x00	; 0
     1cc:	70 e0       	ldi	r23, 0x00	; 0
     1ce:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <IOCBBlocker>
     1d2:	90 91 09 02 	lds	r25, 0x0209	; 0x800209 <IOCBBlocker+0x1>
     1d6:	0e 94 b3 0b 	call	0x1766	; 0x1766 <PendSemaphore>
		//get first IOCB is pool
		retval = PoolList;
     1da:	80 90 b6 01 	lds	r8, 0x01B6	; 0x8001b6 <PoolList>
     1de:	90 90 b7 01 	lds	r9, 0x01B7	; 0x8001b7 <PoolList+0x1>
		//update head of pool list
		PoolList = PoolList->next;
     1e2:	f4 01       	movw	r30, r8
     1e4:	82 85       	ldd	r24, Z+10	; 0x0a
     1e6:	93 85       	ldd	r25, Z+11	; 0x0b
     1e8:	90 93 b7 01 	sts	0x01B7, r25	; 0x8001b7 <PoolList+0x1>
     1ec:	80 93 b6 01 	sts	0x01B6, r24	; 0x8001b6 <PoolList>
		//unblock access to other tasks
		PostSemaphore(IOCBBlocker,0);
     1f0:	60 e0       	ldi	r22, 0x00	; 0
     1f2:	70 e0       	ldi	r23, 0x00	; 0
     1f4:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <IOCBBlocker>
     1f8:	90 91 09 02 	lds	r25, 0x0209	; 0x800209 <IOCBBlocker+0x1>
     1fc:	0e 94 1f 0c 	call	0x183e	; 0x183e <PostSemaphore>

IOCB *CioOpen(char *devname,int mode)
{
	IOCB *iocb;
	// Allocate an IO control block
	if((iocb = AllocIOCB()) != NULL)
     200:	81 14       	cp	r8, r1
     202:	91 04       	cpc	r9, r1
     204:	09 f4       	brne	.+2      	; 0x208 <CioOpen+0x78>
     206:	7d c0       	rjmp	.+250    	; 0x302 <CioOpen+0x172>
	{
		//set up IOCB with device name and mode
		iocb->dev_name = devname;
     208:	f4 01       	movw	r30, r8
     20a:	d5 82       	std	Z+5, r13	; 0x05
     20c:	c4 82       	std	Z+4, r12	; 0x04
		iocb->mode = mode;
     20e:	17 83       	std	Z+7, r17	; 0x07
     210:	06 83       	std	Z+6, r16	; 0x06
	HTABS *ht;		//pointer to device table
	
	char *n,un[4];		/*unit numbers up to 999	*/
	int l;				/*	length of device name	*/

	l = strcspn(iocb->dev_name,"9876543210:");	/*	we need to find what is not unit number	*/
     212:	68 e3       	ldi	r22, 0x38	; 56
     214:	71 e0       	ldi	r23, 0x01	; 1
     216:	c6 01       	movw	r24, r12
     218:	0e 94 9d 13 	call	0x273a	; 0x273a <strcspn>
     21c:	5c 01       	movw	r10, r24
	ht = htabs + last_dev - 1;					/*	point to handler table	*/
     21e:	00 91 a8 01 	lds	r16, 0x01A8	; 0x8001a8 <__data_end>
     222:	10 91 a9 01 	lds	r17, 0x01A9	; 0x8001a9 <__data_end+0x1>
     226:	c8 01       	movw	r24, r16
     228:	88 0f       	add	r24, r24
     22a:	99 1f       	adc	r25, r25
     22c:	88 0f       	add	r24, r24
     22e:	99 1f       	adc	r25, r25
     230:	9c 01       	movw	r18, r24
     232:	2c 54       	subi	r18, 0x4C	; 76
     234:	3e 4f       	sbci	r19, 0xFE	; 254
     236:	79 01       	movw	r14, r18
	//-----------------------------------------
	// search device table for device name
	//-----------------------------------------
	for(i=last_dev -1;(i > -1) && strncmp(iocb->dev_name,ht->dev_name,l) ;--i,--ht);
     238:	01 50       	subi	r16, 0x01	; 1
     23a:	11 09       	sbc	r17, r1
     23c:	5a f4       	brpl	.+22     	; 0x254 <CioOpen+0xc4>
     23e:	5d c0       	rjmp	.+186    	; 0x2fa <CioOpen+0x16a>
     240:	01 50       	subi	r16, 0x01	; 1
     242:	11 09       	sbc	r17, r1
     244:	34 e0       	ldi	r19, 0x04	; 4
     246:	e3 1a       	sub	r14, r19
     248:	f1 08       	sbc	r15, r1
     24a:	0f 3f       	cpi	r16, 0xFF	; 255
     24c:	8f ef       	ldi	r24, 0xFF	; 255
     24e:	18 07       	cpc	r17, r24
     250:	09 f4       	brne	.+2      	; 0x254 <CioOpen+0xc4>
     252:	53 c0       	rjmp	.+166    	; 0x2fa <CioOpen+0x16a>
     254:	f7 01       	movw	r30, r14
     256:	60 81       	ld	r22, Z
     258:	71 81       	ldd	r23, Z+1	; 0x01
     25a:	a5 01       	movw	r20, r10
     25c:	c6 01       	movw	r24, r12
     25e:	0e 94 ac 13 	call	0x2758	; 0x2758 <strncmp>
     262:	89 2b       	or	r24, r25
     264:	69 f7       	brne	.-38     	; 0x240 <CioOpen+0xb0>
	if(i >= 0)
     266:	11 23       	and	r17, r17
     268:	7c f1       	brlt	.+94     	; 0x2c8 <CioOpen+0x138>
	{
		/*
		** ok, now we need to locate the unit number
		*/
		n = iocb->dev_name + l;
     26a:	ca 0c       	add	r12, r10
     26c:	db 1c       	adc	r13, r11
		if((l = strcspn(n,":")) == 0)
     26e:	62 e4       	ldi	r22, 0x42	; 66
     270:	71 e0       	ldi	r23, 0x01	; 1
     272:	c6 01       	movw	r24, r12
     274:	0e 94 9d 13 	call	0x273a	; 0x273a <strcspn>
     278:	7c 01       	movw	r14, r24
     27a:	00 97       	sbiw	r24, 0x00	; 0
     27c:	31 f4       	brne	.+12     	; 0x28a <CioOpen+0xfa>
		{
			//------------------------
			// Unit number not found
			//------------------------
			iocb->devnum = 1;		/*	default unit number	*/
     27e:	81 e0       	ldi	r24, 0x01	; 1
     280:	90 e0       	ldi	r25, 0x00	; 0
     282:	f4 01       	movw	r30, r8
     284:	93 83       	std	Z+3, r25	; 0x03
     286:	82 83       	std	Z+2, r24	; 0x02
     288:	23 c0       	rjmp	.+70     	; 0x2d0 <CioOpen+0x140>
		else
		{
			//------------------------
			// copy unit number
			//------------------------
			strncpy(un,n,l);
     28a:	ac 01       	movw	r20, r24
     28c:	b6 01       	movw	r22, r12
     28e:	ce 01       	movw	r24, r28
     290:	01 96       	adiw	r24, 0x01	; 1
     292:	0e 94 ba 13 	call	0x2774	; 0x2774 <strncpy>
			un[l] = '\0';
     296:	e1 e0       	ldi	r30, 0x01	; 1
     298:	f0 e0       	ldi	r31, 0x00	; 0
     29a:	ec 0f       	add	r30, r28
     29c:	fd 1f       	adc	r31, r29
     29e:	ee 0d       	add	r30, r14
     2a0:	ff 1d       	adc	r31, r15
     2a2:	10 82       	st	Z, r1
			/*	convert unit number	*/
			iocb->devnum = atoi(un);
     2a4:	ce 01       	movw	r24, r28
     2a6:	01 96       	adiw	r24, 0x01	; 1
     2a8:	0e 94 79 13 	call	0x26f2	; 0x26f2 <atoi>
     2ac:	f4 01       	movw	r30, r8
     2ae:	93 83       	std	Z+3, r25	; 0x03
     2b0:	82 83       	std	Z+2, r24	; 0x02
     2b2:	0e c0       	rjmp	.+28     	; 0x2d0 <CioOpen+0x140>
		iocb->mode = mode;
		//search device table for this device
		if(( iocb->ichid = dev_search(iocb)) < 0)
		{
			//the device was not found
			FreeIOCB(iocb);	//free up IOCB again
     2b4:	c4 01       	movw	r24, r8
     2b6:	21 df       	rcall	.-446    	; 0xfa <FreeIOCB>
			iocb = NULL;
     2b8:	81 2c       	mov	r8, r1
     2ba:	91 2c       	mov	r9, r1
		}
		// call open from device table
		else if(((*htabs[iocb->ichid].HtabsEntry->openv)(iocb)) < 0)
		{
			//open failed, free IOCB
			FreeIOCB(iocb);	//free up IOCB again
     2bc:	22 c0       	rjmp	.+68     	; 0x302 <CioOpen+0x172>
     2be:	c4 01       	movw	r24, r8
     2c0:	1c df       	rcall	.-456    	; 0xfa <FreeIOCB>
			iocb = NULL;
     2c2:	81 2c       	mov	r8, r1
     2c4:	91 2c       	mov	r9, r1
     2c6:	1d c0       	rjmp	.+58     	; 0x302 <CioOpen+0x172>
	{
		//set up IOCB with device name and mode
		iocb->dev_name = devname;
		iocb->mode = mode;
		//search device table for this device
		if(( iocb->ichid = dev_search(iocb)) < 0)
     2c8:	f4 01       	movw	r30, r8
     2ca:	11 83       	std	Z+1, r17	; 0x01
     2cc:	00 83       	st	Z, r16
     2ce:	f2 cf       	rjmp	.-28     	; 0x2b4 <CioOpen+0x124>
     2d0:	f4 01       	movw	r30, r8
     2d2:	11 83       	std	Z+1, r17	; 0x01
     2d4:	00 83       	st	Z, r16
			//the device was not found
			FreeIOCB(iocb);	//free up IOCB again
			iocb = NULL;
		}
		// call open from device table
		else if(((*htabs[iocb->ichid].HtabsEntry->openv)(iocb)) < 0)
     2d6:	00 0f       	add	r16, r16
     2d8:	11 1f       	adc	r17, r17
     2da:	00 0f       	add	r16, r16
     2dc:	11 1f       	adc	r17, r17
     2de:	f8 01       	movw	r30, r16
     2e0:	e8 54       	subi	r30, 0x48	; 72
     2e2:	fe 4f       	sbci	r31, 0xFE	; 254
     2e4:	02 80       	ldd	r0, Z+2	; 0x02
     2e6:	f3 81       	ldd	r31, Z+3	; 0x03
     2e8:	e0 2d       	mov	r30, r0
     2ea:	01 90       	ld	r0, Z+
     2ec:	f0 81       	ld	r31, Z
     2ee:	e0 2d       	mov	r30, r0
     2f0:	c4 01       	movw	r24, r8
     2f2:	09 95       	icall
     2f4:	99 23       	and	r25, r25
     2f6:	2c f4       	brge	.+10     	; 0x302 <CioOpen+0x172>
     2f8:	e2 cf       	rjmp	.-60     	; 0x2be <CioOpen+0x12e>
	{
		//set up IOCB with device name and mode
		iocb->dev_name = devname;
		iocb->mode = mode;
		//search device table for this device
		if(( iocb->ichid = dev_search(iocb)) < 0)
     2fa:	f4 01       	movw	r30, r8
     2fc:	11 83       	std	Z+1, r17	; 0x01
     2fe:	00 83       	st	Z, r16
     300:	d9 cf       	rjmp	.-78     	; 0x2b4 <CioOpen+0x124>
			FreeIOCB(iocb);	//free up IOCB again
			iocb = NULL;
		}
	}
	return(iocb);
}
     302:	c4 01       	movw	r24, r8
     304:	0f 90       	pop	r0
     306:	0f 90       	pop	r0
     308:	0f 90       	pop	r0
     30a:	0f 90       	pop	r0
     30c:	df 91       	pop	r29
     30e:	cf 91       	pop	r28
     310:	1f 91       	pop	r17
     312:	0f 91       	pop	r16
     314:	ff 90       	pop	r15
     316:	ef 90       	pop	r14
     318:	df 90       	pop	r13
     31a:	cf 90       	pop	r12
     31c:	bf 90       	pop	r11
     31e:	af 90       	pop	r10
     320:	9f 90       	pop	r9
     322:	8f 90       	pop	r8
     324:	08 95       	ret

00000326 <CioGetC>:

int CioGetC(IOCB *I)
{
	//check to see if device was
	//opened for reading
	if((I->mode & FCNTL_RDONLY) == 0)
     326:	dc 01       	movw	r26, r24
     328:	16 96       	adiw	r26, 0x06	; 6
     32a:	2c 91       	ld	r18, X
     32c:	16 97       	sbiw	r26, 0x06	; 6
     32e:	20 ff       	sbrs	r18, 0
     330:	10 c0       	rjmp	.+32     	; 0x352 <CioGetC+0x2c>
		return(CIO_WRONLY);	//return error
	//
	// look up function in device table
	// and call get method for device
	//
	return ( (*htabs[I->ichid].HtabsEntry->getv)(I)  );
     332:	ed 91       	ld	r30, X+
     334:	fc 91       	ld	r31, X
     336:	ee 0f       	add	r30, r30
     338:	ff 1f       	adc	r31, r31
     33a:	ee 0f       	add	r30, r30
     33c:	ff 1f       	adc	r31, r31
     33e:	e8 54       	subi	r30, 0x48	; 72
     340:	fe 4f       	sbci	r31, 0xFE	; 254
     342:	02 80       	ldd	r0, Z+2	; 0x02
     344:	f3 81       	ldd	r31, Z+3	; 0x03
     346:	e0 2d       	mov	r30, r0
     348:	04 80       	ldd	r0, Z+4	; 0x04
     34a:	f5 81       	ldd	r31, Z+5	; 0x05
     34c:	e0 2d       	mov	r30, r0
     34e:	09 95       	icall
     350:	08 95       	ret
int CioGetC(IOCB *I)
{
	//check to see if device was
	//opened for reading
	if((I->mode & FCNTL_RDONLY) == 0)
		return(CIO_WRONLY);	//return error
     352:	8e eb       	ldi	r24, 0xBE	; 190
     354:	9f ef       	ldi	r25, 0xFF	; 255
	//
	// look up function in device table
	// and call get method for device
	//
	return ( (*htabs[I->ichid].HtabsEntry->getv)(I)  );
}
     356:	08 95       	ret

00000358 <CioXIO>:
		depends on the device driver
**********************************************/

int CioXIO(IOCB *I,int cmd,void *d)
{
	return((*htabs[I->ichid].HtabsEntry->specv)(I,cmd,d));
     358:	dc 01       	movw	r26, r24
     35a:	ed 91       	ld	r30, X+
     35c:	fc 91       	ld	r31, X
     35e:	ee 0f       	add	r30, r30
     360:	ff 1f       	adc	r31, r31
     362:	ee 0f       	add	r30, r30
     364:	ff 1f       	adc	r31, r31
     366:	e8 54       	subi	r30, 0x48	; 72
     368:	fe 4f       	sbci	r31, 0xFE	; 254
     36a:	02 80       	ldd	r0, Z+2	; 0x02
     36c:	f3 81       	ldd	r31, Z+3	; 0x03
     36e:	e0 2d       	mov	r30, r0
     370:	06 84       	ldd	r0, Z+14	; 0x0e
     372:	f7 85       	ldd	r31, Z+15	; 0x0f
     374:	e0 2d       	mov	r30, r0
     376:	09 95       	icall
}
     378:	08 95       	ret

0000037a <CreateSemaphore>:
**	n............name of semaphore (DEBUG only)                           **
**                                                                        **
***************************************************************************/

void CreateSemaphore(ECB *e,int InitCount,int Mode,char *n)
{
     37a:	cf 93       	push	r28
     37c:	df 93       	push	r29
     37e:	ec 01       	movw	r28, r24
	char sr;

	e->EventCount = InitCount;	//set initial count
     380:	7b 87       	std	Y+11, r23	; 0x0b
     382:	6a 87       	std	Y+10, r22	; 0x0a
	e->SemaphoreMode = Mode;	//set mode
     384:	59 87       	std	Y+9, r21	; 0x09
     386:	48 87       	std	Y+8, r20	; 0x08
	strcpy(e->name,n);			//copy name in
     388:	b9 01       	movw	r22, r18
     38a:	0c 96       	adiw	r24, 0x0c	; 12
     38c:	0e 94 96 13 	call	0x272c	; 0x272c <strcpy>
	e->task_h = 0;				//no tasks waiting
     390:	19 82       	std	Y+1, r1	; 0x01
     392:	18 82       	st	Y, r1
	e->task_t = 0;				//no tasks waiting
     394:	1b 82       	std	Y+3, r1	; 0x03
     396:	1a 82       	std	Y+2, r1	; 0x02
	//-------------------------------------------------------
	// if Mode==SEMAPHORE_MODE_TIMEOUT, then put this
	// semaphore into timeout list
	//-------------------------------------------------------
	// enter critical section, disable interrupts
	sr = Disable();
     398:	98 de       	rcall	.-720    	; 0xca <Disable>
	if(e->SemaphoreMode == SEMAPHORE_MODE_TIMEOUT)
     39a:	28 85       	ldd	r18, Y+8	; 0x08
     39c:	39 85       	ldd	r19, Y+9	; 0x09
     39e:	21 30       	cpi	r18, 0x01	; 1
     3a0:	31 05       	cpc	r19, r1
     3a2:	c9 f4       	brne	.+50     	; 0x3d6 <CreateSemaphore+0x5c>
	{
		if(TimeoutList)	//is the list already started?
     3a4:	e0 91 0a 02 	lds	r30, 0x020A	; 0x80020a <TimeoutList>
     3a8:	f0 91 0b 02 	lds	r31, 0x020B	; 0x80020b <TimeoutList+0x1>
     3ac:	30 97       	sbiw	r30, 0x00	; 0
     3ae:	59 f0       	breq	.+22     	; 0x3c6 <CreateSemaphore+0x4c>
		{
			e->Tnext = TimeoutList;	//make current head next in line
     3b0:	fd 83       	std	Y+5, r31	; 0x05
     3b2:	ec 83       	std	Y+4, r30	; 0x04
			e->Tprev = 0;			//these is no previous entry
     3b4:	1f 82       	std	Y+7, r1	; 0x07
     3b6:	1e 82       	std	Y+6, r1	; 0x06
			TimeoutList->Tprev = e;	//this will be prev for next entry
     3b8:	d7 83       	std	Z+7, r29	; 0x07
     3ba:	c6 83       	std	Z+6, r28	; 0x06
			TimeoutList = e;			//this is now the new head of list
     3bc:	d0 93 0b 02 	sts	0x020B, r29	; 0x80020b <TimeoutList+0x1>
     3c0:	c0 93 0a 02 	sts	0x020A, r28	; 0x80020a <TimeoutList>
     3c4:	08 c0       	rjmp	.+16     	; 0x3d6 <CreateSemaphore+0x5c>
		}
		else			//no start list
		{
			TimeoutList = e;	//set timeout list
     3c6:	d0 93 0b 02 	sts	0x020B, r29	; 0x80020b <TimeoutList+0x1>
     3ca:	c0 93 0a 02 	sts	0x020A, r28	; 0x80020a <TimeoutList>
			e->Tnext = 0;
     3ce:	1d 82       	std	Y+5, r1	; 0x05
     3d0:	1c 82       	std	Y+4, r1	; 0x04
			e->Tprev = 0;
     3d2:	1f 82       	std	Y+7, r1	; 0x07
		}
	}
	//exit critical section, enable IRQ
	Enable(sr);	//restore interrupts
     3d4:	1e 82       	std	Y+6, r1	; 0x06
     3d6:	7d de       	rcall	.-774    	; 0xd2 <Enable>
}
     3d8:	df 91       	pop	r29
     3da:	cf 91       	pop	r28
     3dc:	08 95       	ret

000003de <NewSemaphore>:
	return value:
		pointer to an Event Control block on success
		OR NULL on fail
************************************************/
ECB *NewSemaphore(int InitCount,int Mode,char *name)
{
     3de:	cf 92       	push	r12
     3e0:	df 92       	push	r13
     3e2:	ef 92       	push	r14
     3e4:	ff 92       	push	r15
     3e6:	0f 93       	push	r16
     3e8:	1f 93       	push	r17
     3ea:	cf 93       	push	r28
     3ec:	df 93       	push	r29
     3ee:	8c 01       	movw	r16, r24
     3f0:	7b 01       	movw	r14, r22
     3f2:	6a 01       	movw	r12, r20
*********************************************/
static ECB *AllocECB(void)
{
	ECB *rv;
	// enter critical section disable IRQ
	char sr = Disable();
     3f4:	6a de       	rcall	.-812    	; 0xca <Disable>
	if (ECBPool)	//check the pool
     3f6:	c0 91 aa 01 	lds	r28, 0x01AA	; 0x8001aa <ECBPool>
     3fa:	d0 91 ab 01 	lds	r29, 0x01AB	; 0x8001ab <ECBPool+0x1>
     3fe:	20 97       	sbiw	r28, 0x00	; 0
     400:	41 f0       	breq	.+16     	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
	{
		//get first ECB in pool
		rv = ECBPool;
		//new head of pool
		ECBPool = ECBPool->Tnext;
     402:	2c 81       	ldd	r18, Y+4	; 0x04
     404:	3d 81       	ldd	r19, Y+5	; 0x05
     406:	30 93 ab 01 	sts	0x01AB, r19	; 0x8001ab <ECBPool+0x1>
     40a:	20 93 aa 01 	sts	0x01AA, r18	; 0x8001aa <ECBPool>
		//exit critical section
		Enable(sr);
     40e:	61 de       	rcall	.-830    	; 0xd2 <Enable>
	}
	else
	{
		//exit critical section
		Enable(sr);
     410:	07 c0       	rjmp	.+14     	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
		//allocate ECB from heap
		rv = (ECB *)malloc(sizeof(ECB));	//or allocate from the heap
     412:	5f de       	rcall	.-834    	; 0xd2 <Enable>
     414:	80 e2       	ldi	r24, 0x20	; 32
     416:	90 e0       	ldi	r25, 0x00	; 0
     418:	2c d4       	rcall	.+2136   	; 0xc72 <malloc>
     41a:	ec 01       	movw	r28, r24
************************************************/
ECB *NewSemaphore(int InitCount,int Mode,char *name)
{
	ECB *r;

	if((r = AllocECB()) != NULL)
     41c:	89 2b       	or	r24, r25
     41e:	29 f0       	breq	.+10     	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
		CreateSemaphore(r,InitCount,Mode,name);
     420:	96 01       	movw	r18, r12
     422:	a7 01       	movw	r20, r14
     424:	b8 01       	movw	r22, r16
     426:	ce 01       	movw	r24, r28
     428:	a8 df       	rcall	.-176    	; 0x37a <CreateSemaphore>
	return r;
}
     42a:	ce 01       	movw	r24, r28
     42c:	df 91       	pop	r29
     42e:	cf 91       	pop	r28
     430:	1f 91       	pop	r17
     432:	0f 91       	pop	r16
     434:	ff 90       	pop	r15
     436:	ef 90       	pop	r14
     438:	df 90       	pop	r13
     43a:	cf 90       	pop	r12
     43c:	08 95       	ret

0000043e <CreateTask>:
**	arg.............argument to be passed to function...it chan either be 
**  a value, or a pointer to some data
***************************************************************************************/

void CreateTask(TCB *t, void (*task)(void *), int stacksize,int priority,char *name,void *arg)
{
     43e:	6f 92       	push	r6
     440:	7f 92       	push	r7
     442:	8f 92       	push	r8
     444:	9f 92       	push	r9
     446:	af 92       	push	r10
     448:	bf 92       	push	r11
     44a:	cf 92       	push	r12
     44c:	df 92       	push	r13
     44e:	ef 92       	push	r14
     450:	ff 92       	push	r15
     452:	0f 93       	push	r16
     454:	1f 93       	push	r17
     456:	cf 93       	push	r28
     458:	df 93       	push	r29
     45a:	6c 01       	movw	r12, r24
     45c:	66 2e       	mov	r6, r22
     45e:	77 2e       	mov	r7, r23
     460:	ea 01       	movw	r28, r20
     462:	49 01       	movw	r8, r18
		pointer to block of ram to use as stack on success
		OR NULL on fail
*********************************************************/
static void *AllocStack(size_t len)
{
	return malloc(len);
     464:	ca 01       	movw	r24, r20
     466:	05 d4       	rcall	.+2058   	; 0xc72 <malloc>
     468:	5c 01       	movw	r10, r24

	stack = AllocStack(stacksize);
	//set all stack locations with an
	//arbitrary value to make DEBUG
	// much easier.
	for(i=0;i<stacksize;++i) stack[i] = 0xcd;
     46a:	1c 16       	cp	r1, r28
     46c:	1d 06       	cpc	r1, r29
     46e:	4c f4       	brge	.+18     	; 0x482 <CreateTask+0x44>
     470:	fc 01       	movw	r30, r24
     472:	9c 01       	movw	r18, r24
     474:	2c 0f       	add	r18, r28
     476:	3d 1f       	adc	r19, r29
     478:	8d ec       	ldi	r24, 0xCD	; 205
     47a:	81 93       	st	Z+, r24
     47c:	e2 17       	cp	r30, r18
     47e:	f3 07       	cpc	r31, r19
	//enter critical section, Disable IRQ
	sr = Disable();
     480:	e1 f7       	brne	.-8      	; 0x47a <CreateTask+0x3c>
     482:	23 de       	rcall	.-954    	; 0xca <Disable>
	if(t)
     484:	c1 14       	cp	r12, r1
     486:	d1 04       	cpc	r13, r1
     488:	09 f4       	brne	.+2      	; 0x48c <CreateTask+0x4e>
     48a:	8c c0       	rjmp	.+280    	; 0x5a4 <CreateTask+0x166>
	{
		//initialize TCB member variables
		t->TcbSwaps = 0;
     48c:	d6 01       	movw	r26, r12
     48e:	1f 96       	adiw	r26, 0x0f	; 15
     490:	1c 92       	st	X, r1
     492:	1e 92       	st	-X, r1
     494:	1e 97       	sbiw	r26, 0x0e	; 14
		t->stacksize = stacksize;
     496:	15 96       	adiw	r26, 0x05	; 5
     498:	dc 93       	st	X, r29
     49a:	ce 93       	st	-X, r28
     49c:	14 97       	sbiw	r26, 0x04	; 4
		t->priority = priority;
     49e:	17 96       	adiw	r26, 0x07	; 7
     4a0:	9c 92       	st	X, r9
     4a2:	8e 92       	st	-X, r8
     4a4:	16 97       	sbiw	r26, 0x06	; 6
		t->TimeStamp = 0;
     4a6:	1d 96       	adiw	r26, 0x0d	; 13
     4a8:	1c 92       	st	X, r1
     4aa:	1e 92       	st	-X, r1
     4ac:	1c 97       	sbiw	r26, 0x0c	; 12
		t->name = name;
     4ae:	53 96       	adiw	r26, 0x13	; 19
     4b0:	1c 93       	st	X, r17
     4b2:	0e 93       	st	-X, r16
     4b4:	52 97       	sbiw	r26, 0x12	; 18
		t->stacktop = stack;
     4b6:	13 96       	adiw	r26, 0x03	; 3
     4b8:	bc 92       	st	X, r11
     4ba:	ae 92       	st	-X, r10
     4bc:	12 97       	sbiw	r26, 0x02	; 2
		t->next = (TCB *)0;
     4be:	55 96       	adiw	r26, 0x15	; 21
     4c0:	1c 92       	st	X, r1
     4c2:	1e 92       	st	-X, r1
     4c4:	54 97       	sbiw	r26, 0x14	; 20
		t->list = (TCB *)0;
     4c6:	57 96       	adiw	r26, 0x17	; 23
     4c8:	1c 92       	st	X, r1
     4ca:	1e 92       	st	-X, r1
     4cc:	56 97       	sbiw	r26, 0x16	; 22
		stk = stack + stacksize-1;
     4ce:	fe 01       	movw	r30, r28
     4d0:	31 97       	sbiw	r30, 0x01	; 1
     4d2:	ea 0d       	add	r30, r10
     4d4:	fb 1d       	adc	r31, r11
		//Initialize the stack
		*stk-- = (char)LO( (unsigned)task);/*	return address	*/
     4d6:	60 82       	st	Z, r6
		*stk-- = (char)HI( (unsigned)task);
     4d8:	df 01       	movw	r26, r30
     4da:	11 97       	sbiw	r26, 0x01	; 1
     4dc:	7c 92       	st	X, r7
		*stk-- = 31;		/*	r31 = 0	*/
     4de:	11 97       	sbiw	r26, 0x01	; 1
     4e0:	9f e1       	ldi	r25, 0x1F	; 31
     4e2:	9c 93       	st	X, r25
		*stk-- = 0x80;	/*	SREG Interrupts enabled	*/
     4e4:	11 97       	sbiw	r26, 0x01	; 1
     4e6:	90 e8       	ldi	r25, 0x80	; 128
     4e8:	9c 93       	st	X, r25
		*stk-- = 30;		/*	r30 = 0	*/
     4ea:	11 97       	sbiw	r26, 0x01	; 1
     4ec:	9e e1       	ldi	r25, 0x1E	; 30
     4ee:	9c 93       	st	X, r25
		*stk-- = 29;		/*	r29 = 0	*/
     4f0:	11 97       	sbiw	r26, 0x01	; 1
     4f2:	9d e1       	ldi	r25, 0x1D	; 29
     4f4:	9c 93       	st	X, r25
		*stk-- = 28;		/*	r28 = 0	*/
     4f6:	11 97       	sbiw	r26, 0x01	; 1
     4f8:	9c e1       	ldi	r25, 0x1C	; 28
     4fa:	9c 93       	st	X, r25
		*stk-- = 27;		/*	r27 = 0	*/
     4fc:	11 97       	sbiw	r26, 0x01	; 1
     4fe:	9b e1       	ldi	r25, 0x1B	; 27
     500:	9c 93       	st	X, r25
		*stk-- = 26;		/*	r26 = 0	*/
     502:	11 97       	sbiw	r26, 0x01	; 1
     504:	9a e1       	ldi	r25, 0x1A	; 26
     506:	9c 93       	st	X, r25
		*stk-- = (char)HI( (unsigned)arg);		/*	r25 = 0	*/
     508:	11 97       	sbiw	r26, 0x01	; 1
     50a:	fc 92       	st	X, r15
		*stk-- = (char)LO( (unsigned)arg);		/*	r24 = 0	*/
     50c:	11 97       	sbiw	r26, 0x01	; 1
     50e:	ec 92       	st	X, r14
		*stk-- = 23;		/*	r23 = 0	*/
     510:	11 97       	sbiw	r26, 0x01	; 1
     512:	97 e1       	ldi	r25, 0x17	; 23
     514:	9c 93       	st	X, r25
		*stk-- = 22;		/*	r22 = 0	*/
     516:	11 97       	sbiw	r26, 0x01	; 1
     518:	96 e1       	ldi	r25, 0x16	; 22
     51a:	9c 93       	st	X, r25
		*stk-- = 21;		/*	r21 = 0	*/
     51c:	11 97       	sbiw	r26, 0x01	; 1
     51e:	95 e1       	ldi	r25, 0x15	; 21
     520:	9c 93       	st	X, r25
		*stk-- = 20;		/*	r20 = 0	*/
     522:	11 97       	sbiw	r26, 0x01	; 1
     524:	94 e1       	ldi	r25, 0x14	; 20
     526:	9c 93       	st	X, r25
		*stk-- = 19;		/*	r19 	*/
     528:	11 97       	sbiw	r26, 0x01	; 1
     52a:	93 e1       	ldi	r25, 0x13	; 19
     52c:	9c 93       	st	X, r25
		*stk-- = 18;		/*	r18 	*/
     52e:	11 97       	sbiw	r26, 0x01	; 1
     530:	92 e1       	ldi	r25, 0x12	; 18
     532:	9c 93       	st	X, r25
		*stk-- = 17;		/*	r17 	*/
     534:	11 97       	sbiw	r26, 0x01	; 1
     536:	91 e1       	ldi	r25, 0x11	; 17
     538:	9c 93       	st	X, r25
		*stk-- = 16;		/*	r16 	*/
     53a:	11 97       	sbiw	r26, 0x01	; 1
     53c:	90 e1       	ldi	r25, 0x10	; 16
     53e:	9c 93       	st	X, r25
		*stk-- = 15;		/*	r15 	*/
     540:	11 97       	sbiw	r26, 0x01	; 1
     542:	9f e0       	ldi	r25, 0x0F	; 15
     544:	9c 93       	st	X, r25
		*stk-- = 14;		/*	r14 	*/
     546:	11 97       	sbiw	r26, 0x01	; 1
     548:	9e e0       	ldi	r25, 0x0E	; 14
     54a:	9c 93       	st	X, r25
		*stk-- = 13;		/*	r13 	*/
     54c:	11 97       	sbiw	r26, 0x01	; 1
     54e:	9d e0       	ldi	r25, 0x0D	; 13
     550:	9c 93       	st	X, r25
		*stk-- = 12;		/*	r12 	*/
     552:	11 97       	sbiw	r26, 0x01	; 1
     554:	9c e0       	ldi	r25, 0x0C	; 12
     556:	9c 93       	st	X, r25
		*stk-- = 11;		/*	r11 	*/
     558:	11 97       	sbiw	r26, 0x01	; 1
     55a:	9b e0       	ldi	r25, 0x0B	; 11
     55c:	9c 93       	st	X, r25
		*stk-- = 10;		/*	r10 	*/
     55e:	11 97       	sbiw	r26, 0x01	; 1
     560:	9a e0       	ldi	r25, 0x0A	; 10
     562:	9c 93       	st	X, r25
		*stk-- = 9;			/*	r9 		*/
     564:	11 97       	sbiw	r26, 0x01	; 1
     566:	99 e0       	ldi	r25, 0x09	; 9
     568:	9c 93       	st	X, r25
		*stk-- = 8;			/*	r8 		*/
     56a:	11 97       	sbiw	r26, 0x01	; 1
     56c:	98 e0       	ldi	r25, 0x08	; 8
     56e:	9c 93       	st	X, r25
		*stk-- = 7;			/*	r7 		*/
     570:	11 97       	sbiw	r26, 0x01	; 1
     572:	97 e0       	ldi	r25, 0x07	; 7
     574:	9c 93       	st	X, r25
		*stk-- = 6;			/*	r6 		*/
     576:	11 97       	sbiw	r26, 0x01	; 1
     578:	96 e0       	ldi	r25, 0x06	; 6
     57a:	9c 93       	st	X, r25
		*stk-- = 5;			/*	r5 		*/
     57c:	11 97       	sbiw	r26, 0x01	; 1
     57e:	95 e0       	ldi	r25, 0x05	; 5
     580:	9c 93       	st	X, r25
		*stk-- = 4;			/*	r4 		*/
     582:	11 97       	sbiw	r26, 0x01	; 1
     584:	94 e0       	ldi	r25, 0x04	; 4
     586:	9c 93       	st	X, r25
		*stk-- = 3;			/*	r3 		*/
     588:	11 97       	sbiw	r26, 0x01	; 1
     58a:	93 e0       	ldi	r25, 0x03	; 3
     58c:	9c 93       	st	X, r25
		*stk-- = 2;			/*	r2 		*/
     58e:	11 97       	sbiw	r26, 0x01	; 1
     590:	92 e0       	ldi	r25, 0x02	; 2
     592:	9c 93       	st	X, r25
		*stk-- = 0;			/*	r1 must be ZERO 	*/
     594:	11 97       	sbiw	r26, 0x01	; 1
     596:	1c 92       	st	X, r1
		*stk-- = 0;			/*	r0 		*/
     598:	11 97       	sbiw	r26, 0x01	; 1
     59a:	1c 92       	st	X, r1
     59c:	b3 97       	sbiw	r30, 0x23	; 35
		t->stack = stk;
     59e:	d6 01       	movw	r26, r12
     5a0:	ed 93       	st	X+, r30
	}
	//exit critical section, enable IRQ
	Enable(sr);
     5a2:	fc 93       	st	X, r31
     5a4:	96 dd       	rcall	.-1236   	; 0xd2 <Enable>
}
     5a6:	df 91       	pop	r29
     5a8:	cf 91       	pop	r28
     5aa:	1f 91       	pop	r17
     5ac:	0f 91       	pop	r16
     5ae:	ff 90       	pop	r15
     5b0:	ef 90       	pop	r14
     5b2:	df 90       	pop	r13
     5b4:	cf 90       	pop	r12
     5b6:	bf 90       	pop	r11
     5b8:	af 90       	pop	r10
     5ba:	9f 90       	pop	r9
     5bc:	8f 90       	pop	r8
     5be:	7f 90       	pop	r7
     5c0:	6f 90       	pop	r6
     5c2:	08 95       	ret

000005c4 <NewDACQueue>:
		size...size of the queue to create
	return value
		returns a pointer to a DACQUEUE object
 *********************************************/
 DACQUEUE *NewDACQueue(int size)
 {
     5c4:	cf 93       	push	r28
     5c6:	df 93       	push	r29
     5c8:	ec 01       	movw	r28, r24
	char *s;
	DACQUEUE *rV = malloc(sizeof(DACQUEUE) + sizeof(int) * size + size);
     5ca:	07 96       	adiw	r24, 0x07	; 7
     5cc:	88 0f       	add	r24, r24
     5ce:	99 1f       	adc	r25, r25
     5d0:	8c 0f       	add	r24, r28
     5d2:	9d 1f       	adc	r25, r29
     5d4:	4e d3       	rcall	.+1692   	; 0xc72 <malloc>
     5d6:	fc 01       	movw	r30, r24
	s = (char *)rV;
	rV->m_Head = 0;
     5d8:	11 82       	std	Z+1, r1	; 0x01
     5da:	10 82       	st	Z, r1
	rV->m_Tail = 0;
     5dc:	13 82       	std	Z+3, r1	; 0x03
     5de:	12 82       	std	Z+2, r1	; 0x02
	rV->m_Size = size;
     5e0:	d7 83       	std	Z+7, r29	; 0x07
     5e2:	c6 83       	std	Z+6, r28	; 0x06
	rV->m_nItems = 0;
     5e4:	15 82       	std	Z+5, r1	; 0x05
     5e6:	14 82       	std	Z+4, r1	; 0x04
	rV->m_pDacChan = &s[sizeof(DACQUEUE)];
     5e8:	0e 96       	adiw	r24, 0x0e	; 14
     5ea:	93 87       	std	Z+11, r25	; 0x0b
     5ec:	82 87       	std	Z+10, r24	; 0x0a
	rV->m_pDacVal = (int *)&s[sizeof(DACQUEUE) + size];
     5ee:	2e 96       	adiw	r28, 0x0e	; 14
     5f0:	ce 0f       	add	r28, r30
     5f2:	df 1f       	adc	r29, r31
     5f4:	d1 87       	std	Z+9, r29	; 0x09
     5f6:	c0 87       	std	Z+8, r28	; 0x08
	return rV;
 }
     5f8:	cf 01       	movw	r24, r30
     5fa:	df 91       	pop	r29
     5fc:	cf 91       	pop	r28
     5fe:	08 95       	ret

00000600 <AddDacVal>:
		val......New Dac Value
		chan.....Channel number for new dac value
 *************************************************/

 void AddDacVal(DACQUEUE *q,int val, char chan,char GateFlag)
 {
     600:	fc 01       	movw	r30, r24
	q->m_pDacVal[q->m_Head] = val;
     602:	a0 81       	ld	r26, Z
     604:	b1 81       	ldd	r27, Z+1	; 0x01
     606:	aa 0f       	add	r26, r26
     608:	bb 1f       	adc	r27, r27
     60a:	80 85       	ldd	r24, Z+8	; 0x08
     60c:	91 85       	ldd	r25, Z+9	; 0x09
     60e:	a8 0f       	add	r26, r24
     610:	b9 1f       	adc	r27, r25
     612:	6d 93       	st	X+, r22
     614:	7c 93       	st	X, r23
	q->m_GateFlags[q->m_Head] = GateFlag;
     616:	a4 85       	ldd	r26, Z+12	; 0x0c
     618:	b5 85       	ldd	r27, Z+13	; 0x0d
     61a:	80 81       	ld	r24, Z
     61c:	91 81       	ldd	r25, Z+1	; 0x01
     61e:	a8 0f       	add	r26, r24
     620:	b9 1f       	adc	r27, r25
     622:	2c 93       	st	X, r18
	q->m_pDacChan[q->m_Head++] = chan;
     624:	22 85       	ldd	r18, Z+10	; 0x0a
     626:	33 85       	ldd	r19, Z+11	; 0x0b
     628:	80 81       	ld	r24, Z
     62a:	91 81       	ldd	r25, Z+1	; 0x01
     62c:	bc 01       	movw	r22, r24
     62e:	6f 5f       	subi	r22, 0xFF	; 255
     630:	7f 4f       	sbci	r23, 0xFF	; 255
     632:	71 83       	std	Z+1, r23	; 0x01
     634:	60 83       	st	Z, r22
     636:	d9 01       	movw	r26, r18
     638:	a8 0f       	add	r26, r24
     63a:	b9 1f       	adc	r27, r25
     63c:	4c 93       	st	X, r20
	if(q->m_Size == q->m_Head)
     63e:	26 81       	ldd	r18, Z+6	; 0x06
     640:	37 81       	ldd	r19, Z+7	; 0x07
     642:	80 81       	ld	r24, Z
     644:	91 81       	ldd	r25, Z+1	; 0x01
     646:	28 17       	cp	r18, r24
     648:	39 07       	cpc	r19, r25
     64a:	11 f4       	brne	.+4      	; 0x650 <AddDacVal+0x50>
		q->m_Head = 0;
     64c:	11 82       	std	Z+1, r1	; 0x01
     64e:	10 82       	st	Z, r1
 	q->m_nItems++;
     650:	84 81       	ldd	r24, Z+4	; 0x04
     652:	95 81       	ldd	r25, Z+5	; 0x05
     654:	01 96       	adiw	r24, 0x01	; 1
     656:	95 83       	std	Z+5, r25	; 0x05
     658:	84 83       	std	Z+4, r24	; 0x04
     65a:	08 95       	ret

0000065c <GetDacVal>:
 *************************************************/
 int GetDacVal(DACQUEUE *q)
 {
	int rV;

	rV = q->m_pDacVal[q->m_Tail];
     65c:	dc 01       	movw	r26, r24
     65e:	12 96       	adiw	r26, 0x02	; 2
     660:	ed 91       	ld	r30, X+
     662:	fc 91       	ld	r31, X
     664:	13 97       	sbiw	r26, 0x03	; 3
     666:	ee 0f       	add	r30, r30
     668:	ff 1f       	adc	r31, r31
     66a:	18 96       	adiw	r26, 0x08	; 8
     66c:	8d 91       	ld	r24, X+
     66e:	9c 91       	ld	r25, X
     670:	19 97       	sbiw	r26, 0x09	; 9
     672:	e8 0f       	add	r30, r24
     674:	f9 1f       	adc	r31, r25
	return rV;
 }
     676:	80 81       	ld	r24, Z
     678:	91 81       	ldd	r25, Z+1	; 0x01
     67a:	08 95       	ret

0000067c <GetGateFlag>:
		returns the gate flag
 **************************************************/
 char GetGateFlag(DACQUEUE *q)
 {
	char rv;
	rv = q->m_GateFlags[q->m_Tail];
     67c:	dc 01       	movw	r26, r24
     67e:	1c 96       	adiw	r26, 0x0c	; 12
     680:	ed 91       	ld	r30, X+
     682:	fc 91       	ld	r31, X
     684:	1d 97       	sbiw	r26, 0x0d	; 13
     686:	12 96       	adiw	r26, 0x02	; 2
     688:	8d 91       	ld	r24, X+
     68a:	9c 91       	ld	r25, X
     68c:	13 97       	sbiw	r26, 0x03	; 3
     68e:	e8 0f       	add	r30, r24
     690:	f9 1f       	adc	r31, r25
	return rv;
 }
     692:	80 81       	ld	r24, Z
     694:	08 95       	ret

00000696 <GetDacChan>:
		q.......q to get channel number from
	return value:
		returns channel number
 *************************************************/
 char GetDacChan(DACQUEUE *q)
 {
     696:	fc 01       	movw	r30, r24
	char rV;

	rV = q->m_pDacChan[q->m_Tail++];
     698:	42 85       	ldd	r20, Z+10	; 0x0a
     69a:	53 85       	ldd	r21, Z+11	; 0x0b
     69c:	82 81       	ldd	r24, Z+2	; 0x02
     69e:	93 81       	ldd	r25, Z+3	; 0x03
     6a0:	9c 01       	movw	r18, r24
     6a2:	2f 5f       	subi	r18, 0xFF	; 255
     6a4:	3f 4f       	sbci	r19, 0xFF	; 255
     6a6:	33 83       	std	Z+3, r19	; 0x03
     6a8:	22 83       	std	Z+2, r18	; 0x02
     6aa:	da 01       	movw	r26, r20
     6ac:	a8 0f       	add	r26, r24
     6ae:	b9 1f       	adc	r27, r25
     6b0:	8c 91       	ld	r24, X
	if(q->m_Size == q->m_Tail)
     6b2:	46 81       	ldd	r20, Z+6	; 0x06
     6b4:	57 81       	ldd	r21, Z+7	; 0x07
     6b6:	24 17       	cp	r18, r20
     6b8:	35 07       	cpc	r19, r21
     6ba:	11 f4       	brne	.+4      	; 0x6c0 <GetDacChan+0x2a>
		q->m_Tail = 0;	//wrap tail pointer
     6bc:	13 82       	std	Z+3, r1	; 0x03
     6be:	12 82       	std	Z+2, r1	; 0x02
	q->m_nItems--;
     6c0:	24 81       	ldd	r18, Z+4	; 0x04
     6c2:	35 81       	ldd	r19, Z+5	; 0x05
     6c4:	21 50       	subi	r18, 0x01	; 1
     6c6:	31 09       	sbc	r19, r1
     6c8:	35 83       	std	Z+5, r19	; 0x05
     6ca:	24 83       	std	Z+4, r18	; 0x04
	return rV;
 }
     6cc:	08 95       	ret

000006ce <DoSwap>:
		This function does a context swap
*******************************************/
void DoSwap(void) __attribute__ ( ( naked ) );
void DoSwap(void)
{
	SAVE_CONTEXT();		//save the context of the current task
     6ce:	ff 93       	push	r31
     6d0:	ff b7       	in	r31, 0x3f	; 63
     6d2:	f8 94       	cli
     6d4:	ff 93       	push	r31
     6d6:	ef 93       	push	r30
     6d8:	df 93       	push	r29
     6da:	cf 93       	push	r28
     6dc:	bf 93       	push	r27
     6de:	af 93       	push	r26
     6e0:	9f 93       	push	r25
     6e2:	8f 93       	push	r24
     6e4:	7f 93       	push	r23
     6e6:	6f 93       	push	r22
     6e8:	5f 93       	push	r21
     6ea:	4f 93       	push	r20
     6ec:	3f 93       	push	r19
     6ee:	2f 93       	push	r18
     6f0:	1f 93       	push	r17
     6f2:	0f 93       	push	r16
     6f4:	ff 92       	push	r15
     6f6:	ef 92       	push	r14
     6f8:	df 92       	push	r13
     6fa:	cf 92       	push	r12
     6fc:	bf 92       	push	r11
     6fe:	af 92       	push	r10
     700:	9f 92       	push	r9
     702:	8f 92       	push	r8
     704:	7f 92       	push	r7
     706:	6f 92       	push	r6
     708:	5f 92       	push	r5
     70a:	4f 92       	push	r4
     70c:	3f 92       	push	r3
     70e:	2f 92       	push	r2
     710:	1f 92       	push	r1
     712:	11 24       	eor	r1, r1
     714:	0f 92       	push	r0
     716:	a0 91 1a 02 	lds	r26, 0x021A	; 0x80021a <CurrentTask>
     71a:	b0 91 1b 02 	lds	r27, 0x021B	; 0x80021b <CurrentTask+0x1>
     71e:	0d b6       	in	r0, 0x3d	; 61
     720:	0d 92       	st	X+, r0
     722:	0e b6       	in	r0, 0x3e	; 62
     724:	0d 92       	st	X+, r0
	CurrentTask = NextTask;	//set current task to next task
     726:	80 91 16 02 	lds	r24, 0x0216	; 0x800216 <NextTask>
     72a:	90 91 17 02 	lds	r25, 0x0217	; 0x800217 <NextTask+0x1>
     72e:	90 93 1b 02 	sts	0x021B, r25	; 0x80021b <CurrentTask+0x1>
     732:	80 93 1a 02 	sts	0x021A, r24	; 0x80021a <CurrentTask>
	RESTORE_CONTEXT();		//restore context of new task
     736:	a0 91 16 02 	lds	r26, 0x0216	; 0x800216 <NextTask>
     73a:	b0 91 17 02 	lds	r27, 0x0217	; 0x800217 <NextTask+0x1>
     73e:	cd 91       	ld	r28, X+
     740:	cd bf       	out	0x3d, r28	; 61
     742:	dd 91       	ld	r29, X+
     744:	de bf       	out	0x3e, r29	; 62
     746:	0f 90       	pop	r0
     748:	1f 90       	pop	r1
     74a:	2f 90       	pop	r2
     74c:	3f 90       	pop	r3
     74e:	4f 90       	pop	r4
     750:	5f 90       	pop	r5
     752:	6f 90       	pop	r6
     754:	7f 90       	pop	r7
     756:	8f 90       	pop	r8
     758:	9f 90       	pop	r9
     75a:	af 90       	pop	r10
     75c:	bf 90       	pop	r11
     75e:	cf 90       	pop	r12
     760:	df 90       	pop	r13
     762:	ef 90       	pop	r14
     764:	ff 90       	pop	r15
     766:	0f 91       	pop	r16
     768:	1f 91       	pop	r17
     76a:	2f 91       	pop	r18
     76c:	3f 91       	pop	r19
     76e:	4f 91       	pop	r20
     770:	5f 91       	pop	r21
     772:	6f 91       	pop	r22
     774:	7f 91       	pop	r23
     776:	8f 91       	pop	r24
     778:	9f 91       	pop	r25
     77a:	af 91       	pop	r26
     77c:	bf 91       	pop	r27
     77e:	cf 91       	pop	r28
     780:	df 91       	pop	r29
     782:	ef 91       	pop	r30
     784:	ff 91       	pop	r31
     786:	f7 fd       	sbrc	r31, 7
     788:	03 c0       	rjmp	.+6      	; 0x790 <irqen>
     78a:	ff bf       	out	0x3f, r31	; 63
     78c:	ff 91       	pop	r31
     78e:	08 95       	ret

00000790 <irqen>:
     790:	ff 77       	andi	r31, 0x7F	; 127
     792:	ff bf       	out	0x3f, r31	; 63
     794:	ff 91       	pop	r31
     796:	18 95       	reti

00000798 <ExitInterrupt>:
************************************************************************/

void ExitInterrupt(void)
{
	//decrement Interrupt level
	--InterruptCount;
     798:	80 91 1e 02 	lds	r24, 0x021E	; 0x80021e <InterruptCount>
     79c:	90 91 1f 02 	lds	r25, 0x021F	; 0x80021f <InterruptCount+0x1>
     7a0:	01 97       	sbiw	r24, 0x01	; 1
     7a2:	90 93 1f 02 	sts	0x021F, r25	; 0x80021f <InterruptCount+0x1>
     7a6:	80 93 1e 02 	sts	0x021E, r24	; 0x80021e <InterruptCount>
	//don't swap if nested or
	//if multitasking is blocked
	if(!InterruptCount && !Blocking)	
     7aa:	80 91 1e 02 	lds	r24, 0x021E	; 0x80021e <InterruptCount>
     7ae:	90 91 1f 02 	lds	r25, 0x021F	; 0x80021f <InterruptCount+0x1>
     7b2:	89 2b       	or	r24, r25
     7b4:	09 f0       	breq	.+2      	; 0x7b8 <ExitInterrupt+0x20>
     7b6:	67 c0       	rjmp	.+206    	; 0x886 <irqen+0x8>
     7b8:	80 91 1c 02 	lds	r24, 0x021C	; 0x80021c <Blocking>
     7bc:	90 91 1d 02 	lds	r25, 0x021D	; 0x80021d <Blocking+0x1>
     7c0:	89 2b       	or	r24, r25
     7c2:	09 f0       	breq	.+2      	; 0x7c6 <ExitInterrupt+0x2e>
     7c4:	60 c0       	rjmp	.+192    	; 0x886 <irqen+0x8>
	{
		//Update the time stamp in the current task
		CurrentTask->TimeStamp = TStamp;
     7c6:	40 91 1a 02 	lds	r20, 0x021A	; 0x80021a <CurrentTask>
     7ca:	50 91 1b 02 	lds	r21, 0x021B	; 0x80021b <CurrentTask+0x1>
     7ce:	80 91 b6 02 	lds	r24, 0x02B6	; 0x8002b6 <TStamp>
     7d2:	90 91 b7 02 	lds	r25, 0x02B7	; 0x8002b7 <TStamp+0x1>
     7d6:	fa 01       	movw	r30, r20
     7d8:	95 87       	std	Z+13, r25	; 0x0d
     7da:	84 87       	std	Z+12, r24	; 0x0c
		//get the next task and put the current
		//task back into the priority queue
		Replace(&ActiveTasks,(void **)&NextTask,CurrentTask);
     7dc:	66 e1       	ldi	r22, 0x16	; 22
     7de:	72 e0       	ldi	r23, 0x02	; 2
     7e0:	8c e0       	ldi	r24, 0x0C	; 12
     7e2:	92 e0       	ldi	r25, 0x02	; 2
     7e4:	0e 94 aa 0d 	call	0x1b54	; 0x1b54 <Replace>
		//check to see if we got the same task back
		if(NextTask != CurrentTask)
     7e8:	e0 91 16 02 	lds	r30, 0x0216	; 0x800216 <NextTask>
     7ec:	f0 91 17 02 	lds	r31, 0x0217	; 0x800217 <NextTask+0x1>
     7f0:	80 91 1a 02 	lds	r24, 0x021A	; 0x80021a <CurrentTask>
     7f4:	90 91 1b 02 	lds	r25, 0x021B	; 0x80021b <CurrentTask+0x1>
     7f8:	e8 17       	cp	r30, r24
     7fa:	f9 07       	cpc	r31, r25
     7fc:	09 f4       	brne	.+2      	; 0x800 <ExitInterrupt+0x68>
     7fe:	43 c0       	rjmp	.+134    	; 0x886 <irqen+0x8>
		{
			//increment the swap counter
			NextTask->TcbSwaps++;
     800:	86 85       	ldd	r24, Z+14	; 0x0e
     802:	97 85       	ldd	r25, Z+15	; 0x0f
     804:	01 96       	adiw	r24, 0x01	; 1
     806:	97 87       	std	Z+15, r25	; 0x0f
     808:	86 87       	std	Z+14, r24	; 0x0e
			// the size of the stack
			// ignore return address on
			// stack to 
			// Exit Interrupt
			//-----------------------------
			asm volatile (
     80a:	9e b7       	in	r25, 0x3e	; 62
     80c:	8d b7       	in	r24, 0x3d	; 61
     80e:	02 96       	adiw	r24, 0x02	; 2
     810:	a0 91 1a 02 	lds	r26, 0x021A	; 0x80021a <CurrentTask>
     814:	b0 91 1b 02 	lds	r27, 0x021B	; 0x80021b <CurrentTask+0x1>
     818:	8d 93       	st	X+, r24
     81a:	9d 93       	st	X+, r25
			"lds	r26, CurrentTask		\n\t"	//get address of current task
			"lds	r27, CurrentTask + 1	\n\t"
			"st		x+, r24					\n\t"	//save stack pointer in TCB
			"st		x+, r25					\n\t"
			);
			CurrentTask = NextTask;	//update current task
     81c:	f0 93 1b 02 	sts	0x021B, r31	; 0x80021b <CurrentTask+0x1>
     820:	e0 93 1a 02 	sts	0x021A, r30	; 0x80021a <CurrentTask>
			RESTORE_CONTEXT();		//restore next task context
     824:	a0 91 16 02 	lds	r26, 0x0216	; 0x800216 <NextTask>
     828:	b0 91 17 02 	lds	r27, 0x0217	; 0x800217 <NextTask+0x1>
     82c:	cd 91       	ld	r28, X+
     82e:	cd bf       	out	0x3d, r28	; 61
     830:	dd 91       	ld	r29, X+
     832:	de bf       	out	0x3e, r29	; 62
     834:	0f 90       	pop	r0
     836:	1f 90       	pop	r1
     838:	2f 90       	pop	r2
     83a:	3f 90       	pop	r3
     83c:	4f 90       	pop	r4
     83e:	5f 90       	pop	r5
     840:	6f 90       	pop	r6
     842:	7f 90       	pop	r7
     844:	8f 90       	pop	r8
     846:	9f 90       	pop	r9
     848:	af 90       	pop	r10
     84a:	bf 90       	pop	r11
     84c:	cf 90       	pop	r12
     84e:	df 90       	pop	r13
     850:	ef 90       	pop	r14
     852:	ff 90       	pop	r15
     854:	0f 91       	pop	r16
     856:	1f 91       	pop	r17
     858:	2f 91       	pop	r18
     85a:	3f 91       	pop	r19
     85c:	4f 91       	pop	r20
     85e:	5f 91       	pop	r21
     860:	6f 91       	pop	r22
     862:	7f 91       	pop	r23
     864:	8f 91       	pop	r24
     866:	9f 91       	pop	r25
     868:	af 91       	pop	r26
     86a:	bf 91       	pop	r27
     86c:	cf 91       	pop	r28
     86e:	df 91       	pop	r29
     870:	ef 91       	pop	r30
     872:	ff 91       	pop	r31
     874:	f7 fd       	sbrc	r31, 7
     876:	03 c0       	rjmp	.+6      	; 0x87e <irqen>
     878:	ff bf       	out	0x3f, r31	; 63
     87a:	ff 91       	pop	r31
     87c:	08 95       	ret

0000087e <irqen>:
     87e:	ff 77       	andi	r31, 0x7F	; 127
     880:	ff bf       	out	0x3f, r31	; 63
     882:	ff 91       	pop	r31
     884:	18 95       	reti
     886:	08 95       	ret

00000888 <EnterInterrupt>:
}

void EnterInterrupt(void)
{
	//Increment interrupt level
	++InterruptCount;
     888:	80 91 1e 02 	lds	r24, 0x021E	; 0x80021e <InterruptCount>
     88c:	90 91 1f 02 	lds	r25, 0x021F	; 0x80021f <InterruptCount+0x1>
     890:	01 96       	adiw	r24, 0x01	; 1
     892:	90 93 1f 02 	sts	0x021F, r25	; 0x80021f <InterruptCount+0x1>
     896:	80 93 1e 02 	sts	0x021E, r24	; 0x80021e <InterruptCount>
     89a:	08 95       	ret

0000089c <SetGate>:

void SetGate(int bit)
{
	char sr;

	Gates |= BIT(bit);
     89c:	90 91 21 02 	lds	r25, 0x0221	; 0x800221 <Gates>
     8a0:	21 e0       	ldi	r18, 0x01	; 1
     8a2:	30 e0       	ldi	r19, 0x00	; 0
     8a4:	02 c0       	rjmp	.+4      	; 0x8aa <SetGate+0xe>
     8a6:	22 0f       	add	r18, r18
     8a8:	33 1f       	adc	r19, r19
     8aa:	8a 95       	dec	r24
     8ac:	e2 f7       	brpl	.-8      	; 0x8a6 <SetGate+0xa>
     8ae:	29 2b       	or	r18, r25
     8b0:	20 93 21 02 	sts	0x0221, r18	; 0x800221 <Gates>
	WriteSpi((char *)&Gates,1);
     8b4:	61 e0       	ldi	r22, 0x01	; 1
     8b6:	70 e0       	ldi	r23, 0x00	; 0
     8b8:	81 e2       	ldi	r24, 0x21	; 33
     8ba:	92 e0       	ldi	r25, 0x02	; 2
     8bc:	0e 94 52 12 	call	0x24a4	; 0x24a4 <WriteSpi>
	sr = Disable();
     8c0:	04 dc       	rcall	.-2040   	; 0xca <Disable>
	PORTD &= ~BIT(PORTD_LDGATES);
     8c2:	5d 98       	cbi	0x0b, 5	; 11
	PORTD |= BIT(PORTD_LDGATES);
	Enable(sr);
     8c4:	5d 9a       	sbi	0x0b, 5	; 11
     8c6:	05 cc       	rjmp	.-2038   	; 0xd2 <Enable>
     8c8:	08 95       	ret

000008ca <ClearGate>:

void ClearGate(int bit)
{
	char sr;

	Gates &= ~BIT(bit);
     8ca:	90 91 21 02 	lds	r25, 0x0221	; 0x800221 <Gates>
     8ce:	21 e0       	ldi	r18, 0x01	; 1
     8d0:	30 e0       	ldi	r19, 0x00	; 0
     8d2:	02 c0       	rjmp	.+4      	; 0x8d8 <ClearGate+0xe>
     8d4:	22 0f       	add	r18, r18
     8d6:	33 1f       	adc	r19, r19
     8d8:	8a 95       	dec	r24
     8da:	e2 f7       	brpl	.-8      	; 0x8d4 <ClearGate+0xa>
     8dc:	20 95       	com	r18
     8de:	29 23       	and	r18, r25
     8e0:	20 93 21 02 	sts	0x0221, r18	; 0x800221 <Gates>
	WriteSpi((char *)&Gates,1);
     8e4:	61 e0       	ldi	r22, 0x01	; 1
     8e6:	70 e0       	ldi	r23, 0x00	; 0
     8e8:	81 e2       	ldi	r24, 0x21	; 33
     8ea:	92 e0       	ldi	r25, 0x02	; 2
     8ec:	0e 94 52 12 	call	0x24a4	; 0x24a4 <WriteSpi>
	sr = Disable();
     8f0:	ec db       	rcall	.-2088   	; 0xca <Disable>
	PORTD &= ~BIT(PORTD_LDGATES);
     8f2:	5d 98       	cbi	0x0b, 5	; 11
	PORTD |= BIT(PORTD_LDGATES);
	Enable(sr);
     8f4:	5d 9a       	sbi	0x0b, 5	; 11
     8f6:	ed cb       	rjmp	.-2086   	; 0xd2 <Enable>
     8f8:	08 95       	ret

000008fa <IdleTask>:
	DDRD = BIT(PORTD_CLRIRQ) | BIT(PORTD_LDGATES) | BIT(PORTD_TRIGS);
	//set output port lines high
	PORTD = BIT(PORTD_CLRIRQ) | BIT(PORTD_LDGATES) | BIT(PORTD_TRIGS);
	//Enable INT0 interrupt
	//Default is sense at low level
	EIMSK |= BIT(INT0);
     8fa:	80 91 8c 02 	lds	r24, 0x028C	; 0x80028c <IdleCount>
     8fe:	90 91 8d 02 	lds	r25, 0x028D	; 0x80028d <IdleCount+0x1>
     902:	01 96       	adiw	r24, 0x01	; 1
     904:	90 93 8d 02 	sts	0x028D, r25	; 0x80028d <IdleCount+0x1>
     908:	80 93 8c 02 	sts	0x028C, r24	; 0x80028c <IdleCount>
     90c:	f6 cf       	rjmp	.-20     	; 0x8fa <IdleTask>

0000090e <TimerTask>:
     90e:	60 e0       	ldi	r22, 0x00	; 0
     910:	70 e0       	ldi	r23, 0x00	; 0
     912:	80 91 8a 02 	lds	r24, 0x028A	; 0x80028a <pTimerEvent>
     916:	90 91 8b 02 	lds	r25, 0x028B	; 0x80028b <pTimerEvent+0x1>
     91a:	25 d7       	rcall	.+3658   	; 0x1766 <PendSemaphore>
     91c:	80 e0       	ldi	r24, 0x00	; 0
     91e:	90 e0       	ldi	r25, 0x00	; 0
     920:	fd d3       	rcall	.+2042   	; 0x111c <NewMSG>
     922:	fc 01       	movw	r30, r24
     924:	11 82       	std	Z+1, r1	; 0x01
     926:	10 82       	st	Z, r1
     928:	bc 01       	movw	r22, r24
     92a:	80 91 3b 02 	lds	r24, 0x023B	; 0x80023b <pDacMessages>
     92e:	90 91 3c 02 	lds	r25, 0x023C	; 0x80023c <pDacMessages+0x1>
     932:	77 d3       	rcall	.+1774   	; 0x1022 <MqPut>
     934:	ec cf       	rjmp	.-40     	; 0x90e <TimerTask>

00000936 <DacTask>:
     936:	cf 93       	push	r28
     938:	df 93       	push	r29
     93a:	00 d0       	rcall	.+0      	; 0x93c <DacTask+0x6>
     93c:	cd b7       	in	r28, 0x3d	; 61
     93e:	de b7       	in	r29, 0x3e	; 62
     940:	88 e0       	ldi	r24, 0x08	; 8
     942:	90 e0       	ldi	r25, 0x00	; 0
     944:	3f de       	rcall	.-898    	; 0x5c4 <NewDACQueue>
     946:	7c 01       	movw	r14, r24
     948:	80 e1       	ldi	r24, 0x10	; 16
     94a:	90 e0       	ldi	r25, 0x00	; 0
     94c:	92 d1       	rcall	.+804    	; 0xc72 <malloc>
     94e:	4c 01       	movw	r8, r24
     950:	a1 2c       	mov	r10, r1
     952:	b1 2c       	mov	r11, r1
     954:	80 91 3b 02 	lds	r24, 0x023B	; 0x80023b <pDacMessages>
     958:	90 91 3c 02 	lds	r25, 0x023C	; 0x80023c <pDacMessages+0x1>
     95c:	aa d3       	rcall	.+1876   	; 0x10b2 <MqGet>
     95e:	8c 01       	movw	r16, r24
     960:	fc 01       	movw	r30, r24
     962:	80 81       	ld	r24, Z
     964:	91 81       	ldd	r25, Z+1	; 0x01
     966:	00 97       	sbiw	r24, 0x00	; 0
     968:	51 f0       	breq	.+20     	; 0x97e <DacTask+0x48>
     96a:	01 97       	sbiw	r24, 0x01	; 1
     96c:	09 f0       	breq	.+2      	; 0x970 <DacTask+0x3a>
     96e:	4b c0       	rjmp	.+150    	; 0xa06 <DacTask+0xd0>
     970:	66 85       	ldd	r22, Z+14	; 0x0e
     972:	77 85       	ldd	r23, Z+15	; 0x0f
     974:	25 85       	ldd	r18, Z+13	; 0x0d
     976:	44 85       	ldd	r20, Z+12	; 0x0c
     978:	c7 01       	movw	r24, r14
     97a:	42 de       	rcall	.-892    	; 0x600 <AddDacVal>
     97c:	44 c0       	rjmp	.+136    	; 0xa06 <DacTask+0xd0>
     97e:	f7 01       	movw	r30, r14
     980:	84 81       	ldd	r24, Z+4	; 0x04
     982:	95 81       	ldd	r25, Z+5	; 0x05
     984:	89 2b       	or	r24, r25
     986:	41 f1       	breq	.+80     	; 0x9d8 <DacTask+0xa2>
     988:	c7 01       	movw	r24, r14
     98a:	68 de       	rcall	.-816    	; 0x65c <GetDacVal>
     98c:	9a 83       	std	Y+2, r25	; 0x02
     98e:	89 83       	std	Y+1, r24	; 0x01
     990:	c7 01       	movw	r24, r14
     992:	74 de       	rcall	.-792    	; 0x67c <GetGateFlag>
     994:	d8 2e       	mov	r13, r24
     996:	c7 01       	movw	r24, r14
     998:	7e de       	rcall	.-772    	; 0x696 <GetDacChan>
     99a:	c8 2e       	mov	r12, r24
     99c:	62 e0       	ldi	r22, 0x02	; 2
     99e:	70 e0       	ldi	r23, 0x00	; 0
     9a0:	ce 01       	movw	r24, r28
     9a2:	01 96       	adiw	r24, 0x01	; 1
     9a4:	0e 94 52 12 	call	0x24a4	; 0x24a4 <WriteSpi>
     9a8:	85 b1       	in	r24, 0x05	; 5
     9aa:	88 7f       	andi	r24, 0xF8	; 248
     9ac:	85 b9       	out	0x05, r24	; 5
     9ae:	95 b1       	in	r25, 0x05	; 5
     9b0:	8c 2d       	mov	r24, r12
     9b2:	87 70       	andi	r24, 0x07	; 7
     9b4:	89 2b       	or	r24, r25
     9b6:	85 b9       	out	0x05, r24	; 5
     9b8:	2b 98       	cbi	0x05, 3	; 5
     9ba:	2b 9a       	sbi	0x05, 3	; 5
     9bc:	dd 20       	and	r13, r13
     9be:	2c f4       	brge	.+10     	; 0x9ca <DacTask+0x94>
     9c0:	8d 2d       	mov	r24, r13
     9c2:	87 70       	andi	r24, 0x07	; 7
     9c4:	90 e0       	ldi	r25, 0x00	; 0
     9c6:	6a df       	rcall	.-300    	; 0x89c <SetGate>
     9c8:	1e c0       	rjmp	.+60     	; 0xa06 <DacTask+0xd0>
     9ca:	d6 fe       	sbrs	r13, 6
     9cc:	1c c0       	rjmp	.+56     	; 0xa06 <DacTask+0xd0>
     9ce:	8d 2d       	mov	r24, r13
     9d0:	87 70       	andi	r24, 0x07	; 7
     9d2:	90 e0       	ldi	r25, 0x00	; 0
     9d4:	7a df       	rcall	.-268    	; 0x8ca <ClearGate>
     9d6:	17 c0       	rjmp	.+46     	; 0xa06 <DacTask+0xd0>
     9d8:	c5 01       	movw	r24, r10
     9da:	88 0f       	add	r24, r24
     9dc:	99 1f       	adc	r25, r25
     9de:	62 e0       	ldi	r22, 0x02	; 2
     9e0:	70 e0       	ldi	r23, 0x00	; 0
     9e2:	88 0d       	add	r24, r8
     9e4:	99 1d       	adc	r25, r9
     9e6:	0e 94 52 12 	call	0x24a4	; 0x24a4 <WriteSpi>
     9ea:	85 b1       	in	r24, 0x05	; 5
     9ec:	88 7f       	andi	r24, 0xF8	; 248
     9ee:	85 b9       	out	0x05, r24	; 5
     9f0:	25 b1       	in	r18, 0x05	; 5
     9f2:	c5 01       	movw	r24, r10
     9f4:	87 70       	andi	r24, 0x07	; 7
     9f6:	99 27       	eor	r25, r25
     9f8:	82 2b       	or	r24, r18
     9fa:	85 b9       	out	0x05, r24	; 5
     9fc:	2b 98       	cbi	0x05, 3	; 5
     9fe:	2b 9a       	sbi	0x05, 3	; 5
     a00:	c5 01       	movw	r24, r10
     a02:	01 96       	adiw	r24, 0x01	; 1
     a04:	5c 01       	movw	r10, r24
     a06:	c8 01       	movw	r24, r16
     a08:	a6 d3       	rcall	.+1868   	; 0x1156 <DeleteMSG>
     a0a:	a4 cf       	rjmp	.-184    	; 0x954 <DacTask+0x1e>

00000a0c <MidiTask>:
     a0c:	8c 01       	movw	r16, r24
     a0e:	b1 d3       	rcall	.+1890   	; 0x1172 <newMidiParseDescriptor>
     a10:	ec 01       	movw	r28, r24
     a12:	b3 d3       	rcall	.+1894   	; 0x117a <InitMidiParseDesc>
     a14:	c8 01       	movw	r24, r16
     a16:	87 dc       	rcall	.-1778   	; 0x326 <CioGetC>
     a18:	68 2f       	mov	r22, r24
     a1a:	ce 01       	movw	r24, r28
     a1c:	6b d5       	rcall	.+2774   	; 0x14f4 <ParseMidi>
     a1e:	fa cf       	rjmp	.-12     	; 0xa14 <MidiTask+0x8>

00000a20 <__vector_1>:
     a20:	ff 93       	push	r31
     a22:	ff b7       	in	r31, 0x3f	; 63
     a24:	f0 68       	ori	r31, 0x80	; 128
     a26:	ff 93       	push	r31
     a28:	ef 93       	push	r30
     a2a:	df 93       	push	r29
     a2c:	cf 93       	push	r28
     a2e:	bf 93       	push	r27
     a30:	af 93       	push	r26
     a32:	9f 93       	push	r25
     a34:	8f 93       	push	r24
     a36:	7f 93       	push	r23
     a38:	6f 93       	push	r22
     a3a:	5f 93       	push	r21
     a3c:	4f 93       	push	r20
     a3e:	3f 93       	push	r19
     a40:	2f 93       	push	r18
     a42:	1f 93       	push	r17
     a44:	0f 93       	push	r16
     a46:	ff 92       	push	r15
     a48:	ef 92       	push	r14
     a4a:	df 92       	push	r13
     a4c:	cf 92       	push	r12
     a4e:	bf 92       	push	r11
     a50:	af 92       	push	r10
     a52:	9f 92       	push	r9
     a54:	8f 92       	push	r8
     a56:	7f 92       	push	r7
     a58:	6f 92       	push	r6
     a5a:	5f 92       	push	r5
     a5c:	4f 92       	push	r4
     a5e:	3f 92       	push	r3
     a60:	2f 92       	push	r2
     a62:	1f 92       	push	r1
     a64:	11 24       	eor	r1, r1
     a66:	0f 92       	push	r0
     a68:	0f df       	rcall	.-482    	; 0x888 <EnterInterrupt>
     a6a:	5c 98       	cbi	0x0b, 4	; 11
     a6c:	5c 9a       	sbi	0x0b, 4	; 11
     a6e:	60 e0       	ldi	r22, 0x00	; 0
     a70:	70 e0       	ldi	r23, 0x00	; 0
     a72:	80 91 8a 02 	lds	r24, 0x028A	; 0x80028a <pTimerEvent>
     a76:	90 91 8b 02 	lds	r25, 0x028B	; 0x80028b <pTimerEvent+0x1>
     a7a:	e1 d6       	rcall	.+3522   	; 0x183e <PostSemaphore>
     a7c:	8d de       	rcall	.-742    	; 0x798 <ExitInterrupt>
     a7e:	0f 90       	pop	r0
     a80:	1f 90       	pop	r1
     a82:	2f 90       	pop	r2
     a84:	3f 90       	pop	r3
     a86:	4f 90       	pop	r4
     a88:	5f 90       	pop	r5
     a8a:	6f 90       	pop	r6
     a8c:	7f 90       	pop	r7
     a8e:	8f 90       	pop	r8
     a90:	9f 90       	pop	r9
     a92:	af 90       	pop	r10
     a94:	bf 90       	pop	r11
     a96:	cf 90       	pop	r12
     a98:	df 90       	pop	r13
     a9a:	ef 90       	pop	r14
     a9c:	ff 90       	pop	r15
     a9e:	0f 91       	pop	r16
     aa0:	1f 91       	pop	r17
     aa2:	2f 91       	pop	r18
     aa4:	3f 91       	pop	r19
     aa6:	4f 91       	pop	r20
     aa8:	5f 91       	pop	r21
     aaa:	6f 91       	pop	r22
     aac:	7f 91       	pop	r23
     aae:	8f 91       	pop	r24
     ab0:	9f 91       	pop	r25
     ab2:	af 91       	pop	r26
     ab4:	bf 91       	pop	r27
     ab6:	cf 91       	pop	r28
     ab8:	df 91       	pop	r29
     aba:	ef 91       	pop	r30
     abc:	ff 91       	pop	r31
     abe:	ff 77       	andi	r31, 0x7F	; 127
     ac0:	ff bf       	out	0x3f, r31	; 63
     ac2:	ff 91       	pop	r31
     ac4:	18 95       	reti

00000ac6 <__vector_18>:
     ac6:	ff 93       	push	r31
     ac8:	ff b7       	in	r31, 0x3f	; 63
     aca:	f0 68       	ori	r31, 0x80	; 128
     acc:	ff 93       	push	r31
     ace:	ef 93       	push	r30
     ad0:	df 93       	push	r29
     ad2:	cf 93       	push	r28
     ad4:	bf 93       	push	r27
     ad6:	af 93       	push	r26
     ad8:	9f 93       	push	r25
     ada:	8f 93       	push	r24
     adc:	7f 93       	push	r23
     ade:	6f 93       	push	r22
     ae0:	5f 93       	push	r21
     ae2:	4f 93       	push	r20
     ae4:	3f 93       	push	r19
     ae6:	2f 93       	push	r18
     ae8:	1f 93       	push	r17
     aea:	0f 93       	push	r16
     aec:	ff 92       	push	r15
     aee:	ef 92       	push	r14
     af0:	df 92       	push	r13
     af2:	cf 92       	push	r12
     af4:	bf 92       	push	r11
     af6:	af 92       	push	r10
     af8:	9f 92       	push	r9
     afa:	8f 92       	push	r8
     afc:	7f 92       	push	r7
     afe:	6f 92       	push	r6
     b00:	5f 92       	push	r5
     b02:	4f 92       	push	r4
     b04:	3f 92       	push	r3
     b06:	2f 92       	push	r2
     b08:	1f 92       	push	r1
     b0a:	11 24       	eor	r1, r1
     b0c:	0f 92       	push	r0
     b0e:	bc de       	rcall	.-648    	; 0x888 <EnterInterrupt>
     b10:	80 e8       	ldi	r24, 0x80	; 128
     b12:	86 bd       	out	0x26, r24	; 38
     b14:	0e 94 bf 12 	call	0x257e	; 0x257e <TimerTicker>
     b18:	3f de       	rcall	.-898    	; 0x798 <ExitInterrupt>
     b1a:	0f 90       	pop	r0
     b1c:	1f 90       	pop	r1
     b1e:	2f 90       	pop	r2
     b20:	3f 90       	pop	r3
     b22:	4f 90       	pop	r4
     b24:	5f 90       	pop	r5
     b26:	6f 90       	pop	r6
     b28:	7f 90       	pop	r7
     b2a:	8f 90       	pop	r8
     b2c:	9f 90       	pop	r9
     b2e:	af 90       	pop	r10
     b30:	bf 90       	pop	r11
     b32:	cf 90       	pop	r12
     b34:	df 90       	pop	r13
     b36:	ef 90       	pop	r14
     b38:	ff 90       	pop	r15
     b3a:	0f 91       	pop	r16
     b3c:	1f 91       	pop	r17
     b3e:	2f 91       	pop	r18
     b40:	3f 91       	pop	r19
     b42:	4f 91       	pop	r20
     b44:	5f 91       	pop	r21
     b46:	6f 91       	pop	r22
     b48:	7f 91       	pop	r23
     b4a:	8f 91       	pop	r24
     b4c:	9f 91       	pop	r25
     b4e:	af 91       	pop	r26
     b50:	bf 91       	pop	r27
     b52:	cf 91       	pop	r28
     b54:	df 91       	pop	r29
     b56:	ef 91       	pop	r30
     b58:	ff 91       	pop	r31
     b5a:	ff 77       	andi	r31, 0x7F	; 127
     b5c:	ff bf       	out	0x3f, r31	; 63
     b5e:	ff 91       	pop	r31
     b60:	18 95       	reti

00000b62 <main>:
}

int main(void)
{
     b62:	cf 93       	push	r28
     b64:	df 93       	push	r29
     b66:	00 d0       	rcall	.+0      	; 0xb68 <main+0x6>
     b68:	cd b7       	in	r28, 0x3d	; 61
     b6a:	de b7       	in	r29, 0x3e	; 62
    int baud;

	// Setup Timer
	TCCR0B = BIT(CS00) | BIT(CS01);
     b6c:	83 e0       	ldi	r24, 0x03	; 3
     b6e:	85 bd       	out	0x25, r24	; 37
	TIMSK0 = BIT(TOIE0);
     b70:	81 e0       	ldi	r24, 0x01	; 1
     b72:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
	//Initialize operating system
	OSInit();
     b76:	ef d5       	rcall	.+3038   	; 0x1756 <OSInit>
	OS_InitMalloc(0,0);	//initialize heap
     b78:	60 e0       	ldi	r22, 0x00	; 0
     b7a:	70 e0       	ldi	r23, 0x00	; 0
     b7c:	80 e0       	ldi	r24, 0x00	; 0
     b7e:	90 e0       	ldi	r25, 0x00	; 0
	CioInit();	//Initialize Device I/O
     b80:	f8 d1       	rcall	.+1008   	; 0xf72 <OS_InitMalloc>
	RInit();	//Initialize Serial Drivers
     b82:	ab da       	rcall	.-2730   	; 0xda <CioInit>
     b84:	0e 94 34 0e 	call	0x1c68	; 0x1c68 <RInit>
	InitMessageQueueManager();	//Init Message queues
     b88:	e8 d2       	rcall	.+1488   	; 0x115a <InitMessageQueueManager>
	pMidi1 = CioOpen("COM0",CIO_RDONLY | CIO_WRONLY);
     b8a:	6f eb       	ldi	r22, 0xBF	; 191
     b8c:	7f ef       	ldi	r23, 0xFF	; 255
     b8e:	84 e4       	ldi	r24, 0x44	; 68
     b90:	91 e0       	ldi	r25, 0x01	; 1
     b92:	fe da       	rcall	.-2564   	; 0x190 <CioOpen>
     b94:	90 93 3e 02 	sts	0x023E, r25	; 0x80023e <pMidi1+0x1>
     b98:	80 93 3d 02 	sts	0x023D, r24	; 0x80023d <pMidi1>
	baud = 31250;
     b9c:	22 e1       	ldi	r18, 0x12	; 18
     b9e:	3a e7       	ldi	r19, 0x7A	; 122
     ba0:	3a 83       	std	Y+2, r19	; 0x02
     ba2:	29 83       	std	Y+1, r18	; 0x01
	CioXIO(pMidi1,RS232_XIO_SETBAUD,&baud);
     ba4:	ae 01       	movw	r20, r28
     ba6:	4f 5f       	subi	r20, 0xFF	; 255
     ba8:	5f 4f       	sbci	r21, 0xFF	; 255
     baa:	60 e0       	ldi	r22, 0x00	; 0
     bac:	70 e0       	ldi	r23, 0x00	; 0
	pDacMessages = MqInit(8,"DacMsg");
     bae:	d4 db       	rcall	.-2136   	; 0x358 <CioXIO>
     bb0:	69 e4       	ldi	r22, 0x49	; 73
     bb2:	71 e0       	ldi	r23, 0x01	; 1
     bb4:	88 e0       	ldi	r24, 0x08	; 8
     bb6:	90 e0       	ldi	r25, 0x00	; 0
     bb8:	fd d1       	rcall	.+1018   	; 0xfb4 <MqInit>
     bba:	90 93 3c 02 	sts	0x023C, r25	; 0x80023c <pDacMessages+0x1>
     bbe:	80 93 3b 02 	sts	0x023B, r24	; 0x80023b <pDacMessages>
	pTimerEvent = NewSemaphore(0,SEMAPHORE_MODE_BLOCKING,"Timer");
     bc2:	40 e5       	ldi	r20, 0x50	; 80
     bc4:	51 e0       	ldi	r21, 0x01	; 1
     bc6:	60 e0       	ldi	r22, 0x00	; 0
     bc8:	70 e0       	ldi	r23, 0x00	; 0
     bca:	80 e0       	ldi	r24, 0x00	; 0
     bcc:	90 e0       	ldi	r25, 0x00	; 0
     bce:	07 dc       	rcall	.-2034   	; 0x3de <NewSemaphore>
     bd0:	90 93 8b 02 	sts	0x028B, r25	; 0x80028b <pTimerEvent+0x1>
     bd4:	80 93 8a 02 	sts	0x028A, r24	; 0x80028a <pTimerEvent>
	InitSpi();
     bd8:	0e 94 30 12 	call	0x2460	; 0x2460 <InitSpi>
	/******************************
		Create Tasks
	******************************/
	CreateTask(&TIdleTask,IdleTask,256,1,"Idle",0);
     bdc:	e1 2c       	mov	r14, r1
     bde:	f1 2c       	mov	r15, r1
     be0:	06 e5       	ldi	r16, 0x56	; 86
     be2:	11 e0       	ldi	r17, 0x01	; 1
     be4:	21 e0       	ldi	r18, 0x01	; 1
     be6:	30 e0       	ldi	r19, 0x00	; 0
     be8:	40 e0       	ldi	r20, 0x00	; 0
     bea:	51 e0       	ldi	r21, 0x01	; 1
     bec:	6d e7       	ldi	r22, 0x7D	; 125
     bee:	74 e0       	ldi	r23, 0x04	; 4
     bf0:	8a e5       	ldi	r24, 0x5A	; 90
     bf2:	92 e0       	ldi	r25, 0x02	; 2
	Insert(&ActiveTasks,&TIdleTask);
     bf4:	24 dc       	rcall	.-1976   	; 0x43e <CreateTask>
     bf6:	6a e5       	ldi	r22, 0x5A	; 90
     bf8:	72 e0       	ldi	r23, 0x02	; 2
     bfa:	8c e0       	ldi	r24, 0x0C	; 12
     bfc:	92 e0       	ldi	r25, 0x02	; 2
     bfe:	ef d6       	rcall	.+3550   	; 0x19de <Insert>
	CreateTask(&TMidiTask,MidiTask,256,8,"MIDI",pMidi1);
     c00:	e0 90 3d 02 	lds	r14, 0x023D	; 0x80023d <pMidi1>
     c04:	f0 90 3e 02 	lds	r15, 0x023E	; 0x80023e <pMidi1+0x1>
     c08:	0b e5       	ldi	r16, 0x5B	; 91
     c0a:	11 e0       	ldi	r17, 0x01	; 1
     c0c:	28 e0       	ldi	r18, 0x08	; 8
     c0e:	30 e0       	ldi	r19, 0x00	; 0
     c10:	40 e0       	ldi	r20, 0x00	; 0
     c12:	51 e0       	ldi	r21, 0x01	; 1
     c14:	66 e0       	ldi	r22, 0x06	; 6
     c16:	75 e0       	ldi	r23, 0x05	; 5
     c18:	82 e7       	ldi	r24, 0x72	; 114
     c1a:	92 e0       	ldi	r25, 0x02	; 2
	Insert(&ActiveTasks,&TMidiTask);
     c1c:	10 dc       	rcall	.-2016   	; 0x43e <CreateTask>
     c1e:	62 e7       	ldi	r22, 0x72	; 114
     c20:	72 e0       	ldi	r23, 0x02	; 2
     c22:	8c e0       	ldi	r24, 0x0C	; 12
     c24:	92 e0       	ldi	r25, 0x02	; 2
     c26:	db d6       	rcall	.+3510   	; 0x19de <Insert>
	CreateTask(&TDacTask,DacTask,256,10,"DAC",0);
     c28:	e1 2c       	mov	r14, r1
     c2a:	f1 2c       	mov	r15, r1
     c2c:	00 e6       	ldi	r16, 0x60	; 96
     c2e:	11 e0       	ldi	r17, 0x01	; 1
     c30:	2a e0       	ldi	r18, 0x0A	; 10
     c32:	30 e0       	ldi	r19, 0x00	; 0
     c34:	40 e0       	ldi	r20, 0x00	; 0
     c36:	51 e0       	ldi	r21, 0x01	; 1
     c38:	6b e9       	ldi	r22, 0x9B	; 155
     c3a:	74 e0       	ldi	r23, 0x04	; 4
     c3c:	83 e2       	ldi	r24, 0x23	; 35
     c3e:	92 e0       	ldi	r25, 0x02	; 2
	Insert(&ActiveTasks,&TDacTask);
     c40:	fe db       	rcall	.-2052   	; 0x43e <CreateTask>
     c42:	63 e2       	ldi	r22, 0x23	; 35
     c44:	72 e0       	ldi	r23, 0x02	; 2
     c46:	8c e0       	ldi	r24, 0x0C	; 12
     c48:	92 e0       	ldi	r25, 0x02	; 2
	CreateTask(&TTimerTask,TimerTask,256,9,"Timer",0);
     c4a:	c9 d6       	rcall	.+3474   	; 0x19de <Insert>
     c4c:	00 e5       	ldi	r16, 0x50	; 80
     c4e:	11 e0       	ldi	r17, 0x01	; 1
     c50:	29 e0       	ldi	r18, 0x09	; 9
     c52:	30 e0       	ldi	r19, 0x00	; 0
     c54:	40 e0       	ldi	r20, 0x00	; 0
     c56:	51 e0       	ldi	r21, 0x01	; 1
     c58:	67 e8       	ldi	r22, 0x87	; 135
     c5a:	74 e0       	ldi	r23, 0x04	; 4
     c5c:	82 e4       	ldi	r24, 0x42	; 66
     c5e:	92 e0       	ldi	r25, 0x02	; 2
	Insert(&ActiveTasks,&TTimerTask);
     c60:	ee db       	rcall	.-2084   	; 0x43e <CreateTask>
     c62:	62 e4       	ldi	r22, 0x42	; 66
     c64:	72 e0       	ldi	r23, 0x02	; 2
     c66:	8c e0       	ldi	r24, 0x0C	; 12
     c68:	92 e0       	ldi	r25, 0x02	; 2
     c6a:	b9 d6       	rcall	.+3442   	; 0x19de <Insert>
	/******************************
		Start the operating system
	******************************/
	StartOS();
     c6c:	0e 94 81 12 	call	0x2502	; 0x2502 <StartOS>
     c70:	ff cf       	rjmp	.-2      	; 0xc70 <main+0x10e>

00000c72 <malloc>:
		pointer to memory block on success,
		OR NULL on fail
*******************************************/

void *malloc(size_t len)
{
     c72:	ef 92       	push	r14
     c74:	ff 92       	push	r15
     c76:	0f 93       	push	r16
     c78:	1f 93       	push	r17
     c7a:	cf 93       	push	r28
     c7c:	df 93       	push	r29
     c7e:	8c 01       	movw	r16, r24
	 * Our minimum chunk size is the size of a pointer (plus the
	 * size of the "sz" field, but we don't need to account for
	 * this), otherwise we could not possibly fit a freelist entry
	 * into the chunk later.
	 */
	PendSemaphore(&MallocBlocker,0);
     c80:	60 e0       	ldi	r22, 0x00	; 0
     c82:	70 e0       	ldi	r23, 0x00	; 0
     c84:	80 e9       	ldi	r24, 0x90	; 144
     c86:	92 e0       	ldi	r25, 0x02	; 2
     c88:	6e d5       	rcall	.+2780   	; 0x1766 <PendSemaphore>
	if (len < sizeof(struct __freelist) - sizeof(size_t))
     c8a:	02 30       	cpi	r16, 0x02	; 2
     c8c:	11 05       	cpc	r17, r1
     c8e:	10 f4       	brcc	.+4      	; 0xc94 <malloc+0x22>
		len = sizeof(struct __freelist) - sizeof(size_t);
     c90:	02 e0       	ldi	r16, 0x02	; 2
     c92:	10 e0       	ldi	r17, 0x00	; 0
	 * would match exactly.  If we found one, we are done.  While
	 * walking, note down the size of the largest chunk we found
	 * that would still fit the request -- we need it for step 2.
	 *
	 */
	for (s = 0, fp1 = __flp, fp2 = 0;
     c94:	a0 91 b0 02 	lds	r26, 0x02B0	; 0x8002b0 <__flp>
     c98:	b0 91 b1 02 	lds	r27, 0x02B1	; 0x8002b1 <__flp+0x1>
     c9c:	10 97       	sbiw	r26, 0x00	; 0
     c9e:	09 f4       	brne	.+2      	; 0xca2 <malloc+0x30>
     ca0:	83 c0       	rjmp	.+262    	; 0xda8 <malloc+0x136>
	     fp1;
	     fp2 = fp1, fp1 = fp1->nx) {
		if (fp1->sz == len) {
     ca2:	4d 91       	ld	r20, X+
     ca4:	5c 91       	ld	r21, X
     ca6:	11 97       	sbiw	r26, 0x01	; 1
     ca8:	04 17       	cp	r16, r20
     caa:	15 07       	cpc	r17, r21
     cac:	91 f0       	breq	.+36     	; 0xcd2 <malloc+0x60>
     cae:	ca 01       	movw	r24, r20
     cb0:	fd 01       	movw	r30, r26
     cb2:	20 e0       	ldi	r18, 0x00	; 0
     cb4:	30 e0       	ldi	r19, 0x00	; 0
     cb6:	1e c0       	rjmp	.+60     	; 0xcf4 <malloc+0x82>
     cb8:	88 81       	ld	r24, Y
     cba:	99 81       	ldd	r25, Y+1	; 0x01
     cbc:	08 17       	cp	r16, r24
     cbe:	19 07       	cpc	r17, r25
     cc0:	c1 f4       	brne	.+48     	; 0xcf2 <malloc+0x80>
			/*
			 * Found it.  Disconnect the chunk from the
			 * freelist, and return it.
			 */
			if (fp2)
     cc2:	30 97       	sbiw	r30, 0x00	; 0
     cc4:	29 f0       	breq	.+10     	; 0xcd0 <malloc+0x5e>
				fp2->nx = fp1->nx;
     cc6:	8a 81       	ldd	r24, Y+2	; 0x02
     cc8:	9b 81       	ldd	r25, Y+3	; 0x03
     cca:	93 83       	std	Z+3, r25	; 0x03
     ccc:	82 83       	std	Z+2, r24	; 0x02
     cce:	0a c0       	rjmp	.+20     	; 0xce4 <malloc+0x72>
	 * that would still fit the request -- we need it for step 2.
	 *
	 */
	for (s = 0, fp1 = __flp, fp2 = 0;
	     fp1;
	     fp2 = fp1, fp1 = fp1->nx) {
     cd0:	de 01       	movw	r26, r28
			 * freelist, and return it.
			 */
			if (fp2)
				fp2->nx = fp1->nx;
			else
				__flp = fp1->nx;
     cd2:	12 96       	adiw	r26, 0x02	; 2
     cd4:	8d 91       	ld	r24, X+
     cd6:	9c 91       	ld	r25, X
     cd8:	13 97       	sbiw	r26, 0x03	; 3
     cda:	90 93 b1 02 	sts	0x02B1, r25	; 0x8002b1 <__flp+0x1>
     cde:	80 93 b0 02 	sts	0x02B0, r24	; 0x8002b0 <__flp>
     ce2:	ed 01       	movw	r28, r26
			PostSemaphore(&MallocBlocker,0);
     ce4:	60 e0       	ldi	r22, 0x00	; 0
     ce6:	70 e0       	ldi	r23, 0x00	; 0
     ce8:	80 e9       	ldi	r24, 0x90	; 144
     cea:	92 e0       	ldi	r25, 0x02	; 2
     cec:	a8 d5       	rcall	.+2896   	; 0x183e <PostSemaphore>
			return &(fp1->nx);
     cee:	22 96       	adiw	r28, 0x02	; 2
     cf0:	a8 c0       	rjmp	.+336    	; 0xe42 <malloc+0x1d0>
	 * that would still fit the request -- we need it for step 2.
	 *
	 */
	for (s = 0, fp1 = __flp, fp2 = 0;
	     fp1;
	     fp2 = fp1, fp1 = fp1->nx) {
     cf2:	fe 01       	movw	r30, r28
			else
				__flp = fp1->nx;
			PostSemaphore(&MallocBlocker,0);
			return &(fp1->nx);
		}
		if (fp1->sz > len) {
     cf4:	08 17       	cp	r16, r24
     cf6:	19 07       	cpc	r17, r25
     cf8:	48 f4       	brcc	.+18     	; 0xd0c <malloc+0x9a>
			if (s == 0 || fp1->sz < s)
     cfa:	21 15       	cp	r18, r1
     cfc:	31 05       	cpc	r19, r1
     cfe:	29 f0       	breq	.+10     	; 0xd0a <malloc+0x98>
     d00:	82 17       	cp	r24, r18
     d02:	93 07       	cpc	r25, r19
     d04:	18 f4       	brcc	.+6      	; 0xd0c <malloc+0x9a>
     d06:	9c 01       	movw	r18, r24
     d08:	01 c0       	rjmp	.+2      	; 0xd0c <malloc+0x9a>
     d0a:	9c 01       	movw	r18, r24
	 * that would still fit the request -- we need it for step 2.
	 *
	 */
	for (s = 0, fp1 = __flp, fp2 = 0;
	     fp1;
	     fp2 = fp1, fp1 = fp1->nx) {
     d0c:	c2 81       	ldd	r28, Z+2	; 0x02
     d0e:	d3 81       	ldd	r29, Z+3	; 0x03
	 * would match exactly.  If we found one, we are done.  While
	 * walking, note down the size of the largest chunk we found
	 * that would still fit the request -- we need it for step 2.
	 *
	 */
	for (s = 0, fp1 = __flp, fp2 = 0;
     d10:	20 97       	sbiw	r28, 0x00	; 0
     d12:	91 f6       	brne	.-92     	; 0xcb8 <malloc+0x46>
	 * difference between the requested size and the size of the
	 * chunk found is large enough for another freelist entry; if
	 * not, just enlarge the request size to what we have found,
	 * and use the entire chunk.
	 */
	if (s) {
     d14:	21 15       	cp	r18, r1
     d16:	31 05       	cpc	r19, r1
     d18:	09 f4       	brne	.+2      	; 0xd1c <malloc+0xaa>
     d1a:	46 c0       	rjmp	.+140    	; 0xda8 <malloc+0x136>
		if (s - len < sizeof(struct __freelist))
     d1c:	c9 01       	movw	r24, r18
     d1e:	80 1b       	sub	r24, r16
     d20:	91 0b       	sbc	r25, r17
     d22:	04 97       	sbiw	r24, 0x04	; 4
     d24:	08 f4       	brcc	.+2      	; 0xd28 <malloc+0xb6>
     d26:	87 c0       	rjmp	.+270    	; 0xe36 <malloc+0x1c4>
     d28:	87 c0       	rjmp	.+270    	; 0xe38 <malloc+0x1c6>
			len = s;
		for (fp1 = __flp, fp2 = 0;
		     fp1;
		     fp2 = fp1, fp1 = fp1->nx) {
			if (fp1->sz == s) {
     d2a:	f7 01       	movw	r30, r14
     d2c:	80 81       	ld	r24, Z
     d2e:	91 81       	ldd	r25, Z+1	; 0x01
     d30:	28 17       	cp	r18, r24
     d32:	39 07       	cpc	r19, r25
     d34:	81 f5       	brne	.+96     	; 0xd96 <malloc+0x124>
				if (len == s) {
     d36:	20 17       	cp	r18, r16
     d38:	31 07       	cpc	r19, r17
     d3a:	d9 f4       	brne	.+54     	; 0xd72 <malloc+0x100>
					/*
					 * Use entire chunk; same as
					 * above.
					 */
					if (fp2)
     d3c:	10 97       	sbiw	r26, 0x00	; 0
     d3e:	39 f0       	breq	.+14     	; 0xd4e <malloc+0xdc>
						fp2->nx = fp1->nx;
     d40:	82 81       	ldd	r24, Z+2	; 0x02
     d42:	93 81       	ldd	r25, Z+3	; 0x03
     d44:	13 96       	adiw	r26, 0x03	; 3
     d46:	9c 93       	st	X, r25
     d48:	8e 93       	st	-X, r24
     d4a:	12 97       	sbiw	r26, 0x02	; 2
     d4c:	0a c0       	rjmp	.+20     	; 0xd62 <malloc+0xf0>
	if (s) {
		if (s - len < sizeof(struct __freelist))
			len = s;
		for (fp1 = __flp, fp2 = 0;
		     fp1;
		     fp2 = fp1, fp1 = fp1->nx) {
     d4e:	d7 01       	movw	r26, r14
					 * above.
					 */
					if (fp2)
						fp2->nx = fp1->nx;
					else
						__flp = fp1->nx;
     d50:	12 96       	adiw	r26, 0x02	; 2
     d52:	8d 91       	ld	r24, X+
     d54:	9c 91       	ld	r25, X
     d56:	13 97       	sbiw	r26, 0x03	; 3
     d58:	90 93 b1 02 	sts	0x02B1, r25	; 0x8002b1 <__flp+0x1>
     d5c:	80 93 b0 02 	sts	0x02B0, r24	; 0x8002b0 <__flp>
     d60:	7d 01       	movw	r14, r26
					PostSemaphore(&MallocBlocker,0);
     d62:	60 e0       	ldi	r22, 0x00	; 0
     d64:	70 e0       	ldi	r23, 0x00	; 0
     d66:	80 e9       	ldi	r24, 0x90	; 144
     d68:	92 e0       	ldi	r25, 0x02	; 2
     d6a:	69 d5       	rcall	.+2770   	; 0x183e <PostSemaphore>
					return &(fp1->nx);
     d6c:	e7 01       	movw	r28, r14
     d6e:	22 96       	adiw	r28, 0x02	; 2
     d70:	68 c0       	rjmp	.+208    	; 0xe42 <malloc+0x1d0>
				 * entry, and note down the size of
				 * the new chunk before returning it
				 * to the caller.
				 */
				cp = (char *)fp1;
				s -= len;
     d72:	20 1b       	sub	r18, r16
     d74:	31 0b       	sbc	r19, r17
				cp += s;
				fp2 = (struct __freelist *)cp;
				fp2->sz = len;
     d76:	e7 01       	movw	r28, r14
     d78:	c2 0f       	add	r28, r18
     d7a:	d3 1f       	adc	r29, r19
     d7c:	09 93       	st	Y+, r16
     d7e:	19 93       	st	Y+, r17
				fp1->sz = s - sizeof(size_t);
     d80:	22 50       	subi	r18, 0x02	; 2
     d82:	31 09       	sbc	r19, r1
     d84:	f7 01       	movw	r30, r14
     d86:	31 83       	std	Z+1, r19	; 0x01
     d88:	20 83       	st	Z, r18
				PostSemaphore(&MallocBlocker,0);
     d8a:	60 e0       	ldi	r22, 0x00	; 0
     d8c:	70 e0       	ldi	r23, 0x00	; 0
     d8e:	80 e9       	ldi	r24, 0x90	; 144
     d90:	92 e0       	ldi	r25, 0x02	; 2
     d92:	55 d5       	rcall	.+2730   	; 0x183e <PostSemaphore>
				return &(fp2->nx);
     d94:	56 c0       	rjmp	.+172    	; 0xe42 <malloc+0x1d0>
	if (s) {
		if (s - len < sizeof(struct __freelist))
			len = s;
		for (fp1 = __flp, fp2 = 0;
		     fp1;
		     fp2 = fp1, fp1 = fp1->nx) {
     d96:	d7 01       	movw	r26, r14
     d98:	12 96       	adiw	r26, 0x02	; 2
     d9a:	ed 90       	ld	r14, X+
     d9c:	fc 90       	ld	r15, X
     d9e:	13 97       	sbiw	r26, 0x03	; 3
	 * and use the entire chunk.
	 */
	if (s) {
		if (s - len < sizeof(struct __freelist))
			len = s;
		for (fp1 = __flp, fp2 = 0;
     da0:	e1 14       	cp	r14, r1
     da2:	f1 04       	cpc	r15, r1
     da4:	09 f0       	breq	.+2      	; 0xda8 <malloc+0x136>
     da6:	c1 cf       	rjmp	.-126    	; 0xd2a <malloc+0xb8>
	 * Under Unix, the "break value" was the end of the data
	 * segment as dynamically requested from the operating system.
	 * Since we don't have an operating system, just make sure
	 * that we don't collide with the stack.
	 */
	if (__brkval == 0)
     da8:	80 91 8e 02 	lds	r24, 0x028E	; 0x80028e <__brkval>
     dac:	90 91 8f 02 	lds	r25, 0x028F	; 0x80028f <__brkval+0x1>
     db0:	89 2b       	or	r24, r25
     db2:	41 f4       	brne	.+16     	; 0xdc4 <malloc+0x152>
		__brkval = __malloc_heap_start;
     db4:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__malloc_heap_start>
     db8:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
     dbc:	90 93 8f 02 	sts	0x028F, r25	; 0x80028f <__brkval+0x1>
     dc0:	80 93 8e 02 	sts	0x028E, r24	; 0x80028e <__brkval>
	cp = __malloc_heap_end;
     dc4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     dc8:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
	if (cp == 0)
     dcc:	00 97       	sbiw	r24, 0x00	; 0
     dce:	41 f4       	brne	.+16     	; 0xde0 <malloc+0x16e>
		cp = STACK_POINTER() - __malloc_margin;
     dd0:	8d b7       	in	r24, 0x3d	; 61
     dd2:	9e b7       	in	r25, 0x3e	; 62
     dd4:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <__malloc_margin>
     dd8:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <__malloc_margin+0x1>
     ddc:	82 1b       	sub	r24, r18
     dde:	93 0b       	sbc	r25, r19
	avail = cp - __brkval;
     de0:	c0 91 8e 02 	lds	r28, 0x028E	; 0x80028e <__brkval>
     de4:	d0 91 8f 02 	lds	r29, 0x028F	; 0x80028f <__brkval+0x1>
     de8:	8c 1b       	sub	r24, r28
     dea:	9d 0b       	sbc	r25, r29
	/*
	 * Both tests below are needed to catch the case len >= 0xfffe.
	 */
	if (avail >= len && avail >= len + sizeof(size_t)) {
     dec:	80 17       	cp	r24, r16
     dee:	91 07       	cpc	r25, r17
     df0:	a0 f0       	brcs	.+40     	; 0xe1a <malloc+0x1a8>
     df2:	98 01       	movw	r18, r16
     df4:	2e 5f       	subi	r18, 0xFE	; 254
     df6:	3f 4f       	sbci	r19, 0xFF	; 255
     df8:	82 17       	cp	r24, r18
     dfa:	93 07       	cpc	r25, r19
     dfc:	70 f0       	brcs	.+28     	; 0xe1a <malloc+0x1a8>
		fp1 = (struct __freelist *)__brkval;
		__brkval += len + sizeof(size_t);
     dfe:	2c 0f       	add	r18, r28
     e00:	3d 1f       	adc	r19, r29
     e02:	30 93 8f 02 	sts	0x028F, r19	; 0x80028f <__brkval+0x1>
     e06:	20 93 8e 02 	sts	0x028E, r18	; 0x80028e <__brkval>
		fp1->sz = len;
     e0a:	09 93       	st	Y+, r16
     e0c:	19 93       	st	Y+, r17
		PostSemaphore(&MallocBlocker,0);
     e0e:	60 e0       	ldi	r22, 0x00	; 0
     e10:	70 e0       	ldi	r23, 0x00	; 0
     e12:	80 e9       	ldi	r24, 0x90	; 144
     e14:	92 e0       	ldi	r25, 0x02	; 2
     e16:	13 d5       	rcall	.+2598   	; 0x183e <PostSemaphore>
		return &(fp1->nx);
	}
	/*
	 * Step 4: There's no help, just fail. :-/
	 */
	 PostSemaphore(&MallocBlocker,0);
     e18:	14 c0       	rjmp	.+40     	; 0xe42 <malloc+0x1d0>
     e1a:	60 e0       	ldi	r22, 0x00	; 0
     e1c:	70 e0       	ldi	r23, 0x00	; 0
     e1e:	80 e9       	ldi	r24, 0x90	; 144
     e20:	92 e0       	ldi	r25, 0x02	; 2
     e22:	0d d5       	rcall	.+2586   	; 0x183e <PostSemaphore>
	return 0;
     e24:	c0 e0       	ldi	r28, 0x00	; 0
     e26:	d0 e0       	ldi	r29, 0x00	; 0
     e28:	0c c0       	rjmp	.+24     	; 0xe42 <malloc+0x1d0>
			len = s;
		for (fp1 = __flp, fp2 = 0;
		     fp1;
		     fp2 = fp1, fp1 = fp1->nx) {
			if (fp1->sz == s) {
				if (len == s) {
     e2a:	20 17       	cp	r18, r16
     e2c:	31 07       	cpc	r19, r17
     e2e:	09 f4       	brne	.+2      	; 0xe32 <malloc+0x1c0>
     e30:	8f cf       	rjmp	.-226    	; 0xd50 <malloc+0xde>
	 * and use the entire chunk.
	 */
	if (s) {
		if (s - len < sizeof(struct __freelist))
			len = s;
		for (fp1 = __flp, fp2 = 0;
     e32:	7d 01       	movw	r14, r26
     e34:	9e cf       	rjmp	.-196    	; 0xd72 <malloc+0x100>
	 * chunk found is large enough for another freelist entry; if
	 * not, just enlarge the request size to what we have found,
	 * and use the entire chunk.
	 */
	if (s) {
		if (s - len < sizeof(struct __freelist))
     e36:	89 01       	movw	r16, r18
			len = s;
		for (fp1 = __flp, fp2 = 0;
		     fp1;
		     fp2 = fp1, fp1 = fp1->nx) {
			if (fp1->sz == s) {
     e38:	24 17       	cp	r18, r20
     e3a:	35 07       	cpc	r19, r21
     e3c:	09 f0       	breq	.+2      	; 0xe40 <malloc+0x1ce>
     e3e:	ac cf       	rjmp	.-168    	; 0xd98 <malloc+0x126>
     e40:	f4 cf       	rjmp	.-24     	; 0xe2a <malloc+0x1b8>
	/*
	 * Step 4: There's no help, just fail. :-/
	 */
	 PostSemaphore(&MallocBlocker,0);
	return 0;
}
     e42:	ce 01       	movw	r24, r28
     e44:	df 91       	pop	r29
     e46:	cf 91       	pop	r28
     e48:	1f 91       	pop	r17
     e4a:	0f 91       	pop	r16
     e4c:	ff 90       	pop	r15
     e4e:	ef 90       	pop	r14
     e50:	08 95       	ret

00000e52 <free>:
		free is thread safe.
	parameters:
		p.....pointer to memory block to free
**************************************************/
void free(void *p)
{
     e52:	0f 93       	push	r16
     e54:	1f 93       	push	r17
     e56:	cf 93       	push	r28
     e58:	df 93       	push	r29
	struct __freelist *fp1, *fp2, *fpnew;
	char *cp1, *cp2, *cpnew;

	/* ISO C says free(NULL) must be a no-op */
	if (p == 0)
     e5a:	00 97       	sbiw	r24, 0x00	; 0
     e5c:	09 f4       	brne	.+2      	; 0xe60 <free+0xe>
     e5e:	84 c0       	rjmp	.+264    	; 0xf68 <free+0x116>
     e60:	8c 01       	movw	r16, r24
		return;

	PendSemaphore(&MallocBlocker,0);
     e62:	60 e0       	ldi	r22, 0x00	; 0
     e64:	70 e0       	ldi	r23, 0x00	; 0
     e66:	80 e9       	ldi	r24, 0x90	; 144
     e68:	92 e0       	ldi	r25, 0x02	; 2
     e6a:	7d d4       	rcall	.+2298   	; 0x1766 <PendSemaphore>
	cpnew = p;
	cpnew -= sizeof(size_t);
     e6c:	d8 01       	movw	r26, r16
     e6e:	12 97       	sbiw	r26, 0x02	; 2
	fpnew = (struct __freelist *)cpnew;
	fpnew->nx = 0;
     e70:	13 96       	adiw	r26, 0x03	; 3
     e72:	1c 92       	st	X, r1
     e74:	1e 92       	st	-X, r1
     e76:	12 97       	sbiw	r26, 0x02	; 2

	/*
	 * Trivial case first: if there's no freelist yet, our entry
	 * will be the only one on it.
	 */
	if (__flp == 0) {
     e78:	e0 91 b0 02 	lds	r30, 0x02B0	; 0x8002b0 <__flp>
     e7c:	f0 91 b1 02 	lds	r31, 0x02B1	; 0x8002b1 <__flp+0x1>
     e80:	30 97       	sbiw	r30, 0x00	; 0
     e82:	21 f0       	breq	.+8      	; 0xe8c <free+0x3a>
	 * if possible.
	 */
	for (fp1 = __flp, fp2 = 0;
	     fp1;
	     fp2 = fp1, fp1 = fp1->nx) {
		if (fp1 < fpnew)
     e84:	ea 17       	cp	r30, r26
     e86:	fb 07       	cpc	r31, r27
     e88:	78 f0       	brcs	.+30     	; 0xea8 <free+0x56>
     e8a:	5f c0       	rjmp	.+190    	; 0xf4a <free+0xf8>
	/*
	 * Trivial case first: if there's no freelist yet, our entry
	 * will be the only one on it.
	 */
	if (__flp == 0) {
		__flp = fpnew;
     e8c:	b0 93 b1 02 	sts	0x02B1, r27	; 0x8002b1 <__flp+0x1>
     e90:	a0 93 b0 02 	sts	0x02B0, r26	; 0x8002b0 <__flp>
		PostSemaphore(&MallocBlocker,0);
     e94:	60 e0       	ldi	r22, 0x00	; 0
     e96:	70 e0       	ldi	r23, 0x00	; 0
     e98:	80 e9       	ldi	r24, 0x90	; 144
     e9a:	92 e0       	ldi	r25, 0x02	; 2
     e9c:	d0 d4       	rcall	.+2464   	; 0x183e <PostSemaphore>
		return;
     e9e:	64 c0       	rjmp	.+200    	; 0xf68 <free+0x116>
	 * if possible.
	 */
	for (fp1 = __flp, fp2 = 0;
	     fp1;
	     fp2 = fp1, fp1 = fp1->nx) {
		if (fp1 < fpnew)
     ea0:	8a 17       	cp	r24, r26
     ea2:	9b 07       	cpc	r25, r27
     ea4:	30 f4       	brcc	.+12     	; 0xeb2 <free+0x60>
	 * freelist.  Try to aggregate the chunk with adjacent chunks
	 * if possible.
	 */
	for (fp1 = __flp, fp2 = 0;
	     fp1;
	     fp2 = fp1, fp1 = fp1->nx) {
     ea6:	fc 01       	movw	r30, r24
     ea8:	82 81       	ldd	r24, Z+2	; 0x02
     eaa:	93 81       	ldd	r25, Z+3	; 0x03
	/*
	 * Now, find the position where our new entry belongs onto the
	 * freelist.  Try to aggregate the chunk with adjacent chunks
	 * if possible.
	 */
	for (fp1 = __flp, fp2 = 0;
     eac:	00 97       	sbiw	r24, 0x00	; 0
     eae:	c1 f7       	brne	.-16     	; 0xea0 <free+0x4e>
     eb0:	2e c0       	rjmp	.+92     	; 0xf0e <free+0xbc>
	     fp1;
	     fp2 = fp1, fp1 = fp1->nx) {
		if (fp1 < fpnew)
			continue;
		cp1 = (char *)fp1;
		fpnew->nx = fp1;
     eb2:	98 01       	movw	r18, r16
     eb4:	22 50       	subi	r18, 0x02	; 2
     eb6:	31 09       	sbc	r19, r1
     eb8:	e9 01       	movw	r28, r18
     eba:	9b 83       	std	Y+3, r25	; 0x03
     ebc:	8a 83       	std	Y+2, r24	; 0x02
		if ((char *)&(fpnew->nx) + fpnew->sz == cp1) {
     ebe:	28 81       	ld	r18, Y
     ec0:	39 81       	ldd	r19, Y+1	; 0x01
     ec2:	a8 01       	movw	r20, r16
     ec4:	42 0f       	add	r20, r18
     ec6:	53 1f       	adc	r21, r19
     ec8:	84 17       	cp	r24, r20
     eca:	95 07       	cpc	r25, r21
     ecc:	a1 f4       	brne	.+40     	; 0xef6 <free+0xa4>
     ece:	02 c0       	rjmp	.+4      	; 0xed4 <free+0x82>
     ed0:	e0 e0       	ldi	r30, 0x00	; 0
     ed2:	f0 e0       	ldi	r31, 0x00	; 0
			/* upper chunk adjacent, assimilate it */
			fpnew->sz += fp1->sz + sizeof(size_t);
     ed4:	ec 01       	movw	r28, r24
     ed6:	68 81       	ld	r22, Y
     ed8:	79 81       	ldd	r23, Y+1	; 0x01
     eda:	6e 5f       	subi	r22, 0xFE	; 254
     edc:	7f 4f       	sbci	r23, 0xFF	; 255
     ede:	26 0f       	add	r18, r22
     ee0:	37 1f       	adc	r19, r23
     ee2:	e8 01       	movw	r28, r16
     ee4:	3a 93       	st	-Y, r19
     ee6:	2a 93       	st	-Y, r18
     ee8:	ae 01       	movw	r20, r28
			fpnew->nx = fp1->nx;
     eea:	ec 01       	movw	r28, r24
     eec:	8a 81       	ldd	r24, Y+2	; 0x02
     eee:	9b 81       	ldd	r25, Y+3	; 0x03
     ef0:	ea 01       	movw	r28, r20
     ef2:	9b 83       	std	Y+3, r25	; 0x03
     ef4:	8a 83       	std	Y+2, r24	; 0x02
		}
		if (fp2 == 0) {
     ef6:	30 97       	sbiw	r30, 0x00	; 0
     ef8:	51 f4       	brne	.+20     	; 0xf0e <free+0xbc>
			/* new head of freelist */
			__flp = fpnew;
     efa:	b0 93 b1 02 	sts	0x02B1, r27	; 0x8002b1 <__flp+0x1>
     efe:	a0 93 b0 02 	sts	0x02B0, r26	; 0x8002b0 <__flp>
			PostSemaphore(&MallocBlocker,0);
     f02:	60 e0       	ldi	r22, 0x00	; 0
     f04:	70 e0       	ldi	r23, 0x00	; 0
     f06:	80 e9       	ldi	r24, 0x90	; 144
     f08:	92 e0       	ldi	r25, 0x02	; 2
     f0a:	99 d4       	rcall	.+2354   	; 0x183e <PostSemaphore>
			return;
     f0c:	2d c0       	rjmp	.+90     	; 0xf68 <free+0x116>
	 * Note that we get here either if we hit the "break" above,
	 * or if we fell off the end of the loop.  The latter means
	 * we've got a new topmost chunk.  Either way, try aggregating
	 * with the lower chunk if possible.
	 */
	fp2->nx = fpnew;
     f0e:	b3 83       	std	Z+3, r27	; 0x03
     f10:	a2 83       	std	Z+2, r26	; 0x02
	cp2 = (char *)&(fp2->nx);
	if (cp2 + fp2->sz == cpnew) {
     f12:	ef 01       	movw	r28, r30
     f14:	29 91       	ld	r18, Y+
     f16:	39 91       	ld	r19, Y+
     f18:	ce 01       	movw	r24, r28
     f1a:	82 0f       	add	r24, r18
     f1c:	93 1f       	adc	r25, r19
     f1e:	a8 17       	cp	r26, r24
     f20:	b9 07       	cpc	r27, r25
     f22:	69 f4       	brne	.+26     	; 0xf3e <free+0xec>
		/* lower junk adjacent, merge */
		fp2->sz += fpnew->sz + sizeof(size_t);
     f24:	e8 01       	movw	r28, r16
     f26:	5a 91       	ld	r21, -Y
     f28:	4a 91       	ld	r20, -Y
     f2a:	24 0f       	add	r18, r20
     f2c:	35 1f       	adc	r19, r21
     f2e:	2e 5f       	subi	r18, 0xFE	; 254
     f30:	3f 4f       	sbci	r19, 0xFF	; 255
     f32:	31 83       	std	Z+1, r19	; 0x01
     f34:	20 83       	st	Z, r18
		fp2->nx = fpnew->nx;
     f36:	8a 81       	ldd	r24, Y+2	; 0x02
     f38:	9b 81       	ldd	r25, Y+3	; 0x03
     f3a:	93 83       	std	Z+3, r25	; 0x03
     f3c:	82 83       	std	Z+2, r24	; 0x02
	}
	PostSemaphore(&MallocBlocker,0);
     f3e:	60 e0       	ldi	r22, 0x00	; 0
     f40:	70 e0       	ldi	r23, 0x00	; 0
     f42:	80 e9       	ldi	r24, 0x90	; 144
     f44:	92 e0       	ldi	r25, 0x02	; 2
     f46:	7b d4       	rcall	.+2294   	; 0x183e <PostSemaphore>
     f48:	0f c0       	rjmp	.+30     	; 0xf68 <free+0x116>
	     fp1;
	     fp2 = fp1, fp1 = fp1->nx) {
		if (fp1 < fpnew)
			continue;
		cp1 = (char *)fp1;
		fpnew->nx = fp1;
     f4a:	c8 01       	movw	r24, r16
     f4c:	02 97       	sbiw	r24, 0x02	; 2
     f4e:	ec 01       	movw	r28, r24
     f50:	fb 83       	std	Y+3, r31	; 0x03
     f52:	ea 83       	std	Y+2, r30	; 0x02
		if ((char *)&(fpnew->nx) + fpnew->sz == cp1) {
     f54:	28 81       	ld	r18, Y
     f56:	39 81       	ldd	r19, Y+1	; 0x01
     f58:	c8 01       	movw	r24, r16
     f5a:	82 0f       	add	r24, r18
     f5c:	93 1f       	adc	r25, r19
     f5e:	e8 17       	cp	r30, r24
     f60:	f9 07       	cpc	r31, r25
     f62:	09 f4       	brne	.+2      	; 0xf66 <free+0x114>
     f64:	b5 cf       	rjmp	.-150    	; 0xed0 <free+0x7e>
     f66:	c9 cf       	rjmp	.-110    	; 0xefa <free+0xa8>
		/* lower junk adjacent, merge */
		fp2->sz += fpnew->sz + sizeof(size_t);
		fp2->nx = fpnew->nx;
	}
	PostSemaphore(&MallocBlocker,0);
}
     f68:	df 91       	pop	r29
     f6a:	cf 91       	pop	r28
     f6c:	1f 91       	pop	r17
     f6e:	0f 91       	pop	r16
     f70:	08 95       	ret

00000f72 <OS_InitMalloc>:
// If start == 0, use default value
// If end == 0, use default value
//--------------------------------------------------------------------

void OS_InitMalloc(char *start, char *end)
{
     f72:	0f 93       	push	r16
     f74:	1f 93       	push	r17
     f76:	cf 93       	push	r28
     f78:	df 93       	push	r29
     f7a:	8c 01       	movw	r16, r24
     f7c:	eb 01       	movw	r28, r22
	CreateSemaphore(&MallocBlocker,1,SEMAPHORE_MODE_BLOCKING,"Malloc");
     f7e:	24 e6       	ldi	r18, 0x64	; 100
     f80:	31 e0       	ldi	r19, 0x01	; 1
     f82:	40 e0       	ldi	r20, 0x00	; 0
     f84:	50 e0       	ldi	r21, 0x00	; 0
     f86:	61 e0       	ldi	r22, 0x01	; 1
     f88:	70 e0       	ldi	r23, 0x00	; 0
     f8a:	80 e9       	ldi	r24, 0x90	; 144
     f8c:	92 e0       	ldi	r25, 0x02	; 2
     f8e:	f5 d9       	rcall	.-3094   	; 0x37a <CreateSemaphore>
	if(start) __malloc_heap_start = start;
     f90:	01 15       	cp	r16, r1
     f92:	11 05       	cpc	r17, r1
     f94:	21 f0       	breq	.+8      	; 0xf9e <OS_InitMalloc+0x2c>
     f96:	10 93 03 01 	sts	0x0103, r17	; 0x800103 <__malloc_heap_start+0x1>
     f9a:	00 93 02 01 	sts	0x0102, r16	; 0x800102 <__malloc_heap_start>
	if(end) __malloc_heap_end = end;
     f9e:	20 97       	sbiw	r28, 0x00	; 0
     fa0:	21 f0       	breq	.+8      	; 0xfaa <OS_InitMalloc+0x38>
     fa2:	d0 93 01 01 	sts	0x0101, r29	; 0x800101 <__data_start+0x1>
     fa6:	c0 93 00 01 	sts	0x0100, r28	; 0x800100 <__data_start>
}
     faa:	df 91       	pop	r29
     fac:	cf 91       	pop	r28
     fae:	1f 91       	pop	r17
     fb0:	0f 91       	pop	r16
     fb2:	08 95       	ret

00000fb4 <MqInit>:
	return value:
		pointer to new message queue
**********************************************/

MESSAGE_QUEUE * MqInit(int size,char *name)
{
     fb4:	ef 92       	push	r14
     fb6:	ff 92       	push	r15
     fb8:	0f 93       	push	r16
     fba:	1f 93       	push	r17
     fbc:	cf 93       	push	r28
     fbe:	df 93       	push	r29
     fc0:	8c 01       	movw	r16, r24
     fc2:	7b 01       	movw	r14, r22
	char *buffer = malloc(sizeof(MESSAGE_QUEUE) + size * sizeof(MSG*) );
     fc4:	06 96       	adiw	r24, 0x06	; 6
     fc6:	88 0f       	add	r24, r24
     fc8:	99 1f       	adc	r25, r25
     fca:	53 de       	rcall	.-858    	; 0xc72 <malloc>
     fcc:	ec 01       	movw	r28, r24
	MESSAGE_QUEUE *rv = (MESSAGE_QUEUE *)buffer;
	MSG **pM = (MSG **)(&buffer[sizeof(MESSAGE_QUEUE)]);
	PendSemaphore(MqBlocker,0);		//protect access
     fce:	60 e0       	ldi	r22, 0x00	; 0
     fd0:	70 e0       	ldi	r23, 0x00	; 0
     fd2:	80 91 ae 01 	lds	r24, 0x01AE	; 0x8001ae <MqBlocker>
     fd6:	90 91 af 01 	lds	r25, 0x01AF	; 0x8001af <MqBlocker+0x1>
     fda:	c5 d3       	rcall	.+1930   	; 0x1766 <PendSemaphore>
	rv->Head = 0;
     fdc:	1b 82       	std	Y+3, r1	; 0x03
     fde:	1a 82       	std	Y+2, r1	; 0x02
	rv->Tail = 0;
     fe0:	1d 82       	std	Y+5, r1	; 0x05
     fe2:	1c 82       	std	Y+4, r1	; 0x04
	rv->nMsg = 0;
     fe4:	1f 82       	std	Y+7, r1	; 0x07
     fe6:	1e 82       	std	Y+6, r1	; 0x06
	rv->b = pM;
     fe8:	ce 01       	movw	r24, r28
     fea:	0c 96       	adiw	r24, 0x0c	; 12
     fec:	9b 87       	std	Y+11, r25	; 0x0b
     fee:	8a 87       	std	Y+10, r24	; 0x0a
	rv->Size = size;
     ff0:	19 87       	std	Y+9, r17	; 0x09
     ff2:	08 87       	std	Y+8, r16	; 0x08
	rv->Sem = NewSemaphore(0,SEMAPHORE_MODE_BLOCKING,name);
     ff4:	a7 01       	movw	r20, r14
     ff6:	60 e0       	ldi	r22, 0x00	; 0
     ff8:	70 e0       	ldi	r23, 0x00	; 0
     ffa:	80 e0       	ldi	r24, 0x00	; 0
     ffc:	90 e0       	ldi	r25, 0x00	; 0
     ffe:	ef d9       	rcall	.-3106   	; 0x3de <NewSemaphore>
    1000:	99 83       	std	Y+1, r25	; 0x01
    1002:	88 83       	st	Y, r24
	PostSemaphore(MqBlocker,0);		//release access
    1004:	60 e0       	ldi	r22, 0x00	; 0
    1006:	70 e0       	ldi	r23, 0x00	; 0
    1008:	80 91 ae 01 	lds	r24, 0x01AE	; 0x8001ae <MqBlocker>
    100c:	90 91 af 01 	lds	r25, 0x01AF	; 0x8001af <MqBlocker+0x1>
    1010:	16 d4       	rcall	.+2092   	; 0x183e <PostSemaphore>
	return rv;
}
    1012:	ce 01       	movw	r24, r28
    1014:	df 91       	pop	r29
    1016:	cf 91       	pop	r28
    1018:	1f 91       	pop	r17
    101a:	0f 91       	pop	r16
    101c:	ff 90       	pop	r15
    101e:	ef 90       	pop	r14
    1020:	08 95       	ret

00001022 <MqPut>:
		mq.....pointer to the message queue
		m......pointer to message to send
*********************************************/

void MqPut(MESSAGE_QUEUE *mq,MSG *m)
{
    1022:	ff 92       	push	r15
    1024:	0f 93       	push	r16
    1026:	1f 93       	push	r17
    1028:	cf 93       	push	r28
    102a:	df 93       	push	r29
	char sr;

	if(mq)	//are we live?
    102c:	00 97       	sbiw	r24, 0x00	; 0
    102e:	d9 f1       	breq	.+118    	; 0x10a6 <MqPut+0x84>
    1030:	8b 01       	movw	r16, r22
    1032:	ec 01       	movw	r28, r24
	{
		if(!InterruptCount)sr = Disable();		//enter critical section
    1034:	80 91 1e 02 	lds	r24, 0x021E	; 0x80021e <InterruptCount>
    1038:	90 91 1f 02 	lds	r25, 0x021F	; 0x80021f <InterruptCount+0x1>
    103c:	89 2b       	or	r24, r25
    103e:	11 f4       	brne	.+4      	; 0x1044 <MqPut+0x22>
    1040:	44 d8       	rcall	.-3960   	; 0xca <Disable>
    1042:	f8 2e       	mov	r15, r24
		if(mq->nMsg < mq->Size)	//is there room?
    1044:	2e 81       	ldd	r18, Y+6	; 0x06
    1046:	3f 81       	ldd	r19, Y+7	; 0x07
    1048:	88 85       	ldd	r24, Y+8	; 0x08
    104a:	99 85       	ldd	r25, Y+9	; 0x09
    104c:	28 17       	cp	r18, r24
    104e:	39 07       	cpc	r19, r25
    1050:	14 f5       	brge	.+68     	; 0x1096 <MqPut+0x74>
		{
			mq->b[mq->Head++] = m;	//put message into queue
    1052:	ea 85       	ldd	r30, Y+10	; 0x0a
    1054:	fb 85       	ldd	r31, Y+11	; 0x0b
    1056:	8a 81       	ldd	r24, Y+2	; 0x02
    1058:	9b 81       	ldd	r25, Y+3	; 0x03
    105a:	9c 01       	movw	r18, r24
    105c:	2f 5f       	subi	r18, 0xFF	; 255
    105e:	3f 4f       	sbci	r19, 0xFF	; 255
    1060:	3b 83       	std	Y+3, r19	; 0x03
    1062:	2a 83       	std	Y+2, r18	; 0x02
    1064:	88 0f       	add	r24, r24
    1066:	99 1f       	adc	r25, r25
    1068:	e8 0f       	add	r30, r24
    106a:	f9 1f       	adc	r31, r25
    106c:	11 83       	std	Z+1, r17	; 0x01
    106e:	00 83       	st	Z, r16
			if(mq->Head == mq->Size)
    1070:	2a 81       	ldd	r18, Y+2	; 0x02
    1072:	3b 81       	ldd	r19, Y+3	; 0x03
    1074:	88 85       	ldd	r24, Y+8	; 0x08
    1076:	99 85       	ldd	r25, Y+9	; 0x09
    1078:	28 17       	cp	r18, r24
    107a:	39 07       	cpc	r19, r25
    107c:	11 f4       	brne	.+4      	; 0x1082 <MqPut+0x60>
				mq->Head = 0;	//wrap head pointer
    107e:	1b 82       	std	Y+3, r1	; 0x03
    1080:	1a 82       	std	Y+2, r1	; 0x02
			mq->nMsg++;			//increment number of messages
    1082:	8e 81       	ldd	r24, Y+6	; 0x06
    1084:	9f 81       	ldd	r25, Y+7	; 0x07
    1086:	01 96       	adiw	r24, 0x01	; 1
    1088:	9f 83       	std	Y+7, r25	; 0x07
    108a:	8e 83       	std	Y+6, r24	; 0x06
			PostSemaphore(mq->Sem,0);
    108c:	60 e0       	ldi	r22, 0x00	; 0
    108e:	70 e0       	ldi	r23, 0x00	; 0
    1090:	88 81       	ld	r24, Y
    1092:	99 81       	ldd	r25, Y+1	; 0x01
    1094:	d4 d3       	rcall	.+1960   	; 0x183e <PostSemaphore>
		}
		if(!InterruptCount)Enable(sr);			//exit critical section
    1096:	80 91 1e 02 	lds	r24, 0x021E	; 0x80021e <InterruptCount>
    109a:	90 91 1f 02 	lds	r25, 0x021F	; 0x80021f <InterruptCount+0x1>
    109e:	89 2b       	or	r24, r25
    10a0:	11 f4       	brne	.+4      	; 0x10a6 <MqPut+0x84>
    10a2:	8f 2d       	mov	r24, r15
    10a4:	16 d8       	rcall	.-4052   	; 0xd2 <Enable>
	}
}
    10a6:	df 91       	pop	r29
    10a8:	cf 91       	pop	r28
    10aa:	1f 91       	pop	r17
    10ac:	0f 91       	pop	r16
    10ae:	ff 90       	pop	r15
    10b0:	08 95       	ret

000010b2 <MqGet>:
		mq.....pointer to message queue
	return value:
		pointer to a message block
************************************************/
MSG *MqGet(MESSAGE_QUEUE *mq)
{
    10b2:	0f 93       	push	r16
    10b4:	1f 93       	push	r17
    10b6:	cf 93       	push	r28
    10b8:	df 93       	push	r29
	char sr;
	MSG *retval = 0;

	if(mq)
    10ba:	00 97       	sbiw	r24, 0x00	; 0
    10bc:	39 f1       	breq	.+78     	; 0x110c <MqGet+0x5a>
    10be:	ec 01       	movw	r28, r24
	{
		PendSemaphore(mq->Sem,0);		//wait for message
    10c0:	60 e0       	ldi	r22, 0x00	; 0
    10c2:	70 e0       	ldi	r23, 0x00	; 0
    10c4:	88 81       	ld	r24, Y
    10c6:	99 81       	ldd	r25, Y+1	; 0x01
    10c8:	4e d3       	rcall	.+1692   	; 0x1766 <PendSemaphore>
		sr = Disable();				//endter critical section
    10ca:	0e 94 65 00 	call	0xca	; 0xca <Disable>
		retval = mq->b[mq->Tail++];	//remove message from queue
    10ce:	ea 85       	ldd	r30, Y+10	; 0x0a
    10d0:	fb 85       	ldd	r31, Y+11	; 0x0b
    10d2:	2c 81       	ldd	r18, Y+4	; 0x04
    10d4:	3d 81       	ldd	r19, Y+5	; 0x05
    10d6:	a9 01       	movw	r20, r18
    10d8:	4f 5f       	subi	r20, 0xFF	; 255
    10da:	5f 4f       	sbci	r21, 0xFF	; 255
    10dc:	5d 83       	std	Y+5, r21	; 0x05
    10de:	4c 83       	std	Y+4, r20	; 0x04
    10e0:	22 0f       	add	r18, r18
    10e2:	33 1f       	adc	r19, r19
    10e4:	e2 0f       	add	r30, r18
    10e6:	f3 1f       	adc	r31, r19
    10e8:	00 81       	ld	r16, Z
    10ea:	11 81       	ldd	r17, Z+1	; 0x01
		if(mq->Tail == mq->Size)	//are we at the end of the line
    10ec:	28 85       	ldd	r18, Y+8	; 0x08
    10ee:	39 85       	ldd	r19, Y+9	; 0x09
    10f0:	42 17       	cp	r20, r18
    10f2:	53 07       	cpc	r21, r19
    10f4:	11 f4       	brne	.+4      	; 0x10fa <MqGet+0x48>
			mq->Tail = 0;			//wrap tail pointer
    10f6:	1d 82       	std	Y+5, r1	; 0x05
    10f8:	1c 82       	std	Y+4, r1	; 0x04
		mq->nMsg--;					//decrement number of messages in queue
    10fa:	2e 81       	ldd	r18, Y+6	; 0x06
    10fc:	3f 81       	ldd	r19, Y+7	; 0x07
    10fe:	21 50       	subi	r18, 0x01	; 1
    1100:	31 09       	sbc	r19, r1
    1102:	3f 83       	std	Y+7, r19	; 0x07
    1104:	2e 83       	std	Y+6, r18	; 0x06
		Enable(sr);
    1106:	0e 94 69 00 	call	0xd2	; 0xd2 <Enable>
    110a:	02 c0       	rjmp	.+4      	; 0x1110 <MqGet+0x5e>
		pointer to a message block
************************************************/
MSG *MqGet(MESSAGE_QUEUE *mq)
{
	char sr;
	MSG *retval = 0;
    110c:	00 e0       	ldi	r16, 0x00	; 0
    110e:	10 e0       	ldi	r17, 0x00	; 0
			mq->Tail = 0;			//wrap tail pointer
		mq->nMsg--;					//decrement number of messages in queue
		Enable(sr);
	}
	return retval;
}
    1110:	c8 01       	movw	r24, r16
    1112:	df 91       	pop	r29
    1114:	cf 91       	pop	r28
    1116:	1f 91       	pop	r17
    1118:	0f 91       	pop	r16
    111a:	08 95       	ret

0000111c <NewMSG>:
		NULL on fail
		Pointer to Message Block on success
************************************************/

MSG *NewMSG(int payloadSize)
{
    111c:	cf 93       	push	r28
    111e:	df 93       	push	r29
    1120:	ec 01       	movw	r28, r24
	MSG *retval = 0;

	if((retval = (MSG *)malloc(sizeof(MSG) + payloadSize)) != NULL)
    1122:	0d 96       	adiw	r24, 0x0d	; 13
    1124:	a6 dd       	rcall	.-1204   	; 0xc72 <malloc>
    1126:	00 97       	sbiw	r24, 0x00	; 0
    1128:	99 f0       	breq	.+38     	; 0x1150 <NewMSG+0x34>
	{
		MsgAllocCount++;
    112a:	20 91 ac 01 	lds	r18, 0x01AC	; 0x8001ac <MsgAllocCount>
    112e:	30 91 ad 01 	lds	r19, 0x01AD	; 0x8001ad <MsgAllocCount+0x1>
    1132:	2f 5f       	subi	r18, 0xFF	; 255
    1134:	3f 4f       	sbci	r19, 0xFF	; 255
    1136:	30 93 ad 01 	sts	0x01AD, r19	; 0x8001ad <MsgAllocCount+0x1>
    113a:	20 93 ac 01 	sts	0x01AC, r18	; 0x8001ac <MsgAllocCount>
		retval->MaxPayload = payloadSize;
    113e:	fc 01       	movw	r30, r24
    1140:	d5 83       	std	Z+5, r29	; 0x05
    1142:	c4 83       	std	Z+4, r28	; 0x04
		retval->ReplyHandle = NULL;
    1144:	11 86       	std	Z+9, r1	; 0x09
    1146:	10 86       	std	Z+8, r1	; 0x08
		retval->PayloadSize = 0;
    1148:	13 82       	std	Z+3, r1	; 0x03
    114a:	12 82       	std	Z+2, r1	; 0x02
		retval->next = 0;
    114c:	13 86       	std	Z+11, r1	; 0x0b
    114e:	12 86       	std	Z+10, r1	; 0x0a
		retval->PayloadSize = 0;
	}
	return retval;
}
    1150:	df 91       	pop	r29
    1152:	cf 91       	pop	r28
    1154:	08 95       	ret

00001156 <DeleteMSG>:
void DeleteMSG(MSG *m)
{
	//-------------------------------------
	//put message into message pool
	//-------------------------------------
	free(m);
    1156:	7d ce       	rjmp	.-774    	; 0xe52 <free>
    1158:	08 95       	ret

0000115a <InitMessageQueueManager>:
void InitMessageQueueManager(void)
{
	//--------------------------------------
	// Allow access to one task at a time
	//--------------------------------------
	MqBlocker = NewSemaphore(1,SEMAPHORE_MODE_BLOCKING,"MSG_BLOCKER");
    115a:	4b e6       	ldi	r20, 0x6B	; 107
    115c:	51 e0       	ldi	r21, 0x01	; 1
    115e:	60 e0       	ldi	r22, 0x00	; 0
    1160:	70 e0       	ldi	r23, 0x00	; 0
    1162:	81 e0       	ldi	r24, 0x01	; 1
    1164:	90 e0       	ldi	r25, 0x00	; 0
    1166:	3b d9       	rcall	.-3466   	; 0x3de <NewSemaphore>
    1168:	90 93 af 01 	sts	0x01AF, r25	; 0x8001af <MqBlocker+0x1>
    116c:	80 93 ae 01 	sts	0x01AE, r24	; 0x8001ae <MqBlocker>
    1170:	08 95       	ret

00001172 <newMidiParseDescriptor>:
		MqPut(pDacMessages,pMsg);
	}
}

void ActionController(unsigned char chan,unsigned char Num,unsigned char val)
{
    1172:	8c e0       	ldi	r24, 0x0C	; 12
    1174:	90 e0       	ldi	r25, 0x00	; 0
    1176:	7d cd       	rjmp	.-1286   	; 0xc72 <malloc>
    1178:	08 95       	ret

0000117a <InitMidiParseDesc>:
    117a:	cf 93       	push	r28
    117c:	df 93       	push	r29
    117e:	ec 01       	movw	r28, r24
    1180:	1a 82       	std	Y+2, r1	; 0x02
    1182:	19 82       	std	Y+1, r1	; 0x01
    1184:	1d 82       	std	Y+5, r1	; 0x05
    1186:	1f 82       	std	Y+7, r1	; 0x07
    1188:	1e 82       	std	Y+6, r1	; 0x06
    118a:	80 e8       	ldi	r24, 0x80	; 128
    118c:	90 e0       	ldi	r25, 0x00	; 0
    118e:	71 dd       	rcall	.-1310   	; 0xc72 <malloc>
    1190:	99 87       	std	Y+9, r25	; 0x09
    1192:	88 87       	std	Y+8, r24	; 0x08
    1194:	18 82       	st	Y, r1
    1196:	1b 82       	std	Y+3, r1	; 0x03
    1198:	1c 82       	std	Y+4, r1	; 0x04
    119a:	df 91       	pop	r29
    119c:	cf 91       	pop	r28
    119e:	08 95       	ret

000011a0 <ActionSysExData>:
    11a0:	fc 01       	movw	r30, r24
    11a2:	80 85       	ldd	r24, Z+8	; 0x08
    11a4:	91 85       	ldd	r25, Z+9	; 0x09
    11a6:	26 81       	ldd	r18, Z+6	; 0x06
    11a8:	37 81       	ldd	r19, Z+7	; 0x07
    11aa:	a9 01       	movw	r20, r18
    11ac:	4f 5f       	subi	r20, 0xFF	; 255
    11ae:	5f 4f       	sbci	r21, 0xFF	; 255
    11b0:	57 83       	std	Z+7, r21	; 0x07
    11b2:	46 83       	std	Z+6, r20	; 0x06
    11b4:	fc 01       	movw	r30, r24
    11b6:	e2 0f       	add	r30, r18
    11b8:	f3 1f       	adc	r31, r19
    11ba:	60 83       	st	Z, r22
    11bc:	08 95       	ret

000011be <ActionNoteOff>:
    11be:	0f 93       	push	r16
    11c0:	1f 93       	push	r17
    11c2:	cf 93       	push	r28
    11c4:	df 93       	push	r29
    11c6:	c6 2f       	mov	r28, r22
    11c8:	d4 2f       	mov	r29, r20
    11ca:	90 91 3f 02 	lds	r25, 0x023F	; 0x80023f <Settings>
    11ce:	98 13       	cpse	r25, r24
    11d0:	2d c0       	rjmp	.+90     	; 0x122c <ActionNoteOff+0x6e>
    11d2:	83 e0       	ldi	r24, 0x03	; 3
    11d4:	90 e0       	ldi	r25, 0x00	; 0
    11d6:	a2 df       	rcall	.-188    	; 0x111c <NewMSG>
    11d8:	fc 01       	movw	r30, r24
    11da:	80 e2       	ldi	r24, 0x20	; 32
    11dc:	c8 9f       	mul	r28, r24
    11de:	90 01       	movw	r18, r0
    11e0:	11 24       	eor	r1, r1
    11e2:	37 87       	std	Z+15, r19	; 0x0f
    11e4:	26 87       	std	Z+14, r18	; 0x0e
    11e6:	14 86       	std	Z+12, r1	; 0x0c
    11e8:	80 e4       	ldi	r24, 0x40	; 64
    11ea:	85 87       	std	Z+13, r24	; 0x0d
    11ec:	01 e0       	ldi	r16, 0x01	; 1
    11ee:	10 e0       	ldi	r17, 0x00	; 0
    11f0:	11 83       	std	Z+1, r17	; 0x01
    11f2:	00 83       	st	Z, r16
    11f4:	bf 01       	movw	r22, r30
    11f6:	80 91 3b 02 	lds	r24, 0x023B	; 0x80023b <pDacMessages>
    11fa:	90 91 3c 02 	lds	r25, 0x023C	; 0x80023c <pDacMessages+0x1>
    11fe:	11 df       	rcall	.-478    	; 0x1022 <MqPut>
    1200:	83 e0       	ldi	r24, 0x03	; 3
    1202:	90 e0       	ldi	r25, 0x00	; 0
    1204:	8b df       	rcall	.-234    	; 0x111c <NewMSG>
    1206:	fc 01       	movw	r30, r24
    1208:	80 e2       	ldi	r24, 0x20	; 32
    120a:	d8 9f       	mul	r29, r24
    120c:	a0 01       	movw	r20, r0
    120e:	11 24       	eor	r1, r1
    1210:	57 87       	std	Z+15, r21	; 0x0f
    1212:	46 87       	std	Z+14, r20	; 0x0e
    1214:	81 e0       	ldi	r24, 0x01	; 1
    1216:	84 87       	std	Z+12, r24	; 0x0c
    1218:	15 86       	std	Z+13, r1	; 0x0d
    121a:	11 83       	std	Z+1, r17	; 0x01
    121c:	00 83       	st	Z, r16
    121e:	bf 01       	movw	r22, r30
    1220:	80 91 3b 02 	lds	r24, 0x023B	; 0x80023b <pDacMessages>
    1224:	90 91 3c 02 	lds	r25, 0x023C	; 0x80023c <pDacMessages+0x1>
    1228:	fc de       	rcall	.-520    	; 0x1022 <MqPut>
    122a:	31 c0       	rjmp	.+98     	; 0x128e <ActionNoteOff+0xd0>
    122c:	90 91 40 02 	lds	r25, 0x0240	; 0x800240 <Settings+0x1>
    1230:	89 13       	cpse	r24, r25
    1232:	2d c0       	rjmp	.+90     	; 0x128e <ActionNoteOff+0xd0>
    1234:	83 e0       	ldi	r24, 0x03	; 3
    1236:	90 e0       	ldi	r25, 0x00	; 0
    1238:	71 df       	rcall	.-286    	; 0x111c <NewMSG>
    123a:	fc 01       	movw	r30, r24
    123c:	80 e2       	ldi	r24, 0x20	; 32
    123e:	c8 9f       	mul	r28, r24
    1240:	90 01       	movw	r18, r0
    1242:	11 24       	eor	r1, r1
    1244:	37 87       	std	Z+15, r19	; 0x0f
    1246:	26 87       	std	Z+14, r18	; 0x0e
    1248:	84 e0       	ldi	r24, 0x04	; 4
    124a:	84 87       	std	Z+12, r24	; 0x0c
    124c:	80 e4       	ldi	r24, 0x40	; 64
    124e:	85 87       	std	Z+13, r24	; 0x0d
    1250:	01 e0       	ldi	r16, 0x01	; 1
    1252:	10 e0       	ldi	r17, 0x00	; 0
    1254:	11 83       	std	Z+1, r17	; 0x01
    1256:	00 83       	st	Z, r16
    1258:	bf 01       	movw	r22, r30
    125a:	80 91 3b 02 	lds	r24, 0x023B	; 0x80023b <pDacMessages>
    125e:	90 91 3c 02 	lds	r25, 0x023C	; 0x80023c <pDacMessages+0x1>
    1262:	df de       	rcall	.-578    	; 0x1022 <MqPut>
    1264:	83 e0       	ldi	r24, 0x03	; 3
    1266:	90 e0       	ldi	r25, 0x00	; 0
    1268:	59 df       	rcall	.-334    	; 0x111c <NewMSG>
    126a:	fc 01       	movw	r30, r24
    126c:	80 e2       	ldi	r24, 0x20	; 32
    126e:	d8 9f       	mul	r29, r24
    1270:	a0 01       	movw	r20, r0
    1272:	11 24       	eor	r1, r1
    1274:	57 87       	std	Z+15, r21	; 0x0f
    1276:	46 87       	std	Z+14, r20	; 0x0e
    1278:	85 e0       	ldi	r24, 0x05	; 5
    127a:	84 87       	std	Z+12, r24	; 0x0c
    127c:	15 86       	std	Z+13, r1	; 0x0d
    127e:	11 83       	std	Z+1, r17	; 0x01
    1280:	00 83       	st	Z, r16
    1282:	bf 01       	movw	r22, r30
    1284:	80 91 3b 02 	lds	r24, 0x023B	; 0x80023b <pDacMessages>
    1288:	90 91 3c 02 	lds	r25, 0x023C	; 0x80023c <pDacMessages+0x1>
    128c:	ca de       	rcall	.-620    	; 0x1022 <MqPut>
    128e:	df 91       	pop	r29
    1290:	cf 91       	pop	r28
    1292:	1f 91       	pop	r17
    1294:	0f 91       	pop	r16
    1296:	08 95       	ret

00001298 <ActionNoteOn>:
    1298:	0f 93       	push	r16
    129a:	1f 93       	push	r17
    129c:	cf 93       	push	r28
    129e:	df 93       	push	r29
    12a0:	d6 2f       	mov	r29, r22
    12a2:	c4 2f       	mov	r28, r20
    12a4:	90 91 3f 02 	lds	r25, 0x023F	; 0x80023f <Settings>
    12a8:	98 13       	cpse	r25, r24
    12aa:	32 c0       	rjmp	.+100    	; 0x1310 <ActionNoteOn+0x78>
    12ac:	83 e0       	ldi	r24, 0x03	; 3
    12ae:	90 e0       	ldi	r25, 0x00	; 0
    12b0:	35 df       	rcall	.-406    	; 0x111c <NewMSG>
    12b2:	fc 01       	movw	r30, r24
    12b4:	80 e2       	ldi	r24, 0x20	; 32
    12b6:	d8 9f       	mul	r29, r24
    12b8:	90 01       	movw	r18, r0
    12ba:	11 24       	eor	r1, r1
    12bc:	37 87       	std	Z+15, r19	; 0x0f
    12be:	26 87       	std	Z+14, r18	; 0x0e
    12c0:	14 86       	std	Z+12, r1	; 0x0c
    12c2:	cc 23       	and	r28, r28
    12c4:	19 f0       	breq	.+6      	; 0x12cc <ActionNoteOn+0x34>
    12c6:	80 e8       	ldi	r24, 0x80	; 128
    12c8:	85 87       	std	Z+13, r24	; 0x0d
    12ca:	02 c0       	rjmp	.+4      	; 0x12d0 <ActionNoteOn+0x38>
    12cc:	80 e4       	ldi	r24, 0x40	; 64
    12ce:	85 87       	std	Z+13, r24	; 0x0d
    12d0:	01 e0       	ldi	r16, 0x01	; 1
    12d2:	10 e0       	ldi	r17, 0x00	; 0
    12d4:	11 83       	std	Z+1, r17	; 0x01
    12d6:	00 83       	st	Z, r16
    12d8:	bf 01       	movw	r22, r30
    12da:	80 91 3b 02 	lds	r24, 0x023B	; 0x80023b <pDacMessages>
    12de:	90 91 3c 02 	lds	r25, 0x023C	; 0x80023c <pDacMessages+0x1>
    12e2:	9f de       	rcall	.-706    	; 0x1022 <MqPut>
    12e4:	83 e0       	ldi	r24, 0x03	; 3
    12e6:	90 e0       	ldi	r25, 0x00	; 0
    12e8:	19 df       	rcall	.-462    	; 0x111c <NewMSG>
    12ea:	fc 01       	movw	r30, r24
    12ec:	80 e2       	ldi	r24, 0x20	; 32
    12ee:	c8 9f       	mul	r28, r24
    12f0:	a0 01       	movw	r20, r0
    12f2:	11 24       	eor	r1, r1
    12f4:	57 87       	std	Z+15, r21	; 0x0f
    12f6:	46 87       	std	Z+14, r20	; 0x0e
    12f8:	81 e0       	ldi	r24, 0x01	; 1
    12fa:	84 87       	std	Z+12, r24	; 0x0c
    12fc:	15 86       	std	Z+13, r1	; 0x0d
    12fe:	11 83       	std	Z+1, r17	; 0x01
    1300:	00 83       	st	Z, r16
    1302:	bf 01       	movw	r22, r30
    1304:	80 91 3b 02 	lds	r24, 0x023B	; 0x80023b <pDacMessages>
    1308:	90 91 3c 02 	lds	r25, 0x023C	; 0x80023c <pDacMessages+0x1>
    130c:	8a de       	rcall	.-748    	; 0x1022 <MqPut>
    130e:	36 c0       	rjmp	.+108    	; 0x137c <ActionNoteOn+0xe4>
    1310:	90 91 40 02 	lds	r25, 0x0240	; 0x800240 <Settings+0x1>
    1314:	89 13       	cpse	r24, r25
    1316:	32 c0       	rjmp	.+100    	; 0x137c <ActionNoteOn+0xe4>
    1318:	83 e0       	ldi	r24, 0x03	; 3
    131a:	90 e0       	ldi	r25, 0x00	; 0
    131c:	ff de       	rcall	.-514    	; 0x111c <NewMSG>
    131e:	fc 01       	movw	r30, r24
    1320:	80 e2       	ldi	r24, 0x20	; 32
    1322:	d8 9f       	mul	r29, r24
    1324:	90 01       	movw	r18, r0
    1326:	11 24       	eor	r1, r1
    1328:	37 87       	std	Z+15, r19	; 0x0f
    132a:	26 87       	std	Z+14, r18	; 0x0e
    132c:	84 e0       	ldi	r24, 0x04	; 4
    132e:	84 87       	std	Z+12, r24	; 0x0c
    1330:	cc 23       	and	r28, r28
    1332:	19 f0       	breq	.+6      	; 0x133a <ActionNoteOn+0xa2>
    1334:	80 e8       	ldi	r24, 0x80	; 128
    1336:	85 87       	std	Z+13, r24	; 0x0d
    1338:	02 c0       	rjmp	.+4      	; 0x133e <ActionNoteOn+0xa6>
    133a:	80 e4       	ldi	r24, 0x40	; 64
    133c:	85 87       	std	Z+13, r24	; 0x0d
    133e:	01 e0       	ldi	r16, 0x01	; 1
    1340:	10 e0       	ldi	r17, 0x00	; 0
    1342:	11 83       	std	Z+1, r17	; 0x01
    1344:	00 83       	st	Z, r16
    1346:	bf 01       	movw	r22, r30
    1348:	80 91 3b 02 	lds	r24, 0x023B	; 0x80023b <pDacMessages>
    134c:	90 91 3c 02 	lds	r25, 0x023C	; 0x80023c <pDacMessages+0x1>
    1350:	68 de       	rcall	.-816    	; 0x1022 <MqPut>
    1352:	83 e0       	ldi	r24, 0x03	; 3
    1354:	90 e0       	ldi	r25, 0x00	; 0
    1356:	e2 de       	rcall	.-572    	; 0x111c <NewMSG>
    1358:	fc 01       	movw	r30, r24
    135a:	80 e2       	ldi	r24, 0x20	; 32
    135c:	c8 9f       	mul	r28, r24
    135e:	a0 01       	movw	r20, r0
    1360:	11 24       	eor	r1, r1
    1362:	57 87       	std	Z+15, r21	; 0x0f
    1364:	46 87       	std	Z+14, r20	; 0x0e
    1366:	85 e0       	ldi	r24, 0x05	; 5
    1368:	84 87       	std	Z+12, r24	; 0x0c
    136a:	15 86       	std	Z+13, r1	; 0x0d
    136c:	11 83       	std	Z+1, r17	; 0x01
    136e:	00 83       	st	Z, r16
    1370:	bf 01       	movw	r22, r30
    1372:	80 91 3b 02 	lds	r24, 0x023B	; 0x80023b <pDacMessages>
    1376:	90 91 3c 02 	lds	r25, 0x023C	; 0x80023c <pDacMessages+0x1>
    137a:	53 de       	rcall	.-858    	; 0x1022 <MqPut>
    137c:	df 91       	pop	r29
    137e:	cf 91       	pop	r28
    1380:	1f 91       	pop	r17
    1382:	0f 91       	pop	r16
    1384:	08 95       	ret

00001386 <ActionAfterTouch>:
    1386:	cf 93       	push	r28
    1388:	c4 2f       	mov	r28, r20
    138a:	90 91 3f 02 	lds	r25, 0x023F	; 0x80023f <Settings>
    138e:	98 13       	cpse	r25, r24
    1390:	18 c0       	rjmp	.+48     	; 0x13c2 <ActionAfterTouch+0x3c>
    1392:	83 e0       	ldi	r24, 0x03	; 3
    1394:	90 e0       	ldi	r25, 0x00	; 0
    1396:	c2 de       	rcall	.-636    	; 0x111c <NewMSG>
    1398:	fc 01       	movw	r30, r24
    139a:	80 e2       	ldi	r24, 0x20	; 32
    139c:	c8 9f       	mul	r28, r24
    139e:	a0 01       	movw	r20, r0
    13a0:	11 24       	eor	r1, r1
    13a2:	57 87       	std	Z+15, r21	; 0x0f
    13a4:	46 87       	std	Z+14, r20	; 0x0e
    13a6:	82 e0       	ldi	r24, 0x02	; 2
    13a8:	84 87       	std	Z+12, r24	; 0x0c
    13aa:	15 86       	std	Z+13, r1	; 0x0d
    13ac:	81 e0       	ldi	r24, 0x01	; 1
    13ae:	90 e0       	ldi	r25, 0x00	; 0
    13b0:	91 83       	std	Z+1, r25	; 0x01
    13b2:	80 83       	st	Z, r24
    13b4:	bf 01       	movw	r22, r30
    13b6:	80 91 3b 02 	lds	r24, 0x023B	; 0x80023b <pDacMessages>
    13ba:	90 91 3c 02 	lds	r25, 0x023C	; 0x80023c <pDacMessages+0x1>
    13be:	31 de       	rcall	.-926    	; 0x1022 <MqPut>
    13c0:	1b c0       	rjmp	.+54     	; 0x13f8 <ActionAfterTouch+0x72>
    13c2:	90 91 40 02 	lds	r25, 0x0240	; 0x800240 <Settings+0x1>
    13c6:	89 13       	cpse	r24, r25
    13c8:	17 c0       	rjmp	.+46     	; 0x13f8 <ActionAfterTouch+0x72>
    13ca:	83 e0       	ldi	r24, 0x03	; 3
    13cc:	90 e0       	ldi	r25, 0x00	; 0
    13ce:	a6 de       	rcall	.-692    	; 0x111c <NewMSG>
    13d0:	fc 01       	movw	r30, r24
    13d2:	80 e2       	ldi	r24, 0x20	; 32
    13d4:	c8 9f       	mul	r28, r24
    13d6:	a0 01       	movw	r20, r0
    13d8:	11 24       	eor	r1, r1
    13da:	57 87       	std	Z+15, r21	; 0x0f
    13dc:	46 87       	std	Z+14, r20	; 0x0e
    13de:	86 e0       	ldi	r24, 0x06	; 6
    13e0:	84 87       	std	Z+12, r24	; 0x0c
    13e2:	15 86       	std	Z+13, r1	; 0x0d
    13e4:	81 e0       	ldi	r24, 0x01	; 1
    13e6:	90 e0       	ldi	r25, 0x00	; 0
    13e8:	91 83       	std	Z+1, r25	; 0x01
    13ea:	80 83       	st	Z, r24
    13ec:	bf 01       	movw	r22, r30
    13ee:	80 91 3b 02 	lds	r24, 0x023B	; 0x80023b <pDacMessages>
    13f2:	90 91 3c 02 	lds	r25, 0x023C	; 0x80023c <pDacMessages+0x1>
    13f6:	15 de       	rcall	.-982    	; 0x1022 <MqPut>
    13f8:	cf 91       	pop	r28
    13fa:	08 95       	ret

000013fc <ActionChanPressure>:
    13fc:	cf 93       	push	r28
    13fe:	c6 2f       	mov	r28, r22
    1400:	90 91 3f 02 	lds	r25, 0x023F	; 0x80023f <Settings>
    1404:	98 13       	cpse	r25, r24
    1406:	18 c0       	rjmp	.+48     	; 0x1438 <ActionChanPressure+0x3c>
    1408:	83 e0       	ldi	r24, 0x03	; 3
    140a:	90 e0       	ldi	r25, 0x00	; 0
    140c:	87 de       	rcall	.-754    	; 0x111c <NewMSG>
    140e:	fc 01       	movw	r30, r24
    1410:	80 e2       	ldi	r24, 0x20	; 32
    1412:	c8 9f       	mul	r28, r24
    1414:	90 01       	movw	r18, r0
    1416:	11 24       	eor	r1, r1
    1418:	37 87       	std	Z+15, r19	; 0x0f
    141a:	26 87       	std	Z+14, r18	; 0x0e
    141c:	82 e0       	ldi	r24, 0x02	; 2
    141e:	84 87       	std	Z+12, r24	; 0x0c
    1420:	15 86       	std	Z+13, r1	; 0x0d
    1422:	81 e0       	ldi	r24, 0x01	; 1
    1424:	90 e0       	ldi	r25, 0x00	; 0
    1426:	91 83       	std	Z+1, r25	; 0x01
    1428:	80 83       	st	Z, r24
    142a:	bf 01       	movw	r22, r30
    142c:	80 91 3b 02 	lds	r24, 0x023B	; 0x80023b <pDacMessages>
    1430:	90 91 3c 02 	lds	r25, 0x023C	; 0x80023c <pDacMessages+0x1>
    1434:	f6 dd       	rcall	.-1044   	; 0x1022 <MqPut>
    1436:	1b c0       	rjmp	.+54     	; 0x146e <ActionChanPressure+0x72>
    1438:	90 91 40 02 	lds	r25, 0x0240	; 0x800240 <Settings+0x1>
    143c:	89 13       	cpse	r24, r25
    143e:	17 c0       	rjmp	.+46     	; 0x146e <ActionChanPressure+0x72>
    1440:	83 e0       	ldi	r24, 0x03	; 3
    1442:	90 e0       	ldi	r25, 0x00	; 0
    1444:	6b de       	rcall	.-810    	; 0x111c <NewMSG>
    1446:	fc 01       	movw	r30, r24
    1448:	80 e2       	ldi	r24, 0x20	; 32
    144a:	c8 9f       	mul	r28, r24
    144c:	90 01       	movw	r18, r0
    144e:	11 24       	eor	r1, r1
    1450:	37 87       	std	Z+15, r19	; 0x0f
    1452:	26 87       	std	Z+14, r18	; 0x0e
    1454:	86 e0       	ldi	r24, 0x06	; 6
    1456:	84 87       	std	Z+12, r24	; 0x0c
    1458:	15 86       	std	Z+13, r1	; 0x0d
    145a:	81 e0       	ldi	r24, 0x01	; 1
    145c:	90 e0       	ldi	r25, 0x00	; 0
    145e:	91 83       	std	Z+1, r25	; 0x01
    1460:	80 83       	st	Z, r24
    1462:	bf 01       	movw	r22, r30
    1464:	80 91 3b 02 	lds	r24, 0x023B	; 0x80023b <pDacMessages>
    1468:	90 91 3c 02 	lds	r25, 0x023C	; 0x80023c <pDacMessages+0x1>
    146c:	da dd       	rcall	.-1100   	; 0x1022 <MqPut>
    146e:	cf 91       	pop	r28
    1470:	08 95       	ret

00001472 <ActionPitchWheel>:
    1472:	cf 93       	push	r28
    1474:	df 93       	push	r29
    1476:	eb 01       	movw	r28, r22
    1478:	90 91 3f 02 	lds	r25, 0x023F	; 0x80023f <Settings>
    147c:	98 13       	cpse	r25, r24
    147e:	1a c0       	rjmp	.+52     	; 0x14b4 <ActionPitchWheel+0x42>
    1480:	83 e0       	ldi	r24, 0x03	; 3
    1482:	90 e0       	ldi	r25, 0x00	; 0
    1484:	4b de       	rcall	.-874    	; 0x111c <NewMSG>
    1486:	fc 01       	movw	r30, r24
    1488:	d5 95       	asr	r29
    148a:	c7 95       	ror	r28
    148c:	d5 95       	asr	r29
    148e:	c7 95       	ror	r28
    1490:	d5 95       	asr	r29
    1492:	c7 95       	ror	r28
    1494:	d7 87       	std	Z+15, r29	; 0x0f
    1496:	c6 87       	std	Z+14, r28	; 0x0e
    1498:	87 e0       	ldi	r24, 0x07	; 7
    149a:	84 87       	std	Z+12, r24	; 0x0c
    149c:	15 86       	std	Z+13, r1	; 0x0d
    149e:	81 e0       	ldi	r24, 0x01	; 1
    14a0:	90 e0       	ldi	r25, 0x00	; 0
    14a2:	91 83       	std	Z+1, r25	; 0x01
    14a4:	80 83       	st	Z, r24
    14a6:	bf 01       	movw	r22, r30
    14a8:	80 91 3b 02 	lds	r24, 0x023B	; 0x80023b <pDacMessages>
    14ac:	90 91 3c 02 	lds	r25, 0x023C	; 0x80023c <pDacMessages+0x1>
    14b0:	b8 dd       	rcall	.-1168   	; 0x1022 <MqPut>
    14b2:	1d c0       	rjmp	.+58     	; 0x14ee <ActionPitchWheel+0x7c>
    14b4:	90 91 40 02 	lds	r25, 0x0240	; 0x800240 <Settings+0x1>
    14b8:	89 13       	cpse	r24, r25
    14ba:	19 c0       	rjmp	.+50     	; 0x14ee <ActionPitchWheel+0x7c>
    14bc:	83 e0       	ldi	r24, 0x03	; 3
    14be:	90 e0       	ldi	r25, 0x00	; 0
    14c0:	2d de       	rcall	.-934    	; 0x111c <NewMSG>
    14c2:	fc 01       	movw	r30, r24
    14c4:	d5 95       	asr	r29
    14c6:	c7 95       	ror	r28
    14c8:	d5 95       	asr	r29
    14ca:	c7 95       	ror	r28
    14cc:	d5 95       	asr	r29
    14ce:	c7 95       	ror	r28
    14d0:	d7 87       	std	Z+15, r29	; 0x0f
    14d2:	c6 87       	std	Z+14, r28	; 0x0e
    14d4:	87 e0       	ldi	r24, 0x07	; 7
    14d6:	84 87       	std	Z+12, r24	; 0x0c
    14d8:	15 86       	std	Z+13, r1	; 0x0d
    14da:	81 e0       	ldi	r24, 0x01	; 1
    14dc:	90 e0       	ldi	r25, 0x00	; 0
    14de:	91 83       	std	Z+1, r25	; 0x01
    14e0:	80 83       	st	Z, r24
    14e2:	bf 01       	movw	r22, r30
    14e4:	80 91 3b 02 	lds	r24, 0x023B	; 0x80023b <pDacMessages>
    14e8:	90 91 3c 02 	lds	r25, 0x023C	; 0x80023c <pDacMessages+0x1>
    14ec:	9a dd       	rcall	.-1228   	; 0x1022 <MqPut>
    14ee:	df 91       	pop	r29
    14f0:	cf 91       	pop	r28
    14f2:	08 95       	ret

000014f4 <ParseMidi>:

}

int ParseMidi(MIDIPARSE_D *pMp, unsigned char c)
{
    14f4:	cf 93       	push	r28
    14f6:	df 93       	push	r29
    14f8:	fc 01       	movw	r30, r24
	//	c.......a byte of midi data
	//
	// returns:
	//	0
	//-----------------------------------------
	if(c & (unsigned char)0x80)	//is it a command?
    14fa:	66 23       	and	r22, r22
    14fc:	94 f5       	brge	.+100    	; 0x1562 <ParseMidi+0x6e>
	{
		if(c < (unsigned char)0xf0)
    14fe:	60 3f       	cpi	r22, 0xF0	; 240
    1500:	48 f4       	brcc	.+18     	; 0x1514 <ParseMidi+0x20>
		{
			//process this stuff, dispose of everything else
			//Command portion of data
			pMp->cmd = (unsigned char)(c & (unsigned char)0xf0);
    1502:	86 2f       	mov	r24, r22
    1504:	80 7f       	andi	r24, 0xF0	; 240
    1506:	81 83       	std	Z+1, r24	; 0x01
			// channel portion of data
			pMp->chan = (unsigned char)(c & 0x0f);
    1508:	46 2f       	mov	r20, r22
    150a:	4f 70       	andi	r20, 0x0F	; 15
    150c:	42 83       	std	Z+2, r20	; 0x02
			//set state to recieve first data byte
			pMp->state = NOTE0;
    150e:	81 e0       	ldi	r24, 0x01	; 1
    1510:	85 83       	std	Z+5, r24	; 0x05
    1512:	00 c1       	rjmp	.+512    	; 0x1714 <ParseMidi+0x220>
		}
		else	//process system commands
		{
			switch(c)
    1514:	62 3f       	cpi	r22, 0xF2	; 242
    1516:	b9 f0       	breq	.+46     	; 0x1546 <ParseMidi+0x52>
    1518:	28 f4       	brcc	.+10     	; 0x1524 <ParseMidi+0x30>
    151a:	60 3f       	cpi	r22, 0xF0	; 240
    151c:	41 f0       	breq	.+16     	; 0x152e <ParseMidi+0x3a>
    151e:	61 3f       	cpi	r22, 0xF1	; 241
    1520:	69 f0       	breq	.+26     	; 0x153c <ParseMidi+0x48>
    1522:	f8 c0       	rjmp	.+496    	; 0x1714 <ParseMidi+0x220>
    1524:	63 3f       	cpi	r22, 0xF3	; 243
    1526:	a1 f0       	breq	.+40     	; 0x1550 <ParseMidi+0x5c>
    1528:	67 3f       	cpi	r22, 0xF7	; 247
    152a:	b9 f0       	breq	.+46     	; 0x155a <ParseMidi+0x66>
    152c:	f3 c0       	rjmp	.+486    	; 0x1714 <ParseMidi+0x220>
			{
				case SYSEX:	//n bytes defined by command
                   	pMp->state = SYSEX_ID;
    152e:	85 e0       	ldi	r24, 0x05	; 5
    1530:	85 83       	std	Z+5, r24	; 0x05
                    pMp->cmd = SYSEX;
    1532:	80 ef       	ldi	r24, 0xF0	; 240
    1534:	81 83       	std	Z+1, r24	; 0x01
// Action Functions for Midi Parser
//---------------------------------

void ActionSysEx(MIDIPARSE_D *pMD)
{
	pMD->SysexCount = 0;
    1536:	17 82       	std	Z+7, r1	; 0x07
    1538:	16 82       	std	Z+6, r1	; 0x06
    153a:	ec c0       	rjmp	.+472    	; 0x1714 <ParseMidi+0x220>
                   	pMp->state = SYSEX_ID;
                    pMp->cmd = SYSEX;
					ActionSysEx(pMp);
					break;
				case SYSCOM_MTCQUARTERFRAME:		//2 bytes
					pMp->cmd = SYSCOM_MTCQUARTERFRAME;
    153c:	81 ef       	ldi	r24, 0xF1	; 241
    153e:	81 83       	std	Z+1, r24	; 0x01
					pMp->state = SYSCOM_STATE;
    1540:	84 e0       	ldi	r24, 0x04	; 4
    1542:	85 83       	std	Z+5, r24	; 0x05
					break;
    1544:	e7 c0       	rjmp	.+462    	; 0x1714 <ParseMidi+0x220>
				case SYSCOMSONGPOS:		//3 bytes
					pMp->cmd = SYSCOMSONGPOS;
    1546:	82 ef       	ldi	r24, 0xF2	; 242
    1548:	81 83       	std	Z+1, r24	; 0x01
					pMp->state = NOTE0;
    154a:	81 e0       	ldi	r24, 0x01	; 1
    154c:	85 83       	std	Z+5, r24	; 0x05
					break;
    154e:	e2 c0       	rjmp	.+452    	; 0x1714 <ParseMidi+0x220>
				case SYSCOMSONGSEL:		//2 bytes
					pMp->cmd = SYSCOMSONGSEL;
    1550:	83 ef       	ldi	r24, 0xF3	; 243
    1552:	81 83       	std	Z+1, r24	; 0x01
					pMp->state = SYSCOM_STATE;
    1554:	84 e0       	ldi	r24, 0x04	; 4
    1556:	85 83       	std	Z+5, r24	; 0x05
					break;
    1558:	dd c0       	rjmp	.+442    	; 0x1714 <ParseMidi+0x220>
					break;
				case SYSCOMTUNEREQ:		//1 byte
					ActionSysComTuneReq();
					break;
				case SYSEXEND:			//1 byte
                   	pMp->state = IDLE;
    155a:	15 82       	std	Z+5, r1	; 0x05
                    pMp->cmd = SYSEXEND;
    155c:	87 ef       	ldi	r24, 0xF7	; 247
    155e:	81 83       	std	Z+1, r24	; 0x01
					ActionSysExEnd(pMp);
					break;
    1560:	d9 c0       	rjmp	.+434    	; 0x1714 <ParseMidi+0x220>
	else	// 	then it must be data
	{
		/*	we must handle the case of running status...so we need to keep track of
		**  which data byte we are on
		*/
		switch(pMp->cmd)	//what was the last command?
    1562:	91 81       	ldd	r25, Z+1	; 0x01
    1564:	90 3d       	cpi	r25, 0xD0	; 208
    1566:	09 f4       	brne	.+2      	; 0x156a <ParseMidi+0x76>
    1568:	68 c0       	rjmp	.+208    	; 0x163a <ParseMidi+0x146>
    156a:	ef 01       	movw	r28, r30
    156c:	91 3d       	cpi	r25, 0xD1	; 209
    156e:	80 f4       	brcc	.+32     	; 0x1590 <ParseMidi+0x9c>
    1570:	90 3a       	cpi	r25, 0xA0	; 160
    1572:	09 f4       	brne	.+2      	; 0x1576 <ParseMidi+0x82>
    1574:	4c c0       	rjmp	.+152    	; 0x160e <ParseMidi+0x11a>
    1576:	28 f4       	brcc	.+10     	; 0x1582 <ParseMidi+0x8e>
    1578:	90 38       	cpi	r25, 0x80	; 128
    157a:	e1 f0       	breq	.+56     	; 0x15b4 <ParseMidi+0xc0>
    157c:	90 39       	cpi	r25, 0x90	; 144
    157e:	69 f1       	breq	.+90     	; 0x15da <ParseMidi+0xe6>
    1580:	c9 c0       	rjmp	.+402    	; 0x1714 <ParseMidi+0x220>
    1582:	90 3b       	cpi	r25, 0xB0	; 176
    1584:	09 f4       	brne	.+2      	; 0x1588 <ParseMidi+0x94>
    1586:	56 c0       	rjmp	.+172    	; 0x1634 <ParseMidi+0x140>
    1588:	90 3c       	cpi	r25, 0xC0	; 192
    158a:	09 f4       	brne	.+2      	; 0x158e <ParseMidi+0x9a>
    158c:	86 c0       	rjmp	.+268    	; 0x169a <ParseMidi+0x1a6>
    158e:	c2 c0       	rjmp	.+388    	; 0x1714 <ParseMidi+0x220>
    1590:	91 3f       	cpi	r25, 0xF1	; 241
    1592:	09 f4       	brne	.+2      	; 0x1596 <ParseMidi+0xa2>
    1594:	9f c0       	rjmp	.+318    	; 0x16d4 <ParseMidi+0x1e0>
    1596:	38 f4       	brcc	.+14     	; 0x15a6 <ParseMidi+0xb2>
    1598:	90 3e       	cpi	r25, 0xE0	; 224
    159a:	09 f4       	brne	.+2      	; 0x159e <ParseMidi+0xaa>
    159c:	5d c0       	rjmp	.+186    	; 0x1658 <ParseMidi+0x164>
    159e:	90 3f       	cpi	r25, 0xF0	; 240
    15a0:	09 f4       	brne	.+2      	; 0x15a4 <ParseMidi+0xb0>
    15a2:	7e c0       	rjmp	.+252    	; 0x16a0 <ParseMidi+0x1ac>
    15a4:	b7 c0       	rjmp	.+366    	; 0x1714 <ParseMidi+0x220>
    15a6:	92 3f       	cpi	r25, 0xF2	; 242
    15a8:	09 f4       	brne	.+2      	; 0x15ac <ParseMidi+0xb8>
    15aa:	96 c0       	rjmp	.+300    	; 0x16d8 <ParseMidi+0x1e4>
    15ac:	93 3f       	cpi	r25, 0xF3	; 243
    15ae:	09 f4       	brne	.+2      	; 0x15b2 <ParseMidi+0xbe>
    15b0:	b0 c0       	rjmp	.+352    	; 0x1712 <ParseMidi+0x21e>
    15b2:	b0 c0       	rjmp	.+352    	; 0x1714 <ParseMidi+0x220>
		{
			case NOTEOFF:	//last command was note off 3 bytes
				switch(pMp->state)
    15b4:	85 81       	ldd	r24, Z+5	; 0x05
    15b6:	81 30       	cpi	r24, 0x01	; 1
    15b8:	19 f0       	breq	.+6      	; 0x15c0 <ParseMidi+0xcc>
    15ba:	82 30       	cpi	r24, 0x02	; 2
    15bc:	29 f0       	breq	.+10     	; 0x15c8 <ParseMidi+0xd4>
    15be:	aa c0       	rjmp	.+340    	; 0x1714 <ParseMidi+0x220>
				{
					case NOTE0:
						pMp->nextnote = c;
    15c0:	63 83       	std	Z+3, r22	; 0x03
						pMp->state = NOTE1;
    15c2:	82 e0       	ldi	r24, 0x02	; 2
    15c4:	85 83       	std	Z+5, r24	; 0x05
						break;
    15c6:	a6 c0       	rjmp	.+332    	; 0x1714 <ParseMidi+0x220>
					case NOTE1:
						pMp->currentnote = pMp->nextnote;
    15c8:	83 81       	ldd	r24, Z+3	; 0x03
    15ca:	84 83       	std	Z+4, r24	; 0x04
						ActionNoteOff(pMp->chan,pMp->nextnote,c);
    15cc:	46 2f       	mov	r20, r22
    15ce:	68 2f       	mov	r22, r24
    15d0:	82 81       	ldd	r24, Z+2	; 0x02
    15d2:	f5 dd       	rcall	.-1046   	; 0x11be <ActionNoteOff>
						pMp->state = NOTE0;
    15d4:	81 e0       	ldi	r24, 0x01	; 1
    15d6:	8d 83       	std	Y+5, r24	; 0x05
						break;
    15d8:	9d c0       	rjmp	.+314    	; 0x1714 <ParseMidi+0x220>
				}
				break;
			case NOTEON:	// last command was note on 3 bytes
				switch(pMp->state)
    15da:	85 81       	ldd	r24, Z+5	; 0x05
    15dc:	81 30       	cpi	r24, 0x01	; 1
    15de:	19 f0       	breq	.+6      	; 0x15e6 <ParseMidi+0xf2>
    15e0:	82 30       	cpi	r24, 0x02	; 2
    15e2:	29 f0       	breq	.+10     	; 0x15ee <ParseMidi+0xfa>
    15e4:	97 c0       	rjmp	.+302    	; 0x1714 <ParseMidi+0x220>
				{
					case NOTE0:
						pMp->nextnote = c;
    15e6:	63 83       	std	Z+3, r22	; 0x03
						pMp->state = NOTE1;
    15e8:	82 e0       	ldi	r24, 0x02	; 2
    15ea:	85 83       	std	Z+5, r24	; 0x05
						break;
    15ec:	93 c0       	rjmp	.+294    	; 0x1714 <ParseMidi+0x220>
					case NOTE1:
						pMp->currentnote = pMp->nextnote;
    15ee:	83 81       	ldd	r24, Z+3	; 0x03
    15f0:	84 83       	std	Z+4, r24	; 0x04
						if(c > 0)
    15f2:	66 23       	and	r22, r22
    15f4:	29 f0       	breq	.+10     	; 0x1600 <ParseMidi+0x10c>
							ActionNoteOn(pMp->chan,pMp->currentnote,c);
    15f6:	46 2f       	mov	r20, r22
    15f8:	68 2f       	mov	r22, r24
    15fa:	82 81       	ldd	r24, Z+2	; 0x02
    15fc:	4d de       	rcall	.-870    	; 0x1298 <ActionNoteOn>
    15fe:	04 c0       	rjmp	.+8      	; 0x1608 <ParseMidi+0x114>
						else
							ActionNoteOff(pMp->chan,pMp->nextnote,c);
    1600:	40 e0       	ldi	r20, 0x00	; 0
    1602:	68 2f       	mov	r22, r24
    1604:	82 81       	ldd	r24, Z+2	; 0x02
    1606:	db dd       	rcall	.-1098   	; 0x11be <ActionNoteOff>
						pMp->state = NOTE0;
    1608:	81 e0       	ldi	r24, 0x01	; 1
    160a:	8d 83       	std	Y+5, r24	; 0x05
						break;
    160c:	83 c0       	rjmp	.+262    	; 0x1714 <ParseMidi+0x220>
					default:
						break;
				}
				break;
			case NOTEPRES:	// last command was note pressure  3 bytes
				switch(pMp->state)
    160e:	85 81       	ldd	r24, Z+5	; 0x05
    1610:	81 30       	cpi	r24, 0x01	; 1
    1612:	19 f0       	breq	.+6      	; 0x161a <ParseMidi+0x126>
    1614:	82 30       	cpi	r24, 0x02	; 2
    1616:	29 f0       	breq	.+10     	; 0x1622 <ParseMidi+0x12e>
    1618:	7d c0       	rjmp	.+250    	; 0x1714 <ParseMidi+0x220>
				{
					case NOTE0:
						pMp->nextnote = c;
    161a:	63 83       	std	Z+3, r22	; 0x03
						pMp->state = NOTE1;
    161c:	82 e0       	ldi	r24, 0x02	; 2
    161e:	85 83       	std	Z+5, r24	; 0x05
						break;
    1620:	79 c0       	rjmp	.+242    	; 0x1714 <ParseMidi+0x220>
					case NOTE1:
						pMp->state = NOTE0;
    1622:	81 e0       	ldi	r24, 0x01	; 1
    1624:	85 83       	std	Z+5, r24	; 0x05
						pMp->currentnote = pMp->nextnote;
    1626:	83 81       	ldd	r24, Z+3	; 0x03
    1628:	84 83       	std	Z+4, r24	; 0x04
						ActionAfterTouch(pMp->chan,pMp->currentnote,c);
    162a:	46 2f       	mov	r20, r22
    162c:	68 2f       	mov	r22, r24
    162e:	82 81       	ldd	r24, Z+2	; 0x02
						break;
    1630:	aa de       	rcall	.-684    	; 0x1386 <ActionAfterTouch>
				}
				break;
			case CHANPRES:		//last command was channel pressuren 2 bytes
				ActionChanPressure(pMp->chan,c);
    1632:	70 c0       	rjmp	.+224    	; 0x1714 <ParseMidi+0x220>
    1634:	82 81       	ldd	r24, Z+2	; 0x02
    1636:	e2 de       	rcall	.-572    	; 0x13fc <ActionChanPressure>
				break;
    1638:	6d c0       	rjmp	.+218    	; 0x1714 <ParseMidi+0x220>
			case CONTROL:			//control change 3 bytes
				switch(pMp->state)
    163a:	85 81       	ldd	r24, Z+5	; 0x05
    163c:	81 30       	cpi	r24, 0x01	; 1
    163e:	19 f0       	breq	.+6      	; 0x1646 <ParseMidi+0x152>
    1640:	82 30       	cpi	r24, 0x02	; 2
    1642:	29 f0       	breq	.+10     	; 0x164e <ParseMidi+0x15a>
    1644:	67 c0       	rjmp	.+206    	; 0x1714 <ParseMidi+0x220>
				{
					case NOTE0:
						pMp->state = NOTE1;
    1646:	82 e0       	ldi	r24, 0x02	; 2
    1648:	85 83       	std	Z+5, r24	; 0x05
						pMp->nextnote = c;
    164a:	63 83       	std	Z+3, r22	; 0x03
						break;
    164c:	63 c0       	rjmp	.+198    	; 0x1714 <ParseMidi+0x220>
					case NOTE1:
						pMp->state = NOTE0;
    164e:	81 e0       	ldi	r24, 0x01	; 1
    1650:	85 83       	std	Z+5, r24	; 0x05
						pMp->currentnote = pMp->nextnote;
    1652:	83 81       	ldd	r24, Z+3	; 0x03
    1654:	84 83       	std	Z+4, r24	; 0x04
						ActionController(pMp->chan,pMp->currentnote,c);
						break;
    1656:	5e c0       	rjmp	.+188    	; 0x1714 <ParseMidi+0x220>
				}
				break;
			case WHEEL:			//last command was pitch wheel change 3 bytes
				switch(pMp->state)
    1658:	85 81       	ldd	r24, Z+5	; 0x05
    165a:	81 30       	cpi	r24, 0x01	; 1
    165c:	19 f0       	breq	.+6      	; 0x1664 <ParseMidi+0x170>
    165e:	82 30       	cpi	r24, 0x02	; 2
    1660:	41 f0       	breq	.+16     	; 0x1672 <ParseMidi+0x17e>
    1662:	58 c0       	rjmp	.+176    	; 0x1714 <ParseMidi+0x220>
				{
					case NOTE0:
						pMp->v = ((int)c);
    1664:	46 2f       	mov	r20, r22
    1666:	50 e0       	ldi	r21, 0x00	; 0
    1668:	53 87       	std	Z+11, r21	; 0x0b
    166a:	42 87       	std	Z+10, r20	; 0x0a
						pMp->state = NOTE1;
    166c:	82 e0       	ldi	r24, 0x02	; 2
    166e:	85 83       	std	Z+5, r24	; 0x05
						break;
    1670:	51 c0       	rjmp	.+162    	; 0x1714 <ParseMidi+0x220>
					case NOTE1:
						pMp->v |= ((int)c)<<7;
						pMp->v <<= 2;	//12 bits;
    1672:	80 e8       	ldi	r24, 0x80	; 128
    1674:	68 9f       	mul	r22, r24
    1676:	a0 01       	movw	r20, r0
    1678:	11 24       	eor	r1, r1
    167a:	62 85       	ldd	r22, Z+10	; 0x0a
    167c:	73 85       	ldd	r23, Z+11	; 0x0b
    167e:	46 2b       	or	r20, r22
    1680:	57 2b       	or	r21, r23
    1682:	ba 01       	movw	r22, r20
    1684:	66 0f       	add	r22, r22
    1686:	77 1f       	adc	r23, r23
    1688:	66 0f       	add	r22, r22
    168a:	77 1f       	adc	r23, r23
    168c:	73 87       	std	Z+11, r23	; 0x0b
						pMp->state = NOTE0;
    168e:	62 87       	std	Z+10, r22	; 0x0a
    1690:	81 e0       	ldi	r24, 0x01	; 1
						ActionPitchWheel(pMp->chan,pMp->v);
    1692:	85 83       	std	Z+5, r24	; 0x05
    1694:	82 81       	ldd	r24, Z+2	; 0x02
    1696:	ed de       	rcall	.-550    	; 0x1472 <ActionPitchWheel>
						break;
    1698:	3d c0       	rjmp	.+122    	; 0x1714 <ParseMidi+0x220>
				}
				break;
			case PATCH:			//last command was patch change 2 bytes
				pMp->state = NOTE0;
    169a:	81 e0       	ldi	r24, 0x01	; 1
    169c:	85 83       	std	Z+5, r24	; 0x05
				ActionProgramChange(pMp->chan,c);
				break;
    169e:	3a c0       	rjmp	.+116    	; 0x1714 <ParseMidi+0x220>
			case SYSEX:		//1 byte...This is where we pass of sysex data
				switch(pMp->state)
    16a0:	85 81       	ldd	r24, Z+5	; 0x05
    16a2:	86 30       	cpi	r24, 0x06	; 6
    16a4:	61 f0       	breq	.+24     	; 0x16be <ParseMidi+0x1ca>
    16a6:	87 30       	cpi	r24, 0x07	; 7
    16a8:	91 f0       	breq	.+36     	; 0x16ce <ParseMidi+0x1da>
    16aa:	85 30       	cpi	r24, 0x05	; 5
    16ac:	99 f5       	brne	.+102    	; 0x1714 <ParseMidi+0x220>
				{
					case SYSEX_ID:
						if(c == 0x7D)	//manufacturers ID
    16ae:	6d 37       	cpi	r22, 0x7D	; 125
    16b0:	19 f4       	brne	.+6      	; 0x16b8 <ParseMidi+0x1c4>
							pMp->state = SYSEX_MODEL;
    16b2:	86 e0       	ldi	r24, 0x06	; 6
    16b4:	85 83       	std	Z+5, r24	; 0x05
    16b6:	2e c0       	rjmp	.+92     	; 0x1714 <ParseMidi+0x220>
						else
							pMp->state = SYSEX_IGNORE;
    16b8:	88 e0       	ldi	r24, 0x08	; 8
    16ba:	85 83       	std	Z+5, r24	; 0x05
    16bc:	2b c0       	rjmp	.+86     	; 0x1714 <ParseMidi+0x220>
						break;
					case SYSEX_MODEL:
						if(c == 0x10)	//model number
    16be:	60 31       	cpi	r22, 0x10	; 16
    16c0:	19 f4       	brne	.+6      	; 0x16c8 <ParseMidi+0x1d4>
							pMp->state = SYSEX_DATA;
    16c2:	87 e0       	ldi	r24, 0x07	; 7
    16c4:	85 83       	std	Z+5, r24	; 0x05
						else
							pMp->state = SYSEX_IGNORE;
    16c6:	26 c0       	rjmp	.+76     	; 0x1714 <ParseMidi+0x220>
    16c8:	88 e0       	ldi	r24, 0x08	; 8
    16ca:	85 83       	std	Z+5, r24	; 0x05
						break;
					case SYSEX_DATA:
						ActionSysExData(pMp,c);
    16cc:	23 c0       	rjmp	.+70     	; 0x1714 <ParseMidi+0x220>
    16ce:	cf 01       	movw	r24, r30
    16d0:	67 dd       	rcall	.-1330   	; 0x11a0 <ActionSysExData>
						break;
    16d2:	20 c0       	rjmp	.+64     	; 0x1714 <ParseMidi+0x220>
					case SYSEX_IGNORE:
						break;
				}
               	break;
			case SYSCOM_MTCQUARTERFRAME:
				pMp->state = IDLE;
    16d4:	15 82       	std	Z+5, r1	; 0x05
				ActionMTCQuarterFrameMessage(c);
				break;
    16d6:	1e c0       	rjmp	.+60     	; 0x1714 <ParseMidi+0x220>
			case SYSCOMSONGPOS:
				switch(pMp->state)
    16d8:	85 81       	ldd	r24, Z+5	; 0x05
    16da:	81 30       	cpi	r24, 0x01	; 1
    16dc:	19 f0       	breq	.+6      	; 0x16e4 <ParseMidi+0x1f0>
    16de:	82 30       	cpi	r24, 0x02	; 2
    16e0:	41 f0       	breq	.+16     	; 0x16f2 <ParseMidi+0x1fe>
    16e2:	18 c0       	rjmp	.+48     	; 0x1714 <ParseMidi+0x220>
				{
					case NOTE0:
						pMp->v = ((int)c);
    16e4:	46 2f       	mov	r20, r22
    16e6:	50 e0       	ldi	r21, 0x00	; 0
    16e8:	53 87       	std	Z+11, r21	; 0x0b
    16ea:	42 87       	std	Z+10, r20	; 0x0a
						pMp->state = NOTE1;
    16ec:	82 e0       	ldi	r24, 0x02	; 2
    16ee:	85 83       	std	Z+5, r24	; 0x05
						break;
    16f0:	11 c0       	rjmp	.+34     	; 0x1714 <ParseMidi+0x220>
					case NOTE1:
						pMp->v |= ((int)c)<<7;
						pMp->v <<= 2;	//12 bits;
    16f2:	80 e8       	ldi	r24, 0x80	; 128
    16f4:	68 9f       	mul	r22, r24
    16f6:	a0 01       	movw	r20, r0
    16f8:	11 24       	eor	r1, r1
    16fa:	62 85       	ldd	r22, Z+10	; 0x0a
    16fc:	73 85       	ldd	r23, Z+11	; 0x0b
    16fe:	46 2b       	or	r20, r22
    1700:	57 2b       	or	r21, r23
    1702:	44 0f       	add	r20, r20
    1704:	55 1f       	adc	r21, r21
    1706:	44 0f       	add	r20, r20
    1708:	55 1f       	adc	r21, r21
    170a:	53 87       	std	Z+11, r21	; 0x0b
    170c:	42 87       	std	Z+10, r20	; 0x0a
						pMp->state = IDLE;
    170e:	15 82       	std	Z+5, r1	; 0x05
						ActionSysComSongPos(pMp->v);
						break;
    1710:	01 c0       	rjmp	.+2      	; 0x1714 <ParseMidi+0x220>
				}
				break;
			case SYSCOMSONGSEL:
				pMp->state = IDLE;
    1712:	15 82       	std	Z+5, r1	; 0x05
				ActionSysComSongSel(c);
				break;
		}	//end of switch(cmd)
	}	//end of if(c & 0x080)
	return 0;
}
    1714:	80 e0       	ldi	r24, 0x00	; 0
    1716:	90 e0       	ldi	r25, 0x00	; 0
    1718:	df 91       	pop	r29
    171a:	cf 91       	pop	r28
    171c:	08 95       	ret

0000171e <PriorityCompare>:
//		positive....priority of s1 > s2
//		negative....priority of s1 < s2
//----------------------------------------------------------------------
//
static int PriorityCompare(void **s1, void **s2)
{
    171e:	cf 93       	push	r28
    1720:	df 93       	push	r29
	int r;

	//check priority levels
	if( (r = ((TCB *)*s1)->priority - ((TCB *)*s2)->priority) != 0)
    1722:	dc 01       	movw	r26, r24
    1724:	ed 91       	ld	r30, X+
    1726:	fc 91       	ld	r31, X
    1728:	eb 01       	movw	r28, r22
    172a:	a8 81       	ld	r26, Y
    172c:	b9 81       	ldd	r27, Y+1	; 0x01
    172e:	86 81       	ldd	r24, Z+6	; 0x06
    1730:	97 81       	ldd	r25, Z+7	; 0x07
    1732:	16 96       	adiw	r26, 0x06	; 6
    1734:	2d 91       	ld	r18, X+
    1736:	3c 91       	ld	r19, X
    1738:	17 97       	sbiw	r26, 0x07	; 7
    173a:	82 1b       	sub	r24, r18
    173c:	93 0b       	sbc	r25, r19
    173e:	41 f4       	brne	.+16     	; 0x1750 <PriorityCompare+0x32>
		return r;
	//if priority levels are the same, then check time stamps
	return (int)(((TCB *)*s2)->TimeStamp - ((TCB *)*s1)->TimeStamp);
    1740:	1c 96       	adiw	r26, 0x0c	; 12
    1742:	8d 91       	ld	r24, X+
    1744:	9c 91       	ld	r25, X
    1746:	1d 97       	sbiw	r26, 0x0d	; 13
    1748:	24 85       	ldd	r18, Z+12	; 0x0c
    174a:	35 85       	ldd	r19, Z+13	; 0x0d
    174c:	82 1b       	sub	r24, r18
    174e:	93 0b       	sbc	r25, r19
}
    1750:	df 91       	pop	r29
    1752:	cf 91       	pop	r28
    1754:	08 95       	ret

00001756 <OSInit>:
//	parameters:
//		none
//---------------------------------------------------------------------------
void OSInit(void)
{
	InitPQ(&ActiveTasks,32,PriorityCompare);
    1756:	4f e8       	ldi	r20, 0x8F	; 143
    1758:	5b e0       	ldi	r21, 0x0B	; 11
    175a:	60 e2       	ldi	r22, 0x20	; 32
    175c:	70 e0       	ldi	r23, 0x00	; 0
    175e:	8c e0       	ldi	r24, 0x0C	; 12
    1760:	92 e0       	ldi	r25, 0x02	; 2
    1762:	d9 c0       	rjmp	.+434    	; 0x1916 <InitPQ>
    1764:	08 95       	ret

00001766 <PendSemaphore>:
**	Inidicates status of operation.  0 or positive is normal,
**		negative is error
**************************************************************************/

int PendSemaphore(ECB *e, int Timeout)	//wait for semaphore availiable
{
    1766:	ef 92       	push	r14
    1768:	ff 92       	push	r15
    176a:	1f 93       	push	r17
    176c:	cf 93       	push	r28
    176e:	df 93       	push	r29
    1770:	ec 01       	movw	r28, r24
    1772:	7b 01       	movw	r14, r22
	char sr;
	int retval;
	sr = Disable();
    1774:	0e 94 65 00 	call	0xca	; 0xca <Disable>
    1778:	18 2f       	mov	r17, r24
	if(e->EventCount > 0)	/*	is resource availiable?	*/
    177a:	8a 85       	ldd	r24, Y+10	; 0x0a
    177c:	9b 85       	ldd	r25, Y+11	; 0x0b
    177e:	18 16       	cp	r1, r24
    1780:	19 06       	cpc	r1, r25
    1782:	4c f4       	brge	.+18     	; 0x1796 <PendSemaphore+0x30>
	{
		/*	yes	*/
		--e->EventCount;
    1784:	01 97       	sbiw	r24, 0x01	; 1
    1786:	9b 87       	std	Y+11, r25	; 0x0b
    1788:	8a 87       	std	Y+10, r24	; 0x0a
		Enable(sr);
    178a:	81 2f       	mov	r24, r17
    178c:	0e 94 69 00 	call	0xd2	; 0xd2 <Enable>
		retval = EVENT_NOERROR;	//everything is peachy
    1790:	80 e0       	ldi	r24, 0x00	; 0
    1792:	90 e0       	ldi	r25, 0x00	; 0
    1794:	4e c0       	rjmp	.+156    	; 0x1832 <PendSemaphore+0xcc>
	}
	else
	{
		/*	no	*/
		--e->EventCount;
    1796:	01 97       	sbiw	r24, 0x01	; 1
    1798:	9b 87       	std	Y+11, r25	; 0x0b
    179a:	8a 87       	std	Y+10, r24	; 0x0a
		if(!e->task_h)		//make linked list of waiting tasks
    179c:	88 81       	ld	r24, Y
    179e:	99 81       	ldd	r25, Y+1	; 0x01
    17a0:	89 2b       	or	r24, r25
    17a2:	39 f4       	brne	.+14     	; 0x17b2 <PendSemaphore+0x4c>
			e->task_h = CurrentTask;
    17a4:	80 91 1a 02 	lds	r24, 0x021A	; 0x80021a <CurrentTask>
    17a8:	90 91 1b 02 	lds	r25, 0x021B	; 0x80021b <CurrentTask+0x1>
    17ac:	99 83       	std	Y+1, r25	; 0x01
    17ae:	88 83       	st	Y, r24
    17b0:	08 c0       	rjmp	.+16     	; 0x17c2 <PendSemaphore+0x5c>
		else
			e->task_t->next = CurrentTask;
    17b2:	ea 81       	ldd	r30, Y+2	; 0x02
    17b4:	fb 81       	ldd	r31, Y+3	; 0x03
    17b6:	80 91 1a 02 	lds	r24, 0x021A	; 0x80021a <CurrentTask>
    17ba:	90 91 1b 02 	lds	r25, 0x021B	; 0x80021b <CurrentTask+0x1>
    17be:	95 8b       	std	Z+21, r25	; 0x15
    17c0:	84 8b       	std	Z+20, r24	; 0x14
		e->task_t = CurrentTask;
    17c2:	e0 91 1a 02 	lds	r30, 0x021A	; 0x80021a <CurrentTask>
    17c6:	f0 91 1b 02 	lds	r31, 0x021B	; 0x80021b <CurrentTask+0x1>
    17ca:	fb 83       	std	Y+3, r31	; 0x03
    17cc:	ea 83       	std	Y+2, r30	; 0x02
		CurrentTask->status = EVENT_NOERROR;
    17ce:	11 86       	std	Z+9, r1	; 0x09
    17d0:	10 86       	std	Z+8, r1	; 0x08
		if(e->SemaphoreMode)
    17d2:	88 85       	ldd	r24, Y+8	; 0x08
    17d4:	99 85       	ldd	r25, Y+9	; 0x09
    17d6:	89 2b       	or	r24, r25
    17d8:	11 f0       	breq	.+4      	; 0x17de <PendSemaphore+0x78>
			CurrentTask->timeout = Timeout;
    17da:	f1 8a       	std	Z+17, r15	; 0x11
    17dc:	e0 8a       	std	Z+16, r14	; 0x10

		//swap out current task
		//Update the time stamp on current task
		CurrentTask->TimeStamp = TStamp;
    17de:	80 91 b6 02 	lds	r24, 0x02B6	; 0x8002b6 <TStamp>
    17e2:	90 91 b7 02 	lds	r25, 0x02B7	; 0x8002b7 <TStamp+0x1>
    17e6:	95 87       	std	Z+13, r25	; 0x0d
    17e8:	84 87       	std	Z+12, r24	; 0x0c
		//get highest priority task from queue
		if(Delete(&ActiveTasks,(void **)&NextTask))	
    17ea:	66 e1       	ldi	r22, 0x16	; 22
    17ec:	72 e0       	ldi	r23, 0x02	; 2
    17ee:	8c e0       	ldi	r24, 0x0C	; 12
    17f0:	92 e0       	ldi	r25, 0x02	; 2
    17f2:	85 d1       	rcall	.+778    	; 0x1afe <Delete>
    17f4:	89 2b       	or	r24, r25
    17f6:	61 f0       	breq	.+24     	; 0x1810 <PendSemaphore+0xaa>
		{
			//increment swaps on new task
			NextTask->TcbSwaps++;
    17f8:	e0 91 16 02 	lds	r30, 0x0216	; 0x800216 <NextTask>
    17fc:	f0 91 17 02 	lds	r31, 0x0217	; 0x800217 <NextTask+0x1>
    1800:	86 85       	ldd	r24, Z+14	; 0x0e
    1802:	97 85       	ldd	r25, Z+15	; 0x0f
    1804:	01 96       	adiw	r24, 0x01	; 1
    1806:	97 87       	std	Z+15, r25	; 0x0f
    1808:	86 87       	std	Z+14, r24	; 0x0e
			DoSwap();		//do context swap
    180a:	0e 94 67 03 	call	0x6ce	; 0x6ce <DoSwap>
    180e:	08 c0       	rjmp	.+16     	; 0x1820 <PendSemaphore+0xba>
		}
		else
		{
			//there were no tasks in the queue
			//set status to error and return
			CurrentTask->status = EVENT_NOTASKS;
    1810:	e0 91 1a 02 	lds	r30, 0x021A	; 0x80021a <CurrentTask>
    1814:	f0 91 1b 02 	lds	r31, 0x021B	; 0x80021b <CurrentTask+0x1>
    1818:	8f ef       	ldi	r24, 0xFF	; 255
    181a:	9f ef       	ldi	r25, 0xFF	; 255
    181c:	91 87       	std	Z+9, r25	; 0x09
    181e:	80 87       	std	Z+8, r24	; 0x08
		}
		//-----------------------
		// Pend is over, check status
		//-----------------------

		Enable(sr);
    1820:	81 2f       	mov	r24, r17
    1822:	0e 94 69 00 	call	0xd2	; 0xd2 <Enable>
		retval = CurrentTask->status;	//return this value
    1826:	e0 91 1a 02 	lds	r30, 0x021A	; 0x80021a <CurrentTask>
    182a:	f0 91 1b 02 	lds	r31, 0x021B	; 0x80021b <CurrentTask+0x1>
    182e:	80 85       	ldd	r24, Z+8	; 0x08
    1830:	91 85       	ldd	r25, Z+9	; 0x09
	}
	return retval;
}
    1832:	df 91       	pop	r29
    1834:	cf 91       	pop	r28
    1836:	1f 91       	pop	r17
    1838:	ff 90       	pop	r15
    183a:	ef 90       	pop	r14
    183c:	08 95       	ret

0000183e <PostSemaphore>:
**
** return value: 0 = No Error, negative indicates error
***************************************************************************/

int PostSemaphore(ECB *e, int Value)	//signal semaphore availiable
{
    183e:	ef 92       	push	r14
    1840:	ff 92       	push	r15
    1842:	1f 93       	push	r17
    1844:	cf 93       	push	r28
    1846:	df 93       	push	r29
    1848:	ec 01       	movw	r28, r24
    184a:	7b 01       	movw	r14, r22
	char sr=0;
	//------------------------------
	// do not disable IRQ if inside
	// of an interrupt routine
	//------------------------------
	if(!InterruptCount)sr = Disable();
    184c:	80 91 1e 02 	lds	r24, 0x021E	; 0x80021e <InterruptCount>
    1850:	90 91 1f 02 	lds	r25, 0x021F	; 0x80021f <InterruptCount+0x1>
    1854:	89 2b       	or	r24, r25
    1856:	21 f4       	brne	.+8      	; 0x1860 <PostSemaphore+0x22>
    1858:	0e 94 65 00 	call	0xca	; 0xca <Disable>
    185c:	18 2f       	mov	r17, r24
    185e:	01 c0       	rjmp	.+2      	; 0x1862 <PostSemaphore+0x24>
***************************************************************************/

int PostSemaphore(ECB *e, int Value)	//signal semaphore availiable
{
	TCB *t;
	char sr=0;
    1860:	10 e0       	ldi	r17, 0x00	; 0
	//------------------------------
	// do not disable IRQ if inside
	// of an interrupt routine
	//------------------------------
	if(!InterruptCount)sr = Disable();
	if(e->EventCount < 32766)	//is it going to overflow??
    1862:	8a 85       	ldd	r24, Y+10	; 0x0a
    1864:	9b 85       	ldd	r25, Y+11	; 0x0b
    1866:	8e 3f       	cpi	r24, 0xFE	; 254
    1868:	2f e7       	ldi	r18, 0x7F	; 127
    186a:	92 07       	cpc	r25, r18
    186c:	cc f5       	brge	.+114    	; 0x18e0 <PostSemaphore+0xa2>
	{
		if(e->EventCount >= 0)	//increment semaphore
    186e:	99 23       	and	r25, r25
    1870:	6c f0       	brlt	.+26     	; 0x188c <PostSemaphore+0x4e>
		{
			++e->EventCount;
    1872:	01 96       	adiw	r24, 0x01	; 1
    1874:	9b 87       	std	Y+11, r25	; 0x0b
    1876:	8a 87       	std	Y+10, r24	; 0x0a
			if(!InterruptCount)Enable(sr);
    1878:	c0 91 1e 02 	lds	r28, 0x021E	; 0x80021e <InterruptCount>
    187c:	d0 91 1f 02 	lds	r29, 0x021F	; 0x80021f <InterruptCount+0x1>
    1880:	20 97       	sbiw	r28, 0x00	; 0
    1882:	d1 f5       	brne	.+116    	; 0x18f8 <PostSemaphore+0xba>
    1884:	81 2f       	mov	r24, r17
    1886:	0e 94 69 00 	call	0xd2	; 0xd2 <Enable>
    188a:	3e c0       	rjmp	.+124    	; 0x1908 <PostSemaphore+0xca>
		}
		else
		{
			++e->EventCount;
    188c:	01 96       	adiw	r24, 0x01	; 1
    188e:	9b 87       	std	Y+11, r25	; 0x0b
    1890:	8a 87       	std	Y+10, r24	; 0x0a
			if(e->task_h)				//is there really a task waiting?
    1892:	e8 81       	ld	r30, Y
    1894:	f9 81       	ldd	r31, Y+1	; 0x01
    1896:	30 97       	sbiw	r30, 0x00	; 0
    1898:	c9 f0       	breq	.+50     	; 0x18cc <PostSemaphore+0x8e>
			{
				t = e->task_h;		//get first task in
				e->task_h = t->next;       //remove from list
    189a:	84 89       	ldd	r24, Z+20	; 0x14
    189c:	95 89       	ldd	r25, Z+21	; 0x15
    189e:	99 83       	std	Y+1, r25	; 0x01
    18a0:	88 83       	st	Y, r24
				t->next = (TCB *)0;
    18a2:	15 8a       	std	Z+21, r1	; 0x15
    18a4:	14 8a       	std	Z+20, r1	; 0x14
				t->status = Value;			//return this value
    18a6:	f1 86       	std	Z+9, r15	; 0x09
    18a8:	e0 86       	std	Z+8, r14	; 0x08
				Insert(&ActiveTasks,t);	//put task back onto active list
    18aa:	bf 01       	movw	r22, r30
    18ac:	8c e0       	ldi	r24, 0x0C	; 12
    18ae:	92 e0       	ldi	r25, 0x02	; 2
    18b0:	96 d0       	rcall	.+300    	; 0x19de <Insert>
				if(!InterruptCount)Enable(sr);
    18b2:	80 91 1e 02 	lds	r24, 0x021E	; 0x80021e <InterruptCount>
    18b6:	90 91 1f 02 	lds	r25, 0x021F	; 0x80021f <InterruptCount+0x1>
    18ba:	89 2b       	or	r24, r25
    18bc:	19 f4       	brne	.+6      	; 0x18c4 <PostSemaphore+0x86>
    18be:	81 2f       	mov	r24, r17
    18c0:	0e 94 69 00 	call	0xd2	; 0xd2 <Enable>
				Yield();
    18c4:	ae d6       	rcall	.+3420   	; 0x2622 <Yield>
			else
			{
				if(!InterruptCount)Enable(sr);
			}
		}
		return EVENT_NOERROR;
    18c6:	c0 e0       	ldi	r28, 0x00	; 0
    18c8:	d0 e0       	ldi	r29, 0x00	; 0
    18ca:	1e c0       	rjmp	.+60     	; 0x1908 <PostSemaphore+0xca>
				if(!InterruptCount)Enable(sr);
				Yield();
			}
			else
			{
				if(!InterruptCount)Enable(sr);
    18cc:	c0 91 1e 02 	lds	r28, 0x021E	; 0x80021e <InterruptCount>
    18d0:	d0 91 1f 02 	lds	r29, 0x021F	; 0x80021f <InterruptCount+0x1>
    18d4:	20 97       	sbiw	r28, 0x00	; 0
    18d6:	99 f4       	brne	.+38     	; 0x18fe <PostSemaphore+0xc0>
    18d8:	81 2f       	mov	r24, r17
    18da:	0e 94 69 00 	call	0xd2	; 0xd2 <Enable>
    18de:	14 c0       	rjmp	.+40     	; 0x1908 <PostSemaphore+0xca>
		}
		return EVENT_NOERROR;
	}
	else
	{
		if(!InterruptCount)Enable(sr);
    18e0:	80 91 1e 02 	lds	r24, 0x021E	; 0x80021e <InterruptCount>
    18e4:	90 91 1f 02 	lds	r25, 0x021F	; 0x80021f <InterruptCount+0x1>
    18e8:	89 2b       	or	r24, r25
    18ea:	61 f4       	brne	.+24     	; 0x1904 <PostSemaphore+0xc6>
    18ec:	81 2f       	mov	r24, r17
    18ee:	0e 94 69 00 	call	0xd2	; 0xd2 <Enable>
		return(EVENT_OVERFLOW);
    18f2:	ce ef       	ldi	r28, 0xFE	; 254
    18f4:	df ef       	ldi	r29, 0xFF	; 255
    18f6:	08 c0       	rjmp	.+16     	; 0x1908 <PostSemaphore+0xca>
			else
			{
				if(!InterruptCount)Enable(sr);
			}
		}
		return EVENT_NOERROR;
    18f8:	c0 e0       	ldi	r28, 0x00	; 0
    18fa:	d0 e0       	ldi	r29, 0x00	; 0
    18fc:	05 c0       	rjmp	.+10     	; 0x1908 <PostSemaphore+0xca>
    18fe:	c0 e0       	ldi	r28, 0x00	; 0
    1900:	d0 e0       	ldi	r29, 0x00	; 0
    1902:	02 c0       	rjmp	.+4      	; 0x1908 <PostSemaphore+0xca>
	}
	else
	{
		if(!InterruptCount)Enable(sr);
		return(EVENT_OVERFLOW);
    1904:	ce ef       	ldi	r28, 0xFE	; 254
    1906:	df ef       	ldi	r29, 0xFF	; 255
	}
}
    1908:	ce 01       	movw	r24, r28
    190a:	df 91       	pop	r29
    190c:	cf 91       	pop	r28
    190e:	1f 91       	pop	r17
    1910:	ff 90       	pop	r15
    1912:	ef 90       	pop	r14
    1914:	08 95       	ret

00001916 <InitPQ>:
{
	void *pTemp;

	pTemp = *ppS1;
	*ppS1 = *ppS2;
	*ppS2 = pTemp;
    1916:	cf 93       	push	r28
    1918:	df 93       	push	r29
    191a:	ec 01       	movw	r28, r24
    191c:	59 83       	std	Y+1, r21	; 0x01
    191e:	48 83       	st	Y, r20
    1920:	1b 82       	std	Y+3, r1	; 0x03
    1922:	1a 82       	std	Y+2, r1	; 0x02
    1924:	7d 83       	std	Y+5, r23	; 0x05
    1926:	6c 83       	std	Y+4, r22	; 0x04
    1928:	cb 01       	movw	r24, r22
    192a:	88 0f       	add	r24, r24
    192c:	99 1f       	adc	r25, r25
    192e:	a1 d9       	rcall	.-3262   	; 0xc72 <malloc>
    1930:	99 87       	std	Y+9, r25	; 0x09
    1932:	88 87       	std	Y+8, r24	; 0x08
    1934:	02 97       	sbiw	r24, 0x02	; 2
    1936:	9f 83       	std	Y+7, r25	; 0x07
    1938:	8e 83       	std	Y+6, r24	; 0x06
    193a:	df 91       	pop	r29
    193c:	cf 91       	pop	r28
    193e:	08 95       	ret

00001940 <ReheapUp>:
**
**	parameter:
**		q......pointer to priority queue
***************************************************/
void ReheapUp(PQ* q)
{
    1940:	cf 92       	push	r12
    1942:	df 92       	push	r13
    1944:	ef 92       	push	r14
    1946:	ff 92       	push	r15
    1948:	0f 93       	push	r16
    194a:	1f 93       	push	r17
    194c:	cf 93       	push	r28
    194e:	df 93       	push	r29
    1950:	6c 01       	movw	r12, r24
	void **ppChild;	//pointer to child

	//-------------------------
	// Index of child node
	//-------------------------
	child = q->m_nItems - 1;
    1952:	dc 01       	movw	r26, r24
    1954:	12 96       	adiw	r26, 0x02	; 2
    1956:	8d 91       	ld	r24, X+
    1958:	9c 91       	ld	r25, X
    195a:	13 97       	sbiw	r26, 0x03	; 3
    195c:	ec 01       	movw	r28, r24
    195e:	21 97       	sbiw	r28, 0x01	; 1
	//-------------------------
	// Index of parent node
	// Keep looping while
	// parent is valid (>= 0)
	//-------------------------
	while((parent = (child - 1)/2) >= 0)
    1960:	02 97       	sbiw	r24, 0x02	; 2
    1962:	7c 01       	movw	r14, r24
    1964:	1a f4       	brpl	.+6      	; 0x196c <ReheapUp+0x2c>
    1966:	bf ef       	ldi	r27, 0xFF	; 255
    1968:	eb 1a       	sub	r14, r27
    196a:	fb 0a       	sbc	r15, r27
    196c:	f5 94       	asr	r15
    196e:	e7 94       	ror	r14
    1970:	ff 20       	and	r15, r15
    1972:	14 f4       	brge	.+4      	; 0x1978 <ReheapUp+0x38>
    1974:	2b c0       	rjmp	.+86     	; 0x19cc <ReheapUp+0x8c>
    1976:	7c 01       	movw	r14, r24
	{
		//-----------------------------
		// get pointers to parent
		// and child nodes
		//------------------------------
		ppChild = &q->m_ppHeap[child];
    1978:	f6 01       	movw	r30, r12
    197a:	80 85       	ldd	r24, Z+8	; 0x08
    197c:	91 85       	ldd	r25, Z+9	; 0x09
    197e:	cc 0f       	add	r28, r28
    1980:	dd 1f       	adc	r29, r29
    1982:	c8 0f       	add	r28, r24
    1984:	d9 1f       	adc	r29, r25
		ppParent = &q->m_ppHeap[parent];
    1986:	87 01       	movw	r16, r14
    1988:	00 0f       	add	r16, r16
    198a:	11 1f       	adc	r17, r17
    198c:	08 0f       	add	r16, r24
    198e:	19 1f       	adc	r17, r25
		// If the priority of the parent
		// is greater than or equal to
		// the priority of the child,
		// we are done, break from the loop
		//---------------------------------
		if( (*q->m_Cmp)(ppParent,ppChild) >= 0)
    1990:	01 90       	ld	r0, Z+
    1992:	f0 81       	ld	r31, Z
    1994:	e0 2d       	mov	r30, r0
    1996:	be 01       	movw	r22, r28
    1998:	c8 01       	movw	r24, r16
    199a:	09 95       	icall
    199c:	99 23       	and	r25, r25
    199e:	b4 f4       	brge	.+44     	; 0x19cc <ReheapUp+0x8c>

void swap(void **ppS1,void **ppS2)
{
	void *pTemp;

	pTemp = *ppS1;
    19a0:	d8 01       	movw	r26, r16
    19a2:	8d 91       	ld	r24, X+
    19a4:	9c 91       	ld	r25, X
    19a6:	11 97       	sbiw	r26, 0x01	; 1
	*ppS1 = *ppS2;
    19a8:	28 81       	ld	r18, Y
    19aa:	39 81       	ldd	r19, Y+1	; 0x01
    19ac:	2d 93       	st	X+, r18
    19ae:	3c 93       	st	X, r19
	*ppS2 = pTemp;
    19b0:	99 83       	std	Y+1, r25	; 0x01
    19b2:	88 83       	st	Y, r24
	//-------------------------
	// Index of parent node
	// Keep looping while
	// parent is valid (>= 0)
	//-------------------------
	while((parent = (child - 1)/2) >= 0)
    19b4:	97 01       	movw	r18, r14
    19b6:	21 50       	subi	r18, 0x01	; 1
    19b8:	31 09       	sbc	r19, r1
    19ba:	c9 01       	movw	r24, r18
    19bc:	99 23       	and	r25, r25
    19be:	0c f4       	brge	.+2      	; 0x19c2 <ReheapUp+0x82>
    19c0:	01 96       	adiw	r24, 0x01	; 1
    19c2:	95 95       	asr	r25
    19c4:	87 95       	ror	r24
    19c6:	e7 01       	movw	r28, r14
    19c8:	99 23       	and	r25, r25
    19ca:	ac f6       	brge	.-86     	; 0x1976 <ReheapUp+0x36>
		//----------------------------------
		// the new parent is the child
		//----------------------------------
		child = parent;
	}	//end of while statement
}
    19cc:	df 91       	pop	r29
    19ce:	cf 91       	pop	r28
    19d0:	1f 91       	pop	r17
    19d2:	0f 91       	pop	r16
    19d4:	ff 90       	pop	r15
    19d6:	ef 90       	pop	r14
    19d8:	df 90       	pop	r13
    19da:	cf 90       	pop	r12
    19dc:	08 95       	ret

000019de <Insert>:
//		space available in queue
//
//---------------------------------------------------------
//
int Insert(PQ* q,void *item)
{
    19de:	cf 93       	push	r28
    19e0:	df 93       	push	r29
	int space_avail;

	space_avail = q->m_Maxitems - q->m_nItems;
    19e2:	fc 01       	movw	r30, r24
    19e4:	22 81       	ldd	r18, Z+2	; 0x02
    19e6:	33 81       	ldd	r19, Z+3	; 0x03
    19e8:	c4 81       	ldd	r28, Z+4	; 0x04
    19ea:	d5 81       	ldd	r29, Z+5	; 0x05
    19ec:	c2 1b       	sub	r28, r18
    19ee:	d3 0b       	sbc	r29, r19
	if((space_avail) > 0)
    19f0:	1c 16       	cp	r1, r28
    19f2:	1d 06       	cpc	r1, r29
    19f4:	94 f4       	brge	.+36     	; 0x1a1a <Insert+0x3c>
    19f6:	dc 01       	movw	r26, r24
	{
		++q->m_nItems;
    19f8:	2f 5f       	subi	r18, 0xFF	; 255
    19fa:	3f 4f       	sbci	r19, 0xFF	; 255
    19fc:	33 83       	std	Z+3, r19	; 0x03
    19fe:	22 83       	std	Z+2, r18	; 0x02
		*(++q->m_ppBottom) = item;
    1a00:	06 80       	ldd	r0, Z+6	; 0x06
    1a02:	f7 81       	ldd	r31, Z+7	; 0x07
    1a04:	e0 2d       	mov	r30, r0
    1a06:	9f 01       	movw	r18, r30
    1a08:	2e 5f       	subi	r18, 0xFE	; 254
    1a0a:	3f 4f       	sbci	r19, 0xFF	; 255
    1a0c:	17 96       	adiw	r26, 0x07	; 7
    1a0e:	3c 93       	st	X, r19
    1a10:	2e 93       	st	-X, r18
    1a12:	16 97       	sbiw	r26, 0x06	; 6
    1a14:	73 83       	std	Z+3, r23	; 0x03
    1a16:	62 83       	std	Z+2, r22	; 0x02
		ReheapUp(q);
    1a18:	93 df       	rcall	.-218    	; 0x1940 <ReheapUp>
	}
	return space_avail;
}
    1a1a:	ce 01       	movw	r24, r28
    1a1c:	df 91       	pop	r29
    1a1e:	cf 91       	pop	r28
    1a20:	08 95       	ret

00001a22 <ReheapDown>:
**	parameters:
**		q........pointer to the priority queue
**
***********************************************/
void ReheapDown(PQ* q)
{
    1a22:	6f 92       	push	r6
    1a24:	7f 92       	push	r7
    1a26:	8f 92       	push	r8
    1a28:	9f 92       	push	r9
    1a2a:	af 92       	push	r10
    1a2c:	bf 92       	push	r11
    1a2e:	cf 92       	push	r12
    1a30:	df 92       	push	r13
    1a32:	ef 92       	push	r14
    1a34:	ff 92       	push	r15
    1a36:	0f 93       	push	r16
    1a38:	1f 93       	push	r17
    1a3a:	cf 93       	push	r28
    1a3c:	df 93       	push	r29
	void **ppParent;	//pointer to parent
	void **ppChild;   //pointer to child
	void **ppSibling;	//pointer to sibling
	void **ppHeap;	//pointer to m_ppHeap

	ppHeap = q->m_ppHeap;
    1a3e:	dc 01       	movw	r26, r24
    1a40:	18 96       	adiw	r26, 0x08	; 8
    1a42:	ad 90       	ld	r10, X+
    1a44:	bc 90       	ld	r11, X
    1a46:	19 97       	sbiw	r26, 0x09	; 9
	for(parent=0,child=1;child < q->m_nItems;)
    1a48:	12 96       	adiw	r26, 0x02	; 2
    1a4a:	2d 91       	ld	r18, X+
    1a4c:	3c 91       	ld	r19, X
    1a4e:	13 97       	sbiw	r26, 0x03	; 3
    1a50:	22 30       	cpi	r18, 0x02	; 2
    1a52:	31 05       	cpc	r19, r1
    1a54:	0c f4       	brge	.+2      	; 0x1a58 <ReheapDown+0x36>
    1a56:	44 c0       	rjmp	.+136    	; 0x1ae0 <ReheapDown+0xbe>
    1a58:	6c 01       	movw	r12, r24
    1a5a:	ee 24       	eor	r14, r14
    1a5c:	e3 94       	inc	r14
    1a5e:	f1 2c       	mov	r15, r1
    1a60:	c0 e0       	ldi	r28, 0x00	; 0
    1a62:	d0 e0       	ldi	r29, 0x00	; 0
    1a64:	02 c0       	rjmp	.+4      	; 0x1a6a <ReheapDown+0x48>
		//----------------------------------
		swap(ppParent,ppChild);
		//----------------------------------
		// new parent is the child
		//----------------------------------
		parent = child;
    1a66:	e7 01       	movw	r28, r14
		//----------------------------------
		// calculate new child index
		//----------------------------------
		child = parent * 2 + 1;
    1a68:	7c 01       	movw	r14, r24
	for(parent=0,child=1;child < q->m_nItems;)
	{
		//----------------------------------
		// get pointer to parent and child nodes
		//----------------------------------
		ppParent = &ppHeap[parent];
    1a6a:	cc 0f       	add	r28, r28
    1a6c:	dd 1f       	adc	r29, r29
    1a6e:	ca 0d       	add	r28, r10
    1a70:	db 1d       	adc	r29, r11
		ppChild = &ppHeap[child];
    1a72:	87 01       	movw	r16, r14
    1a74:	00 0f       	add	r16, r16
    1a76:	11 1f       	adc	r17, r17
    1a78:	0a 0d       	add	r16, r10
    1a7a:	1b 1d       	adc	r17, r11
		//-----------------------------------
		// is there a possible sibling to
		// the child node?
		//------------------------------------
		if(child + 1 < q->m_nItems)
    1a7c:	37 01       	movw	r6, r14
    1a7e:	bf ef       	ldi	r27, 0xFF	; 255
    1a80:	6b 1a       	sub	r6, r27
    1a82:	7b 0a       	sbc	r7, r27
    1a84:	62 16       	cp	r6, r18
    1a86:	73 06       	cpc	r7, r19
    1a88:	74 f4       	brge	.+28     	; 0x1aa6 <ReheapDown+0x84>
		{
			//---------------------------------
			// get a pointer to the sibling
			//---------------------------------
			ppSibling = ppChild + 1;
    1a8a:	48 01       	movw	r8, r16
    1a8c:	e2 e0       	ldi	r30, 0x02	; 2
    1a8e:	8e 0e       	add	r8, r30
    1a90:	91 1c       	adc	r9, r1
			//---------------------------------
			// is priority of child less than
			// that of the sibling?
			//---------------------------------
			if((*q->m_Cmp)(ppChild,ppSibling) < 0)
    1a92:	d6 01       	movw	r26, r12
    1a94:	ed 91       	ld	r30, X+
    1a96:	fc 91       	ld	r31, X
    1a98:	b4 01       	movw	r22, r8
    1a9a:	c8 01       	movw	r24, r16
    1a9c:	09 95       	icall
    1a9e:	99 23       	and	r25, r25
    1aa0:	14 f4       	brge	.+4      	; 0x1aa6 <ReheapDown+0x84>
			{
				//--------------------------------
				// make the child equal to sibling
				//---------------------------------
				ppChild = ppSibling;
    1aa2:	84 01       	movw	r16, r8
				//--------------------------------
				// make child index equal to that
				// of the sibling
				//--------------------------------
				child++;
    1aa4:	73 01       	movw	r14, r6
		//-------------------------------------
		// if the priority of the parent is
		// greater than or equal to the child
		// we are done, break out of the loop
		//------------------------------------
		if((*q->m_Cmp)(ppParent,ppChild) >= 0)
    1aa6:	d6 01       	movw	r26, r12
    1aa8:	ed 91       	ld	r30, X+
    1aaa:	fc 91       	ld	r31, X
    1aac:	b8 01       	movw	r22, r16
    1aae:	ce 01       	movw	r24, r28
    1ab0:	09 95       	icall
    1ab2:	99 23       	and	r25, r25
    1ab4:	ac f4       	brge	.+42     	; 0x1ae0 <ReheapDown+0xbe>

void swap(void **ppS1,void **ppS2)
{
	void *pTemp;

	pTemp = *ppS1;
    1ab6:	88 81       	ld	r24, Y
    1ab8:	99 81       	ldd	r25, Y+1	; 0x01
	*ppS1 = *ppS2;
    1aba:	f8 01       	movw	r30, r16
    1abc:	20 81       	ld	r18, Z
    1abe:	31 81       	ldd	r19, Z+1	; 0x01
    1ac0:	39 83       	std	Y+1, r19	; 0x01
    1ac2:	28 83       	st	Y, r18
	*ppS2 = pTemp;
    1ac4:	91 83       	std	Z+1, r25	; 0x01
    1ac6:	80 83       	st	Z, r24
		//----------------------------------
		parent = child;
		//----------------------------------
		// calculate new child index
		//----------------------------------
		child = parent * 2 + 1;
    1ac8:	c7 01       	movw	r24, r14
    1aca:	88 0f       	add	r24, r24
    1acc:	99 1f       	adc	r25, r25
    1ace:	01 96       	adiw	r24, 0x01	; 1
	void **ppChild;   //pointer to child
	void **ppSibling;	//pointer to sibling
	void **ppHeap;	//pointer to m_ppHeap

	ppHeap = q->m_ppHeap;
	for(parent=0,child=1;child < q->m_nItems;)
    1ad0:	d6 01       	movw	r26, r12
    1ad2:	12 96       	adiw	r26, 0x02	; 2
    1ad4:	2d 91       	ld	r18, X+
    1ad6:	3c 91       	ld	r19, X
    1ad8:	13 97       	sbiw	r26, 0x03	; 3
    1ada:	82 17       	cp	r24, r18
    1adc:	93 07       	cpc	r25, r19
    1ade:	1c f2       	brlt	.-122    	; 0x1a66 <ReheapDown+0x44>
		//----------------------------------
		// calculate new child index
		//----------------------------------
		child = parent * 2 + 1;
	}	//end of for loop
}
    1ae0:	df 91       	pop	r29
    1ae2:	cf 91       	pop	r28
    1ae4:	1f 91       	pop	r17
    1ae6:	0f 91       	pop	r16
    1ae8:	ff 90       	pop	r15
    1aea:	ef 90       	pop	r14
    1aec:	df 90       	pop	r13
    1aee:	cf 90       	pop	r12
    1af0:	bf 90       	pop	r11
    1af2:	af 90       	pop	r10
    1af4:	9f 90       	pop	r9
    1af6:	8f 90       	pop	r8
    1af8:	7f 90       	pop	r7
    1afa:	6f 90       	pop	r6
    1afc:	08 95       	ret

00001afe <Delete>:
// return value:
//		returns slots in use in the queue
//---------------------------------------------------------

int Delete(PQ* q,void **target)
{
    1afe:	cf 93       	push	r28
    1b00:	df 93       	push	r29
	int SlotsInUse;

	if((SlotsInUse = q->m_nItems) > 0)
    1b02:	dc 01       	movw	r26, r24
    1b04:	12 96       	adiw	r26, 0x02	; 2
    1b06:	cd 91       	ld	r28, X+
    1b08:	dc 91       	ld	r29, X
    1b0a:	13 97       	sbiw	r26, 0x03	; 3
    1b0c:	1c 16       	cp	r1, r28
    1b0e:	1d 06       	cpc	r1, r29
    1b10:	ec f4       	brge	.+58     	; 0x1b4c <Delete+0x4e>
    1b12:	fc 01       	movw	r30, r24
	{
		*target = *q->m_ppHeap;		//get item from top of m_ppHeap
    1b14:	a0 85       	ldd	r26, Z+8	; 0x08
    1b16:	b1 85       	ldd	r27, Z+9	; 0x09
    1b18:	8d 91       	ld	r24, X+
    1b1a:	9c 91       	ld	r25, X
    1b1c:	db 01       	movw	r26, r22
    1b1e:	8d 93       	st	X+, r24
    1b20:	9c 93       	st	X, r25
		*q->m_ppHeap = *q->m_ppBottom--;
    1b22:	80 85       	ldd	r24, Z+8	; 0x08
    1b24:	91 85       	ldd	r25, Z+9	; 0x09
    1b26:	a6 81       	ldd	r26, Z+6	; 0x06
    1b28:	b7 81       	ldd	r27, Z+7	; 0x07
    1b2a:	9d 01       	movw	r18, r26
    1b2c:	22 50       	subi	r18, 0x02	; 2
    1b2e:	31 09       	sbc	r19, r1
    1b30:	37 83       	std	Z+7, r19	; 0x07
    1b32:	26 83       	std	Z+6, r18	; 0x06
    1b34:	2d 91       	ld	r18, X+
    1b36:	3c 91       	ld	r19, X
    1b38:	dc 01       	movw	r26, r24
    1b3a:	2d 93       	st	X+, r18
    1b3c:	3c 93       	st	X, r19
		--q->m_nItems;
    1b3e:	82 81       	ldd	r24, Z+2	; 0x02
    1b40:	93 81       	ldd	r25, Z+3	; 0x03
    1b42:	01 97       	sbiw	r24, 0x01	; 1
    1b44:	93 83       	std	Z+3, r25	; 0x03
    1b46:	82 83       	std	Z+2, r24	; 0x02
		ReheapDown(q);
    1b48:	cf 01       	movw	r24, r30
    1b4a:	6b df       	rcall	.-298    	; 0x1a22 <ReheapDown>
	}
	return SlotsInUse;
}
    1b4c:	ce 01       	movw	r24, r28
    1b4e:	df 91       	pop	r29
    1b50:	cf 91       	pop	r28
    1b52:	08 95       	ret

00001b54 <Replace>:
//	return value:
//		returns number of slots in use
//-----------------------------------------------------------

int Replace(PQ* q,void **target,void *item)
{
    1b54:	cf 92       	push	r12
    1b56:	df 92       	push	r13
    1b58:	ef 92       	push	r14
    1b5a:	ff 92       	push	r15
    1b5c:	0f 93       	push	r16
    1b5e:	1f 93       	push	r17
    1b60:	cf 93       	push	r28
    1b62:	df 93       	push	r29
    1b64:	00 d0       	rcall	.+0      	; 0x1b66 <Replace+0x12>
    1b66:	cd b7       	in	r28, 0x3d	; 61
    1b68:	de b7       	in	r29, 0x3e	; 62
    1b6a:	5a 83       	std	Y+2, r21	; 0x02
    1b6c:	49 83       	std	Y+1, r20	; 0x01
	int SlotsInUse;

	if((SlotsInUse = q->m_nItems) > 0)
    1b6e:	dc 01       	movw	r26, r24
    1b70:	12 96       	adiw	r26, 0x02	; 2
    1b72:	cd 90       	ld	r12, X+
    1b74:	dc 90       	ld	r13, X
    1b76:	13 97       	sbiw	r26, 0x03	; 3
    1b78:	1c 14       	cp	r1, r12
    1b7a:	1d 04       	cpc	r1, r13
    1b7c:	4c f5       	brge	.+82     	; 0x1bd0 <Replace+0x7c>
    1b7e:	7b 01       	movw	r14, r22
    1b80:	8c 01       	movw	r16, r24
	{
		if ((*q->m_Cmp)(&item,q->m_ppHeap) > 0)	//only replace if priority is less
    1b82:	fc 01       	movw	r30, r24
    1b84:	60 85       	ldd	r22, Z+8	; 0x08
    1b86:	71 85       	ldd	r23, Z+9	; 0x09
    1b88:	01 90       	ld	r0, Z+
    1b8a:	f0 81       	ld	r31, Z
    1b8c:	e0 2d       	mov	r30, r0
    1b8e:	ce 01       	movw	r24, r28
    1b90:	01 96       	adiw	r24, 0x01	; 1
    1b92:	09 95       	icall
    1b94:	18 16       	cp	r1, r24
    1b96:	19 06       	cpc	r1, r25
    1b98:	34 f4       	brge	.+12     	; 0x1ba6 <Replace+0x52>
		{
			*target = item;		//item is higher priority
    1b9a:	89 81       	ldd	r24, Y+1	; 0x01
    1b9c:	9a 81       	ldd	r25, Y+2	; 0x02
    1b9e:	d7 01       	movw	r26, r14
    1ba0:	8d 93       	st	X+, r24
    1ba2:	9c 93       	st	X, r25
    1ba4:	1a c0       	rjmp	.+52     	; 0x1bda <Replace+0x86>
		}
		else
		{
			*target = *q->m_ppHeap;
    1ba6:	d8 01       	movw	r26, r16
    1ba8:	18 96       	adiw	r26, 0x08	; 8
    1baa:	ed 91       	ld	r30, X+
    1bac:	fc 91       	ld	r31, X
    1bae:	19 97       	sbiw	r26, 0x09	; 9
    1bb0:	80 81       	ld	r24, Z
    1bb2:	91 81       	ldd	r25, Z+1	; 0x01
    1bb4:	f7 01       	movw	r30, r14
    1bb6:	91 83       	std	Z+1, r25	; 0x01
    1bb8:	80 83       	st	Z, r24
			*q->m_ppHeap = item;
    1bba:	18 96       	adiw	r26, 0x08	; 8
    1bbc:	ed 91       	ld	r30, X+
    1bbe:	fc 91       	ld	r31, X
    1bc0:	19 97       	sbiw	r26, 0x09	; 9
    1bc2:	89 81       	ldd	r24, Y+1	; 0x01
    1bc4:	9a 81       	ldd	r25, Y+2	; 0x02
    1bc6:	91 83       	std	Z+1, r25	; 0x01
    1bc8:	80 83       	st	Z, r24
			ReheapDown(q);
    1bca:	c8 01       	movw	r24, r16
    1bcc:	2a df       	rcall	.-428    	; 0x1a22 <ReheapDown>
    1bce:	05 c0       	rjmp	.+10     	; 0x1bda <Replace+0x86>
		}
	}
	else
		*target = item;
    1bd0:	89 81       	ldd	r24, Y+1	; 0x01
    1bd2:	9a 81       	ldd	r25, Y+2	; 0x02
    1bd4:	db 01       	movw	r26, r22
    1bd6:	8d 93       	st	X+, r24
    1bd8:	9c 93       	st	X, r25
	return SlotsInUse;
}
    1bda:	c6 01       	movw	r24, r12
    1bdc:	0f 90       	pop	r0
    1bde:	0f 90       	pop	r0
    1be0:	df 91       	pop	r29
    1be2:	cf 91       	pop	r28
    1be4:	1f 91       	pop	r17
    1be6:	0f 91       	pop	r16
    1be8:	ff 90       	pop	r15
    1bea:	ef 90       	pop	r14
    1bec:	df 90       	pop	r13
    1bee:	cf 90       	pop	r12
    1bf0:	08 95       	ret

00001bf2 <RStatus>:
*******************************************************/
static int RStatus(IOCB *pIOCB,int m)
{
	int rv=0;

	SERIAL *pI = (SERIAL *)pIOCB->p;
    1bf2:	dc 01       	movw	r26, r24
    1bf4:	18 96       	adiw	r26, 0x08	; 8
    1bf6:	ed 91       	ld	r30, X+
    1bf8:	fc 91       	ld	r31, X
    1bfa:	19 97       	sbiw	r26, 0x09	; 9
	switch(m)
    1bfc:	61 15       	cp	r22, r1
    1bfe:	71 05       	cpc	r23, r1
    1c00:	21 f0       	breq	.+8      	; 0x1c0a <RStatus+0x18>
    1c02:	61 30       	cpi	r22, 0x01	; 1
    1c04:	71 05       	cpc	r23, r1
    1c06:	21 f0       	breq	.+8      	; 0x1c10 <RStatus+0x1e>
    1c08:	0b c0       	rjmp	.+22     	; 0x1c20 <RStatus+0x2e>
	{
		case RS232_STAT_NREC:
			rv = pI->Rx.nChar;
    1c0a:	84 81       	ldd	r24, Z+4	; 0x04
    1c0c:	95 81       	ldd	r25, Z+5	; 0x05
			break;
    1c0e:	08 95       	ret
	Return Value:
		returns result of status operation
*******************************************************/
static int RStatus(IOCB *pIOCB,int m)
{
	int rv=0;
    1c10:	81 e0       	ldi	r24, 0x01	; 1
    1c12:	90 e0       	ldi	r25, 0x00	; 0
    1c14:	24 89       	ldd	r18, Z+20	; 0x14
    1c16:	35 89       	ldd	r19, Z+21	; 0x15
    1c18:	23 2b       	or	r18, r19
    1c1a:	21 f0       	breq	.+8      	; 0x1c24 <RStatus+0x32>
    1c1c:	80 e0       	ldi	r24, 0x00	; 0
    1c1e:	08 95       	ret
    1c20:	80 e0       	ldi	r24, 0x00	; 0
    1c22:	90 e0       	ldi	r25, 0x00	; 0
			if(pI->Tx.nChar == 0) rv = 1;
			else rv = 0;
			break;
	}
	return rv;	//return number of chars in receive buffer
}
    1c24:	08 95       	ret

00001c26 <RXIO>:
	return value
		depends on operation
			cmd=RS232_XIO_SETBAUD:returns 0
****************************************************/
static int RXIO(IOCB *pIOCB,int cmd,void *pP)
{
    1c26:	cf 93       	push	r28
    1c28:	df 93       	push	r29
	long *pL;
	SERIAL *pI = (SERIAL *)pIOCB->p;

	int rv = 0;
	switch(cmd)
    1c2a:	67 2b       	or	r22, r23
    1c2c:	c1 f4       	brne	.+48     	; 0x1c5e <RXIO+0x38>
	{
		case RS232_XIO_SETBAUD:
			pL = (long *)pP;
			*pI->regs->pUBRR = CalculateBaudRate(*pL);
    1c2e:	dc 01       	movw	r26, r24
    1c30:	18 96       	adiw	r26, 0x08	; 8
    1c32:	ed 91       	ld	r30, X+
    1c34:	fc 91       	ld	r31, X
    1c36:	19 97       	sbiw	r26, 0x09	; 9
    1c38:	00 a0       	ldd	r0, Z+32	; 0x20
    1c3a:	f1 a1       	ldd	r31, Z+33	; 0x21
    1c3c:	e0 2d       	mov	r30, r0
    1c3e:	c0 85       	ldd	r28, Z+8	; 0x08
    1c40:	d1 85       	ldd	r29, Z+9	; 0x09
    1c42:	fa 01       	movw	r30, r20
    1c44:	20 81       	ld	r18, Z
    1c46:	31 81       	ldd	r19, Z+1	; 0x01
    1c48:	42 81       	ldd	r20, Z+2	; 0x02
    1c4a:	53 81       	ldd	r21, Z+3	; 0x03
    1c4c:	60 e4       	ldi	r22, 0x40	; 64
    1c4e:	72 e4       	ldi	r23, 0x42	; 66
    1c50:	8f e0       	ldi	r24, 0x0F	; 15
    1c52:	90 e0       	ldi	r25, 0x00	; 0
    1c54:	10 d5       	rcall	.+2592   	; 0x2676 <__divmodsi4>
    1c56:	21 50       	subi	r18, 0x01	; 1
    1c58:	31 09       	sbc	r19, r1
    1c5a:	39 83       	std	Y+1, r19	; 0x01
    1c5c:	28 83       	st	Y, r18
			break;
	}
	return rv;
}
    1c5e:	80 e0       	ldi	r24, 0x00	; 0
    1c60:	90 e0       	ldi	r25, 0x00	; 0
    1c62:	df 91       	pop	r29
    1c64:	cf 91       	pop	r28
    1c66:	08 95       	ret

00001c68 <RInit>:
	return value:
		returns 0
***************************************************/
int RInit(void)
{
	CioAddHandler("COM",&RJump);
    1c68:	6a e1       	ldi	r22, 0x1A	; 26
    1c6a:	71 e0       	ldi	r23, 0x01	; 1
    1c6c:	87 e7       	ldi	r24, 0x77	; 119
    1c6e:	91 e0       	ldi	r25, 0x01	; 1
    1c70:	0e 94 9d 00 	call	0x13a	; 0x13a <CioAddHandler>
	return 0;
}
    1c74:	80 e0       	ldi	r24, 0x00	; 0
    1c76:	90 e0       	ldi	r25, 0x00	; 0
    1c78:	08 95       	ret

00001c7a <RxIsr>:
	parameters:
		pI.....pointer to serial descriptor
************************************************************/

static void RxIsr(SERIAL *pI)
{
    1c7a:	cf 93       	push	r28
    1c7c:	df 93       	push	r29
    1c7e:	ec 01       	movw	r28, r24
	while(*pI->regs->pUCSRnA & BIT(RXC0))	//while chars available
    1c80:	e8 a1       	ldd	r30, Y+32	; 0x20
    1c82:	f9 a1       	ldd	r31, Y+33	; 0x21
    1c84:	a2 81       	ldd	r26, Z+2	; 0x02
    1c86:	b3 81       	ldd	r27, Z+3	; 0x03
    1c88:	8c 91       	ld	r24, X
    1c8a:	88 23       	and	r24, r24
    1c8c:	b4 f5       	brge	.+108    	; 0x1cfa <RxIsr+0x80>
	{
		if(*pI->regs->pUCSRnA & (BIT(DOR0) ) )  RSerrors++;
    1c8e:	83 ff       	sbrs	r24, 3
    1c90:	09 c0       	rjmp	.+18     	; 0x1ca4 <RxIsr+0x2a>
    1c92:	80 91 b4 01 	lds	r24, 0x01B4	; 0x8001b4 <RSerrors>
    1c96:	90 91 b5 01 	lds	r25, 0x01B5	; 0x8001b5 <RSerrors+0x1>
    1c9a:	01 96       	adiw	r24, 0x01	; 1
    1c9c:	90 93 b5 01 	sts	0x01B5, r25	; 0x8001b5 <RSerrors+0x1>
    1ca0:	80 93 b4 01 	sts	0x01B4, r24	; 0x8001b4 <RSerrors>
		pI->Rx.buff[pI->Rx.head++] = *pI->regs->pUDR;	//get char from UART
    1ca4:	4e 85       	ldd	r20, Y+14	; 0x0e
    1ca6:	5f 85       	ldd	r21, Y+15	; 0x0f
    1ca8:	88 81       	ld	r24, Y
    1caa:	99 81       	ldd	r25, Y+1	; 0x01
    1cac:	9c 01       	movw	r18, r24
    1cae:	2f 5f       	subi	r18, 0xFF	; 255
    1cb0:	3f 4f       	sbci	r19, 0xFF	; 255
    1cb2:	39 83       	std	Y+1, r19	; 0x01
    1cb4:	28 83       	st	Y, r18
    1cb6:	01 90       	ld	r0, Z+
    1cb8:	f0 81       	ld	r31, Z
    1cba:	e0 2d       	mov	r30, r0
    1cbc:	20 81       	ld	r18, Z
    1cbe:	fa 01       	movw	r30, r20
    1cc0:	e8 0f       	add	r30, r24
    1cc2:	f9 1f       	adc	r31, r25
    1cc4:	20 83       	st	Z, r18
		if(pI->Rx.head == pI->Rx.size) pI->Rx.head = 0;
    1cc6:	28 81       	ld	r18, Y
    1cc8:	39 81       	ldd	r19, Y+1	; 0x01
    1cca:	8e 81       	ldd	r24, Y+6	; 0x06
    1ccc:	9f 81       	ldd	r25, Y+7	; 0x07
    1cce:	28 17       	cp	r18, r24
    1cd0:	39 07       	cpc	r19, r25
    1cd2:	11 f4       	brne	.+4      	; 0x1cd8 <RxIsr+0x5e>
    1cd4:	19 82       	std	Y+1, r1	; 0x01
    1cd6:	18 82       	st	Y, r1
		pI->Rx.nChar++;	//increment number of chars in buffer
    1cd8:	8c 81       	ldd	r24, Y+4	; 0x04
    1cda:	9d 81       	ldd	r25, Y+5	; 0x05
    1cdc:	01 96       	adiw	r24, 0x01	; 1
    1cde:	9d 83       	std	Y+5, r25	; 0x05
    1ce0:	8c 83       	std	Y+4, r24	; 0x04
		PostSemaphore(pI->Rx.pSem,0);
    1ce2:	60 e0       	ldi	r22, 0x00	; 0
    1ce4:	70 e0       	ldi	r23, 0x00	; 0
    1ce6:	8a 85       	ldd	r24, Y+10	; 0x0a
    1ce8:	9b 85       	ldd	r25, Y+11	; 0x0b
    1cea:	a9 dd       	rcall	.-1198   	; 0x183e <PostSemaphore>
		pI.....pointer to serial descriptor
************************************************************/

static void RxIsr(SERIAL *pI)
{
	while(*pI->regs->pUCSRnA & BIT(RXC0))	//while chars available
    1cec:	e8 a1       	ldd	r30, Y+32	; 0x20
    1cee:	f9 a1       	ldd	r31, Y+33	; 0x21
    1cf0:	a2 81       	ldd	r26, Z+2	; 0x02
    1cf2:	b3 81       	ldd	r27, Z+3	; 0x03
    1cf4:	8c 91       	ld	r24, X
    1cf6:	88 23       	and	r24, r24
    1cf8:	54 f2       	brlt	.-108    	; 0x1c8e <RxIsr+0x14>
		pI->Rx.buff[pI->Rx.head++] = *pI->regs->pUDR;	//get char from UART
		if(pI->Rx.head == pI->Rx.size) pI->Rx.head = 0;
		pI->Rx.nChar++;	//increment number of chars in buffer
		PostSemaphore(pI->Rx.pSem,0);
	}
}
    1cfa:	df 91       	pop	r29
    1cfc:	cf 91       	pop	r28
    1cfe:	08 95       	ret

00001d00 <TxIsr>:
	parameters:
		pI....pointer to serial descriptor
*****************************************************/

static void TxIsr(SERIAL *pI)
{
    1d00:	0f 93       	push	r16
    1d02:	1f 93       	push	r17
    1d04:	cf 93       	push	r28
    1d06:	df 93       	push	r29
    1d08:	ec 01       	movw	r28, r24
	char loop = 1;
    1d0a:	01 e0       	ldi	r16, 0x01	; 1
		}
		else
		{
			//we have run out of characters...disable interrupt
			*pI->regs->pUCSRnB &= ~(BIT(UDRIE0));	//disable tx interrupts
			loop = 0;	//terminate loop
    1d0c:	10 e0       	ldi	r17, 0x00	; 0

static void TxIsr(SERIAL *pI)
{
	char loop = 1;

	while((*pI->regs->pUCSRnA & BIT(UDRE0)) && loop)	//while space available in TX
    1d0e:	39 c0       	rjmp	.+114    	; 0x1d82 <TxIsr+0x82>
	{
		if(pI->Tx.nChar == 128) PostSemaphore(pI->Tx.pSem,0);	//buffer somewhat empty now
    1d10:	8c 89       	ldd	r24, Y+20	; 0x14
    1d12:	9d 89       	ldd	r25, Y+21	; 0x15
    1d14:	80 38       	cpi	r24, 0x80	; 128
    1d16:	91 05       	cpc	r25, r1
    1d18:	29 f4       	brne	.+10     	; 0x1d24 <TxIsr+0x24>
    1d1a:	60 e0       	ldi	r22, 0x00	; 0
    1d1c:	70 e0       	ldi	r23, 0x00	; 0
    1d1e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1d20:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1d22:	8d dd       	rcall	.-1254   	; 0x183e <PostSemaphore>
		if(pI->Tx.nChar)	//while there are characters
    1d24:	8c 89       	ldd	r24, Y+20	; 0x14
    1d26:	9d 89       	ldd	r25, Y+21	; 0x15
    1d28:	89 2b       	or	r24, r25
    1d2a:	11 f1       	breq	.+68     	; 0x1d70 <TxIsr+0x70>
		{
			*pI->regs->pUDR = pI->Tx.buff[pI->Tx.tail++];	//stuff char
    1d2c:	e8 a1       	ldd	r30, Y+32	; 0x20
    1d2e:	f9 a1       	ldd	r31, Y+33	; 0x21
    1d30:	01 90       	ld	r0, Z+
    1d32:	f0 81       	ld	r31, Z
    1d34:	e0 2d       	mov	r30, r0
    1d36:	2e 8d       	ldd	r18, Y+30	; 0x1e
    1d38:	3f 8d       	ldd	r19, Y+31	; 0x1f
    1d3a:	8a 89       	ldd	r24, Y+18	; 0x12
    1d3c:	9b 89       	ldd	r25, Y+19	; 0x13
    1d3e:	ac 01       	movw	r20, r24
    1d40:	4f 5f       	subi	r20, 0xFF	; 255
    1d42:	5f 4f       	sbci	r21, 0xFF	; 255
    1d44:	5b 8b       	std	Y+19, r21	; 0x13
    1d46:	4a 8b       	std	Y+18, r20	; 0x12
    1d48:	d9 01       	movw	r26, r18
    1d4a:	a8 0f       	add	r26, r24
    1d4c:	b9 1f       	adc	r27, r25
    1d4e:	8c 91       	ld	r24, X
    1d50:	80 83       	st	Z, r24
			if(pI->Tx.tail == pI->Tx.size) pI->Tx.tail = 0;
    1d52:	2a 89       	ldd	r18, Y+18	; 0x12
    1d54:	3b 89       	ldd	r19, Y+19	; 0x13
    1d56:	8e 89       	ldd	r24, Y+22	; 0x16
    1d58:	9f 89       	ldd	r25, Y+23	; 0x17
    1d5a:	28 17       	cp	r18, r24
    1d5c:	39 07       	cpc	r19, r25
    1d5e:	11 f4       	brne	.+4      	; 0x1d64 <TxIsr+0x64>
    1d60:	1b 8a       	std	Y+19, r1	; 0x13
    1d62:	1a 8a       	std	Y+18, r1	; 0x12
			pI->Tx.nChar--;	//decrement number of chars in buffer
    1d64:	8c 89       	ldd	r24, Y+20	; 0x14
    1d66:	9d 89       	ldd	r25, Y+21	; 0x15
    1d68:	01 97       	sbiw	r24, 0x01	; 1
    1d6a:	9d 8b       	std	Y+21, r25	; 0x15
    1d6c:	8c 8b       	std	Y+20, r24	; 0x14
    1d6e:	09 c0       	rjmp	.+18     	; 0x1d82 <TxIsr+0x82>
		}
		else
		{
			//we have run out of characters...disable interrupt
			*pI->regs->pUCSRnB &= ~(BIT(UDRIE0));	//disable tx interrupts
    1d70:	e8 a1       	ldd	r30, Y+32	; 0x20
    1d72:	f9 a1       	ldd	r31, Y+33	; 0x21
    1d74:	04 80       	ldd	r0, Z+4	; 0x04
    1d76:	f5 81       	ldd	r31, Z+5	; 0x05
    1d78:	e0 2d       	mov	r30, r0
    1d7a:	80 81       	ld	r24, Z
    1d7c:	8f 7d       	andi	r24, 0xDF	; 223
    1d7e:	80 83       	st	Z, r24
			loop = 0;	//terminate loop
    1d80:	01 2f       	mov	r16, r17

static void TxIsr(SERIAL *pI)
{
	char loop = 1;

	while((*pI->regs->pUCSRnA & BIT(UDRE0)) && loop)	//while space available in TX
    1d82:	e8 a1       	ldd	r30, Y+32	; 0x20
    1d84:	f9 a1       	ldd	r31, Y+33	; 0x21
    1d86:	02 80       	ldd	r0, Z+2	; 0x02
    1d88:	f3 81       	ldd	r31, Z+3	; 0x03
    1d8a:	e0 2d       	mov	r30, r0
    1d8c:	80 81       	ld	r24, Z
    1d8e:	85 ff       	sbrs	r24, 5
    1d90:	02 c0       	rjmp	.+4      	; 0x1d96 <TxIsr+0x96>
    1d92:	01 11       	cpse	r16, r1
    1d94:	bd cf       	rjmp	.-134    	; 0x1d10 <TxIsr+0x10>
			//we have run out of characters...disable interrupt
			*pI->regs->pUCSRnB &= ~(BIT(UDRIE0));	//disable tx interrupts
			loop = 0;	//terminate loop
		}
	}
}
    1d96:	df 91       	pop	r29
    1d98:	cf 91       	pop	r28
    1d9a:	1f 91       	pop	r17
    1d9c:	0f 91       	pop	r16
    1d9e:	08 95       	ret

00001da0 <RPutC>:
		c.......character to write to device
	return value:
		returns 0
*******************************************/
static int RPutC(IOCB *pIOCB,int c)
{
    1da0:	1f 93       	push	r17
    1da2:	cf 93       	push	r28
    1da4:	df 93       	push	r29
    1da6:	16 2f       	mov	r17, r22
	char sr;
	SERIAL *pI = (SERIAL *)pIOCB->p;
    1da8:	fc 01       	movw	r30, r24
    1daa:	c0 85       	ldd	r28, Z+8	; 0x08
    1dac:	d1 85       	ldd	r29, Z+9	; 0x09

	if(pI->Tx.nChar == pI->Tx.size)
    1dae:	2c 89       	ldd	r18, Y+20	; 0x14
    1db0:	3d 89       	ldd	r19, Y+21	; 0x15
    1db2:	8e 89       	ldd	r24, Y+22	; 0x16
    1db4:	9f 89       	ldd	r25, Y+23	; 0x17
    1db6:	28 17       	cp	r18, r24
    1db8:	39 07       	cpc	r19, r25
    1dba:	29 f4       	brne	.+10     	; 0x1dc6 <RPutC+0x26>
		PendSemaphore(pI->Tx.pSem,0);	//wait for buffer to free up
    1dbc:	60 e0       	ldi	r22, 0x00	; 0
    1dbe:	70 e0       	ldi	r23, 0x00	; 0
    1dc0:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1dc2:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1dc4:	d0 dc       	rcall	.-1632   	; 0x1766 <PendSemaphore>
	sr = Disable();		//enter critical section
    1dc6:	0e 94 65 00 	call	0xca	; 0xca <Disable>
	if(pI->Tx.nChar < pI->Tx.size)	//and room?
    1dca:	4c 89       	ldd	r20, Y+20	; 0x14
    1dcc:	5d 89       	ldd	r21, Y+21	; 0x15
    1dce:	2e 89       	ldd	r18, Y+22	; 0x16
    1dd0:	3f 89       	ldd	r19, Y+23	; 0x17
    1dd2:	42 17       	cp	r20, r18
    1dd4:	53 07       	cpc	r21, r19
    1dd6:	48 f5       	brcc	.+82     	; 0x1e2a <RPutC+0x8a>
	{
		pI->Tx.buff[pI->Tx.head++] = (unsigned char)c;
    1dd8:	4e 8d       	ldd	r20, Y+30	; 0x1e
    1dda:	5f 8d       	ldd	r21, Y+31	; 0x1f
    1ddc:	28 89       	ldd	r18, Y+16	; 0x10
    1dde:	39 89       	ldd	r19, Y+17	; 0x11
    1de0:	b9 01       	movw	r22, r18
    1de2:	6f 5f       	subi	r22, 0xFF	; 255
    1de4:	7f 4f       	sbci	r23, 0xFF	; 255
    1de6:	79 8b       	std	Y+17, r23	; 0x11
    1de8:	68 8b       	std	Y+16, r22	; 0x10
    1dea:	fa 01       	movw	r30, r20
    1dec:	e2 0f       	add	r30, r18
    1dee:	f3 1f       	adc	r31, r19
    1df0:	10 83       	st	Z, r17
		if(pI->Tx.head == pI->Tx.size) pI->Tx.head = 0;	//check head pointer
    1df2:	48 89       	ldd	r20, Y+16	; 0x10
    1df4:	59 89       	ldd	r21, Y+17	; 0x11
    1df6:	2e 89       	ldd	r18, Y+22	; 0x16
    1df8:	3f 89       	ldd	r19, Y+23	; 0x17
    1dfa:	42 17       	cp	r20, r18
    1dfc:	53 07       	cpc	r21, r19
    1dfe:	11 f4       	brne	.+4      	; 0x1e04 <RPutC+0x64>
    1e00:	19 8a       	std	Y+17, r1	; 0x11
    1e02:	18 8a       	std	Y+16, r1	; 0x10
		if(!pI->Tx.nChar)	//if first char
    1e04:	2c 89       	ldd	r18, Y+20	; 0x14
    1e06:	3d 89       	ldd	r19, Y+21	; 0x15
    1e08:	23 2b       	or	r18, r19
    1e0a:	41 f4       	brne	.+16     	; 0x1e1c <RPutC+0x7c>
			*pI->regs->pUCSRnB |= BIT(UDRIE0);	//enable tx interrupts
    1e0c:	e8 a1       	ldd	r30, Y+32	; 0x20
    1e0e:	f9 a1       	ldd	r31, Y+33	; 0x21
    1e10:	04 80       	ldd	r0, Z+4	; 0x04
    1e12:	f5 81       	ldd	r31, Z+5	; 0x05
    1e14:	e0 2d       	mov	r30, r0
    1e16:	90 81       	ld	r25, Z
    1e18:	90 62       	ori	r25, 0x20	; 32
    1e1a:	90 83       	st	Z, r25
		pI->Tx.nChar++;		//increment number of chars in buffer
    1e1c:	2c 89       	ldd	r18, Y+20	; 0x14
    1e1e:	3d 89       	ldd	r19, Y+21	; 0x15
    1e20:	2f 5f       	subi	r18, 0xFF	; 255
    1e22:	3f 4f       	sbci	r19, 0xFF	; 255
    1e24:	3d 8b       	std	Y+21, r19	; 0x15
    1e26:	2c 8b       	std	Y+20, r18	; 0x14
    1e28:	06 c0       	rjmp	.+12     	; 0x1e36 <RPutC+0x96>
	}
	else
		pI->Tx.Errors++;		//increment buffer overrun errors
    1e2a:	28 8d       	ldd	r18, Y+24	; 0x18
    1e2c:	39 8d       	ldd	r19, Y+25	; 0x19
    1e2e:	2f 5f       	subi	r18, 0xFF	; 255
    1e30:	3f 4f       	sbci	r19, 0xFF	; 255
    1e32:	39 8f       	std	Y+25, r19	; 0x19
    1e34:	28 8f       	std	Y+24, r18	; 0x18
	Enable(sr);	//exit critical section
    1e36:	0e 94 69 00 	call	0xd2	; 0xd2 <Enable>
	return 0;
}
    1e3a:	80 e0       	ldi	r24, 0x00	; 0
    1e3c:	90 e0       	ldi	r25, 0x00	; 0
    1e3e:	df 91       	pop	r29
    1e40:	cf 91       	pop	r28
    1e42:	1f 91       	pop	r17
    1e44:	08 95       	ret

00001e46 <RWrite>:
	return Value:
		returns number of bytes written
********************************************/

static int RWrite(IOCB *pIOCB,char *b,int l)
{
    1e46:	8f 92       	push	r8
    1e48:	9f 92       	push	r9
    1e4a:	af 92       	push	r10
    1e4c:	bf 92       	push	r11
    1e4e:	cf 92       	push	r12
    1e50:	df 92       	push	r13
    1e52:	ef 92       	push	r14
    1e54:	ff 92       	push	r15
    1e56:	0f 93       	push	r16
    1e58:	1f 93       	push	r17
    1e5a:	cf 93       	push	r28
    1e5c:	df 93       	push	r29
    1e5e:	8c 01       	movw	r16, r24
    1e60:	7b 01       	movw	r14, r22
    1e62:	6a 01       	movw	r12, r20
	int i = 0;
	SERIAL *pI = (SERIAL *)pIOCB->p;
    1e64:	fc 01       	movw	r30, r24
    1e66:	a0 84       	ldd	r10, Z+8	; 0x08
    1e68:	b1 84       	ldd	r11, Z+9	; 0x09

	PendSemaphore(pI->Tx.pSemBlkr,0);	//lock access
    1e6a:	60 e0       	ldi	r22, 0x00	; 0
    1e6c:	70 e0       	ldi	r23, 0x00	; 0
    1e6e:	f5 01       	movw	r30, r10
    1e70:	84 8d       	ldd	r24, Z+28	; 0x1c
    1e72:	95 8d       	ldd	r25, Z+29	; 0x1d
    1e74:	78 dc       	rcall	.-1808   	; 0x1766 <PendSemaphore>
	for(i=0;i<l;++i)
    1e76:	1c 14       	cp	r1, r12
    1e78:	1d 04       	cpc	r1, r13
    1e7a:	cc f4       	brge	.+50     	; 0x1eae <RWrite+0x68>
    1e7c:	e7 01       	movw	r28, r14
    1e7e:	ec 0c       	add	r14, r12
    1e80:	fd 1c       	adc	r15, r13
    1e82:	4e 01       	movw	r8, r28
	{
		if(b[i] == '\n')
    1e84:	88 81       	ld	r24, Y
    1e86:	8a 30       	cpi	r24, 0x0A	; 10
    1e88:	41 f4       	brne	.+16     	; 0x1e9a <RWrite+0x54>
			if(pIOCB->mode & FCNTL_TEXT)
    1e8a:	f8 01       	movw	r30, r16
    1e8c:	86 81       	ldd	r24, Z+6	; 0x06
    1e8e:	86 ff       	sbrs	r24, 6
    1e90:	04 c0       	rjmp	.+8      	; 0x1e9a <RWrite+0x54>
				RPutC(pIOCB,'\r');
    1e92:	6d e0       	ldi	r22, 0x0D	; 13
    1e94:	70 e0       	ldi	r23, 0x00	; 0
    1e96:	c8 01       	movw	r24, r16
    1e98:	83 df       	rcall	.-250    	; 0x1da0 <RPutC>
    1e9a:	21 96       	adiw	r28, 0x01	; 1
		RPutC(pIOCB,b[i]);	//output characters
    1e9c:	f4 01       	movw	r30, r8
    1e9e:	60 81       	ld	r22, Z
    1ea0:	70 e0       	ldi	r23, 0x00	; 0
    1ea2:	c8 01       	movw	r24, r16
    1ea4:	7d df       	rcall	.-262    	; 0x1da0 <RPutC>
{
	int i = 0;
	SERIAL *pI = (SERIAL *)pIOCB->p;

	PendSemaphore(pI->Tx.pSemBlkr,0);	//lock access
	for(i=0;i<l;++i)
    1ea6:	ce 15       	cp	r28, r14
    1ea8:	df 05       	cpc	r29, r15
    1eaa:	59 f7       	brne	.-42     	; 0x1e82 <RWrite+0x3c>
    1eac:	02 c0       	rjmp	.+4      	; 0x1eb2 <RWrite+0x6c>
    1eae:	c1 2c       	mov	r12, r1
    1eb0:	d1 2c       	mov	r13, r1
		if(b[i] == '\n')
			if(pIOCB->mode & FCNTL_TEXT)
				RPutC(pIOCB,'\r');
		RPutC(pIOCB,b[i]);	//output characters
	}
	PostSemaphore(pI->Tx.pSemBlkr,0);	//release lock
    1eb2:	60 e0       	ldi	r22, 0x00	; 0
    1eb4:	70 e0       	ldi	r23, 0x00	; 0
    1eb6:	f5 01       	movw	r30, r10
    1eb8:	84 8d       	ldd	r24, Z+28	; 0x1c
    1eba:	95 8d       	ldd	r25, Z+29	; 0x1d
    1ebc:	c0 dc       	rcall	.-1664   	; 0x183e <PostSemaphore>
	return i;
}
    1ebe:	c6 01       	movw	r24, r12
    1ec0:	df 91       	pop	r29
    1ec2:	cf 91       	pop	r28
    1ec4:	1f 91       	pop	r17
    1ec6:	0f 91       	pop	r16
    1ec8:	ff 90       	pop	r15
    1eca:	ef 90       	pop	r14
    1ecc:	df 90       	pop	r13
    1ece:	cf 90       	pop	r12
    1ed0:	bf 90       	pop	r11
    1ed2:	af 90       	pop	r10
    1ed4:	9f 90       	pop	r9
    1ed6:	8f 90       	pop	r8
    1ed8:	08 95       	ret

00001eda <RGetC>:
		returns a character from the buffer
		OR -1 on fail (no chars)
************************************/

static int RGetC(IOCB *pIOCB)
{
    1eda:	0f 93       	push	r16
    1edc:	1f 93       	push	r17
    1ede:	cf 93       	push	r28
    1ee0:	df 93       	push	r29
	int retval;
	char sr;
	SERIAL *pI = (SERIAL *)pIOCB->p;
    1ee2:	fc 01       	movw	r30, r24
    1ee4:	c0 85       	ldd	r28, Z+8	; 0x08
    1ee6:	d1 85       	ldd	r29, Z+9	; 0x09

	PendSemaphore(pI->Rx.pSem,0);
    1ee8:	60 e0       	ldi	r22, 0x00	; 0
    1eea:	70 e0       	ldi	r23, 0x00	; 0
    1eec:	8a 85       	ldd	r24, Y+10	; 0x0a
    1eee:	9b 85       	ldd	r25, Y+11	; 0x0b
    1ef0:	3a dc       	rcall	.-1932   	; 0x1766 <PendSemaphore>
	sr = Disable();		//enter critical section
    1ef2:	0e 94 65 00 	call	0xca	; 0xca <Disable>
	if(pI->Rx.nChar)	//are there any characters to receive
    1ef6:	2c 81       	ldd	r18, Y+4	; 0x04
    1ef8:	3d 81       	ldd	r19, Y+5	; 0x05
    1efa:	21 15       	cp	r18, r1
    1efc:	31 05       	cpc	r19, r1
    1efe:	c9 f0       	breq	.+50     	; 0x1f32 <RGetC+0x58>
	{
		retval = (int)pI->Rx.buff[pI->Rx.tail++];	//get character	
    1f00:	ee 85       	ldd	r30, Y+14	; 0x0e
    1f02:	ff 85       	ldd	r31, Y+15	; 0x0f
    1f04:	4a 81       	ldd	r20, Y+2	; 0x02
    1f06:	5b 81       	ldd	r21, Y+3	; 0x03
    1f08:	ba 01       	movw	r22, r20
    1f0a:	6f 5f       	subi	r22, 0xFF	; 255
    1f0c:	7f 4f       	sbci	r23, 0xFF	; 255
    1f0e:	7b 83       	std	Y+3, r23	; 0x03
    1f10:	6a 83       	std	Y+2, r22	; 0x02
    1f12:	e4 0f       	add	r30, r20
    1f14:	f5 1f       	adc	r31, r21
    1f16:	00 81       	ld	r16, Z
    1f18:	10 e0       	ldi	r17, 0x00	; 0
		if(pI->Rx.tail == pI->Rx.size) pI->Rx.tail = 0;	//check tail pointer
    1f1a:	4e 81       	ldd	r20, Y+6	; 0x06
    1f1c:	5f 81       	ldd	r21, Y+7	; 0x07
    1f1e:	64 17       	cp	r22, r20
    1f20:	75 07       	cpc	r23, r21
    1f22:	11 f4       	brne	.+4      	; 0x1f28 <RGetC+0x4e>
    1f24:	1b 82       	std	Y+3, r1	; 0x03
    1f26:	1a 82       	std	Y+2, r1	; 0x02
		pI->Rx.nChar--;		//decrement the number of chars in buffer
    1f28:	21 50       	subi	r18, 0x01	; 1
    1f2a:	31 09       	sbc	r19, r1
    1f2c:	3d 83       	std	Y+5, r19	; 0x05
    1f2e:	2c 83       	std	Y+4, r18	; 0x04
    1f30:	02 c0       	rjmp	.+4      	; 0x1f36 <RGetC+0x5c>
	}
	else
		retval = -1;	//return error
    1f32:	0f ef       	ldi	r16, 0xFF	; 255
    1f34:	1f ef       	ldi	r17, 0xFF	; 255
	Enable(sr);	//exit critical section
    1f36:	0e 94 69 00 	call	0xd2	; 0xd2 <Enable>
	return retval;
}
    1f3a:	c8 01       	movw	r24, r16
    1f3c:	df 91       	pop	r29
    1f3e:	cf 91       	pop	r28
    1f40:	1f 91       	pop	r17
    1f42:	0f 91       	pop	r16
    1f44:	08 95       	ret

00001f46 <ROpen>:
		returns 0 on success
		returns negative on fail
**************************************************/

static int ROpen(IOCB *pIOCB)
{
    1f46:	af 92       	push	r10
    1f48:	bf 92       	push	r11
    1f4a:	cf 92       	push	r12
    1f4c:	df 92       	push	r13
    1f4e:	ef 92       	push	r14
    1f50:	ff 92       	push	r15
    1f52:	0f 93       	push	r16
    1f54:	1f 93       	push	r17
    1f56:	cf 93       	push	r28
    1f58:	df 93       	push	r29
	int rV = -1;

	if(pIOCB->devnum < RS232_N_PORTS)
    1f5a:	dc 01       	movw	r26, r24
    1f5c:	12 96       	adiw	r26, 0x02	; 2
    1f5e:	0d 91       	ld	r16, X+
    1f60:	1c 91       	ld	r17, X
    1f62:	13 97       	sbiw	r26, 0x03	; 3
    1f64:	02 30       	cpi	r16, 0x02	; 2
    1f66:	11 05       	cpc	r17, r1
    1f68:	0c f0       	brlt	.+2      	; 0x1f6c <ROpen+0x26>
    1f6a:	b3 c0       	rjmp	.+358    	; 0x20d2 <ROpen+0x18c>
    1f6c:	7c 01       	movw	r14, r24
	{
		pIOCB->p = (void *)malloc(sizeof(SERIAL));	//allocate space for serial control block
    1f6e:	82 e2       	ldi	r24, 0x22	; 34
    1f70:	90 e0       	ldi	r25, 0x00	; 0
    1f72:	0e 94 39 06 	call	0xc72	; 0xc72 <malloc>
    1f76:	ec 01       	movw	r28, r24
    1f78:	f7 01       	movw	r30, r14
    1f7a:	91 87       	std	Z+9, r25	; 0x09
    1f7c:	80 87       	std	Z+8, r24	; 0x08
************************************************/
static void InitPort(SERIAL *pS,unsigned short nTSize,unsigned short nRSize, unsigned short nPort,long nBaudRate)
{
	int i;

	pS->regs = &SAdr[nPort];
    1f7e:	c8 01       	movw	r24, r16
    1f80:	88 0f       	add	r24, r24
    1f82:	99 1f       	adc	r25, r25
    1f84:	88 0f       	add	r24, r24
    1f86:	99 1f       	adc	r25, r25
    1f88:	88 0f       	add	r24, r24
    1f8a:	99 1f       	adc	r25, r25
    1f8c:	98 01       	movw	r18, r16
    1f8e:	22 0f       	add	r18, r18
    1f90:	33 1f       	adc	r19, r19
    1f92:	82 0f       	add	r24, r18
    1f94:	93 1f       	adc	r25, r19
    1f96:	8a 5f       	subi	r24, 0xFA	; 250
    1f98:	9e 4f       	sbci	r25, 0xFE	; 254
    1f9a:	99 a3       	std	Y+33, r25	; 0x21
    1f9c:	88 a3       	std	Y+32, r24	; 0x20
	pS->Tx.buff = malloc(nTSize);
    1f9e:	80 e0       	ldi	r24, 0x00	; 0
    1fa0:	91 e0       	ldi	r25, 0x01	; 1
    1fa2:	0e 94 39 06 	call	0xc72	; 0xc72 <malloc>
    1fa6:	9f 8f       	std	Y+31, r25	; 0x1f
    1fa8:	8e 8f       	std	Y+30, r24	; 0x1e
    1faa:	20 e0       	ldi	r18, 0x00	; 0
    1fac:	30 e0       	ldi	r19, 0x00	; 0
	for(i=0;i<nTSize;++i)
		pS->Tx.buff[i] = 0;
    1fae:	ee 8d       	ldd	r30, Y+30	; 0x1e
    1fb0:	ff 8d       	ldd	r31, Y+31	; 0x1f
    1fb2:	e2 0f       	add	r30, r18
    1fb4:	f3 1f       	adc	r31, r19
    1fb6:	10 82       	st	Z, r1
{
	int i;

	pS->regs = &SAdr[nPort];
	pS->Tx.buff = malloc(nTSize);
	for(i=0;i<nTSize;++i)
    1fb8:	2f 5f       	subi	r18, 0xFF	; 255
    1fba:	3f 4f       	sbci	r19, 0xFF	; 255
    1fbc:	21 15       	cp	r18, r1
    1fbe:	f1 e0       	ldi	r31, 0x01	; 1
    1fc0:	3f 07       	cpc	r19, r31
    1fc2:	a9 f7       	brne	.-22     	; 0x1fae <ROpen+0x68>
		pS->Tx.buff[i] = 0;
	pS->Tx.Errors = 0;
    1fc4:	19 8e       	std	Y+25, r1	; 0x19
    1fc6:	18 8e       	std	Y+24, r1	; 0x18
	pS->Tx.head = 0;
    1fc8:	19 8a       	std	Y+17, r1	; 0x11
    1fca:	18 8a       	std	Y+16, r1	; 0x10
	pS->Tx.tail = 0;
    1fcc:	1b 8a       	std	Y+19, r1	; 0x13
    1fce:	1a 8a       	std	Y+18, r1	; 0x12
	pS->Tx.nChar = 0;
    1fd0:	1d 8a       	std	Y+21, r1	; 0x15
    1fd2:	1c 8a       	std	Y+20, r1	; 0x14
	pS->Tx.size = nTSize;
    1fd4:	c1 2c       	mov	r12, r1
    1fd6:	dd 24       	eor	r13, r13
    1fd8:	d3 94       	inc	r13
    1fda:	df 8a       	std	Y+23, r13	; 0x17
    1fdc:	ce 8a       	std	Y+22, r12	; 0x16
	pS->Tx.pSemBlkr = NewSemaphore(1,SEMAPHORE_MODE_BLOCKING,TNames[nPort]);
    1fde:	f8 01       	movw	r30, r16
    1fe0:	ee 0f       	add	r30, r30
    1fe2:	ff 1f       	adc	r31, r31
    1fe4:	e5 57       	subi	r30, 0x75	; 117
    1fe6:	fe 4f       	sbci	r31, 0xFE	; 254
    1fe8:	a0 80       	ld	r10, Z
    1fea:	b1 80       	ldd	r11, Z+1	; 0x01
    1fec:	a5 01       	movw	r20, r10
    1fee:	60 e0       	ldi	r22, 0x00	; 0
    1ff0:	70 e0       	ldi	r23, 0x00	; 0
    1ff2:	81 e0       	ldi	r24, 0x01	; 1
    1ff4:	90 e0       	ldi	r25, 0x00	; 0
    1ff6:	0e 94 ef 01 	call	0x3de	; 0x3de <NewSemaphore>
    1ffa:	9d 8f       	std	Y+29, r25	; 0x1d
    1ffc:	8c 8f       	std	Y+28, r24	; 0x1c
	pS->Tx.pSem = NewSemaphore(0,SEMAPHORE_MODE_BLOCKING,TNames[nPort]);
    1ffe:	a5 01       	movw	r20, r10
    2000:	60 e0       	ldi	r22, 0x00	; 0
    2002:	70 e0       	ldi	r23, 0x00	; 0
    2004:	80 e0       	ldi	r24, 0x00	; 0
    2006:	90 e0       	ldi	r25, 0x00	; 0
    2008:	0e 94 ef 01 	call	0x3de	; 0x3de <NewSemaphore>
    200c:	9b 8f       	std	Y+27, r25	; 0x1b
    200e:	8a 8f       	std	Y+26, r24	; 0x1a
	pS->Rx.Errors = 0;
    2010:	19 86       	std	Y+9, r1	; 0x09
    2012:	18 86       	std	Y+8, r1	; 0x08
	pS->Rx.buff = malloc(nRSize);
    2014:	80 e0       	ldi	r24, 0x00	; 0
    2016:	91 e0       	ldi	r25, 0x01	; 1
    2018:	0e 94 39 06 	call	0xc72	; 0xc72 <malloc>
    201c:	9f 87       	std	Y+15, r25	; 0x0f
    201e:	8e 87       	std	Y+14, r24	; 0x0e
	pS->Rx.head = 0;
    2020:	19 82       	std	Y+1, r1	; 0x01
    2022:	18 82       	st	Y, r1
	pS->Rx.tail = 0;
    2024:	1b 82       	std	Y+3, r1	; 0x03
    2026:	1a 82       	std	Y+2, r1	; 0x02
	pS->Rx.nChar = 0;
    2028:	1d 82       	std	Y+5, r1	; 0x05
    202a:	1c 82       	std	Y+4, r1	; 0x04
	pS->Rx.size = nRSize;
    202c:	df 82       	std	Y+7, r13	; 0x07
    202e:	ce 82       	std	Y+6, r12	; 0x06
    2030:	20 e0       	ldi	r18, 0x00	; 0
    2032:	30 e0       	ldi	r19, 0x00	; 0
	for(i=0;i<nRSize;++i)
		pS->Rx.buff[i] = 0;
    2034:	ee 85       	ldd	r30, Y+14	; 0x0e
    2036:	ff 85       	ldd	r31, Y+15	; 0x0f
    2038:	e2 0f       	add	r30, r18
    203a:	f3 1f       	adc	r31, r19
    203c:	10 82       	st	Z, r1
	pS->Rx.buff = malloc(nRSize);
	pS->Rx.head = 0;
	pS->Rx.tail = 0;
	pS->Rx.nChar = 0;
	pS->Rx.size = nRSize;
	for(i=0;i<nRSize;++i)
    203e:	2f 5f       	subi	r18, 0xFF	; 255
    2040:	3f 4f       	sbci	r19, 0xFF	; 255
    2042:	21 15       	cp	r18, r1
    2044:	81 e0       	ldi	r24, 0x01	; 1
    2046:	38 07       	cpc	r19, r24
    2048:	a9 f7       	brne	.-22     	; 0x2034 <ROpen+0xee>
		pS->Rx.buff[i] = 0;
	pS->Rx.pSem = NewSemaphore(0,SEMAPHORE_MODE_BLOCKING,PNames[nPort]);
    204a:	00 0f       	add	r16, r16
    204c:	11 1f       	adc	r17, r17
    204e:	f8 01       	movw	r30, r16
    2050:	e1 57       	subi	r30, 0x71	; 113
    2052:	fe 4f       	sbci	r31, 0xFE	; 254
    2054:	40 81       	ld	r20, Z
    2056:	51 81       	ldd	r21, Z+1	; 0x01
    2058:	60 e0       	ldi	r22, 0x00	; 0
    205a:	70 e0       	ldi	r23, 0x00	; 0
    205c:	80 e0       	ldi	r24, 0x00	; 0
    205e:	90 e0       	ldi	r25, 0x00	; 0
    2060:	0e 94 ef 01 	call	0x3de	; 0x3de <NewSemaphore>
    2064:	9b 87       	std	Y+11, r25	; 0x0b
    2066:	8a 87       	std	Y+10, r24	; 0x0a
	*pS->regs->pUCSRnB = 0x00; 	//disable while setting baud rate
    2068:	e8 a1       	ldd	r30, Y+32	; 0x20
    206a:	f9 a1       	ldd	r31, Y+33	; 0x21
    206c:	04 80       	ldd	r0, Z+4	; 0x04
    206e:	f5 81       	ldd	r31, Z+5	; 0x05
    2070:	e0 2d       	mov	r30, r0
    2072:	10 82       	st	Z, r1
	*pS->regs->pUCSRnA = 0x00;	//Normal UART Mode (bits 1 and 0)
    2074:	e8 a1       	ldd	r30, Y+32	; 0x20
    2076:	f9 a1       	ldd	r31, Y+33	; 0x21
    2078:	02 80       	ldd	r0, Z+2	; 0x02
    207a:	f3 81       	ldd	r31, Z+3	; 0x03
    207c:	e0 2d       	mov	r30, r0
    207e:	10 82       	st	Z, r1
	*pS->regs->pUCSRnC = BIT(UCSZ01) | BIT(UCSZ00);	//8 bits, 1 Stop Bit, No Parity
    2080:	e8 a1       	ldd	r30, Y+32	; 0x20
    2082:	f9 a1       	ldd	r31, Y+33	; 0x21
    2084:	06 80       	ldd	r0, Z+6	; 0x06
    2086:	f7 81       	ldd	r31, Z+7	; 0x07
    2088:	e0 2d       	mov	r30, r0
    208a:	86 e0       	ldi	r24, 0x06	; 6
    208c:	80 83       	st	Z, r24
	*pS->regs->pUBRR = CalculateBaudRate(nBaudRate);
    208e:	e8 a1       	ldd	r30, Y+32	; 0x20
    2090:	f9 a1       	ldd	r31, Y+33	; 0x21
    2092:	00 84       	ldd	r0, Z+8	; 0x08
    2094:	f1 85       	ldd	r31, Z+9	; 0x09
    2096:	e0 2d       	mov	r30, r0
    2098:	83 e3       	ldi	r24, 0x33	; 51
    209a:	90 e0       	ldi	r25, 0x00	; 0
    209c:	91 83       	std	Z+1, r25	; 0x01
    209e:	80 83       	st	Z, r24
	*pS->regs->pUCSRnB = BIT(RXCIE0) | BIT(RXEN0) | BIT(TXEN0); 	//Enable UART
    20a0:	e8 a1       	ldd	r30, Y+32	; 0x20
    20a2:	f9 a1       	ldd	r31, Y+33	; 0x21
    20a4:	04 80       	ldd	r0, Z+4	; 0x04
    20a6:	f5 81       	ldd	r31, Z+5	; 0x05
    20a8:	e0 2d       	mov	r30, r0
    20aa:	88 e9       	ldi	r24, 0x98	; 152
    20ac:	80 83       	st	Z, r24

	if(pIOCB->devnum < RS232_N_PORTS)
	{
		pIOCB->p = (void *)malloc(sizeof(SERIAL));	//allocate space for serial control block
		InitPort((SERIAL *)pIOCB->p,RS232_DEF_T_BUFF_SIZE,RS232_DEF_R_BUFF_SIZE,pIOCB->devnum,RS232_DEF_BAUDRATE);
		gSerial[pIOCB->devnum] = (SERIAL *)pIOCB->p;
    20ae:	d7 01       	movw	r26, r14
    20b0:	12 96       	adiw	r26, 0x02	; 2
    20b2:	ed 91       	ld	r30, X+
    20b4:	fc 91       	ld	r31, X
    20b6:	13 97       	sbiw	r26, 0x03	; 3
    20b8:	ee 0f       	add	r30, r30
    20ba:	ff 1f       	adc	r31, r31
    20bc:	e0 55       	subi	r30, 0x50	; 80
    20be:	fe 4f       	sbci	r31, 0xFE	; 254
    20c0:	18 96       	adiw	r26, 0x08	; 8
    20c2:	8d 91       	ld	r24, X+
    20c4:	9c 91       	ld	r25, X
    20c6:	19 97       	sbiw	r26, 0x09	; 9
    20c8:	91 83       	std	Z+1, r25	; 0x01
    20ca:	80 83       	st	Z, r24
		rV = 0;	//success
    20cc:	80 e0       	ldi	r24, 0x00	; 0
    20ce:	90 e0       	ldi	r25, 0x00	; 0
    20d0:	02 c0       	rjmp	.+4      	; 0x20d6 <ROpen+0x190>
		returns negative on fail
**************************************************/

static int ROpen(IOCB *pIOCB)
{
	int rV = -1;
    20d2:	8f ef       	ldi	r24, 0xFF	; 255
    20d4:	9f ef       	ldi	r25, 0xFF	; 255
		InitPort((SERIAL *)pIOCB->p,RS232_DEF_T_BUFF_SIZE,RS232_DEF_R_BUFF_SIZE,pIOCB->devnum,RS232_DEF_BAUDRATE);
		gSerial[pIOCB->devnum] = (SERIAL *)pIOCB->p;
		rV = 0;	//success
	}
	return rV;
}
    20d6:	df 91       	pop	r29
    20d8:	cf 91       	pop	r28
    20da:	1f 91       	pop	r17
    20dc:	0f 91       	pop	r16
    20de:	ff 90       	pop	r15
    20e0:	ef 90       	pop	r14
    20e2:	df 90       	pop	r13
    20e4:	cf 90       	pop	r12
    20e6:	bf 90       	pop	r11
    20e8:	af 90       	pop	r10
    20ea:	08 95       	ret

000020ec <__vector_20>:
}

void USART0_RX_vect(void) __attribute__ ((naked));
void USART0_RX_vect(void)
{
	SAVE_IRQ();
    20ec:	ff 93       	push	r31
    20ee:	ff b7       	in	r31, 0x3f	; 63
    20f0:	f0 68       	ori	r31, 0x80	; 128
    20f2:	ff 93       	push	r31
    20f4:	ef 93       	push	r30
    20f6:	df 93       	push	r29
    20f8:	cf 93       	push	r28
    20fa:	bf 93       	push	r27
    20fc:	af 93       	push	r26
    20fe:	9f 93       	push	r25
    2100:	8f 93       	push	r24
    2102:	7f 93       	push	r23
    2104:	6f 93       	push	r22
    2106:	5f 93       	push	r21
    2108:	4f 93       	push	r20
    210a:	3f 93       	push	r19
    210c:	2f 93       	push	r18
    210e:	1f 93       	push	r17
    2110:	0f 93       	push	r16
    2112:	ff 92       	push	r15
    2114:	ef 92       	push	r14
    2116:	df 92       	push	r13
    2118:	cf 92       	push	r12
    211a:	bf 92       	push	r11
    211c:	af 92       	push	r10
    211e:	9f 92       	push	r9
    2120:	8f 92       	push	r8
    2122:	7f 92       	push	r7
    2124:	6f 92       	push	r6
    2126:	5f 92       	push	r5
    2128:	4f 92       	push	r4
    212a:	3f 92       	push	r3
    212c:	2f 92       	push	r2
    212e:	1f 92       	push	r1
    2130:	11 24       	eor	r1, r1
    2132:	0f 92       	push	r0
	++InterruptCount;
    2134:	80 91 1e 02 	lds	r24, 0x021E	; 0x80021e <InterruptCount>
    2138:	90 91 1f 02 	lds	r25, 0x021F	; 0x80021f <InterruptCount+0x1>
    213c:	01 96       	adiw	r24, 0x01	; 1
    213e:	90 93 1f 02 	sts	0x021F, r25	; 0x80021f <InterruptCount+0x1>
    2142:	80 93 1e 02 	sts	0x021E, r24	; 0x80021e <InterruptCount>
	RxIsr(gSerial[0]);
    2146:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <gSerial>
    214a:	90 91 b1 01 	lds	r25, 0x01B1	; 0x8001b1 <gSerial+0x1>
    214e:	95 dd       	rcall	.-1238   	; 0x1c7a <RxIsr>
	ExitInterrupt();
    2150:	0e 94 cc 03 	call	0x798	; 0x798 <ExitInterrupt>
	RESTORE_IRQ();
    2154:	0f 90       	pop	r0
    2156:	1f 90       	pop	r1
    2158:	2f 90       	pop	r2
    215a:	3f 90       	pop	r3
    215c:	4f 90       	pop	r4
    215e:	5f 90       	pop	r5
    2160:	6f 90       	pop	r6
    2162:	7f 90       	pop	r7
    2164:	8f 90       	pop	r8
    2166:	9f 90       	pop	r9
    2168:	af 90       	pop	r10
    216a:	bf 90       	pop	r11
    216c:	cf 90       	pop	r12
    216e:	df 90       	pop	r13
    2170:	ef 90       	pop	r14
    2172:	ff 90       	pop	r15
    2174:	0f 91       	pop	r16
    2176:	1f 91       	pop	r17
    2178:	2f 91       	pop	r18
    217a:	3f 91       	pop	r19
    217c:	4f 91       	pop	r20
    217e:	5f 91       	pop	r21
    2180:	6f 91       	pop	r22
    2182:	7f 91       	pop	r23
    2184:	8f 91       	pop	r24
    2186:	9f 91       	pop	r25
    2188:	af 91       	pop	r26
    218a:	bf 91       	pop	r27
    218c:	cf 91       	pop	r28
    218e:	df 91       	pop	r29
    2190:	ef 91       	pop	r30
    2192:	ff 91       	pop	r31
    2194:	ff 77       	andi	r31, 0x7F	; 127
    2196:	ff bf       	out	0x3f, r31	; 63
    2198:	ff 91       	pop	r31
    219a:	18 95       	reti

0000219c <__vector_21>:
}

void USART0_UDRE_vect(void) __attribute__ ((naked));
void USART0_UDRE_vect(void)
{
	SAVE_IRQ();
    219c:	ff 93       	push	r31
    219e:	ff b7       	in	r31, 0x3f	; 63
    21a0:	f0 68       	ori	r31, 0x80	; 128
    21a2:	ff 93       	push	r31
    21a4:	ef 93       	push	r30
    21a6:	df 93       	push	r29
    21a8:	cf 93       	push	r28
    21aa:	bf 93       	push	r27
    21ac:	af 93       	push	r26
    21ae:	9f 93       	push	r25
    21b0:	8f 93       	push	r24
    21b2:	7f 93       	push	r23
    21b4:	6f 93       	push	r22
    21b6:	5f 93       	push	r21
    21b8:	4f 93       	push	r20
    21ba:	3f 93       	push	r19
    21bc:	2f 93       	push	r18
    21be:	1f 93       	push	r17
    21c0:	0f 93       	push	r16
    21c2:	ff 92       	push	r15
    21c4:	ef 92       	push	r14
    21c6:	df 92       	push	r13
    21c8:	cf 92       	push	r12
    21ca:	bf 92       	push	r11
    21cc:	af 92       	push	r10
    21ce:	9f 92       	push	r9
    21d0:	8f 92       	push	r8
    21d2:	7f 92       	push	r7
    21d4:	6f 92       	push	r6
    21d6:	5f 92       	push	r5
    21d8:	4f 92       	push	r4
    21da:	3f 92       	push	r3
    21dc:	2f 92       	push	r2
    21de:	1f 92       	push	r1
    21e0:	11 24       	eor	r1, r1
    21e2:	0f 92       	push	r0
	++InterruptCount;
    21e4:	80 91 1e 02 	lds	r24, 0x021E	; 0x80021e <InterruptCount>
    21e8:	90 91 1f 02 	lds	r25, 0x021F	; 0x80021f <InterruptCount+0x1>
    21ec:	01 96       	adiw	r24, 0x01	; 1
    21ee:	90 93 1f 02 	sts	0x021F, r25	; 0x80021f <InterruptCount+0x1>
    21f2:	80 93 1e 02 	sts	0x021E, r24	; 0x80021e <InterruptCount>
	TxIsr(gSerial[0]);
    21f6:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <gSerial>
    21fa:	90 91 b1 01 	lds	r25, 0x01B1	; 0x8001b1 <gSerial+0x1>
    21fe:	80 dd       	rcall	.-1280   	; 0x1d00 <TxIsr>
	ExitInterrupt();
    2200:	0e 94 cc 03 	call	0x798	; 0x798 <ExitInterrupt>
	RESTORE_IRQ();
    2204:	0f 90       	pop	r0
    2206:	1f 90       	pop	r1
    2208:	2f 90       	pop	r2
    220a:	3f 90       	pop	r3
    220c:	4f 90       	pop	r4
    220e:	5f 90       	pop	r5
    2210:	6f 90       	pop	r6
    2212:	7f 90       	pop	r7
    2214:	8f 90       	pop	r8
    2216:	9f 90       	pop	r9
    2218:	af 90       	pop	r10
    221a:	bf 90       	pop	r11
    221c:	cf 90       	pop	r12
    221e:	df 90       	pop	r13
    2220:	ef 90       	pop	r14
    2222:	ff 90       	pop	r15
    2224:	0f 91       	pop	r16
    2226:	1f 91       	pop	r17
    2228:	2f 91       	pop	r18
    222a:	3f 91       	pop	r19
    222c:	4f 91       	pop	r20
    222e:	5f 91       	pop	r21
    2230:	6f 91       	pop	r22
    2232:	7f 91       	pop	r23
    2234:	8f 91       	pop	r24
    2236:	9f 91       	pop	r25
    2238:	af 91       	pop	r26
    223a:	bf 91       	pop	r27
    223c:	cf 91       	pop	r28
    223e:	df 91       	pop	r29
    2240:	ef 91       	pop	r30
    2242:	ff 91       	pop	r31
    2244:	ff 77       	andi	r31, 0x7F	; 127
    2246:	ff bf       	out	0x3f, r31	; 63
    2248:	ff 91       	pop	r31
    224a:	18 95       	reti

0000224c <__vector_28>:
}

void USART1_RX_vect(void) __attribute__ ((naked));
void USART1_RX_vect(void)
{
	SAVE_IRQ();
    224c:	ff 93       	push	r31
    224e:	ff b7       	in	r31, 0x3f	; 63
    2250:	f0 68       	ori	r31, 0x80	; 128
    2252:	ff 93       	push	r31
    2254:	ef 93       	push	r30
    2256:	df 93       	push	r29
    2258:	cf 93       	push	r28
    225a:	bf 93       	push	r27
    225c:	af 93       	push	r26
    225e:	9f 93       	push	r25
    2260:	8f 93       	push	r24
    2262:	7f 93       	push	r23
    2264:	6f 93       	push	r22
    2266:	5f 93       	push	r21
    2268:	4f 93       	push	r20
    226a:	3f 93       	push	r19
    226c:	2f 93       	push	r18
    226e:	1f 93       	push	r17
    2270:	0f 93       	push	r16
    2272:	ff 92       	push	r15
    2274:	ef 92       	push	r14
    2276:	df 92       	push	r13
    2278:	cf 92       	push	r12
    227a:	bf 92       	push	r11
    227c:	af 92       	push	r10
    227e:	9f 92       	push	r9
    2280:	8f 92       	push	r8
    2282:	7f 92       	push	r7
    2284:	6f 92       	push	r6
    2286:	5f 92       	push	r5
    2288:	4f 92       	push	r4
    228a:	3f 92       	push	r3
    228c:	2f 92       	push	r2
    228e:	1f 92       	push	r1
    2290:	11 24       	eor	r1, r1
    2292:	0f 92       	push	r0
	++InterruptCount;
    2294:	80 91 1e 02 	lds	r24, 0x021E	; 0x80021e <InterruptCount>
    2298:	90 91 1f 02 	lds	r25, 0x021F	; 0x80021f <InterruptCount+0x1>
    229c:	01 96       	adiw	r24, 0x01	; 1
    229e:	90 93 1f 02 	sts	0x021F, r25	; 0x80021f <InterruptCount+0x1>
    22a2:	80 93 1e 02 	sts	0x021E, r24	; 0x80021e <InterruptCount>
	RxIsr(gSerial[1]);
    22a6:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <gSerial+0x2>
    22aa:	90 91 b3 01 	lds	r25, 0x01B3	; 0x8001b3 <gSerial+0x3>
    22ae:	e5 dc       	rcall	.-1590   	; 0x1c7a <RxIsr>
	ExitInterrupt();
    22b0:	0e 94 cc 03 	call	0x798	; 0x798 <ExitInterrupt>
	RESTORE_IRQ();
    22b4:	0f 90       	pop	r0
    22b6:	1f 90       	pop	r1
    22b8:	2f 90       	pop	r2
    22ba:	3f 90       	pop	r3
    22bc:	4f 90       	pop	r4
    22be:	5f 90       	pop	r5
    22c0:	6f 90       	pop	r6
    22c2:	7f 90       	pop	r7
    22c4:	8f 90       	pop	r8
    22c6:	9f 90       	pop	r9
    22c8:	af 90       	pop	r10
    22ca:	bf 90       	pop	r11
    22cc:	cf 90       	pop	r12
    22ce:	df 90       	pop	r13
    22d0:	ef 90       	pop	r14
    22d2:	ff 90       	pop	r15
    22d4:	0f 91       	pop	r16
    22d6:	1f 91       	pop	r17
    22d8:	2f 91       	pop	r18
    22da:	3f 91       	pop	r19
    22dc:	4f 91       	pop	r20
    22de:	5f 91       	pop	r21
    22e0:	6f 91       	pop	r22
    22e2:	7f 91       	pop	r23
    22e4:	8f 91       	pop	r24
    22e6:	9f 91       	pop	r25
    22e8:	af 91       	pop	r26
    22ea:	bf 91       	pop	r27
    22ec:	cf 91       	pop	r28
    22ee:	df 91       	pop	r29
    22f0:	ef 91       	pop	r30
    22f2:	ff 91       	pop	r31
    22f4:	ff 77       	andi	r31, 0x7F	; 127
    22f6:	ff bf       	out	0x3f, r31	; 63
    22f8:	ff 91       	pop	r31
    22fa:	18 95       	reti

000022fc <__vector_29>:
}

void USART1_UDRE_vect(void) __attribute__ ((naked));
void USART1_UDRE_vect(void)
{
	SAVE_IRQ();
    22fc:	ff 93       	push	r31
    22fe:	ff b7       	in	r31, 0x3f	; 63
    2300:	f0 68       	ori	r31, 0x80	; 128
    2302:	ff 93       	push	r31
    2304:	ef 93       	push	r30
    2306:	df 93       	push	r29
    2308:	cf 93       	push	r28
    230a:	bf 93       	push	r27
    230c:	af 93       	push	r26
    230e:	9f 93       	push	r25
    2310:	8f 93       	push	r24
    2312:	7f 93       	push	r23
    2314:	6f 93       	push	r22
    2316:	5f 93       	push	r21
    2318:	4f 93       	push	r20
    231a:	3f 93       	push	r19
    231c:	2f 93       	push	r18
    231e:	1f 93       	push	r17
    2320:	0f 93       	push	r16
    2322:	ff 92       	push	r15
    2324:	ef 92       	push	r14
    2326:	df 92       	push	r13
    2328:	cf 92       	push	r12
    232a:	bf 92       	push	r11
    232c:	af 92       	push	r10
    232e:	9f 92       	push	r9
    2330:	8f 92       	push	r8
    2332:	7f 92       	push	r7
    2334:	6f 92       	push	r6
    2336:	5f 92       	push	r5
    2338:	4f 92       	push	r4
    233a:	3f 92       	push	r3
    233c:	2f 92       	push	r2
    233e:	1f 92       	push	r1
    2340:	11 24       	eor	r1, r1
    2342:	0f 92       	push	r0
	++InterruptCount;
    2344:	80 91 1e 02 	lds	r24, 0x021E	; 0x80021e <InterruptCount>
    2348:	90 91 1f 02 	lds	r25, 0x021F	; 0x80021f <InterruptCount+0x1>
    234c:	01 96       	adiw	r24, 0x01	; 1
    234e:	90 93 1f 02 	sts	0x021F, r25	; 0x80021f <InterruptCount+0x1>
    2352:	80 93 1e 02 	sts	0x021E, r24	; 0x80021e <InterruptCount>
	TxIsr(gSerial[1]);
    2356:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <gSerial+0x2>
    235a:	90 91 b3 01 	lds	r25, 0x01B3	; 0x8001b3 <gSerial+0x3>
    235e:	d0 dc       	rcall	.-1632   	; 0x1d00 <TxIsr>
	ExitInterrupt();
    2360:	0e 94 cc 03 	call	0x798	; 0x798 <ExitInterrupt>
	RESTORE_IRQ();
    2364:	0f 90       	pop	r0
    2366:	1f 90       	pop	r1
    2368:	2f 90       	pop	r2
    236a:	3f 90       	pop	r3
    236c:	4f 90       	pop	r4
    236e:	5f 90       	pop	r5
    2370:	6f 90       	pop	r6
    2372:	7f 90       	pop	r7
    2374:	8f 90       	pop	r8
    2376:	9f 90       	pop	r9
    2378:	af 90       	pop	r10
    237a:	bf 90       	pop	r11
    237c:	cf 90       	pop	r12
    237e:	df 90       	pop	r13
    2380:	ef 90       	pop	r14
    2382:	ff 90       	pop	r15
    2384:	0f 91       	pop	r16
    2386:	1f 91       	pop	r17
    2388:	2f 91       	pop	r18
    238a:	3f 91       	pop	r19
    238c:	4f 91       	pop	r20
    238e:	5f 91       	pop	r21
    2390:	6f 91       	pop	r22
    2392:	7f 91       	pop	r23
    2394:	8f 91       	pop	r24
    2396:	9f 91       	pop	r25
    2398:	af 91       	pop	r26
    239a:	bf 91       	pop	r27
    239c:	cf 91       	pop	r28
    239e:	df 91       	pop	r29
    23a0:	ef 91       	pop	r30
    23a2:	ff 91       	pop	r31
    23a4:	ff 77       	andi	r31, 0x7F	; 127
    23a6:	ff bf       	out	0x3f, r31	; 63
    23a8:	ff 91       	pop	r31
    23aa:	18 95       	reti

000023ac <__vector_19>:
 ECB *pSPIDone;		//semaphore indicates SPI has shifted out data

void SPI_STC_vect(void) __attribute__ ((naked));
void SPI_STC_vect(void)
{
	SAVE_IRQ();
    23ac:	ff 93       	push	r31
    23ae:	ff b7       	in	r31, 0x3f	; 63
    23b0:	f0 68       	ori	r31, 0x80	; 128
    23b2:	ff 93       	push	r31
    23b4:	ef 93       	push	r30
    23b6:	df 93       	push	r29
    23b8:	cf 93       	push	r28
    23ba:	bf 93       	push	r27
    23bc:	af 93       	push	r26
    23be:	9f 93       	push	r25
    23c0:	8f 93       	push	r24
    23c2:	7f 93       	push	r23
    23c4:	6f 93       	push	r22
    23c6:	5f 93       	push	r21
    23c8:	4f 93       	push	r20
    23ca:	3f 93       	push	r19
    23cc:	2f 93       	push	r18
    23ce:	1f 93       	push	r17
    23d0:	0f 93       	push	r16
    23d2:	ff 92       	push	r15
    23d4:	ef 92       	push	r14
    23d6:	df 92       	push	r13
    23d8:	cf 92       	push	r12
    23da:	bf 92       	push	r11
    23dc:	af 92       	push	r10
    23de:	9f 92       	push	r9
    23e0:	8f 92       	push	r8
    23e2:	7f 92       	push	r7
    23e4:	6f 92       	push	r6
    23e6:	5f 92       	push	r5
    23e8:	4f 92       	push	r4
    23ea:	3f 92       	push	r3
    23ec:	2f 92       	push	r2
    23ee:	1f 92       	push	r1
    23f0:	11 24       	eor	r1, r1
    23f2:	0f 92       	push	r0
	++InterruptCount;
    23f4:	80 91 1e 02 	lds	r24, 0x021E	; 0x80021e <InterruptCount>
    23f8:	90 91 1f 02 	lds	r25, 0x021F	; 0x80021f <InterruptCount+0x1>
    23fc:	01 96       	adiw	r24, 0x01	; 1
    23fe:	90 93 1f 02 	sts	0x021F, r25	; 0x80021f <InterruptCount+0x1>
    2402:	80 93 1e 02 	sts	0x021E, r24	; 0x80021e <InterruptCount>
	PostSemaphore(pSPIDone,0);
    2406:	60 e0       	ldi	r22, 0x00	; 0
    2408:	70 e0       	ldi	r23, 0x00	; 0
    240a:	80 91 b4 02 	lds	r24, 0x02B4	; 0x8002b4 <pSPIDone>
    240e:	90 91 b5 02 	lds	r25, 0x02B5	; 0x8002b5 <pSPIDone+0x1>
    2412:	15 da       	rcall	.-3030   	; 0x183e <PostSemaphore>
	ExitInterrupt();
    2414:	0e 94 cc 03 	call	0x798	; 0x798 <ExitInterrupt>
	RESTORE_IRQ();
    2418:	0f 90       	pop	r0
    241a:	1f 90       	pop	r1
    241c:	2f 90       	pop	r2
    241e:	3f 90       	pop	r3
    2420:	4f 90       	pop	r4
    2422:	5f 90       	pop	r5
    2424:	6f 90       	pop	r6
    2426:	7f 90       	pop	r7
    2428:	8f 90       	pop	r8
    242a:	9f 90       	pop	r9
    242c:	af 90       	pop	r10
    242e:	bf 90       	pop	r11
    2430:	cf 90       	pop	r12
    2432:	df 90       	pop	r13
    2434:	ef 90       	pop	r14
    2436:	ff 90       	pop	r15
    2438:	0f 91       	pop	r16
    243a:	1f 91       	pop	r17
    243c:	2f 91       	pop	r18
    243e:	3f 91       	pop	r19
    2440:	4f 91       	pop	r20
    2442:	5f 91       	pop	r21
    2444:	6f 91       	pop	r22
    2446:	7f 91       	pop	r23
    2448:	8f 91       	pop	r24
    244a:	9f 91       	pop	r25
    244c:	af 91       	pop	r26
    244e:	bf 91       	pop	r27
    2450:	cf 91       	pop	r28
    2452:	df 91       	pop	r29
    2454:	ef 91       	pop	r30
    2456:	ff 91       	pop	r31
    2458:	ff 77       	andi	r31, 0x7F	; 127
    245a:	ff bf       	out	0x3f, r31	; 63
    245c:	ff 91       	pop	r31
    245e:	18 95       	reti

00002460 <InitSpi>:
		Initialize the SPI port
**************************************************/

void InitSpi(void)
{
	pSPIAccess = NewSemaphore(1,SEMAPHORE_MODE_BLOCKING,"SPI Access");
    2460:	43 e9       	ldi	r20, 0x93	; 147
    2462:	51 e0       	ldi	r21, 0x01	; 1
    2464:	60 e0       	ldi	r22, 0x00	; 0
    2466:	70 e0       	ldi	r23, 0x00	; 0
    2468:	81 e0       	ldi	r24, 0x01	; 1
    246a:	90 e0       	ldi	r25, 0x00	; 0
    246c:	0e 94 ef 01 	call	0x3de	; 0x3de <NewSemaphore>
    2470:	90 93 b3 02 	sts	0x02B3, r25	; 0x8002b3 <pSPIAccess+0x1>
    2474:	80 93 b2 02 	sts	0x02B2, r24	; 0x8002b2 <pSPIAccess>
	pSPIDone = NewSemaphore(0,SEMAPHORE_MODE_BLOCKING,"SPI Done");
    2478:	4e e9       	ldi	r20, 0x9E	; 158
    247a:	51 e0       	ldi	r21, 0x01	; 1
    247c:	60 e0       	ldi	r22, 0x00	; 0
    247e:	70 e0       	ldi	r23, 0x00	; 0
    2480:	80 e0       	ldi	r24, 0x00	; 0
    2482:	90 e0       	ldi	r25, 0x00	; 0
    2484:	0e 94 ef 01 	call	0x3de	; 0x3de <NewSemaphore>
    2488:	90 93 b5 02 	sts	0x02B5, r25	; 0x8002b5 <pSPIDone+0x1>
    248c:	80 93 b4 02 	sts	0x02B4, r24	; 0x8002b4 <pSPIDone>
	// setup SPI interface :
	// master mode
	// enable SPI
	SPCR |= BIT(MSTR)  | BIT(SPR0) | BIT(SPR1) | BIT(SPE);
    2490:	8c b5       	in	r24, 0x2c	; 44
    2492:	83 65       	ori	r24, 0x53	; 83
    2494:	8c bd       	out	0x2c, r24	; 44
	// clock = f/16
	// select clock phase positive-going in middle of data
	// Data order MSB first
	SPCR &= ~(BIT(CPOL) | BIT(DORD) );
    2496:	8c b5       	in	r24, 0x2c	; 44
    2498:	87 7d       	andi	r24, 0xD7	; 215
    249a:	8c bd       	out	0x2c, r24	; 44
	SPCR |= BIT(SPIE);
    249c:	8c b5       	in	r24, 0x2c	; 44
    249e:	80 68       	ori	r24, 0x80	; 128
    24a0:	8c bd       	out	0x2c, r24	; 44
    24a2:	08 95       	ret

000024a4 <WriteSpi>:
		buff......pointer to buffer with data
		n.........number of characters is buffer
*************************************************/

void WriteSpi(char *buff, int n)
{
    24a4:	ef 92       	push	r14
    24a6:	ff 92       	push	r15
    24a8:	0f 93       	push	r16
    24aa:	1f 93       	push	r17
    24ac:	cf 93       	push	r28
    24ae:	df 93       	push	r29
    24b0:	7c 01       	movw	r14, r24
    24b2:	8b 01       	movw	r16, r22
	int i;
	PendSemaphore(pSPIAccess,0);
    24b4:	60 e0       	ldi	r22, 0x00	; 0
    24b6:	70 e0       	ldi	r23, 0x00	; 0
    24b8:	80 91 b2 02 	lds	r24, 0x02B2	; 0x8002b2 <pSPIAccess>
    24bc:	90 91 b3 02 	lds	r25, 0x02B3	; 0x8002b3 <pSPIAccess+0x1>
    24c0:	52 d9       	rcall	.-3420   	; 0x1766 <PendSemaphore>
	for(i=0;i<n;++i)
    24c2:	10 16       	cp	r1, r16
    24c4:	11 06       	cpc	r1, r17
    24c6:	7c f4       	brge	.+30     	; 0x24e6 <WriteSpi+0x42>
    24c8:	e7 01       	movw	r28, r14
    24ca:	0e 0d       	add	r16, r14
    24cc:	1f 1d       	adc	r17, r15
	{
		SPDR = buff[i];
    24ce:	99 91       	ld	r25, Y+
    24d0:	9e bd       	out	0x2e, r25	; 46
		PendSemaphore(pSPIDone,0);
    24d2:	60 e0       	ldi	r22, 0x00	; 0
    24d4:	70 e0       	ldi	r23, 0x00	; 0
    24d6:	80 91 b4 02 	lds	r24, 0x02B4	; 0x8002b4 <pSPIDone>
    24da:	90 91 b5 02 	lds	r25, 0x02B5	; 0x8002b5 <pSPIDone+0x1>
    24de:	43 d9       	rcall	.-3450   	; 0x1766 <PendSemaphore>

void WriteSpi(char *buff, int n)
{
	int i;
	PendSemaphore(pSPIAccess,0);
	for(i=0;i<n;++i)
    24e0:	c0 17       	cp	r28, r16
    24e2:	d1 07       	cpc	r29, r17
    24e4:	a1 f7       	brne	.-24     	; 0x24ce <WriteSpi+0x2a>
	{
		SPDR = buff[i];
		PendSemaphore(pSPIDone,0);
	}
	PostSemaphore(pSPIAccess,0);
    24e6:	60 e0       	ldi	r22, 0x00	; 0
    24e8:	70 e0       	ldi	r23, 0x00	; 0
    24ea:	80 91 b2 02 	lds	r24, 0x02B2	; 0x8002b2 <pSPIAccess>
    24ee:	90 91 b3 02 	lds	r25, 0x02B3	; 0x8002b3 <pSPIAccess+0x1>
    24f2:	a5 d9       	rcall	.-3254   	; 0x183e <PostSemaphore>
}
    24f4:	df 91       	pop	r29
    24f6:	cf 91       	pop	r28
    24f8:	1f 91       	pop	r17
    24fa:	0f 91       	pop	r16
    24fc:	ff 90       	pop	r15
    24fe:	ef 90       	pop	r14
    2500:	08 95       	ret

00002502 <StartOS>:
	// Remove task from priorty queue
	// Restore its context
	// and then jump to the first task using
	// return from subroutine
	//---------------------------------------
	Delete(&ActiveTasks,(void **)&NextTask);
    2502:	66 e1       	ldi	r22, 0x16	; 22
    2504:	72 e0       	ldi	r23, 0x02	; 2
    2506:	8c e0       	ldi	r24, 0x0C	; 12
    2508:	92 e0       	ldi	r25, 0x02	; 2
    250a:	f9 da       	rcall	.-2574   	; 0x1afe <Delete>
	CurrentTask = NextTask;
    250c:	80 91 16 02 	lds	r24, 0x0216	; 0x800216 <NextTask>
    2510:	90 91 17 02 	lds	r25, 0x0217	; 0x800217 <NextTask+0x1>
    2514:	90 93 1b 02 	sts	0x021B, r25	; 0x80021b <CurrentTask+0x1>
    2518:	80 93 1a 02 	sts	0x021A, r24	; 0x80021a <CurrentTask>
	RESTORE_CONTEXT();
    251c:	a0 91 16 02 	lds	r26, 0x0216	; 0x800216 <NextTask>
    2520:	b0 91 17 02 	lds	r27, 0x0217	; 0x800217 <NextTask+0x1>
    2524:	cd 91       	ld	r28, X+
    2526:	cd bf       	out	0x3d, r28	; 61
    2528:	dd 91       	ld	r29, X+
    252a:	de bf       	out	0x3e, r29	; 62
    252c:	0f 90       	pop	r0
    252e:	1f 90       	pop	r1
    2530:	2f 90       	pop	r2
    2532:	3f 90       	pop	r3
    2534:	4f 90       	pop	r4
    2536:	5f 90       	pop	r5
    2538:	6f 90       	pop	r6
    253a:	7f 90       	pop	r7
    253c:	8f 90       	pop	r8
    253e:	9f 90       	pop	r9
    2540:	af 90       	pop	r10
    2542:	bf 90       	pop	r11
    2544:	cf 90       	pop	r12
    2546:	df 90       	pop	r13
    2548:	ef 90       	pop	r14
    254a:	ff 90       	pop	r15
    254c:	0f 91       	pop	r16
    254e:	1f 91       	pop	r17
    2550:	2f 91       	pop	r18
    2552:	3f 91       	pop	r19
    2554:	4f 91       	pop	r20
    2556:	5f 91       	pop	r21
    2558:	6f 91       	pop	r22
    255a:	7f 91       	pop	r23
    255c:	8f 91       	pop	r24
    255e:	9f 91       	pop	r25
    2560:	af 91       	pop	r26
    2562:	bf 91       	pop	r27
    2564:	cf 91       	pop	r28
    2566:	df 91       	pop	r29
    2568:	ef 91       	pop	r30
    256a:	ff 91       	pop	r31
    256c:	f7 fd       	sbrc	r31, 7
    256e:	03 c0       	rjmp	.+6      	; 0x2576 <irqen>
    2570:	ff bf       	out	0x3f, r31	; 63
    2572:	ff 91       	pop	r31
    2574:	08 95       	ret

00002576 <irqen>:
    2576:	ff 77       	andi	r31, 0x7F	; 127
    2578:	ff bf       	out	0x3f, r31	; 63
    257a:	ff 91       	pop	r31
    257c:	18 95       	reti

0000257e <TimerTicker>:
**  Control Blocks looking for timed out events.                      **
**                                                                    **
***********************************************************************/

void TimerTicker(void)
{
    257e:	ef 92       	push	r14
    2580:	ff 92       	push	r15
    2582:	0f 93       	push	r16
    2584:	1f 93       	push	r17
    2586:	cf 93       	push	r28
    2588:	df 93       	push	r29
	TCB *t,**prev;

	//------------------------------
	// Increment the time stamp
	//------------------------------
	++TStamp;
    258a:	80 91 b6 02 	lds	r24, 0x02B6	; 0x8002b6 <TStamp>
    258e:	90 91 b7 02 	lds	r25, 0x02B7	; 0x8002b7 <TStamp+0x1>
    2592:	01 96       	adiw	r24, 0x01	; 1
    2594:	90 93 b7 02 	sts	0x02B7, r25	; 0x8002b7 <TStamp+0x1>
    2598:	80 93 b6 02 	sts	0x02B6, r24	; 0x8002b6 <TStamp>
	// gone to zero, put the tasks that
	// are waiting on those semaphores
	// back into the queue so that they
	// can execute.
	//-----------------------------------
	for(e = TimeoutList;e;e=e->Tnext)	//go through whole list
    259c:	e0 90 0a 02 	lds	r14, 0x020A	; 0x80020a <TimeoutList>
    25a0:	f0 90 0b 02 	lds	r15, 0x020B	; 0x80020b <TimeoutList+0x1>
    25a4:	e1 14       	cp	r14, r1
    25a6:	f1 04       	cpc	r15, r1
    25a8:	a9 f1       	breq	.+106    	; 0x2614 <TimerTicker+0x96>
			if(t->timeout > 0)	//if less than zero, infinite timeout
			{
				if( --(t->timeout) <= 0)	//decrement timeout counter
				{
					e->EventCount++;		//fake a post
					t->status = EVENT_TIMEOUT;	//event caused by semaphore
    25aa:	0d ef       	ldi	r16, 0xFD	; 253
    25ac:	1f ef       	ldi	r17, 0xFF	; 255
	// back into the queue so that they
	// can execute.
	//-----------------------------------
	for(e = TimeoutList;e;e=e->Tnext)	//go through whole list
	{
		for(prev = &(e->task_h),t = e->task_h;t;)
    25ae:	f7 01       	movw	r30, r14
    25b0:	c0 81       	ld	r28, Z
    25b2:	d1 81       	ldd	r29, Z+1	; 0x01
    25b4:	20 97       	sbiw	r28, 0x00	; 0
    25b6:	41 f1       	breq	.+80     	; 0x2608 <TimerTicker+0x8a>
		{
			if(t->timeout > 0)	//if less than zero, infinite timeout
    25b8:	88 89       	ldd	r24, Y+16	; 0x10
    25ba:	99 89       	ldd	r25, Y+17	; 0x11
    25bc:	18 16       	cp	r1, r24
    25be:	19 06       	cpc	r1, r25
    25c0:	e4 f4       	brge	.+56     	; 0x25fa <TimerTicker+0x7c>
			{
				if( --(t->timeout) <= 0)	//decrement timeout counter
    25c2:	01 97       	sbiw	r24, 0x01	; 1
    25c4:	99 8b       	std	Y+17, r25	; 0x11
    25c6:	88 8b       	std	Y+16, r24	; 0x10
    25c8:	18 16       	cp	r1, r24
    25ca:	19 06       	cpc	r1, r25
    25cc:	b4 f0       	brlt	.+44     	; 0x25fa <TimerTicker+0x7c>
				{
					e->EventCount++;		//fake a post
    25ce:	d7 01       	movw	r26, r14
    25d0:	1a 96       	adiw	r26, 0x0a	; 10
    25d2:	8d 91       	ld	r24, X+
    25d4:	9c 91       	ld	r25, X
    25d6:	1b 97       	sbiw	r26, 0x0b	; 11
    25d8:	01 96       	adiw	r24, 0x01	; 1
    25da:	1b 96       	adiw	r26, 0x0b	; 11
    25dc:	9c 93       	st	X, r25
    25de:	8e 93       	st	-X, r24
    25e0:	1a 97       	sbiw	r26, 0x0a	; 10
					t->status = EVENT_TIMEOUT;	//event caused by semaphore
    25e2:	19 87       	std	Y+9, r17	; 0x09
    25e4:	08 87       	std	Y+8, r16	; 0x08
					*prev = t->next;	//remove t from list
    25e6:	8c 89       	ldd	r24, Y+20	; 0x14
    25e8:	9d 89       	ldd	r25, Y+21	; 0x15
    25ea:	91 83       	std	Z+1, r25	; 0x01
    25ec:	80 83       	st	Z, r24
					t->next = 0;
    25ee:	1d 8a       	std	Y+21, r1	; 0x15
    25f0:	1c 8a       	std	Y+20, r1	; 0x14
					Insert(&ActiveTasks,t);//put it back in queue
    25f2:	be 01       	movw	r22, r28
    25f4:	8c e0       	ldi	r24, 0x0C	; 12
    25f6:	92 e0       	ldi	r25, 0x02	; 2
    25f8:	f2 d9       	rcall	.-3100   	; 0x19de <Insert>
				}
			}
			prev = &(t->next);
    25fa:	fe 01       	movw	r30, r28
    25fc:	74 96       	adiw	r30, 0x14	; 20
			t = t->next;
    25fe:	0c 88       	ldd	r0, Y+20	; 0x14
    2600:	dd 89       	ldd	r29, Y+21	; 0x15
    2602:	c0 2d       	mov	r28, r0
	// back into the queue so that they
	// can execute.
	//-----------------------------------
	for(e = TimeoutList;e;e=e->Tnext)	//go through whole list
	{
		for(prev = &(e->task_h),t = e->task_h;t;)
    2604:	20 97       	sbiw	r28, 0x00	; 0
    2606:	c1 f6       	brne	.-80     	; 0x25b8 <TimerTicker+0x3a>
	// gone to zero, put the tasks that
	// are waiting on those semaphores
	// back into the queue so that they
	// can execute.
	//-----------------------------------
	for(e = TimeoutList;e;e=e->Tnext)	//go through whole list
    2608:	f7 01       	movw	r30, r14
    260a:	e4 80       	ldd	r14, Z+4	; 0x04
    260c:	f5 80       	ldd	r15, Z+5	; 0x05
    260e:	e1 14       	cp	r14, r1
    2610:	f1 04       	cpc	r15, r1
    2612:	69 f6       	brne	.-102    	; 0x25ae <TimerTicker+0x30>
			}
			prev = &(t->next);
			t = t->next;
		}
	}
}
    2614:	df 91       	pop	r29
    2616:	cf 91       	pop	r28
    2618:	1f 91       	pop	r17
    261a:	0f 91       	pop	r16
    261c:	ff 90       	pop	r15
    261e:	ef 90       	pop	r14
    2620:	08 95       	ret

00002622 <Yield>:
** are in an interrupt
** routine
*********************************************************************/

void Yield(void)
{
    2622:	cf 93       	push	r28
	char sr;

	// Do not yield if at the interrupt level
	if(!InterruptCount)
    2624:	80 91 1e 02 	lds	r24, 0x021E	; 0x80021e <InterruptCount>
    2628:	90 91 1f 02 	lds	r25, 0x021F	; 0x80021f <InterruptCount+0x1>
    262c:	89 2b       	or	r24, r25
    262e:	09 f5       	brne	.+66     	; 0x2672 <Yield+0x50>
	{
		sr = Disable();
    2630:	0e 94 65 00 	call	0xca	; 0xca <Disable>
    2634:	c8 2f       	mov	r28, r24
		//update the time stamp in current task
		CurrentTask->TimeStamp = TStamp;
    2636:	40 91 1a 02 	lds	r20, 0x021A	; 0x80021a <CurrentTask>
    263a:	50 91 1b 02 	lds	r21, 0x021B	; 0x80021b <CurrentTask+0x1>
    263e:	80 91 b6 02 	lds	r24, 0x02B6	; 0x8002b6 <TStamp>
    2642:	90 91 b7 02 	lds	r25, 0x02B7	; 0x8002b7 <TStamp+0x1>
    2646:	fa 01       	movw	r30, r20
    2648:	95 87       	std	Z+13, r25	; 0x0d
    264a:	84 87       	std	Z+12, r24	; 0x0c
		//Insert current task back into queue
		//and get a new task
		Replace(&ActiveTasks,(void **)&NextTask,(void *)CurrentTask);
    264c:	66 e1       	ldi	r22, 0x16	; 22
    264e:	72 e0       	ldi	r23, 0x02	; 2
    2650:	8c e0       	ldi	r24, 0x0C	; 12
    2652:	92 e0       	ldi	r25, 0x02	; 2
    2654:	7f da       	rcall	.-2818   	; 0x1b54 <Replace>
		//increment task swaps
		NextTask->TcbSwaps++;
    2656:	e0 91 16 02 	lds	r30, 0x0216	; 0x800216 <NextTask>
    265a:	f0 91 17 02 	lds	r31, 0x0217	; 0x800217 <NextTask+0x1>
    265e:	86 85       	ldd	r24, Z+14	; 0x0e
    2660:	97 85       	ldd	r25, Z+15	; 0x0f
    2662:	01 96       	adiw	r24, 0x01	; 1
    2664:	97 87       	std	Z+15, r25	; 0x0f
    2666:	86 87       	std	Z+14, r24	; 0x0e
		//swap tasks
		DoSwap();
    2668:	0e 94 67 03 	call	0x6ce	; 0x6ce <DoSwap>
		Enable(sr);
    266c:	8c 2f       	mov	r24, r28
    266e:	0e 94 69 00 	call	0xd2	; 0xd2 <Enable>
	}
}
    2672:	cf 91       	pop	r28
    2674:	08 95       	ret

00002676 <__divmodsi4>:
    2676:	05 2e       	mov	r0, r21
    2678:	97 fb       	bst	r25, 7
    267a:	16 f4       	brtc	.+4      	; 0x2680 <__divmodsi4+0xa>
    267c:	00 94       	com	r0
    267e:	0f d0       	rcall	.+30     	; 0x269e <__negsi2>
    2680:	57 fd       	sbrc	r21, 7
    2682:	05 d0       	rcall	.+10     	; 0x268e <__divmodsi4_neg2>
    2684:	14 d0       	rcall	.+40     	; 0x26ae <__udivmodsi4>
    2686:	07 fc       	sbrc	r0, 7
    2688:	02 d0       	rcall	.+4      	; 0x268e <__divmodsi4_neg2>
    268a:	46 f4       	brtc	.+16     	; 0x269c <__divmodsi4_exit>
    268c:	08 c0       	rjmp	.+16     	; 0x269e <__negsi2>

0000268e <__divmodsi4_neg2>:
    268e:	50 95       	com	r21
    2690:	40 95       	com	r20
    2692:	30 95       	com	r19
    2694:	21 95       	neg	r18
    2696:	3f 4f       	sbci	r19, 0xFF	; 255
    2698:	4f 4f       	sbci	r20, 0xFF	; 255
    269a:	5f 4f       	sbci	r21, 0xFF	; 255

0000269c <__divmodsi4_exit>:
    269c:	08 95       	ret

0000269e <__negsi2>:
    269e:	90 95       	com	r25
    26a0:	80 95       	com	r24
    26a2:	70 95       	com	r23
    26a4:	61 95       	neg	r22
    26a6:	7f 4f       	sbci	r23, 0xFF	; 255
    26a8:	8f 4f       	sbci	r24, 0xFF	; 255
    26aa:	9f 4f       	sbci	r25, 0xFF	; 255
    26ac:	08 95       	ret

000026ae <__udivmodsi4>:
    26ae:	a1 e2       	ldi	r26, 0x21	; 33
    26b0:	1a 2e       	mov	r1, r26
    26b2:	aa 1b       	sub	r26, r26
    26b4:	bb 1b       	sub	r27, r27
    26b6:	fd 01       	movw	r30, r26
    26b8:	0d c0       	rjmp	.+26     	; 0x26d4 <__udivmodsi4_ep>

000026ba <__udivmodsi4_loop>:
    26ba:	aa 1f       	adc	r26, r26
    26bc:	bb 1f       	adc	r27, r27
    26be:	ee 1f       	adc	r30, r30
    26c0:	ff 1f       	adc	r31, r31
    26c2:	a2 17       	cp	r26, r18
    26c4:	b3 07       	cpc	r27, r19
    26c6:	e4 07       	cpc	r30, r20
    26c8:	f5 07       	cpc	r31, r21
    26ca:	20 f0       	brcs	.+8      	; 0x26d4 <__udivmodsi4_ep>
    26cc:	a2 1b       	sub	r26, r18
    26ce:	b3 0b       	sbc	r27, r19
    26d0:	e4 0b       	sbc	r30, r20
    26d2:	f5 0b       	sbc	r31, r21

000026d4 <__udivmodsi4_ep>:
    26d4:	66 1f       	adc	r22, r22
    26d6:	77 1f       	adc	r23, r23
    26d8:	88 1f       	adc	r24, r24
    26da:	99 1f       	adc	r25, r25
    26dc:	1a 94       	dec	r1
    26de:	69 f7       	brne	.-38     	; 0x26ba <__udivmodsi4_loop>
    26e0:	60 95       	com	r22
    26e2:	70 95       	com	r23
    26e4:	80 95       	com	r24
    26e6:	90 95       	com	r25
    26e8:	9b 01       	movw	r18, r22
    26ea:	ac 01       	movw	r20, r24
    26ec:	bd 01       	movw	r22, r26
    26ee:	cf 01       	movw	r24, r30
    26f0:	08 95       	ret

000026f2 <atoi>:
    26f2:	fc 01       	movw	r30, r24
    26f4:	88 27       	eor	r24, r24
    26f6:	99 27       	eor	r25, r25
    26f8:	e8 94       	clt
    26fa:	21 91       	ld	r18, Z+
    26fc:	20 32       	cpi	r18, 0x20	; 32
    26fe:	e9 f3       	breq	.-6      	; 0x26fa <atoi+0x8>
    2700:	29 30       	cpi	r18, 0x09	; 9
    2702:	10 f0       	brcs	.+4      	; 0x2708 <atoi+0x16>
    2704:	2e 30       	cpi	r18, 0x0E	; 14
    2706:	c8 f3       	brcs	.-14     	; 0x26fa <atoi+0x8>
    2708:	2b 32       	cpi	r18, 0x2B	; 43
    270a:	39 f0       	breq	.+14     	; 0x271a <atoi+0x28>
    270c:	2d 32       	cpi	r18, 0x2D	; 45
    270e:	31 f4       	brne	.+12     	; 0x271c <atoi+0x2a>
    2710:	68 94       	set
    2712:	03 c0       	rjmp	.+6      	; 0x271a <atoi+0x28>
    2714:	3e d0       	rcall	.+124    	; 0x2792 <__mulhi_const_10>
    2716:	82 0f       	add	r24, r18
    2718:	91 1d       	adc	r25, r1
    271a:	21 91       	ld	r18, Z+
    271c:	20 53       	subi	r18, 0x30	; 48
    271e:	2a 30       	cpi	r18, 0x0A	; 10
    2720:	c8 f3       	brcs	.-14     	; 0x2714 <atoi+0x22>
    2722:	1e f4       	brtc	.+6      	; 0x272a <atoi+0x38>
    2724:	90 95       	com	r25
    2726:	81 95       	neg	r24
    2728:	9f 4f       	sbci	r25, 0xFF	; 255
    272a:	08 95       	ret

0000272c <strcpy>:
    272c:	fb 01       	movw	r30, r22
    272e:	dc 01       	movw	r26, r24
    2730:	01 90       	ld	r0, Z+
    2732:	0d 92       	st	X+, r0
    2734:	00 20       	and	r0, r0
    2736:	e1 f7       	brne	.-8      	; 0x2730 <strcpy+0x4>
    2738:	08 95       	ret

0000273a <strcspn>:
    273a:	dc 01       	movw	r26, r24
    273c:	5d 91       	ld	r21, X+
    273e:	55 23       	and	r21, r21
    2740:	31 f0       	breq	.+12     	; 0x274e <strcspn+0x14>
    2742:	fb 01       	movw	r30, r22
    2744:	01 90       	ld	r0, Z+
    2746:	05 16       	cp	r0, r21
    2748:	01 10       	cpse	r0, r1
    274a:	e1 f7       	brne	.-8      	; 0x2744 <strcspn+0xa>
    274c:	b9 f7       	brne	.-18     	; 0x273c <strcspn+0x2>
    274e:	80 95       	com	r24
    2750:	90 95       	com	r25
    2752:	8a 0f       	add	r24, r26
    2754:	9b 1f       	adc	r25, r27
    2756:	08 95       	ret

00002758 <strncmp>:
    2758:	fb 01       	movw	r30, r22
    275a:	dc 01       	movw	r26, r24
    275c:	41 50       	subi	r20, 0x01	; 1
    275e:	50 40       	sbci	r21, 0x00	; 0
    2760:	30 f0       	brcs	.+12     	; 0x276e <strncmp+0x16>
    2762:	8d 91       	ld	r24, X+
    2764:	01 90       	ld	r0, Z+
    2766:	80 19       	sub	r24, r0
    2768:	19 f4       	brne	.+6      	; 0x2770 <strncmp+0x18>
    276a:	00 20       	and	r0, r0
    276c:	b9 f7       	brne	.-18     	; 0x275c <strncmp+0x4>
    276e:	88 1b       	sub	r24, r24
    2770:	99 0b       	sbc	r25, r25
    2772:	08 95       	ret

00002774 <strncpy>:
    2774:	fb 01       	movw	r30, r22
    2776:	dc 01       	movw	r26, r24
    2778:	41 50       	subi	r20, 0x01	; 1
    277a:	50 40       	sbci	r21, 0x00	; 0
    277c:	48 f0       	brcs	.+18     	; 0x2790 <strncpy+0x1c>
    277e:	01 90       	ld	r0, Z+
    2780:	0d 92       	st	X+, r0
    2782:	00 20       	and	r0, r0
    2784:	c9 f7       	brne	.-14     	; 0x2778 <strncpy+0x4>
    2786:	01 c0       	rjmp	.+2      	; 0x278a <strncpy+0x16>
    2788:	1d 92       	st	X+, r1
    278a:	41 50       	subi	r20, 0x01	; 1
    278c:	50 40       	sbci	r21, 0x00	; 0
    278e:	e0 f7       	brcc	.-8      	; 0x2788 <strncpy+0x14>
    2790:	08 95       	ret

00002792 <__mulhi_const_10>:
    2792:	7a e0       	ldi	r23, 0x0A	; 10
    2794:	97 9f       	mul	r25, r23
    2796:	90 2d       	mov	r25, r0
    2798:	87 9f       	mul	r24, r23
    279a:	80 2d       	mov	r24, r0
    279c:	91 0d       	add	r25, r1
    279e:	11 24       	eor	r1, r1
    27a0:	08 95       	ret

000027a2 <_exit>:
    27a2:	f8 94       	cli

000027a4 <__stop_program>:
    27a4:	ff cf       	rjmp	.-2      	; 0x27a4 <__stop_program>
