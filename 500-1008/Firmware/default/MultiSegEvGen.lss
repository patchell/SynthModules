
MultiSegEvGen.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ea  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         000006cc  00000000  00000000  00000140  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000085  00000000  00000000  0000080c  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_aranges 00000020  00000000  00000000  00000891  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000001b  00000000  00000000  000008b1  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000009b  00000000  00000000  000008cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000005f  00000000  00000000  00000967  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000012c  00000000  00000000  000009c6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000020  00000000  00000000  00000af4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000000bd  00000000  00000000  00000b14  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000013  00000000  00000000  00000bd1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 73 00 	jmp	0xe6	; 0xe6 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
int main(void)
{
	char State = EVSTATE_RELEASE;
	char in;

	DDRD = 0xf0;
  80:	80 ef       	ldi	r24, 0xF0	; 240
  82:	8a b9       	out	0x0a, r24	; 10
	DDRB = 0x0f;
  84:	8f e0       	ldi	r24, 0x0F	; 15
  86:	84 b9       	out	0x04, r24	; 4

	PORTD |= 0xff;
  88:	8b b1       	in	r24, 0x0b	; 11
  8a:	8f ef       	ldi	r24, 0xFF	; 255
  8c:	8b b9       	out	0x0b, r24	; 11
	PORTD &= State;
  8e:	8b b1       	in	r24, 0x0b	; 11
  90:	80 77       	andi	r24, 0x70	; 112
  92:	8b b9       	out	0x0b, r24	; 11
	PORTB &= ~EVSTATEOUT_SUSTAIN;
  94:	2a 98       	cbi	0x05, 2	; 5
	PORTB |= EVSTATEOUT_RELEASE;
  96:	2b 9a       	sbi	0x05, 3	; 5
	{
		switch(State)
		{
			case EVSTATE_RELEASE:
				do {
					in = PORTD & EVGATE;
  98:	8b b1       	in	r24, 0x0b	; 11
				}while(!in);
  9a:	84 70       	andi	r24, 0x04	; 4
  9c:	e9 f3       	breq	.-6      	; 0x98 <main+0x18>
				State = EVSTATE_ATTACK;
				PORTD |= 0xff;
  9e:	8b b1       	in	r24, 0x0b	; 11
  a0:	8f ef       	ldi	r24, 0xFF	; 255
  a2:	8b b9       	out	0x0b, r24	; 11
				PORTD &= State;
  a4:	8b b1       	in	r24, 0x0b	; 11
  a6:	80 7e       	andi	r24, 0xE0	; 224
  a8:	8b b9       	out	0x0b, r24	; 11
				PORTB &= ~EVSTATEOUT_RELEASE;
  aa:	2b 98       	cbi	0x05, 3	; 5
				PORTB |= EVSTATEOUT_ATTACK;
  ac:	28 9a       	sbi	0x05, 0	; 5
				break;
			case EVSTATE_ATTACK:
				do {
					in = PORTD & EVDONE;
  ae:	8b b1       	in	r24, 0x0b	; 11
				}while(!in);
  b0:	88 70       	andi	r24, 0x08	; 8
  b2:	e9 f3       	breq	.-6      	; 0xae <main+0x2e>
				State = EVSTATE_SEG1;
				PORTD |= 0xff;
  b4:	8b b1       	in	r24, 0x0b	; 11
  b6:	8f ef       	ldi	r24, 0xFF	; 255
  b8:	8b b9       	out	0x0b, r24	; 11
				PORTD &= State;
  ba:	8b b1       	in	r24, 0x0b	; 11
  bc:	80 7d       	andi	r24, 0xD0	; 208
  be:	8b b9       	out	0x0b, r24	; 11
				PORTB &= ~EVSTATEOUT_ATTACK;
  c0:	28 98       	cbi	0x05, 0	; 5
				PORTB |= EVSTATEOUT_SEG1;
  c2:	29 9a       	sbi	0x05, 1	; 5
				break;
			case EVSTATE_SEG1:
				do {
					in = PORTD & EVDONE;
  c4:	8b b1       	in	r24, 0x0b	; 11
				}while(!in);
  c6:	88 70       	andi	r24, 0x08	; 8
  c8:	e9 f3       	breq	.-6      	; 0xc4 <main+0x44>
				State = EVSTATE_SUSTAIN;
				PORTD |= 0xff;
  ca:	8b b1       	in	r24, 0x0b	; 11
  cc:	8f ef       	ldi	r24, 0xFF	; 255
  ce:	8b b9       	out	0x0b, r24	; 11
				PORTD &= State;
  d0:	8b b1       	in	r24, 0x0b	; 11
  d2:	80 7b       	andi	r24, 0xB0	; 176
  d4:	8b b9       	out	0x0b, r24	; 11
				PORTB &= ~EVSTATEOUT_SEG1;
  d6:	29 98       	cbi	0x05, 1	; 5
				PORTB |= EVSTATEOUT_SUSTAIN;
  d8:	2a 9a       	sbi	0x05, 2	; 5
				break;
			case EVSTATE_SUSTAIN:
				do {
					in = PORTD;
  da:	8b b1       	in	r24, 0x0b	; 11
				}while(!(in & EVDONE) || (in & EVGATE));
  dc:	83 ff       	sbrs	r24, 3
  de:	fd cf       	rjmp	.-6      	; 0xda <main+0x5a>
  e0:	82 fd       	sbrc	r24, 2
  e2:	fb cf       	rjmp	.-10     	; 0xda <main+0x5a>
  e4:	d1 cf       	rjmp	.-94     	; 0x88 <main+0x8>

000000e6 <_exit>:
  e6:	f8 94       	cli

000000e8 <__stop_program>:
  e8:	ff cf       	rjmp	.-2      	; 0xe8 <__stop_program>
