
Firmware100-1059.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000a8  00800100  00002282  00002316  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002282  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000155  008001a8  008001a8  000023be  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000023be  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000023f0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000548  00000000  00000000  00002430  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00006b7e  00000000  00000000  00002978  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000024ea  00000000  00000000  000094f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002b3b  00000000  00000000  0000b9e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000bd4  00000000  00000000  0000e51c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001064  00000000  00000000  0000f0f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003870  00000000  00000000  00010154  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000003e8  00000000  00000000  000139c4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	55 c0       	rjmp	.+170    	; 0xac <__ctors_end>
       2:	00 00       	nop
       4:	cc c4       	rjmp	.+2456   	; 0x99e <__vector_1>
       6:	00 00       	nop
       8:	21 c5       	rjmp	.+2626   	; 0xa4c <__vector_2>
       a:	00 00       	nop
       c:	74 c5       	rjmp	.+2792   	; 0xaf6 <__vector_3>
       e:	00 00       	nop
      10:	6b c0       	rjmp	.+214    	; 0xe8 <__bad_interrupt>
      12:	00 00       	nop
      14:	69 c0       	rjmp	.+210    	; 0xe8 <__bad_interrupt>
      16:	00 00       	nop
      18:	67 c0       	rjmp	.+206    	; 0xe8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	65 c0       	rjmp	.+202    	; 0xe8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	63 c0       	rjmp	.+198    	; 0xe8 <__bad_interrupt>
      22:	00 00       	nop
      24:	61 c0       	rjmp	.+194    	; 0xe8 <__bad_interrupt>
      26:	00 00       	nop
      28:	5f c0       	rjmp	.+190    	; 0xe8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	5d c0       	rjmp	.+186    	; 0xe8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	5b c0       	rjmp	.+182    	; 0xe8 <__bad_interrupt>
      32:	00 00       	nop
      34:	59 c0       	rjmp	.+178    	; 0xe8 <__bad_interrupt>
      36:	00 00       	nop
      38:	57 c0       	rjmp	.+174    	; 0xe8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	55 c0       	rjmp	.+170    	; 0xe8 <__bad_interrupt>
      3e:	00 00       	nop
      40:	53 c0       	rjmp	.+166    	; 0xe8 <__bad_interrupt>
      42:	00 00       	nop
      44:	51 c0       	rjmp	.+162    	; 0xe8 <__bad_interrupt>
      46:	00 00       	nop
      48:	43 c4       	rjmp	.+2182   	; 0x8d0 <__vector_18>
      4a:	00 00       	nop
      4c:	4d c0       	rjmp	.+154    	; 0xe8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	0c 94 56 0f 	jmp	0x1eac	; 0x1eac <__vector_20>
      54:	0c 94 0e 10 	jmp	0x201c	; 0x201c <__vector_21>
      58:	47 c0       	rjmp	.+142    	; 0xe8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	45 c0       	rjmp	.+138    	; 0xe8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	da c3       	rjmp	.+1972   	; 0x816 <__vector_24>
      62:	00 00       	nop
      64:	41 c0       	rjmp	.+130    	; 0xe8 <__bad_interrupt>
      66:	00 00       	nop
      68:	3f c0       	rjmp	.+126    	; 0xe8 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	3d c0       	rjmp	.+122    	; 0xe8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	3b c0       	rjmp	.+118    	; 0xe8 <__bad_interrupt>
      72:	00 00       	nop
      74:	39 c0       	rjmp	.+114    	; 0xe8 <__bad_interrupt>
      76:	00 00       	nop
      78:	37 c0       	rjmp	.+110    	; 0xe8 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	35 c0       	rjmp	.+106    	; 0xe8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	33 c0       	rjmp	.+102    	; 0xe8 <__bad_interrupt>
      82:	00 00       	nop
      84:	31 c0       	rjmp	.+98     	; 0xe8 <__bad_interrupt>
      86:	00 00       	nop
      88:	2f c0       	rjmp	.+94     	; 0xe8 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	06 0a       	sbc	r0, r22
      8e:	0d 0a       	sbc	r0, r29
      90:	12 0a       	sbc	r1, r18
      92:	17 0a       	sbc	r1, r23
      94:	ff 0a       	sbc	r15, r31
      96:	ff 0a       	sbc	r15, r31
      98:	ff 0a       	sbc	r15, r31
      9a:	1c 0a       	sbc	r1, r28
      9c:	20 0a       	sbc	r2, r16
      9e:	ff 0a       	sbc	r15, r31
      a0:	22 0a       	sbc	r2, r18
      a2:	24 0a       	sbc	r2, r20
      a4:	26 0a       	sbc	r2, r22
      a6:	ff 0a       	sbc	r15, r31
      a8:	ff 0a       	sbc	r15, r31
      aa:	28 0a       	sbc	r2, r24

000000ac <__ctors_end>:
      ac:	11 24       	eor	r1, r1
      ae:	1f be       	out	0x3f, r1	; 63
      b0:	cf ef       	ldi	r28, 0xFF	; 255
      b2:	d0 e4       	ldi	r29, 0x40	; 64
      b4:	de bf       	out	0x3e, r29	; 62
      b6:	cd bf       	out	0x3d, r28	; 61

000000b8 <__do_copy_data>:
      b8:	11 e0       	ldi	r17, 0x01	; 1
      ba:	a0 e0       	ldi	r26, 0x00	; 0
      bc:	b1 e0       	ldi	r27, 0x01	; 1
      be:	e2 e8       	ldi	r30, 0x82	; 130
      c0:	f2 e2       	ldi	r31, 0x22	; 34
      c2:	00 e0       	ldi	r16, 0x00	; 0
      c4:	0b bf       	out	0x3b, r16	; 59
      c6:	02 c0       	rjmp	.+4      	; 0xcc <__do_copy_data+0x14>
      c8:	07 90       	elpm	r0, Z+
      ca:	0d 92       	st	X+, r0
      cc:	a8 3a       	cpi	r26, 0xA8	; 168
      ce:	b1 07       	cpc	r27, r17
      d0:	d9 f7       	brne	.-10     	; 0xc8 <__do_copy_data+0x10>

000000d2 <__do_clear_bss>:
      d2:	22 e0       	ldi	r18, 0x02	; 2
      d4:	a8 ea       	ldi	r26, 0xA8	; 168
      d6:	b1 e0       	ldi	r27, 0x01	; 1
      d8:	01 c0       	rjmp	.+2      	; 0xdc <.do_clear_bss_start>

000000da <.do_clear_bss_loop>:
      da:	1d 92       	st	X+, r1

000000dc <.do_clear_bss_start>:
      dc:	ad 3f       	cpi	r26, 0xFD	; 253
      de:	b2 07       	cpc	r27, r18
      e0:	e1 f7       	brne	.-8      	; 0xda <.do_clear_bss_loop>
      e2:	72 d5       	rcall	.+2788   	; 0xbc8 <main>
      e4:	0c 94 3f 11 	jmp	0x227e	; 0x227e <_exit>

000000e8 <__bad_interrupt>:
      e8:	8b cf       	rjmp	.-234    	; 0x0 <__vectors>

000000ea <Disable>:
	.global Disable
	.global Enable

Disable:

	in	r24,_SFR_IO_ADDR(SREG)		;get status register
      ea:	8f b7       	in	r24, 0x3f	; 63
	cli								;disable interrupt
      ec:	f8 94       	cli
	andi r24,0x80					;strip off interrupt bit
      ee:	80 78       	andi	r24, 0x80	; 128
	ret
      f0:	08 95       	ret

000000f2 <Enable>:

Enable:
	in r25,_SFR_IO_ADDR(SREG)	;get the status register
      f2:	9f b7       	in	r25, 0x3f	; 63
	or r25,r24					;set bits in status reg
      f4:	98 2b       	or	r25, r24
	out _SFR_IO_ADDR(SREG),r25	;save new status register
      f6:	9f bf       	out	0x3f, r25	; 63
	ret
      f8:	08 95       	ret

000000fa <CreateSemaphore>:
**	n............name of semaphore (DEBUG only)                           **
**                                                                        **
***************************************************************************/

void CreateSemaphore(SEMAPHORE *pSem,int InitCount,int Mode,char *n)
{
      fa:	cf 93       	push	r28
      fc:	df 93       	push	r29
      fe:	ec 01       	movw	r28, r24
	char sr;

	pSem->EventCount = InitCount;	//set initial count
     100:	7b 87       	std	Y+11, r23	; 0x0b
     102:	6a 87       	std	Y+10, r22	; 0x0a
	pSem->SemaphoreMode = Mode;	//set mode
     104:	59 87       	std	Y+9, r21	; 0x09
     106:	48 87       	std	Y+8, r20	; 0x08
	strcpy(pSem->name,n);			//copy name in
     108:	b9 01       	movw	r22, r18
     10a:	0c 96       	adiw	r24, 0x0c	; 12
     10c:	0e 94 05 11 	call	0x220a	; 0x220a <strcpy>
	pSem->task_head = 0;				//no tasks waiting
     110:	19 82       	std	Y+1, r1	; 0x01
     112:	18 82       	st	Y, r1
	pSem->task_tail = 0;				//no tasks waiting
     114:	1b 82       	std	Y+3, r1	; 0x03
     116:	1a 82       	std	Y+2, r1	; 0x02
	//-------------------------------------------------------
	// if Mode==SEMAPHORE_MODE_TIMEOUT, then put this
	// semaphore into timeout list
	//-------------------------------------------------------
	// enter critical section, disable interrupts
	sr = Disable();
     118:	e8 df       	rcall	.-48     	; 0xea <Disable>
	if(pSem->SemaphoreMode == SEMAPHORE_MODE_TIMEOUT)
     11a:	28 85       	ldd	r18, Y+8	; 0x08
     11c:	39 85       	ldd	r19, Y+9	; 0x09
     11e:	21 30       	cpi	r18, 0x01	; 1
     120:	31 05       	cpc	r19, r1
     122:	c9 f4       	brne	.+50     	; 0x156 <CreateSemaphore+0x5c>
	{
		if(pTimeoutList)	//is the list already started?
     124:	e0 91 ca 01 	lds	r30, 0x01CA	; 0x8001ca <pTimeoutList>
     128:	f0 91 cb 01 	lds	r31, 0x01CB	; 0x8001cb <pTimeoutList+0x1>
     12c:	30 97       	sbiw	r30, 0x00	; 0
     12e:	59 f0       	breq	.+22     	; 0x146 <CreateSemaphore+0x4c>
		{
			pSem->Tnext = pTimeoutList;	//make current head next in line
     130:	fd 83       	std	Y+5, r31	; 0x05
     132:	ec 83       	std	Y+4, r30	; 0x04
			pSem->Tprev = 0;			//these is no previous entry
     134:	1f 82       	std	Y+7, r1	; 0x07
     136:	1e 82       	std	Y+6, r1	; 0x06
			pTimeoutList->Tprev = pSem;	//this will be prev for next entry
     138:	d7 83       	std	Z+7, r29	; 0x07
     13a:	c6 83       	std	Z+6, r28	; 0x06
			pTimeoutList = pSem;			//this is now the new head of list
     13c:	d0 93 cb 01 	sts	0x01CB, r29	; 0x8001cb <pTimeoutList+0x1>
     140:	c0 93 ca 01 	sts	0x01CA, r28	; 0x8001ca <pTimeoutList>
     144:	08 c0       	rjmp	.+16     	; 0x156 <CreateSemaphore+0x5c>
		}
		else			//no start list
		{
			pTimeoutList = pSem;	//set timeout list
     146:	d0 93 cb 01 	sts	0x01CB, r29	; 0x8001cb <pTimeoutList+0x1>
     14a:	c0 93 ca 01 	sts	0x01CA, r28	; 0x8001ca <pTimeoutList>
			pSem->Tnext = 0;
     14e:	1d 82       	std	Y+5, r1	; 0x05
     150:	1c 82       	std	Y+4, r1	; 0x04
			pSem->Tprev = 0;
     152:	1f 82       	std	Y+7, r1	; 0x07
		}
	}
	//exit critical section, enable IRQ
	Enable(sr);	//restore interrupts
     154:	1e 82       	std	Y+6, r1	; 0x06
     156:	cd df       	rcall	.-102    	; 0xf2 <Enable>
}
     158:	df 91       	pop	r29
     15a:	cf 91       	pop	r28
     15c:	08 95       	ret

0000015e <NewSemaphore>:
	return value:
		pointer to an Event Control block on success
		OR NULL on fail
************************************************/
SEMAPHORE *NewSemaphore(int InitCount,int Mode,char *name)
{
     15e:	cf 92       	push	r12
     160:	df 92       	push	r13
     162:	ef 92       	push	r14
     164:	ff 92       	push	r15
     166:	0f 93       	push	r16
     168:	1f 93       	push	r17
     16a:	cf 93       	push	r28
     16c:	df 93       	push	r29
     16e:	8c 01       	movw	r16, r24
     170:	7b 01       	movw	r14, r22
     172:	6a 01       	movw	r12, r20
*********************************************/
static SEMAPHORE *AllocSemaphore(void)
{
	SEMAPHORE *rv;
	// enter critical section disable IRQ
	char sr = Disable();
     174:	ba df       	rcall	.-140    	; 0xea <Disable>
	if (pSemaphorePool)	//check the pool
     176:	c0 91 a8 01 	lds	r28, 0x01A8	; 0x8001a8 <__data_end>
     17a:	d0 91 a9 01 	lds	r29, 0x01A9	; 0x8001a9 <__data_end+0x1>
     17e:	20 97       	sbiw	r28, 0x00	; 0
     180:	41 f0       	breq	.+16     	; 0x192 <NewSemaphore+0x34>
	{
		//get first SEMAPHORE in pool
		rv = pSemaphorePool;
		//new head of pool
		pSemaphorePool = pSemaphorePool->Tnext;
     182:	2c 81       	ldd	r18, Y+4	; 0x04
     184:	3d 81       	ldd	r19, Y+5	; 0x05
     186:	30 93 a9 01 	sts	0x01A9, r19	; 0x8001a9 <__data_end+0x1>
     18a:	20 93 a8 01 	sts	0x01A8, r18	; 0x8001a8 <__data_end>
		//exit critical section
		Enable(sr);
     18e:	b1 df       	rcall	.-158    	; 0xf2 <Enable>
	}
	else
	{
		//exit critical section
		Enable(sr);
     190:	07 c0       	rjmp	.+14     	; 0x1a0 <NewSemaphore+0x42>
		//allocate SEMAPHORE from heap
		rv = (SEMAPHORE *)malloc(sizeof(SEMAPHORE));	//or allocate from the heap
     192:	af df       	rcall	.-162    	; 0xf2 <Enable>
     194:	80 e2       	ldi	r24, 0x20	; 32
     196:	90 e0       	ldi	r25, 0x00	; 0
     198:	c3 d5       	rcall	.+2950   	; 0xd20 <malloc>
     19a:	ec 01       	movw	r28, r24
************************************************/
SEMAPHORE *NewSemaphore(int InitCount,int Mode,char *name)
{
	SEMAPHORE *pSem;

	if((pSem = AllocSemaphore()) != NULL)
     19c:	89 2b       	or	r24, r25
     19e:	29 f0       	breq	.+10     	; 0x1aa <NewSemaphore+0x4c>
		CreateSemaphore(pSem,InitCount,Mode,name);
     1a0:	96 01       	movw	r18, r12
     1a2:	a7 01       	movw	r20, r14
     1a4:	b8 01       	movw	r22, r16
     1a6:	ce 01       	movw	r24, r28
     1a8:	a8 df       	rcall	.-176    	; 0xfa <CreateSemaphore>
	return pSem;
}
     1aa:	ce 01       	movw	r24, r28
     1ac:	df 91       	pop	r29
     1ae:	cf 91       	pop	r28
     1b0:	1f 91       	pop	r17
     1b2:	0f 91       	pop	r16
     1b4:	ff 90       	pop	r15
     1b6:	ef 90       	pop	r14
     1b8:	df 90       	pop	r13
     1ba:	cf 90       	pop	r12
     1bc:	08 95       	ret

000001be <DeleteSemaphore>:
**		e..........pointer to SEMAPHORE block that describes the semaphore
**
*******************************************************************************/

void DeleteSemaphore(SEMAPHORE *pSem)
{
     1be:	ff 92       	push	r15
     1c0:	0f 93       	push	r16
     1c2:	1f 93       	push	r17
     1c4:	cf 93       	push	r28
     1c6:	df 93       	push	r29
     1c8:	ec 01       	movw	r28, r24
	char sr;
	TCB *t;

	//are there any tasks waiting for this sucker?
	//enter critical section, disable IRQ
	sr = Disable();
     1ca:	8f df       	rcall	.-226    	; 0xea <Disable>
     1cc:	f8 2e       	mov	r15, r24
	while(pSem->task_head)		//remove all tasks
     1ce:	e8 81       	ld	r30, Y
     1d0:	f9 81       	ldd	r31, Y+1	; 0x01
     1d2:	30 97       	sbiw	r30, 0x00	; 0
     1d4:	99 f0       	breq	.+38     	; 0x1fc <DeleteSemaphore+0x3e>
	{
		t = pSem->task_head;		//get first task in
		pSem->task_head = t->next;       //remove from list
		t->next = (TCB *)0;
		t->status = EVENT_DELETED;	//return this value
     1d6:	0c ef       	ldi	r16, 0xFC	; 252
     1d8:	1f ef       	ldi	r17, 0xFF	; 255
	//enter critical section, disable IRQ
	sr = Disable();
	while(pSem->task_head)		//remove all tasks
	{
		t = pSem->task_head;		//get first task in
		pSem->task_head = t->next;       //remove from list
     1da:	84 89       	ldd	r24, Z+20	; 0x14
     1dc:	95 89       	ldd	r25, Z+21	; 0x15
     1de:	99 83       	std	Y+1, r25	; 0x01
     1e0:	88 83       	st	Y, r24
		t->next = (TCB *)0;
     1e2:	15 8a       	std	Z+21, r1	; 0x15
     1e4:	14 8a       	std	Z+20, r1	; 0x14
		t->status = EVENT_DELETED;	//return this value
     1e6:	11 87       	std	Z+9, r17	; 0x09
     1e8:	00 87       	std	Z+8, r16	; 0x08
		Insert(&ActiveTasks,t);	//put task back onto active list
     1ea:	bf 01       	movw	r22, r30
     1ec:	8c ec       	ldi	r24, 0xCC	; 204
     1ee:	91 e0       	ldi	r25, 0x01	; 1
     1f0:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <Insert>
	TCB *t;

	//are there any tasks waiting for this sucker?
	//enter critical section, disable IRQ
	sr = Disable();
	while(pSem->task_head)		//remove all tasks
     1f4:	e8 81       	ld	r30, Y
     1f6:	f9 81       	ldd	r31, Y+1	; 0x01
     1f8:	30 97       	sbiw	r30, 0x00	; 0
***********************************************/
static void FreeSemaphore(SEMAPHORE *pSem)
{
	char sr;
	//enter critical section disable IRQ
	sr = Disable();
     1fa:	79 f7       	brne	.-34     	; 0x1da <DeleteSemaphore+0x1c>
     1fc:	76 df       	rcall	.-276    	; 0xea <Disable>
	if(pSem->SemaphoreMode)	//is it in timeout list?
     1fe:	28 85       	ldd	r18, Y+8	; 0x08
     200:	39 85       	ldd	r19, Y+9	; 0x09
     202:	23 2b       	or	r18, r19
     204:	e9 f0       	breq	.+58     	; 0x240 <DeleteSemaphore+0x82>
	{
		//remove semaphore from timeout list
		if(pSem == pTimeoutList)
     206:	20 91 ca 01 	lds	r18, 0x01CA	; 0x8001ca <pTimeoutList>
     20a:	30 91 cb 01 	lds	r19, 0x01CB	; 0x8001cb <pTimeoutList+0x1>
     20e:	c2 17       	cp	r28, r18
     210:	d3 07       	cpc	r29, r19
     212:	31 f4       	brne	.+12     	; 0x220 <DeleteSemaphore+0x62>
			pTimeoutList = pSem->Tnext;
     214:	2c 81       	ldd	r18, Y+4	; 0x04
     216:	3d 81       	ldd	r19, Y+5	; 0x05
     218:	30 93 cb 01 	sts	0x01CB, r19	; 0x8001cb <pTimeoutList+0x1>
     21c:	20 93 ca 01 	sts	0x01CA, r18	; 0x8001ca <pTimeoutList>
		if(pSem->Tprev)
     220:	ee 81       	ldd	r30, Y+6	; 0x06
     222:	ff 81       	ldd	r31, Y+7	; 0x07
     224:	30 97       	sbiw	r30, 0x00	; 0
     226:	21 f0       	breq	.+8      	; 0x230 <DeleteSemaphore+0x72>
			pSem->Tprev->Tnext = pSem->Tnext;
     228:	2c 81       	ldd	r18, Y+4	; 0x04
     22a:	3d 81       	ldd	r19, Y+5	; 0x05
     22c:	35 83       	std	Z+5, r19	; 0x05
     22e:	24 83       	std	Z+4, r18	; 0x04
		if(pSem->Tnext)
     230:	ec 81       	ldd	r30, Y+4	; 0x04
     232:	fd 81       	ldd	r31, Y+5	; 0x05
     234:	30 97       	sbiw	r30, 0x00	; 0
     236:	21 f0       	breq	.+8      	; 0x240 <DeleteSemaphore+0x82>
			pSem->Tnext->Tprev = pSem->Tprev;
     238:	2e 81       	ldd	r18, Y+6	; 0x06
     23a:	3f 81       	ldd	r19, Y+7	; 0x07
     23c:	37 83       	std	Z+7, r19	; 0x07
     23e:	26 83       	std	Z+6, r18	; 0x06
	}
	//put SEMAPHORE into pool
	pSem->Tnext = pSemaphorePool;
     240:	20 91 a8 01 	lds	r18, 0x01A8	; 0x8001a8 <__data_end>
     244:	30 91 a9 01 	lds	r19, 0x01A9	; 0x8001a9 <__data_end+0x1>
     248:	3d 83       	std	Y+5, r19	; 0x05
     24a:	2c 83       	std	Y+4, r18	; 0x04
	pSemaphorePool = pSem;
     24c:	d0 93 a9 01 	sts	0x01A9, r29	; 0x8001a9 <__data_end+0x1>
     250:	c0 93 a8 01 	sts	0x01A8, r28	; 0x8001a8 <__data_end>
		t->next = (TCB *)0;
		t->status = EVENT_DELETED;	//return this value
		Insert(&ActiveTasks,t);	//put task back onto active list
	}
	FreeSemaphore(pSem);		//put semaphore back in pool
	Enable(sr);
     254:	4e df       	rcall	.-356    	; 0xf2 <Enable>
     256:	8f 2d       	mov	r24, r15
     258:	4c df       	rcall	.-360    	; 0xf2 <Enable>
}
     25a:	df 91       	pop	r29
     25c:	cf 91       	pop	r28
     25e:	1f 91       	pop	r17
     260:	0f 91       	pop	r16
     262:	ff 90       	pop	r15
     264:	08 95       	ret

00000266 <CreateTask>:
**	arg.............argument to be passed to function...it chan either be 
**  a value, or a pointer to some data
***************************************************************************************/

void CreateTask(TCB *t, void (*task)(void *), int stacksize,int priority,char *name,void *arg)
{
     266:	6f 92       	push	r6
     268:	7f 92       	push	r7
     26a:	8f 92       	push	r8
     26c:	9f 92       	push	r9
     26e:	af 92       	push	r10
     270:	bf 92       	push	r11
     272:	cf 92       	push	r12
     274:	df 92       	push	r13
     276:	ef 92       	push	r14
     278:	ff 92       	push	r15
     27a:	0f 93       	push	r16
     27c:	1f 93       	push	r17
     27e:	cf 93       	push	r28
     280:	df 93       	push	r29
     282:	6c 01       	movw	r12, r24
     284:	66 2e       	mov	r6, r22
     286:	77 2e       	mov	r7, r23
     288:	ea 01       	movw	r28, r20
     28a:	49 01       	movw	r8, r18
		pointer to block of ram to use as stack on success
		OR NULL on fail
*********************************************************/
static void *AllocStack(size_t len)
{
	return malloc(len);
     28c:	ca 01       	movw	r24, r20
     28e:	48 d5       	rcall	.+2704   	; 0xd20 <malloc>
     290:	5c 01       	movw	r10, r24

	stack = AllocStack(stacksize);
	//set all stack locations with an
	//arbitrary value to make DEBUG
	// much easier.
	for(i=0;i<stacksize;++i) 
     292:	1c 16       	cp	r1, r28
     294:	1d 06       	cpc	r1, r29
     296:	4c f4       	brge	.+18     	; 0x2aa <CreateTask+0x44>
     298:	fc 01       	movw	r30, r24
     29a:	9c 01       	movw	r18, r24
     29c:	2c 0f       	add	r18, r28
     29e:	3d 1f       	adc	r19, r29
		stack[i] = 0xcd;
     2a0:	8d ec       	ldi	r24, 0xCD	; 205
     2a2:	81 93       	st	Z+, r24

	stack = AllocStack(stacksize);
	//set all stack locations with an
	//arbitrary value to make DEBUG
	// much easier.
	for(i=0;i<stacksize;++i) 
     2a4:	e2 17       	cp	r30, r18
     2a6:	f3 07       	cpc	r31, r19
		stack[i] = 0xcd;
	//enter critical section, Disable IRQ
	sr = Disable();
     2a8:	e1 f7       	brne	.-8      	; 0x2a2 <CreateTask+0x3c>
     2aa:	1f df       	rcall	.-450    	; 0xea <Disable>
	if(t)
     2ac:	c1 14       	cp	r12, r1
     2ae:	d1 04       	cpc	r13, r1
     2b0:	09 f4       	brne	.+2      	; 0x2b4 <CreateTask+0x4e>
     2b2:	8c c0       	rjmp	.+280    	; 0x3cc <CreateTask+0x166>
	{
		//initialize TCB member variables
		t->TcbSwaps = 0;
     2b4:	d6 01       	movw	r26, r12
     2b6:	1f 96       	adiw	r26, 0x0f	; 15
     2b8:	1c 92       	st	X, r1
     2ba:	1e 92       	st	-X, r1
     2bc:	1e 97       	sbiw	r26, 0x0e	; 14
		t->stacksize = stacksize;
     2be:	15 96       	adiw	r26, 0x05	; 5
     2c0:	dc 93       	st	X, r29
     2c2:	ce 93       	st	-X, r28
     2c4:	14 97       	sbiw	r26, 0x04	; 4
		t->priority = priority;
     2c6:	17 96       	adiw	r26, 0x07	; 7
     2c8:	9c 92       	st	X, r9
     2ca:	8e 92       	st	-X, r8
     2cc:	16 97       	sbiw	r26, 0x06	; 6
		t->TimeStamp = 0;
     2ce:	1d 96       	adiw	r26, 0x0d	; 13
     2d0:	1c 92       	st	X, r1
     2d2:	1e 92       	st	-X, r1
     2d4:	1c 97       	sbiw	r26, 0x0c	; 12
		t->name = name;
     2d6:	53 96       	adiw	r26, 0x13	; 19
     2d8:	1c 93       	st	X, r17
     2da:	0e 93       	st	-X, r16
     2dc:	52 97       	sbiw	r26, 0x12	; 18
		t->stacktop = stack;
     2de:	13 96       	adiw	r26, 0x03	; 3
     2e0:	bc 92       	st	X, r11
     2e2:	ae 92       	st	-X, r10
     2e4:	12 97       	sbiw	r26, 0x02	; 2
		t->next = (TCB *)0;
     2e6:	55 96       	adiw	r26, 0x15	; 21
     2e8:	1c 92       	st	X, r1
     2ea:	1e 92       	st	-X, r1
     2ec:	54 97       	sbiw	r26, 0x14	; 20
		t->list = (TCB *)0;
     2ee:	57 96       	adiw	r26, 0x17	; 23
     2f0:	1c 92       	st	X, r1
     2f2:	1e 92       	st	-X, r1
     2f4:	56 97       	sbiw	r26, 0x16	; 22
		stk = stack + stacksize-1;
     2f6:	fe 01       	movw	r30, r28
     2f8:	31 97       	sbiw	r30, 0x01	; 1
     2fa:	ea 0d       	add	r30, r10
     2fc:	fb 1d       	adc	r31, r11
		//Initialize the stack
		*stk-- = (char)LO( (unsigned)task);/*	return address	*/
     2fe:	60 82       	st	Z, r6
		*stk-- = (char)HI( (unsigned)task);
     300:	df 01       	movw	r26, r30
     302:	11 97       	sbiw	r26, 0x01	; 1
     304:	7c 92       	st	X, r7
		*stk-- = 31;		/*	r31 = 0	*/
     306:	11 97       	sbiw	r26, 0x01	; 1
     308:	9f e1       	ldi	r25, 0x1F	; 31
     30a:	9c 93       	st	X, r25
		*stk-- = 0x80;	/*	SREG Interrupts enabled	*/
     30c:	11 97       	sbiw	r26, 0x01	; 1
     30e:	90 e8       	ldi	r25, 0x80	; 128
     310:	9c 93       	st	X, r25
		*stk-- = 30;		/*	r30 = 0	*/
     312:	11 97       	sbiw	r26, 0x01	; 1
     314:	9e e1       	ldi	r25, 0x1E	; 30
     316:	9c 93       	st	X, r25
		*stk-- = 29;		/*	r29 = 0	*/
     318:	11 97       	sbiw	r26, 0x01	; 1
     31a:	9d e1       	ldi	r25, 0x1D	; 29
     31c:	9c 93       	st	X, r25
		*stk-- = 28;		/*	r28 = 0	*/
     31e:	11 97       	sbiw	r26, 0x01	; 1
     320:	9c e1       	ldi	r25, 0x1C	; 28
     322:	9c 93       	st	X, r25
		*stk-- = 27;		/*	r27 = 0	*/
     324:	11 97       	sbiw	r26, 0x01	; 1
     326:	9b e1       	ldi	r25, 0x1B	; 27
     328:	9c 93       	st	X, r25
		*stk-- = 26;		/*	r26 = 0	*/
     32a:	11 97       	sbiw	r26, 0x01	; 1
     32c:	9a e1       	ldi	r25, 0x1A	; 26
     32e:	9c 93       	st	X, r25
		*stk-- = (char)HI( (unsigned)arg);		/*	r25 = 0	*/
     330:	11 97       	sbiw	r26, 0x01	; 1
     332:	fc 92       	st	X, r15
		*stk-- = (char)LO( (unsigned)arg);		/*	r24 = 0	*/
     334:	11 97       	sbiw	r26, 0x01	; 1
     336:	ec 92       	st	X, r14
		*stk-- = 23;		/*	r23 = 0	*/
     338:	11 97       	sbiw	r26, 0x01	; 1
     33a:	97 e1       	ldi	r25, 0x17	; 23
     33c:	9c 93       	st	X, r25
		*stk-- = 22;		/*	r22 = 0	*/
     33e:	11 97       	sbiw	r26, 0x01	; 1
     340:	96 e1       	ldi	r25, 0x16	; 22
     342:	9c 93       	st	X, r25
		*stk-- = 21;		/*	r21 = 0	*/
     344:	11 97       	sbiw	r26, 0x01	; 1
     346:	95 e1       	ldi	r25, 0x15	; 21
     348:	9c 93       	st	X, r25
		*stk-- = 20;		/*	r20 = 0	*/
     34a:	11 97       	sbiw	r26, 0x01	; 1
     34c:	94 e1       	ldi	r25, 0x14	; 20
     34e:	9c 93       	st	X, r25
		*stk-- = 19;		/*	r19 	*/
     350:	11 97       	sbiw	r26, 0x01	; 1
     352:	93 e1       	ldi	r25, 0x13	; 19
     354:	9c 93       	st	X, r25
		*stk-- = 18;		/*	r18 	*/
     356:	11 97       	sbiw	r26, 0x01	; 1
     358:	92 e1       	ldi	r25, 0x12	; 18
     35a:	9c 93       	st	X, r25
		*stk-- = 17;		/*	r17 	*/
     35c:	11 97       	sbiw	r26, 0x01	; 1
     35e:	91 e1       	ldi	r25, 0x11	; 17
     360:	9c 93       	st	X, r25
		*stk-- = 16;		/*	r16 	*/
     362:	11 97       	sbiw	r26, 0x01	; 1
     364:	90 e1       	ldi	r25, 0x10	; 16
     366:	9c 93       	st	X, r25
		*stk-- = 15;		/*	r15 	*/
     368:	11 97       	sbiw	r26, 0x01	; 1
     36a:	9f e0       	ldi	r25, 0x0F	; 15
     36c:	9c 93       	st	X, r25
		*stk-- = 14;		/*	r14 	*/
     36e:	11 97       	sbiw	r26, 0x01	; 1
     370:	9e e0       	ldi	r25, 0x0E	; 14
     372:	9c 93       	st	X, r25
		*stk-- = 13;		/*	r13 	*/
     374:	11 97       	sbiw	r26, 0x01	; 1
     376:	9d e0       	ldi	r25, 0x0D	; 13
     378:	9c 93       	st	X, r25
		*stk-- = 12;		/*	r12 	*/
     37a:	11 97       	sbiw	r26, 0x01	; 1
     37c:	9c e0       	ldi	r25, 0x0C	; 12
     37e:	9c 93       	st	X, r25
		*stk-- = 11;		/*	r11 	*/
     380:	11 97       	sbiw	r26, 0x01	; 1
     382:	9b e0       	ldi	r25, 0x0B	; 11
     384:	9c 93       	st	X, r25
		*stk-- = 10;		/*	r10 	*/
     386:	11 97       	sbiw	r26, 0x01	; 1
     388:	9a e0       	ldi	r25, 0x0A	; 10
     38a:	9c 93       	st	X, r25
		*stk-- = 9;			/*	r9 		*/
     38c:	11 97       	sbiw	r26, 0x01	; 1
     38e:	99 e0       	ldi	r25, 0x09	; 9
     390:	9c 93       	st	X, r25
		*stk-- = 8;			/*	r8 		*/
     392:	11 97       	sbiw	r26, 0x01	; 1
     394:	98 e0       	ldi	r25, 0x08	; 8
     396:	9c 93       	st	X, r25
		*stk-- = 7;			/*	r7 		*/
     398:	11 97       	sbiw	r26, 0x01	; 1
     39a:	97 e0       	ldi	r25, 0x07	; 7
     39c:	9c 93       	st	X, r25
		*stk-- = 6;			/*	r6 		*/
     39e:	11 97       	sbiw	r26, 0x01	; 1
     3a0:	96 e0       	ldi	r25, 0x06	; 6
     3a2:	9c 93       	st	X, r25
		*stk-- = 5;			/*	r5 		*/
     3a4:	11 97       	sbiw	r26, 0x01	; 1
     3a6:	95 e0       	ldi	r25, 0x05	; 5
     3a8:	9c 93       	st	X, r25
		*stk-- = 4;			/*	r4 		*/
     3aa:	11 97       	sbiw	r26, 0x01	; 1
     3ac:	94 e0       	ldi	r25, 0x04	; 4
     3ae:	9c 93       	st	X, r25
		*stk-- = 3;			/*	r3 		*/
     3b0:	11 97       	sbiw	r26, 0x01	; 1
     3b2:	93 e0       	ldi	r25, 0x03	; 3
     3b4:	9c 93       	st	X, r25
		*stk-- = 2;			/*	r2 		*/
     3b6:	11 97       	sbiw	r26, 0x01	; 1
     3b8:	92 e0       	ldi	r25, 0x02	; 2
     3ba:	9c 93       	st	X, r25
		*stk-- = 0;			/*	r1 must be ZERO 	*/
     3bc:	11 97       	sbiw	r26, 0x01	; 1
     3be:	1c 92       	st	X, r1
		*stk-- = 0;			/*	r0 		*/
     3c0:	11 97       	sbiw	r26, 0x01	; 1
     3c2:	1c 92       	st	X, r1
     3c4:	b3 97       	sbiw	r30, 0x23	; 35
		t->stack = stk;
     3c6:	d6 01       	movw	r26, r12
     3c8:	ed 93       	st	X+, r30
	}
	//exit critical section, enable IRQ
	Enable(sr);
     3ca:	fc 93       	st	X, r31
     3cc:	92 de       	rcall	.-732    	; 0xf2 <Enable>
}
     3ce:	df 91       	pop	r29
     3d0:	cf 91       	pop	r28
     3d2:	1f 91       	pop	r17
     3d4:	0f 91       	pop	r16
     3d6:	ff 90       	pop	r15
     3d8:	ef 90       	pop	r14
     3da:	df 90       	pop	r13
     3dc:	cf 90       	pop	r12
     3de:	bf 90       	pop	r11
     3e0:	af 90       	pop	r10
     3e2:	9f 90       	pop	r9
     3e4:	8f 90       	pop	r8
     3e6:	7f 90       	pop	r7
     3e8:	6f 90       	pop	r6
     3ea:	08 95       	ret

000003ec <DoSwap>:
		This function does a context swap
*******************************************/
void DoSwap(void) __attribute__ ( ( naked ) );
void DoSwap(void)
{
	SAVE_CONTEXT();		//save the context of the current task
     3ec:	ff 93       	push	r31
     3ee:	ff b7       	in	r31, 0x3f	; 63
     3f0:	f8 94       	cli
     3f2:	ff 93       	push	r31
     3f4:	ef 93       	push	r30
     3f6:	df 93       	push	r29
     3f8:	cf 93       	push	r28
     3fa:	bf 93       	push	r27
     3fc:	af 93       	push	r26
     3fe:	9f 93       	push	r25
     400:	8f 93       	push	r24
     402:	7f 93       	push	r23
     404:	6f 93       	push	r22
     406:	5f 93       	push	r21
     408:	4f 93       	push	r20
     40a:	3f 93       	push	r19
     40c:	2f 93       	push	r18
     40e:	1f 93       	push	r17
     410:	0f 93       	push	r16
     412:	ff 92       	push	r15
     414:	ef 92       	push	r14
     416:	df 92       	push	r13
     418:	cf 92       	push	r12
     41a:	bf 92       	push	r11
     41c:	af 92       	push	r10
     41e:	9f 92       	push	r9
     420:	8f 92       	push	r8
     422:	7f 92       	push	r7
     424:	6f 92       	push	r6
     426:	5f 92       	push	r5
     428:	4f 92       	push	r4
     42a:	3f 92       	push	r3
     42c:	2f 92       	push	r2
     42e:	1f 92       	push	r1
     430:	11 24       	eor	r1, r1
     432:	0f 92       	push	r0
     434:	a0 91 d6 01 	lds	r26, 0x01D6	; 0x8001d6 <pCurrentTask>
     438:	b0 91 d7 01 	lds	r27, 0x01D7	; 0x8001d7 <pCurrentTask+0x1>
     43c:	0d b6       	in	r0, 0x3d	; 61
     43e:	0d 92       	st	X+, r0
     440:	0e b6       	in	r0, 0x3e	; 62
     442:	0d 92       	st	X+, r0
	pCurrentTask = pNextTask;	//set current task to next task
     444:	80 91 da 01 	lds	r24, 0x01DA	; 0x8001da <pNextTask>
     448:	90 91 db 01 	lds	r25, 0x01DB	; 0x8001db <pNextTask+0x1>
     44c:	90 93 d7 01 	sts	0x01D7, r25	; 0x8001d7 <pCurrentTask+0x1>
     450:	80 93 d6 01 	sts	0x01D6, r24	; 0x8001d6 <pCurrentTask>
	RESTORE_CONTEXT();		//restore context of new task
     454:	a0 91 da 01 	lds	r26, 0x01DA	; 0x8001da <pNextTask>
     458:	b0 91 db 01 	lds	r27, 0x01DB	; 0x8001db <pNextTask+0x1>
     45c:	cd 91       	ld	r28, X+
     45e:	cd bf       	out	0x3d, r28	; 61
     460:	dd 91       	ld	r29, X+
     462:	de bf       	out	0x3e, r29	; 62
     464:	0f 90       	pop	r0
     466:	1f 90       	pop	r1
     468:	2f 90       	pop	r2
     46a:	3f 90       	pop	r3
     46c:	4f 90       	pop	r4
     46e:	5f 90       	pop	r5
     470:	6f 90       	pop	r6
     472:	7f 90       	pop	r7
     474:	8f 90       	pop	r8
     476:	9f 90       	pop	r9
     478:	af 90       	pop	r10
     47a:	bf 90       	pop	r11
     47c:	cf 90       	pop	r12
     47e:	df 90       	pop	r13
     480:	ef 90       	pop	r14
     482:	ff 90       	pop	r15
     484:	0f 91       	pop	r16
     486:	1f 91       	pop	r17
     488:	2f 91       	pop	r18
     48a:	3f 91       	pop	r19
     48c:	4f 91       	pop	r20
     48e:	5f 91       	pop	r21
     490:	6f 91       	pop	r22
     492:	7f 91       	pop	r23
     494:	8f 91       	pop	r24
     496:	9f 91       	pop	r25
     498:	af 91       	pop	r26
     49a:	bf 91       	pop	r27
     49c:	cf 91       	pop	r28
     49e:	df 91       	pop	r29
     4a0:	ef 91       	pop	r30
     4a2:	ff 91       	pop	r31
     4a4:	f7 fd       	sbrc	r31, 7
     4a6:	03 c0       	rjmp	.+6      	; 0x4ae <irqen>
     4a8:	ff bf       	out	0x3f, r31	; 63
     4aa:	ff 91       	pop	r31
     4ac:	08 95       	ret

000004ae <irqen>:
     4ae:	ff 77       	andi	r31, 0x7F	; 127
     4b0:	ff bf       	out	0x3f, r31	; 63
     4b2:	ff 91       	pop	r31
     4b4:	18 95       	reti

000004b6 <ExitInterrupt>:
************************************************************************/

void ExitInterrupt(void)
{
	//decrement Interrupt level
	--InterruptCount;
     4b6:	80 91 dc 01 	lds	r24, 0x01DC	; 0x8001dc <InterruptCount>
     4ba:	90 91 dd 01 	lds	r25, 0x01DD	; 0x8001dd <InterruptCount+0x1>
     4be:	01 97       	sbiw	r24, 0x01	; 1
     4c0:	90 93 dd 01 	sts	0x01DD, r25	; 0x8001dd <InterruptCount+0x1>
     4c4:	80 93 dc 01 	sts	0x01DC, r24	; 0x8001dc <InterruptCount>
	//don't swap if nested or
	//if multitasking is blocked
	if(!InterruptCount)	
     4c8:	80 91 dc 01 	lds	r24, 0x01DC	; 0x8001dc <InterruptCount>
     4cc:	90 91 dd 01 	lds	r25, 0x01DD	; 0x8001dd <InterruptCount+0x1>
     4d0:	89 2b       	or	r24, r25
     4d2:	09 f0       	breq	.+2      	; 0x4d6 <ExitInterrupt+0x20>
     4d4:	60 c0       	rjmp	.+192    	; 0x596 <irqen+0x8>
	{
		//Update the time stamp in the current task
		pCurrentTask->TimeStamp = TStamp;
     4d6:	40 91 d6 01 	lds	r20, 0x01D6	; 0x8001d6 <pCurrentTask>
     4da:	50 91 d7 01 	lds	r21, 0x01D7	; 0x8001d7 <pCurrentTask+0x1>
     4de:	80 91 fb 02 	lds	r24, 0x02FB	; 0x8002fb <TStamp>
     4e2:	90 91 fc 02 	lds	r25, 0x02FC	; 0x8002fc <TStamp+0x1>
     4e6:	fa 01       	movw	r30, r20
     4e8:	95 87       	std	Z+13, r25	; 0x0d
     4ea:	84 87       	std	Z+12, r24	; 0x0c
		//get the next task and put the current
		//task back into the priority queue
		Replace(&ActiveTasks,(void **)&pNextTask,pCurrentTask);
     4ec:	6a ed       	ldi	r22, 0xDA	; 218
     4ee:	71 e0       	ldi	r23, 0x01	; 1
     4f0:	8c ec       	ldi	r24, 0xCC	; 204
     4f2:	91 e0       	ldi	r25, 0x01	; 1
     4f4:	0e 94 f9 0d 	call	0x1bf2	; 0x1bf2 <Replace>
		//check to see if we got the same task back
		if(pNextTask != pCurrentTask)
     4f8:	e0 91 da 01 	lds	r30, 0x01DA	; 0x8001da <pNextTask>
     4fc:	f0 91 db 01 	lds	r31, 0x01DB	; 0x8001db <pNextTask+0x1>
     500:	80 91 d6 01 	lds	r24, 0x01D6	; 0x8001d6 <pCurrentTask>
     504:	90 91 d7 01 	lds	r25, 0x01D7	; 0x8001d7 <pCurrentTask+0x1>
     508:	e8 17       	cp	r30, r24
     50a:	f9 07       	cpc	r31, r25
     50c:	09 f4       	brne	.+2      	; 0x510 <ExitInterrupt+0x5a>
     50e:	43 c0       	rjmp	.+134    	; 0x596 <irqen+0x8>
		{
			//increment the swap counter
			pNextTask->TcbSwaps++;
     510:	86 85       	ldd	r24, Z+14	; 0x0e
     512:	97 85       	ldd	r25, Z+15	; 0x0f
     514:	01 96       	adiw	r24, 0x01	; 1
     516:	97 87       	std	Z+15, r25	; 0x0f
     518:	86 87       	std	Z+14, r24	; 0x0e
			// the size of the stack
			// ignore return address on
			// stack to 
			// Exit Interrupt
			//-----------------------------
			asm volatile (
     51a:	9e b7       	in	r25, 0x3e	; 62
     51c:	8d b7       	in	r24, 0x3d	; 61
     51e:	02 96       	adiw	r24, 0x02	; 2
     520:	a0 91 d6 01 	lds	r26, 0x01D6	; 0x8001d6 <pCurrentTask>
     524:	b0 91 d7 01 	lds	r27, 0x01D7	; 0x8001d7 <pCurrentTask+0x1>
     528:	8d 93       	st	X+, r24
     52a:	9d 93       	st	X+, r25
			"lds	r26, pCurrentTask		\n\t"	//get address of current task
			"lds	r27, pCurrentTask + 1	\n\t"
			"st		x+, r24					\n\t"	//save stack pointer in TCB
			"st		x+, r25					\n\t"
			);
			pCurrentTask = pNextTask;	//update current task
     52c:	f0 93 d7 01 	sts	0x01D7, r31	; 0x8001d7 <pCurrentTask+0x1>
     530:	e0 93 d6 01 	sts	0x01D6, r30	; 0x8001d6 <pCurrentTask>
			RESTORE_CONTEXT();		//restore next task context
     534:	a0 91 da 01 	lds	r26, 0x01DA	; 0x8001da <pNextTask>
     538:	b0 91 db 01 	lds	r27, 0x01DB	; 0x8001db <pNextTask+0x1>
     53c:	cd 91       	ld	r28, X+
     53e:	cd bf       	out	0x3d, r28	; 61
     540:	dd 91       	ld	r29, X+
     542:	de bf       	out	0x3e, r29	; 62
     544:	0f 90       	pop	r0
     546:	1f 90       	pop	r1
     548:	2f 90       	pop	r2
     54a:	3f 90       	pop	r3
     54c:	4f 90       	pop	r4
     54e:	5f 90       	pop	r5
     550:	6f 90       	pop	r6
     552:	7f 90       	pop	r7
     554:	8f 90       	pop	r8
     556:	9f 90       	pop	r9
     558:	af 90       	pop	r10
     55a:	bf 90       	pop	r11
     55c:	cf 90       	pop	r12
     55e:	df 90       	pop	r13
     560:	ef 90       	pop	r14
     562:	ff 90       	pop	r15
     564:	0f 91       	pop	r16
     566:	1f 91       	pop	r17
     568:	2f 91       	pop	r18
     56a:	3f 91       	pop	r19
     56c:	4f 91       	pop	r20
     56e:	5f 91       	pop	r21
     570:	6f 91       	pop	r22
     572:	7f 91       	pop	r23
     574:	8f 91       	pop	r24
     576:	9f 91       	pop	r25
     578:	af 91       	pop	r26
     57a:	bf 91       	pop	r27
     57c:	cf 91       	pop	r28
     57e:	df 91       	pop	r29
     580:	ef 91       	pop	r30
     582:	ff 91       	pop	r31
     584:	f7 fd       	sbrc	r31, 7
     586:	03 c0       	rjmp	.+6      	; 0x58e <irqen>
     588:	ff bf       	out	0x3f, r31	; 63
     58a:	ff 91       	pop	r31
     58c:	08 95       	ret

0000058e <irqen>:
     58e:	ff 77       	andi	r31, 0x7F	; 127
     590:	ff bf       	out	0x3f, r31	; 63
     592:	ff 91       	pop	r31
     594:	18 95       	reti
     596:	08 95       	ret

00000598 <EnterInterrupt>:
}

void EnterInterrupt(void)
{
	//Increment interrupt level
	++InterruptCount;
     598:	80 91 dc 01 	lds	r24, 0x01DC	; 0x8001dc <InterruptCount>
     59c:	90 91 dd 01 	lds	r25, 0x01DD	; 0x8001dd <InterruptCount+0x1>
     5a0:	01 96       	adiw	r24, 0x01	; 1
     5a2:	90 93 dd 01 	sts	0x01DD, r25	; 0x8001dd <InterruptCount+0x1>
     5a6:	80 93 dc 01 	sts	0x01DC, r24	; 0x8001dc <InterruptCount>
     5aa:	08 95       	ret

000005ac <IdleTask>:
				State = ADSR_STATE_RELEASE;
				WriteDAC(0,DAC_ADSR2SUS);
				break;
		}
		WriteADSRstate(State,1);
	}
     5ac:	80 91 d5 02 	lds	r24, 0x02D5	; 0x8002d5 <IdleCount>
     5b0:	90 91 d6 02 	lds	r25, 0x02D6	; 0x8002d6 <IdleCount+0x1>
     5b4:	01 96       	adiw	r24, 0x01	; 1
     5b6:	90 93 d6 02 	sts	0x02D6, r25	; 0x8002d6 <IdleCount+0x1>
     5ba:	80 93 d5 02 	sts	0x02D5, r24	; 0x8002d5 <IdleCount>
     5be:	f6 cf       	rjmp	.-20     	; 0x5ac <IdleTask>

000005c0 <ADCTask>:
     5c0:	ea e7       	ldi	r30, 0x7A	; 122
     5c2:	f0 e0       	ldi	r31, 0x00	; 0
     5c4:	80 81       	ld	r24, Z
     5c6:	80 68       	ori	r24, 0x80	; 128
     5c8:	80 83       	st	Z, r24
     5ca:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
     5ce:	80 81       	ld	r24, Z
     5d0:	80 64       	ori	r24, 0x40	; 64
     5d2:	80 83       	st	Z, r24
     5d4:	80 81       	ld	r24, Z
     5d6:	8f 60       	ori	r24, 0x0F	; 15
     5d8:	80 83       	st	Z, r24
     5da:	c0 e0       	ldi	r28, 0x00	; 0
     5dc:	d0 e0       	ldi	r29, 0x00	; 0
     5de:	cc 24       	eor	r12, r12
     5e0:	c3 94       	inc	r12
     5e2:	d1 2c       	mov	r13, r1
     5e4:	0f 2e       	mov	r0, r31
     5e6:	fc e7       	ldi	r31, 0x7C	; 124
     5e8:	ef 2e       	mov	r14, r31
     5ea:	f1 2c       	mov	r15, r1
     5ec:	f0 2d       	mov	r31, r0
     5ee:	0a e7       	ldi	r16, 0x7A	; 122
     5f0:	10 e0       	ldi	r17, 0x00	; 0
     5f2:	60 e0       	ldi	r22, 0x00	; 0
     5f4:	70 e0       	ldi	r23, 0x00	; 0
     5f6:	80 91 23 02 	lds	r24, 0x0223	; 0x800223 <pSemAdc>
     5fa:	90 91 24 02 	lds	r25, 0x0224	; 0x800224 <pSemAdc+0x1>
     5fe:	0e 94 28 0b 	call	0x1650	; 0x1650 <PendSemaphore>
     602:	cd 2b       	or	r28, r29
     604:	69 f0       	breq	.+26     	; 0x620 <ADCTask+0x60>
     606:	9c 01       	movw	r18, r24
     608:	4c e0       	ldi	r20, 0x0C	; 12
     60a:	50 e0       	ldi	r21, 0x00	; 0
     60c:	62 e0       	ldi	r22, 0x02	; 2
     60e:	70 e0       	ldi	r23, 0x00	; 0
     610:	80 91 8b 02 	lds	r24, 0x028B	; 0x80028b <pDacTaskMsg>
     614:	90 91 8c 02 	lds	r25, 0x028C	; 0x80028c <pDacTaskMsg+0x1>
     618:	4e d5       	rcall	.+2716   	; 0x10b6 <PostMessage>
     61a:	c0 e0       	ldi	r28, 0x00	; 0
     61c:	d0 e0       	ldi	r29, 0x00	; 0
     61e:	0c c0       	rjmp	.+24     	; 0x638 <ADCTask+0x78>
     620:	9c 01       	movw	r18, r24
     622:	4d e0       	ldi	r20, 0x0D	; 13
     624:	50 e0       	ldi	r21, 0x00	; 0
     626:	62 e0       	ldi	r22, 0x02	; 2
     628:	70 e0       	ldi	r23, 0x00	; 0
     62a:	80 91 8b 02 	lds	r24, 0x028B	; 0x80028b <pDacTaskMsg>
     62e:	90 91 8c 02 	lds	r25, 0x028C	; 0x80028c <pDacTaskMsg+0x1>
     632:	41 d5       	rcall	.+2690   	; 0x10b6 <PostMessage>
     634:	cc 2d       	mov	r28, r12
     636:	dd 2d       	mov	r29, r13
     638:	82 e3       	ldi	r24, 0x32	; 50
     63a:	90 e0       	ldi	r25, 0x00	; 0
     63c:	0e 94 c9 0e 	call	0x1d92	; 0x1d92 <TimeDelay>
     640:	f7 01       	movw	r30, r14
     642:	c0 83       	st	Z, r28
     644:	f8 01       	movw	r30, r16
     646:	80 81       	ld	r24, Z
     648:	80 64       	ori	r24, 0x40	; 64
     64a:	80 83       	st	Z, r24
     64c:	d2 cf       	rjmp	.-92     	; 0x5f2 <ADCTask+0x32>

0000064e <DacTask>:
     64e:	20 e0       	ldi	r18, 0x00	; 0
     650:	30 e0       	ldi	r19, 0x00	; 0
     652:	40 e0       	ldi	r20, 0x00	; 0
     654:	50 e0       	ldi	r21, 0x00	; 0
     656:	61 e0       	ldi	r22, 0x01	; 1
     658:	70 e0       	ldi	r23, 0x00	; 0
     65a:	80 91 8b 02 	lds	r24, 0x028B	; 0x80028b <pDacTaskMsg>
     65e:	90 91 8c 02 	lds	r25, 0x028C	; 0x80028c <pDacTaskMsg+0x1>
     662:	29 d5       	rcall	.+2642   	; 0x10b6 <PostMessage>
     664:	c0 e0       	ldi	r28, 0x00	; 0
     666:	d0 e0       	ldi	r29, 0x00	; 0
     668:	80 91 8b 02 	lds	r24, 0x028B	; 0x80028b <pDacTaskMsg>
     66c:	90 91 8c 02 	lds	r25, 0x028C	; 0x80028c <pDacTaskMsg+0x1>
     670:	73 d5       	rcall	.+2790   	; 0x1158 <GetMessage>
     672:	dc 01       	movw	r26, r24
     674:	2d 91       	ld	r18, X+
     676:	3c 91       	ld	r19, X
     678:	22 30       	cpi	r18, 0x02	; 2
     67a:	31 05       	cpc	r19, r1
     67c:	e1 f0       	breq	.+56     	; 0x6b6 <DacTask+0x68>
     67e:	38 f0       	brcs	.+14     	; 0x68e <DacTask+0x40>
     680:	23 30       	cpi	r18, 0x03	; 3
     682:	31 05       	cpc	r19, r1
     684:	41 f1       	breq	.+80     	; 0x6d6 <DacTask+0x88>
     686:	24 30       	cpi	r18, 0x04	; 4
     688:	31 05       	cpc	r19, r1
     68a:	91 f1       	breq	.+100    	; 0x6f0 <DacTask+0xa2>
     68c:	ed cf       	rjmp	.-38     	; 0x668 <DacTask+0x1a>
     68e:	fe 01       	movw	r30, r28
     690:	ee 0f       	add	r30, r30
     692:	ff 1f       	adc	r31, r31
     694:	e0 50       	subi	r30, 0x00	; 0
     696:	ff 4f       	sbci	r31, 0xFF	; 255
     698:	80 81       	ld	r24, Z
     69a:	91 81       	ldd	r25, Z+1	; 0x01
     69c:	01 96       	adiw	r24, 0x01	; 1
     69e:	91 83       	std	Z+1, r25	; 0x01
     6a0:	80 83       	st	Z, r24
     6a2:	be 01       	movw	r22, r28
     6a4:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <WriteDAC>
     6a8:	21 96       	adiw	r28, 0x01	; 1
     6aa:	ce 30       	cpi	r28, 0x0E	; 14
     6ac:	d1 05       	cpc	r29, r1
     6ae:	e1 f6       	brne	.-72     	; 0x668 <DacTask+0x1a>
     6b0:	c0 e0       	ldi	r28, 0x00	; 0
     6b2:	d0 e0       	ldi	r29, 0x00	; 0
     6b4:	d9 cf       	rjmp	.-78     	; 0x668 <DacTask+0x1a>
     6b6:	fc 01       	movw	r30, r24
     6b8:	c2 81       	ldd	r28, Z+2	; 0x02
     6ba:	d3 81       	ldd	r29, Z+3	; 0x03
     6bc:	fe 01       	movw	r30, r28
     6be:	ee 0f       	add	r30, r30
     6c0:	ff 1f       	adc	r31, r31
     6c2:	e0 50       	subi	r30, 0x00	; 0
     6c4:	ff 4f       	sbci	r31, 0xFF	; 255
     6c6:	dc 01       	movw	r26, r24
     6c8:	14 96       	adiw	r26, 0x04	; 4
     6ca:	8d 91       	ld	r24, X+
     6cc:	9c 91       	ld	r25, X
     6ce:	15 97       	sbiw	r26, 0x05	; 5
     6d0:	91 83       	std	Z+1, r25	; 0x01
     6d2:	80 83       	st	Z, r24
     6d4:	c9 cf       	rjmp	.-110    	; 0x668 <DacTask+0x1a>
     6d6:	fc 01       	movw	r30, r24
     6d8:	82 81       	ldd	r24, Z+2	; 0x02
     6da:	0e 94 59 0e 	call	0x1cb2	; 0x1cb2 <WriteSpi>
     6de:	80 e0       	ldi	r24, 0x00	; 0
     6e0:	90 e0       	ldi	r25, 0x00	; 0
     6e2:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <ClearPortB>
     6e6:	80 e0       	ldi	r24, 0x00	; 0
     6e8:	90 e0       	ldi	r25, 0x00	; 0
     6ea:	0e 94 e7 0b 	call	0x17ce	; 0x17ce <SetPortB>
     6ee:	bc cf       	rjmp	.-136    	; 0x668 <DacTask+0x1a>
     6f0:	dc 01       	movw	r26, r24
     6f2:	12 96       	adiw	r26, 0x02	; 2
     6f4:	8d 91       	ld	r24, X+
     6f6:	9c 91       	ld	r25, X
     6f8:	13 97       	sbiw	r26, 0x03	; 3
     6fa:	9c 01       	movw	r18, r24
     6fc:	21 70       	andi	r18, 0x01	; 1
     6fe:	33 27       	eor	r19, r19
     700:	96 95       	lsr	r25
     702:	87 95       	ror	r24
     704:	82 30       	cpi	r24, 0x02	; 2
     706:	91 05       	cpc	r25, r1
     708:	21 f1       	breq	.+72     	; 0x752 <DacTask+0x104>
     70a:	28 f4       	brcc	.+10     	; 0x716 <DacTask+0xc8>
     70c:	00 97       	sbiw	r24, 0x00	; 0
     70e:	49 f0       	breq	.+18     	; 0x722 <DacTask+0xd4>
     710:	01 97       	sbiw	r24, 0x01	; 1
     712:	99 f0       	breq	.+38     	; 0x73a <DacTask+0xec>
     714:	a9 cf       	rjmp	.-174    	; 0x668 <DacTask+0x1a>
     716:	83 30       	cpi	r24, 0x03	; 3
     718:	91 05       	cpc	r25, r1
     71a:	39 f1       	breq	.+78     	; 0x76a <DacTask+0x11c>
     71c:	04 97       	sbiw	r24, 0x04	; 4
     71e:	89 f1       	breq	.+98     	; 0x782 <DacTask+0x134>
     720:	a3 cf       	rjmp	.-186    	; 0x668 <DacTask+0x1a>
     722:	23 2b       	or	r18, r19
     724:	29 f0       	breq	.+10     	; 0x730 <DacTask+0xe2>
     726:	87 e0       	ldi	r24, 0x07	; 7
     728:	90 e0       	ldi	r25, 0x00	; 0
     72a:	0e 94 16 0c 	call	0x182c	; 0x182c <SetPortC>
     72e:	9c cf       	rjmp	.-200    	; 0x668 <DacTask+0x1a>
     730:	87 e0       	ldi	r24, 0x07	; 7
     732:	90 e0       	ldi	r25, 0x00	; 0
     734:	0e 94 2d 0c 	call	0x185a	; 0x185a <ClearPortC>
     738:	97 cf       	rjmp	.-210    	; 0x668 <DacTask+0x1a>
     73a:	23 2b       	or	r18, r19
     73c:	29 f0       	breq	.+10     	; 0x748 <DacTask+0xfa>
     73e:	85 e0       	ldi	r24, 0x05	; 5
     740:	90 e0       	ldi	r25, 0x00	; 0
     742:	0e 94 45 0c 	call	0x188a	; 0x188a <SetPortD>
     746:	90 cf       	rjmp	.-224    	; 0x668 <DacTask+0x1a>
     748:	85 e0       	ldi	r24, 0x05	; 5
     74a:	90 e0       	ldi	r25, 0x00	; 0
     74c:	0e 94 5c 0c 	call	0x18b8	; 0x18b8 <ClearPortD>
     750:	8b cf       	rjmp	.-234    	; 0x668 <DacTask+0x1a>
     752:	23 2b       	or	r18, r19
     754:	29 f0       	breq	.+10     	; 0x760 <DacTask+0x112>
     756:	86 e0       	ldi	r24, 0x06	; 6
     758:	90 e0       	ldi	r25, 0x00	; 0
     75a:	0e 94 45 0c 	call	0x188a	; 0x188a <SetPortD>
     75e:	84 cf       	rjmp	.-248    	; 0x668 <DacTask+0x1a>
     760:	86 e0       	ldi	r24, 0x06	; 6
     762:	90 e0       	ldi	r25, 0x00	; 0
     764:	0e 94 5c 0c 	call	0x18b8	; 0x18b8 <ClearPortD>
     768:	7f cf       	rjmp	.-258    	; 0x668 <DacTask+0x1a>
     76a:	23 2b       	or	r18, r19
     76c:	29 f0       	breq	.+10     	; 0x778 <DacTask+0x12a>
     76e:	87 e0       	ldi	r24, 0x07	; 7
     770:	90 e0       	ldi	r25, 0x00	; 0
     772:	0e 94 45 0c 	call	0x188a	; 0x188a <SetPortD>
     776:	78 cf       	rjmp	.-272    	; 0x668 <DacTask+0x1a>
     778:	87 e0       	ldi	r24, 0x07	; 7
     77a:	90 e0       	ldi	r25, 0x00	; 0
     77c:	0e 94 5c 0c 	call	0x18b8	; 0x18b8 <ClearPortD>
     780:	73 cf       	rjmp	.-282    	; 0x668 <DacTask+0x1a>
     782:	23 2b       	or	r18, r19
     784:	29 f0       	breq	.+10     	; 0x790 <DacTask+0x142>
     786:	83 e0       	ldi	r24, 0x03	; 3
     788:	90 e0       	ldi	r25, 0x00	; 0
     78a:	0e 94 e7 0b 	call	0x17ce	; 0x17ce <SetPortB>
     78e:	6c cf       	rjmp	.-296    	; 0x668 <DacTask+0x1a>
     790:	83 e0       	ldi	r24, 0x03	; 3
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <ClearPortB>
     798:	67 cf       	rjmp	.-306    	; 0x668 <DacTask+0x1a>

0000079a <TaskMidiClock>:
     79a:	60 e0       	ldi	r22, 0x00	; 0
     79c:	70 e0       	ldi	r23, 0x00	; 0
     79e:	80 91 57 02 	lds	r24, 0x0257	; 0x800257 <pSemClock>
     7a2:	90 91 58 02 	lds	r25, 0x0258	; 0x800258 <pSemClock+0x1>
     7a6:	54 d7       	rcall	.+3752   	; 0x1650 <PendSemaphore>
     7a8:	81 e0       	ldi	r24, 0x01	; 1
     7aa:	90 e0       	ldi	r25, 0x00	; 0
     7ac:	0e 94 c9 0e 	call	0x1d92	; 0x1d92 <TimeDelay>
     7b0:	86 e0       	ldi	r24, 0x06	; 6
     7b2:	90 e0       	ldi	r25, 0x00	; 0
     7b4:	0e 94 2d 0c 	call	0x185a	; 0x185a <ClearPortC>
     7b8:	f0 cf       	rjmp	.-32     	; 0x79a <TaskMidiClock>

000007ba <MidiIn>:
     7ba:	cf 93       	push	r28
     7bc:	df 93       	push	r29
     7be:	00 d0       	rcall	.+0      	; 0x7c0 <MidiIn+0x6>
     7c0:	cd b7       	in	r28, 0x3d	; 61
     7c2:	de b7       	in	r29, 0x3e	; 62
     7c4:	ff d4       	rcall	.+2558   	; 0x11c4 <newMidiParseDescriptor>
     7c6:	02 d5       	rcall	.+2564   	; 0x11cc <InitMidiParseDesc>
     7c8:	8c e0       	ldi	r24, 0x0C	; 12
     7ca:	90 e0       	ldi	r25, 0x00	; 0
     7cc:	a9 d2       	rcall	.+1362   	; 0xd20 <malloc>
     7ce:	8c 01       	movw	r16, r24
     7d0:	0e 94 ce 0f 	call	0x1f9c	; 0x1f9c <USART_GetC>
     7d4:	9a 83       	std	Y+2, r25	; 0x02
     7d6:	89 83       	std	Y+1, r24	; 0x01
     7d8:	69 81       	ldd	r22, Y+1	; 0x01
     7da:	7a 81       	ldd	r23, Y+2	; 0x02
     7dc:	c8 01       	movw	r24, r16
     7de:	f9 d5       	rcall	.+3058   	; 0x13d2 <ParseMidi>
     7e0:	f7 cf       	rjmp	.-18     	; 0x7d0 <MidiIn+0x16>

000007e2 <TaskMidiReset>:
     7e2:	60 e0       	ldi	r22, 0x00	; 0
     7e4:	70 e0       	ldi	r23, 0x00	; 0
     7e6:	80 91 71 02 	lds	r24, 0x0271	; 0x800271 <pSemReset>
     7ea:	90 91 72 02 	lds	r25, 0x0272	; 0x800272 <pSemReset+0x1>
     7ee:	30 d7       	rcall	.+3680   	; 0x1650 <PendSemaphore>
     7f0:	82 e0       	ldi	r24, 0x02	; 2
     7f2:	90 e0       	ldi	r25, 0x00	; 0
     7f4:	0e 94 c9 0e 	call	0x1d92	; 0x1d92 <TimeDelay>
     7f8:	82 e0       	ldi	r24, 0x02	; 2
     7fa:	90 e0       	ldi	r25, 0x00	; 0
     7fc:	b3 d7       	rcall	.+3942   	; 0x1764 <ClearPortA>
     7fe:	f1 cf       	rjmp	.-30     	; 0x7e2 <TaskMidiReset>

00000800 <InitTimer0>:
     800:	80 e1       	ldi	r24, 0x10	; 16
     802:	84 bd       	out	0x24, r24	; 36
     804:	83 e0       	ldi	r24, 0x03	; 3
     806:	85 bd       	out	0x25, r24	; 37
     808:	81 e0       	ldi	r24, 0x01	; 1
     80a:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
     80e:	8e ef       	ldi	r24, 0xFE	; 254
     810:	87 bd       	out	0x27, r24	; 39
     812:	24 9a       	sbi	0x04, 4	; 4
     814:	08 95       	ret

00000816 <__vector_24>:
     816:	ff 93       	push	r31
     818:	ff b7       	in	r31, 0x3f	; 63
     81a:	f0 68       	ori	r31, 0x80	; 128
     81c:	ff 93       	push	r31
     81e:	ef 93       	push	r30
     820:	df 93       	push	r29
     822:	cf 93       	push	r28
     824:	bf 93       	push	r27
     826:	af 93       	push	r26
     828:	9f 93       	push	r25
     82a:	8f 93       	push	r24
     82c:	7f 93       	push	r23
     82e:	6f 93       	push	r22
     830:	5f 93       	push	r21
     832:	4f 93       	push	r20
     834:	3f 93       	push	r19
     836:	2f 93       	push	r18
     838:	1f 93       	push	r17
     83a:	0f 93       	push	r16
     83c:	ff 92       	push	r15
     83e:	ef 92       	push	r14
     840:	df 92       	push	r13
     842:	cf 92       	push	r12
     844:	bf 92       	push	r11
     846:	af 92       	push	r10
     848:	9f 92       	push	r9
     84a:	8f 92       	push	r8
     84c:	7f 92       	push	r7
     84e:	6f 92       	push	r6
     850:	5f 92       	push	r5
     852:	4f 92       	push	r4
     854:	3f 92       	push	r3
     856:	2f 92       	push	r2
     858:	1f 92       	push	r1
     85a:	11 24       	eor	r1, r1
     85c:	0f 92       	push	r0
     85e:	9c de       	rcall	.-712    	; 0x598 <EnterInterrupt>
     860:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     864:	70 91 79 00 	lds	r23, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     868:	ea e7       	ldi	r30, 0x7A	; 122
     86a:	f0 e0       	ldi	r31, 0x00	; 0
     86c:	80 81       	ld	r24, Z
     86e:	80 61       	ori	r24, 0x10	; 16
     870:	80 83       	st	Z, r24
     872:	66 0f       	add	r22, r22
     874:	77 1f       	adc	r23, r23
     876:	66 0f       	add	r22, r22
     878:	77 1f       	adc	r23, r23
     87a:	80 91 23 02 	lds	r24, 0x0223	; 0x800223 <pSemAdc>
     87e:	90 91 24 02 	lds	r25, 0x0224	; 0x800224 <pSemAdc+0x1>
     882:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <PostSemaphore>
     886:	17 de       	rcall	.-978    	; 0x4b6 <ExitInterrupt>
     888:	0f 90       	pop	r0
     88a:	1f 90       	pop	r1
     88c:	2f 90       	pop	r2
     88e:	3f 90       	pop	r3
     890:	4f 90       	pop	r4
     892:	5f 90       	pop	r5
     894:	6f 90       	pop	r6
     896:	7f 90       	pop	r7
     898:	8f 90       	pop	r8
     89a:	9f 90       	pop	r9
     89c:	af 90       	pop	r10
     89e:	bf 90       	pop	r11
     8a0:	cf 90       	pop	r12
     8a2:	df 90       	pop	r13
     8a4:	ef 90       	pop	r14
     8a6:	ff 90       	pop	r15
     8a8:	0f 91       	pop	r16
     8aa:	1f 91       	pop	r17
     8ac:	2f 91       	pop	r18
     8ae:	3f 91       	pop	r19
     8b0:	4f 91       	pop	r20
     8b2:	5f 91       	pop	r21
     8b4:	6f 91       	pop	r22
     8b6:	7f 91       	pop	r23
     8b8:	8f 91       	pop	r24
     8ba:	9f 91       	pop	r25
     8bc:	af 91       	pop	r26
     8be:	bf 91       	pop	r27
     8c0:	cf 91       	pop	r28
     8c2:	df 91       	pop	r29
     8c4:	ef 91       	pop	r30
     8c6:	ff 91       	pop	r31
     8c8:	ff 77       	andi	r31, 0x7F	; 127
     8ca:	ff bf       	out	0x3f, r31	; 63
     8cc:	ff 91       	pop	r31
     8ce:	18 95       	reti

000008d0 <__vector_18>:
     8d0:	ff 93       	push	r31
     8d2:	ff b7       	in	r31, 0x3f	; 63
     8d4:	f0 68       	ori	r31, 0x80	; 128
     8d6:	ff 93       	push	r31
     8d8:	ef 93       	push	r30
     8da:	df 93       	push	r29
     8dc:	cf 93       	push	r28
     8de:	bf 93       	push	r27
     8e0:	af 93       	push	r26
     8e2:	9f 93       	push	r25
     8e4:	8f 93       	push	r24
     8e6:	7f 93       	push	r23
     8e8:	6f 93       	push	r22
     8ea:	5f 93       	push	r21
     8ec:	4f 93       	push	r20
     8ee:	3f 93       	push	r19
     8f0:	2f 93       	push	r18
     8f2:	1f 93       	push	r17
     8f4:	0f 93       	push	r16
     8f6:	ff 92       	push	r15
     8f8:	ef 92       	push	r14
     8fa:	df 92       	push	r13
     8fc:	cf 92       	push	r12
     8fe:	bf 92       	push	r11
     900:	af 92       	push	r10
     902:	9f 92       	push	r9
     904:	8f 92       	push	r8
     906:	7f 92       	push	r7
     908:	6f 92       	push	r6
     90a:	5f 92       	push	r5
     90c:	4f 92       	push	r4
     90e:	3f 92       	push	r3
     910:	2f 92       	push	r2
     912:	1f 92       	push	r1
     914:	11 24       	eor	r1, r1
     916:	0f 92       	push	r0
     918:	3f de       	rcall	.-898    	; 0x598 <EnterInterrupt>
     91a:	8a ed       	ldi	r24, 0xDA	; 218
     91c:	86 bd       	out	0x26, r24	; 38
     91e:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <TimerTicker>
     922:	c9 dd       	rcall	.-1134   	; 0x4b6 <ExitInterrupt>
     924:	0f 90       	pop	r0
     926:	1f 90       	pop	r1
     928:	2f 90       	pop	r2
     92a:	3f 90       	pop	r3
     92c:	4f 90       	pop	r4
     92e:	5f 90       	pop	r5
     930:	6f 90       	pop	r6
     932:	7f 90       	pop	r7
     934:	8f 90       	pop	r8
     936:	9f 90       	pop	r9
     938:	af 90       	pop	r10
     93a:	bf 90       	pop	r11
     93c:	cf 90       	pop	r12
     93e:	df 90       	pop	r13
     940:	ef 90       	pop	r14
     942:	ff 90       	pop	r15
     944:	0f 91       	pop	r16
     946:	1f 91       	pop	r17
     948:	2f 91       	pop	r18
     94a:	3f 91       	pop	r19
     94c:	4f 91       	pop	r20
     94e:	5f 91       	pop	r21
     950:	6f 91       	pop	r22
     952:	7f 91       	pop	r23
     954:	8f 91       	pop	r24
     956:	9f 91       	pop	r25
     958:	af 91       	pop	r26
     95a:	bf 91       	pop	r27
     95c:	cf 91       	pop	r28
     95e:	df 91       	pop	r29
     960:	ef 91       	pop	r30
     962:	ff 91       	pop	r31
     964:	ff 77       	andi	r31, 0x7F	; 127
     966:	ff bf       	out	0x3f, r31	; 63
     968:	ff 91       	pop	r31
     96a:	18 95       	reti

0000096c <InitINT0>:
     96c:	83 e0       	ldi	r24, 0x03	; 3
     96e:	90 e0       	ldi	r25, 0x00	; 0
     970:	e2 d6       	rcall	.+3524   	; 0x1736 <SetPortA>
     972:	84 e0       	ldi	r24, 0x04	; 4
     974:	90 e0       	ldi	r25, 0x00	; 0
     976:	a0 d7       	rcall	.+3904   	; 0x18b8 <ClearPortD>
     978:	84 e0       	ldi	r24, 0x04	; 4
     97a:	90 e0       	ldi	r25, 0x00	; 0
     97c:	86 d7       	rcall	.+3852   	; 0x188a <SetPortD>
     97e:	e8 9a       	sbi	0x1d, 0	; 29
     980:	08 95       	ret

00000982 <InitINT1>:
     982:	e9 e6       	ldi	r30, 0x69	; 105
     984:	f0 e0       	ldi	r31, 0x00	; 0
     986:	80 81       	ld	r24, Z
     988:	8c 60       	ori	r24, 0x0C	; 12
     98a:	80 83       	st	Z, r24
     98c:	e9 9a       	sbi	0x1d, 1	; 29
     98e:	08 95       	ret

00000990 <InitINT2>:
     990:	e9 e6       	ldi	r30, 0x69	; 105
     992:	f0 e0       	ldi	r31, 0x00	; 0
     994:	80 81       	ld	r24, Z
     996:	80 63       	ori	r24, 0x30	; 48
     998:	80 83       	st	Z, r24
     99a:	ea 9a       	sbi	0x1d, 2	; 29
     99c:	08 95       	ret

0000099e <__vector_1>:
     99e:	ff 93       	push	r31
     9a0:	ff b7       	in	r31, 0x3f	; 63
     9a2:	f0 68       	ori	r31, 0x80	; 128
     9a4:	ff 93       	push	r31
     9a6:	ef 93       	push	r30
     9a8:	df 93       	push	r29
     9aa:	cf 93       	push	r28
     9ac:	bf 93       	push	r27
     9ae:	af 93       	push	r26
     9b0:	9f 93       	push	r25
     9b2:	8f 93       	push	r24
     9b4:	7f 93       	push	r23
     9b6:	6f 93       	push	r22
     9b8:	5f 93       	push	r21
     9ba:	4f 93       	push	r20
     9bc:	3f 93       	push	r19
     9be:	2f 93       	push	r18
     9c0:	1f 93       	push	r17
     9c2:	0f 93       	push	r16
     9c4:	ff 92       	push	r15
     9c6:	ef 92       	push	r14
     9c8:	df 92       	push	r13
     9ca:	cf 92       	push	r12
     9cc:	bf 92       	push	r11
     9ce:	af 92       	push	r10
     9d0:	9f 92       	push	r9
     9d2:	8f 92       	push	r8
     9d4:	7f 92       	push	r7
     9d6:	6f 92       	push	r6
     9d8:	5f 92       	push	r5
     9da:	4f 92       	push	r4
     9dc:	3f 92       	push	r3
     9de:	2f 92       	push	r2
     9e0:	1f 92       	push	r1
     9e2:	11 24       	eor	r1, r1
     9e4:	0f 92       	push	r0
     9e6:	d8 dd       	rcall	.-1104   	; 0x598 <EnterInterrupt>
     9e8:	5c 98       	cbi	0x0b, 4	; 11
     9ea:	5c 9a       	sbi	0x0b, 4	; 11
     9ec:	20 e0       	ldi	r18, 0x00	; 0
     9ee:	30 e0       	ldi	r19, 0x00	; 0
     9f0:	40 e0       	ldi	r20, 0x00	; 0
     9f2:	50 e0       	ldi	r21, 0x00	; 0
     9f4:	60 e0       	ldi	r22, 0x00	; 0
     9f6:	70 e0       	ldi	r23, 0x00	; 0
     9f8:	80 91 8b 02 	lds	r24, 0x028B	; 0x80028b <pDacTaskMsg>
     9fc:	90 91 8c 02 	lds	r25, 0x028C	; 0x80028c <pDacTaskMsg+0x1>
     a00:	5a d3       	rcall	.+1716   	; 0x10b6 <PostMessage>
     a02:	59 dd       	rcall	.-1358   	; 0x4b6 <ExitInterrupt>
     a04:	0f 90       	pop	r0
     a06:	1f 90       	pop	r1
     a08:	2f 90       	pop	r2
     a0a:	3f 90       	pop	r3
     a0c:	4f 90       	pop	r4
     a0e:	5f 90       	pop	r5
     a10:	6f 90       	pop	r6
     a12:	7f 90       	pop	r7
     a14:	8f 90       	pop	r8
     a16:	9f 90       	pop	r9
     a18:	af 90       	pop	r10
     a1a:	bf 90       	pop	r11
     a1c:	cf 90       	pop	r12
     a1e:	df 90       	pop	r13
     a20:	ef 90       	pop	r14
     a22:	ff 90       	pop	r15
     a24:	0f 91       	pop	r16
     a26:	1f 91       	pop	r17
     a28:	2f 91       	pop	r18
     a2a:	3f 91       	pop	r19
     a2c:	4f 91       	pop	r20
     a2e:	5f 91       	pop	r21
     a30:	6f 91       	pop	r22
     a32:	7f 91       	pop	r23
     a34:	8f 91       	pop	r24
     a36:	9f 91       	pop	r25
     a38:	af 91       	pop	r26
     a3a:	bf 91       	pop	r27
     a3c:	cf 91       	pop	r28
     a3e:	df 91       	pop	r29
     a40:	ef 91       	pop	r30
     a42:	ff 91       	pop	r31
     a44:	ff 77       	andi	r31, 0x7F	; 127
     a46:	ff bf       	out	0x3f, r31	; 63
     a48:	ff 91       	pop	r31
     a4a:	18 95       	reti

00000a4c <__vector_2>:
     a4c:	ff 93       	push	r31
     a4e:	ff b7       	in	r31, 0x3f	; 63
     a50:	f0 68       	ori	r31, 0x80	; 128
     a52:	ff 93       	push	r31
     a54:	ef 93       	push	r30
     a56:	df 93       	push	r29
     a58:	cf 93       	push	r28
     a5a:	bf 93       	push	r27
     a5c:	af 93       	push	r26
     a5e:	9f 93       	push	r25
     a60:	8f 93       	push	r24
     a62:	7f 93       	push	r23
     a64:	6f 93       	push	r22
     a66:	5f 93       	push	r21
     a68:	4f 93       	push	r20
     a6a:	3f 93       	push	r19
     a6c:	2f 93       	push	r18
     a6e:	1f 93       	push	r17
     a70:	0f 93       	push	r16
     a72:	ff 92       	push	r15
     a74:	ef 92       	push	r14
     a76:	df 92       	push	r13
     a78:	cf 92       	push	r12
     a7a:	bf 92       	push	r11
     a7c:	af 92       	push	r10
     a7e:	9f 92       	push	r9
     a80:	8f 92       	push	r8
     a82:	7f 92       	push	r7
     a84:	6f 92       	push	r6
     a86:	5f 92       	push	r5
     a88:	4f 92       	push	r4
     a8a:	3f 92       	push	r3
     a8c:	2f 92       	push	r2
     a8e:	1f 92       	push	r1
     a90:	11 24       	eor	r1, r1
     a92:	0f 92       	push	r0
     a94:	81 dd       	rcall	.-1278   	; 0x598 <EnterInterrupt>
     a96:	20 e0       	ldi	r18, 0x00	; 0
     a98:	30 e0       	ldi	r19, 0x00	; 0
     a9a:	40 e0       	ldi	r20, 0x00	; 0
     a9c:	50 e0       	ldi	r21, 0x00	; 0
     a9e:	60 e0       	ldi	r22, 0x00	; 0
     aa0:	70 e0       	ldi	r23, 0x00	; 0
     aa2:	80 91 55 02 	lds	r24, 0x0255	; 0x800255 <pADSR1Msg>
     aa6:	90 91 56 02 	lds	r25, 0x0256	; 0x800256 <pADSR1Msg+0x1>
     aaa:	05 d3       	rcall	.+1546   	; 0x10b6 <PostMessage>
     aac:	04 dd       	rcall	.-1528   	; 0x4b6 <ExitInterrupt>
     aae:	0f 90       	pop	r0
     ab0:	1f 90       	pop	r1
     ab2:	2f 90       	pop	r2
     ab4:	3f 90       	pop	r3
     ab6:	4f 90       	pop	r4
     ab8:	5f 90       	pop	r5
     aba:	6f 90       	pop	r6
     abc:	7f 90       	pop	r7
     abe:	8f 90       	pop	r8
     ac0:	9f 90       	pop	r9
     ac2:	af 90       	pop	r10
     ac4:	bf 90       	pop	r11
     ac6:	cf 90       	pop	r12
     ac8:	df 90       	pop	r13
     aca:	ef 90       	pop	r14
     acc:	ff 90       	pop	r15
     ace:	0f 91       	pop	r16
     ad0:	1f 91       	pop	r17
     ad2:	2f 91       	pop	r18
     ad4:	3f 91       	pop	r19
     ad6:	4f 91       	pop	r20
     ad8:	5f 91       	pop	r21
     ada:	6f 91       	pop	r22
     adc:	7f 91       	pop	r23
     ade:	8f 91       	pop	r24
     ae0:	9f 91       	pop	r25
     ae2:	af 91       	pop	r26
     ae4:	bf 91       	pop	r27
     ae6:	cf 91       	pop	r28
     ae8:	df 91       	pop	r29
     aea:	ef 91       	pop	r30
     aec:	ff 91       	pop	r31
     aee:	ff 77       	andi	r31, 0x7F	; 127
     af0:	ff bf       	out	0x3f, r31	; 63
     af2:	ff 91       	pop	r31
     af4:	18 95       	reti

00000af6 <__vector_3>:
     af6:	ff 93       	push	r31
     af8:	ff b7       	in	r31, 0x3f	; 63
     afa:	f0 68       	ori	r31, 0x80	; 128
     afc:	ff 93       	push	r31
     afe:	ef 93       	push	r30
     b00:	df 93       	push	r29
     b02:	cf 93       	push	r28
     b04:	bf 93       	push	r27
     b06:	af 93       	push	r26
     b08:	9f 93       	push	r25
     b0a:	8f 93       	push	r24
     b0c:	7f 93       	push	r23
     b0e:	6f 93       	push	r22
     b10:	5f 93       	push	r21
     b12:	4f 93       	push	r20
     b14:	3f 93       	push	r19
     b16:	2f 93       	push	r18
     b18:	1f 93       	push	r17
     b1a:	0f 93       	push	r16
     b1c:	ff 92       	push	r15
     b1e:	ef 92       	push	r14
     b20:	df 92       	push	r13
     b22:	cf 92       	push	r12
     b24:	bf 92       	push	r11
     b26:	af 92       	push	r10
     b28:	9f 92       	push	r9
     b2a:	8f 92       	push	r8
     b2c:	7f 92       	push	r7
     b2e:	6f 92       	push	r6
     b30:	5f 92       	push	r5
     b32:	4f 92       	push	r4
     b34:	3f 92       	push	r3
     b36:	2f 92       	push	r2
     b38:	1f 92       	push	r1
     b3a:	11 24       	eor	r1, r1
     b3c:	0f 92       	push	r0
     b3e:	2c dd       	rcall	.-1448   	; 0x598 <EnterInterrupt>
     b40:	20 e0       	ldi	r18, 0x00	; 0
     b42:	30 e0       	ldi	r19, 0x00	; 0
     b44:	40 e0       	ldi	r20, 0x00	; 0
     b46:	50 e0       	ldi	r21, 0x00	; 0
     b48:	60 e0       	ldi	r22, 0x00	; 0
     b4a:	70 e0       	ldi	r23, 0x00	; 0
     b4c:	80 91 de 01 	lds	r24, 0x01DE	; 0x8001de <pADSR2Msg>
     b50:	90 91 df 01 	lds	r25, 0x01DF	; 0x8001df <pADSR2Msg+0x1>
     b54:	b0 d2       	rcall	.+1376   	; 0x10b6 <PostMessage>
     b56:	af dc       	rcall	.-1698   	; 0x4b6 <ExitInterrupt>
     b58:	0f 90       	pop	r0
     b5a:	1f 90       	pop	r1
     b5c:	2f 90       	pop	r2
     b5e:	3f 90       	pop	r3
     b60:	4f 90       	pop	r4
     b62:	5f 90       	pop	r5
     b64:	6f 90       	pop	r6
     b66:	7f 90       	pop	r7
     b68:	8f 90       	pop	r8
     b6a:	9f 90       	pop	r9
     b6c:	af 90       	pop	r10
     b6e:	bf 90       	pop	r11
     b70:	cf 90       	pop	r12
     b72:	df 90       	pop	r13
     b74:	ef 90       	pop	r14
     b76:	ff 90       	pop	r15
     b78:	0f 91       	pop	r16
     b7a:	1f 91       	pop	r17
     b7c:	2f 91       	pop	r18
     b7e:	3f 91       	pop	r19
     b80:	4f 91       	pop	r20
     b82:	5f 91       	pop	r21
     b84:	6f 91       	pop	r22
     b86:	7f 91       	pop	r23
     b88:	8f 91       	pop	r24
     b8a:	9f 91       	pop	r25
     b8c:	af 91       	pop	r26
     b8e:	bf 91       	pop	r27
     b90:	cf 91       	pop	r28
     b92:	df 91       	pop	r29
     b94:	ef 91       	pop	r30
     b96:	ff 91       	pop	r31
     b98:	ff 77       	andi	r31, 0x7F	; 127
     b9a:	ff bf       	out	0x3f, r31	; 63
     b9c:	ff 91       	pop	r31
     b9e:	18 95       	reti

00000ba0 <Init>:
	}
}

void Init()
{
	DDRD = 0xf0;
     ba0:	80 ef       	ldi	r24, 0xF0	; 240
     ba2:	8a b9       	out	0x0a, r24	; 10
	DDRC = 0xc0;
     ba4:	80 ec       	ldi	r24, 0xC0	; 192
     ba6:	87 b9       	out	0x07, r24	; 7
	DDRB = 0xbb;
     ba8:	8b eb       	ldi	r24, 0xBB	; 187
     baa:	84 b9       	out	0x04, r24	; 4
	DDRA = 0xfc;
     bac:	8c ef       	ldi	r24, 0xFC	; 252
     bae:	81 b9       	out	0x01, r24	; 1
	Settings.m_CH1_MidiChannel = 0;
     bb0:	e8 ef       	ldi	r30, 0xF8	; 248
     bb2:	f1 e0       	ldi	r31, 0x01	; 1
     bb4:	10 82       	st	Z, r1
	Settings.m_CH2_Drum1 = 9;
     bb6:	89 e0       	ldi	r24, 0x09	; 9
     bb8:	81 83       	std	Z+1, r24	; 0x01
	Settings.m_CH3_Drum2 = 10;
     bba:	8a e0       	ldi	r24, 0x0A	; 10
     bbc:	82 83       	std	Z+2, r24	; 0x02
	Settings.m_CH4_Drum3 = 11;
     bbe:	8b e0       	ldi	r24, 0x0B	; 11
     bc0:	83 83       	std	Z+3, r24	; 0x03
	Settings.m_CH5_Cymbal = 12;
     bc2:	8c e0       	ldi	r24, 0x0C	; 12
     bc4:	84 83       	std	Z+4, r24	; 0x04
     bc6:	08 95       	ret

00000bc8 <main>:
int main(void)
{
    //--------------------------
	// Initialize the system
	//--------------------------
	Disable();
     bc8:	90 da       	rcall	.-2784   	; 0xea <Disable>
	Init();
     bca:	ea df       	rcall	.-44     	; 0xba0 <Init>
	InitPorts();
     bcc:	ad d5       	rcall	.+2906   	; 0x1728 <InitPorts>
     bce:	18 de       	rcall	.-976    	; 0x800 <InitTimer0>
	InitTimer0();
     bd0:	60 e0       	ldi	r22, 0x00	; 0
     bd2:	70 e0       	ldi	r23, 0x00	; 0
	OS_InitMalloc(0,0);	//initialize heap
     bd4:	80 e0       	ldi	r24, 0x00	; 0
     bd6:	90 e0       	ldi	r25, 0x00	; 0
     bd8:	23 d2       	rcall	.+1094   	; 0x1020 <OS_InitMalloc>
	InitINT0();
     bda:	c8 de       	rcall	.-624    	; 0x96c <InitINT0>
	OSInit();	//Initialize RTOS
     bdc:	31 d5       	rcall	.+2658   	; 0x1640 <OSInit>
     bde:	0e 94 48 0e 	call	0x1c90	; 0x1c90 <InitSpi>
	InitSpi();
	USART_Init();
     be2:	0e 94 86 10 	call	0x210c	; 0x210c <USART_Init>
	//-----------------------------
	// Initialize Message Objects
	//-----------------------------
	InitMessageQueueManager();	//Init Message queues
     be6:	e1 d2       	rcall	.+1474   	; 0x11aa <InitMessageQueueManager>
     be8:	80 e1       	ldi	r24, 0x10	; 16
	pDacTaskMsg = NewMessageBuffer(16);
     bea:	90 e0       	ldi	r25, 0x00	; 0
     bec:	3a d2       	rcall	.+1140   	; 0x1062 <NewMessageBuffer>
     bee:	90 93 8c 02 	sts	0x028C, r25	; 0x80028c <pDacTaskMsg+0x1>
     bf2:	80 93 8b 02 	sts	0x028B, r24	; 0x80028b <pDacTaskMsg>
     bf6:	88 e0       	ldi	r24, 0x08	; 8
	pADSR1Msg = NewMessageBuffer(8);
     bf8:	90 e0       	ldi	r25, 0x00	; 0
     bfa:	33 d2       	rcall	.+1126   	; 0x1062 <NewMessageBuffer>
     bfc:	90 93 56 02 	sts	0x0256, r25	; 0x800256 <pADSR1Msg+0x1>
     c00:	80 93 55 02 	sts	0x0255, r24	; 0x800255 <pADSR1Msg>
     c04:	88 e0       	ldi	r24, 0x08	; 8
	pADSR2Msg = NewMessageBuffer(8);
     c06:	90 e0       	ldi	r25, 0x00	; 0
     c08:	2c d2       	rcall	.+1112   	; 0x1062 <NewMessageBuffer>
     c0a:	90 93 df 01 	sts	0x01DF, r25	; 0x8001df <pADSR2Msg+0x1>
     c0e:	80 93 de 01 	sts	0x01DE, r24	; 0x8001de <pADSR2Msg>
     c12:	42 e2       	ldi	r20, 0x22	; 34
	pSemClock = NewSemaphore(0,SEMAPHORE_MODE_BLOCKING,"Midi Clock Sem");
     c14:	51 e0       	ldi	r21, 0x01	; 1
     c16:	60 e0       	ldi	r22, 0x00	; 0
     c18:	70 e0       	ldi	r23, 0x00	; 0
     c1a:	80 e0       	ldi	r24, 0x00	; 0
     c1c:	90 e0       	ldi	r25, 0x00	; 0
     c1e:	9f da       	rcall	.-2754   	; 0x15e <NewSemaphore>
     c20:	90 93 58 02 	sts	0x0258, r25	; 0x800258 <pSemClock+0x1>
     c24:	80 93 57 02 	sts	0x0257, r24	; 0x800257 <pSemClock>
     c28:	41 e3       	ldi	r20, 0x31	; 49
	pSemReset = NewSemaphore(0,SEMAPHORE_MODE_BLOCKING,"Midi Reset Sem");
     c2a:	51 e0       	ldi	r21, 0x01	; 1
     c2c:	60 e0       	ldi	r22, 0x00	; 0
     c2e:	70 e0       	ldi	r23, 0x00	; 0
     c30:	80 e0       	ldi	r24, 0x00	; 0
     c32:	90 e0       	ldi	r25, 0x00	; 0
     c34:	94 da       	rcall	.-2776   	; 0x15e <NewSemaphore>
     c36:	90 93 72 02 	sts	0x0272, r25	; 0x800272 <pSemReset+0x1>
     c3a:	80 93 71 02 	sts	0x0271, r24	; 0x800271 <pSemReset>
     c3e:	40 e4       	ldi	r20, 0x40	; 64
	pSemAdc = NewSemaphore(0,SEMAPHORE_MODE_BLOCKING,"Adc Sem");
     c40:	51 e0       	ldi	r21, 0x01	; 1
     c42:	60 e0       	ldi	r22, 0x00	; 0
     c44:	70 e0       	ldi	r23, 0x00	; 0
     c46:	80 e0       	ldi	r24, 0x00	; 0
     c48:	90 e0       	ldi	r25, 0x00	; 0
     c4a:	89 da       	rcall	.-2798   	; 0x15e <NewSemaphore>
     c4c:	90 93 24 02 	sts	0x0224, r25	; 0x800224 <pSemAdc+0x1>
     c50:	80 93 23 02 	sts	0x0223, r24	; 0x800223 <pSemAdc>
     c54:	e1 2c       	mov	r14, r1
	//-----------------------------
	//	Create Tasks
	//-----------------------------
	CreateTask(&TAdcTask,ADCTask,256,3,"ADC",0);
     c56:	f1 2c       	mov	r15, r1
     c58:	08 e4       	ldi	r16, 0x48	; 72
     c5a:	11 e0       	ldi	r17, 0x01	; 1
     c5c:	23 e0       	ldi	r18, 0x03	; 3
     c5e:	30 e0       	ldi	r19, 0x00	; 0
     c60:	40 e0       	ldi	r20, 0x00	; 0
     c62:	51 e0       	ldi	r21, 0x01	; 1
     c64:	60 ee       	ldi	r22, 0xE0	; 224
     c66:	72 e0       	ldi	r23, 0x02	; 2
     c68:	85 ea       	ldi	r24, 0xA5	; 165
     c6a:	92 e0       	ldi	r25, 0x02	; 2
     c6c:	fc da       	rcall	.-2568   	; 0x266 <CreateTask>
     c6e:	65 ea       	ldi	r22, 0xA5	; 165
	Insert(&ActiveTasks,&TAdcTask);
     c70:	72 e0       	ldi	r23, 0x02	; 2
     c72:	8c ec       	ldi	r24, 0xCC	; 204
     c74:	91 e0       	ldi	r25, 0x01	; 1
     c76:	27 d7       	rcall	.+3662   	; 0x1ac6 <Insert>
     c78:	0c e4       	ldi	r16, 0x4C	; 76
	CreateTask(&TIdleTask,IdleTask,256,1,"Idle Task",0);
     c7a:	11 e0       	ldi	r17, 0x01	; 1
     c7c:	21 e0       	ldi	r18, 0x01	; 1
     c7e:	30 e0       	ldi	r19, 0x00	; 0
     c80:	40 e0       	ldi	r20, 0x00	; 0
     c82:	51 e0       	ldi	r21, 0x01	; 1
     c84:	66 ed       	ldi	r22, 0xD6	; 214
     c86:	72 e0       	ldi	r23, 0x02	; 2
     c88:	85 e2       	ldi	r24, 0x25	; 37
     c8a:	92 e0       	ldi	r25, 0x02	; 2
     c8c:	ec da       	rcall	.-2600   	; 0x266 <CreateTask>
     c8e:	65 e2       	ldi	r22, 0x25	; 37
	Insert(&ActiveTasks,&TIdleTask);
     c90:	72 e0       	ldi	r23, 0x02	; 2
     c92:	8c ec       	ldi	r24, 0xCC	; 204
     c94:	91 e0       	ldi	r25, 0x01	; 1
     c96:	17 d7       	rcall	.+3630   	; 0x1ac6 <Insert>
     c98:	06 e5       	ldi	r16, 0x56	; 86
	CreateTask(&TDacTask,DacTask,256,20,"Dac Task",0);
     c9a:	11 e0       	ldi	r17, 0x01	; 1
     c9c:	24 e1       	ldi	r18, 0x14	; 20
     c9e:	30 e0       	ldi	r19, 0x00	; 0
     ca0:	40 e0       	ldi	r20, 0x00	; 0
     ca2:	51 e0       	ldi	r21, 0x01	; 1
     ca4:	67 e2       	ldi	r22, 0x27	; 39
     ca6:	73 e0       	ldi	r23, 0x03	; 3
     ca8:	80 ee       	ldi	r24, 0xE0	; 224
     caa:	91 e0       	ldi	r25, 0x01	; 1
     cac:	dc da       	rcall	.-2632   	; 0x266 <CreateTask>
     cae:	60 ee       	ldi	r22, 0xE0	; 224
	Insert(&ActiveTasks,&TDacTask);
     cb0:	71 e0       	ldi	r23, 0x01	; 1
     cb2:	8c ec       	ldi	r24, 0xCC	; 204
     cb4:	91 e0       	ldi	r25, 0x01	; 1
     cb6:	07 d7       	rcall	.+3598   	; 0x1ac6 <Insert>
     cb8:	0f e5       	ldi	r16, 0x5F	; 95
	CreateTask(&TMidiClock,TaskMidiClock,256,2,"MidiClock",0);
     cba:	11 e0       	ldi	r17, 0x01	; 1
     cbc:	22 e0       	ldi	r18, 0x02	; 2
     cbe:	30 e0       	ldi	r19, 0x00	; 0
     cc0:	40 e0       	ldi	r20, 0x00	; 0
     cc2:	51 e0       	ldi	r21, 0x01	; 1
     cc4:	6d ec       	ldi	r22, 0xCD	; 205
     cc6:	73 e0       	ldi	r23, 0x03	; 3
     cc8:	8d eb       	ldi	r24, 0xBD	; 189
     cca:	92 e0       	ldi	r25, 0x02	; 2
     ccc:	cc da       	rcall	.-2664   	; 0x266 <CreateTask>
     cce:	6d eb       	ldi	r22, 0xBD	; 189
	Insert(&ActiveTasks,&TMidiClock);
     cd0:	72 e0       	ldi	r23, 0x02	; 2
     cd2:	8c ec       	ldi	r24, 0xCC	; 204
     cd4:	91 e0       	ldi	r25, 0x01	; 1
     cd6:	f7 d6       	rcall	.+3566   	; 0x1ac6 <Insert>
     cd8:	09 e6       	ldi	r16, 0x69	; 105
     cda:	11 e0       	ldi	r17, 0x01	; 1
	CreateTask(&TMidiReset,TaskMidiReset,256,2,"Midi Reset",0);
     cdc:	22 e0       	ldi	r18, 0x02	; 2
     cde:	30 e0       	ldi	r19, 0x00	; 0
     ce0:	40 e0       	ldi	r20, 0x00	; 0
     ce2:	51 e0       	ldi	r21, 0x01	; 1
     ce4:	61 ef       	ldi	r22, 0xF1	; 241
     ce6:	73 e0       	ldi	r23, 0x03	; 3
     ce8:	8d e8       	ldi	r24, 0x8D	; 141
     cea:	92 e0       	ldi	r25, 0x02	; 2
     cec:	bc da       	rcall	.-2696   	; 0x266 <CreateTask>
     cee:	6d e8       	ldi	r22, 0x8D	; 141
	Insert(&ActiveTasks,&TMidiReset);
     cf0:	72 e0       	ldi	r23, 0x02	; 2
     cf2:	8c ec       	ldi	r24, 0xCC	; 204
     cf4:	91 e0       	ldi	r25, 0x01	; 1
     cf6:	e7 d6       	rcall	.+3534   	; 0x1ac6 <Insert>
     cf8:	04 e7       	ldi	r16, 0x74	; 116
	CreateTask(&TMidiIn,MidiIn,256,10,"Midi In",0);
     cfa:	11 e0       	ldi	r17, 0x01	; 1
     cfc:	2a e0       	ldi	r18, 0x0A	; 10
     cfe:	30 e0       	ldi	r19, 0x00	; 0
     d00:	40 e0       	ldi	r20, 0x00	; 0
     d02:	51 e0       	ldi	r21, 0x01	; 1
     d04:	6d ed       	ldi	r22, 0xDD	; 221
     d06:	73 e0       	ldi	r23, 0x03	; 3
     d08:	83 e7       	ldi	r24, 0x73	; 115
     d0a:	92 e0       	ldi	r25, 0x02	; 2
     d0c:	ac da       	rcall	.-2728   	; 0x266 <CreateTask>
     d0e:	63 e7       	ldi	r22, 0x73	; 115
     d10:	72 e0       	ldi	r23, 0x02	; 2
	Insert(&ActiveTasks,&TMidiIn);
     d12:	8c ec       	ldi	r24, 0xCC	; 204
     d14:	91 e0       	ldi	r25, 0x01	; 1
     d16:	d7 d6       	rcall	.+3502   	; 0x1ac6 <Insert>
     d18:	34 de       	rcall	.-920    	; 0x982 <InitINT1>
     d1a:	3a de       	rcall	.-908    	; 0x990 <InitINT2>
     d1c:	fc d7       	rcall	.+4088   	; 0x1d16 <StartOS>
//	CreateTask(&TAdsr1Task,ADSR_1,256,3,"Adsr 1",0);
//	Insert(&ActiveTasks,&TAdsr1Task);
//	CreateTask(&TAdsr2Task,ADSR_2,256,3,"Adsr 2",0);
//	Insert(&ActiveTasks,&TAdsr2Task);
	InitINT1();
     d1e:	ff cf       	rjmp	.-2      	; 0xd1e <main+0x156>

00000d20 <malloc>:
     d20:	ef 92       	push	r14
	InitINT2();
     d22:	ff 92       	push	r15
     d24:	0f 93       	push	r16
	StartOS();
     d26:	1f 93       	push	r17
     d28:	cf 93       	push	r28
     d2a:	df 93       	push	r29
		pointer to memory block on success,
		OR NULL on fail
*******************************************/

void *malloc(size_t len)
{
     d2c:	8c 01       	movw	r16, r24
	 * Our minimum chunk size is the size of a pointer (plus the
	 * size of the "sz" field, but we don't need to account for
	 * this), otherwise we could not possibly fit a freelist entry
	 * into the chunk later.
	 */
	PendSemaphore(&MallocBlocker,0);
     d2e:	60 e0       	ldi	r22, 0x00	; 0
     d30:	70 e0       	ldi	r23, 0x00	; 0
     d32:	89 ed       	ldi	r24, 0xD9	; 217
     d34:	92 e0       	ldi	r25, 0x02	; 2
     d36:	8c d4       	rcall	.+2328   	; 0x1650 <PendSemaphore>
	if (len < sizeof(struct __freelist) - sizeof(size_t))
     d38:	02 30       	cpi	r16, 0x02	; 2
     d3a:	11 05       	cpc	r17, r1
     d3c:	10 f4       	brcc	.+4      	; 0xd42 <malloc+0x22>
		len = sizeof(struct __freelist) - sizeof(size_t);
     d3e:	02 e0       	ldi	r16, 0x02	; 2
     d40:	10 e0       	ldi	r17, 0x00	; 0
	 * would match exactly.  If we found one, we are done.  While
	 * walking, note down the size of the largest chunk we found
	 * that would still fit the request -- we need it for step 2.
	 *
	 */
	for (s = 0, fp1 = __flp, fp2 = 0;
     d42:	a0 91 f9 02 	lds	r26, 0x02F9	; 0x8002f9 <__flp>
     d46:	b0 91 fa 02 	lds	r27, 0x02FA	; 0x8002fa <__flp+0x1>
     d4a:	10 97       	sbiw	r26, 0x00	; 0
     d4c:	09 f4       	brne	.+2      	; 0xd50 <malloc+0x30>
     d4e:	83 c0       	rjmp	.+262    	; 0xe56 <malloc+0x136>
	     fp1;
	     fp2 = fp1, fp1 = fp1->nx) {
		if (fp1->sz == len) {
     d50:	4d 91       	ld	r20, X+
     d52:	5c 91       	ld	r21, X
     d54:	11 97       	sbiw	r26, 0x01	; 1
     d56:	04 17       	cp	r16, r20
     d58:	15 07       	cpc	r17, r21
     d5a:	91 f0       	breq	.+36     	; 0xd80 <malloc+0x60>
     d5c:	ca 01       	movw	r24, r20
     d5e:	fd 01       	movw	r30, r26
     d60:	20 e0       	ldi	r18, 0x00	; 0
     d62:	30 e0       	ldi	r19, 0x00	; 0
     d64:	1e c0       	rjmp	.+60     	; 0xda2 <malloc+0x82>
     d66:	88 81       	ld	r24, Y
     d68:	99 81       	ldd	r25, Y+1	; 0x01
     d6a:	08 17       	cp	r16, r24
     d6c:	19 07       	cpc	r17, r25
     d6e:	c1 f4       	brne	.+48     	; 0xda0 <malloc+0x80>
			/*
			 * Found it.  Disconnect the chunk from the
			 * freelist, and return it.
			 */
			if (fp2)
     d70:	30 97       	sbiw	r30, 0x00	; 0
     d72:	29 f0       	breq	.+10     	; 0xd7e <malloc+0x5e>
				fp2->nx = fp1->nx;
     d74:	8a 81       	ldd	r24, Y+2	; 0x02
     d76:	9b 81       	ldd	r25, Y+3	; 0x03
     d78:	93 83       	std	Z+3, r25	; 0x03
     d7a:	82 83       	std	Z+2, r24	; 0x02
     d7c:	0a c0       	rjmp	.+20     	; 0xd92 <malloc+0x72>
	 * that would still fit the request -- we need it for step 2.
	 *
	 */
	for (s = 0, fp1 = __flp, fp2 = 0;
	     fp1;
	     fp2 = fp1, fp1 = fp1->nx) {
     d7e:	de 01       	movw	r26, r28
			 * freelist, and return it.
			 */
			if (fp2)
				fp2->nx = fp1->nx;
			else
				__flp = fp1->nx;
     d80:	12 96       	adiw	r26, 0x02	; 2
     d82:	8d 91       	ld	r24, X+
     d84:	9c 91       	ld	r25, X
     d86:	13 97       	sbiw	r26, 0x03	; 3
     d88:	90 93 fa 02 	sts	0x02FA, r25	; 0x8002fa <__flp+0x1>
     d8c:	80 93 f9 02 	sts	0x02F9, r24	; 0x8002f9 <__flp>
     d90:	ed 01       	movw	r28, r26
			PostSemaphore(&MallocBlocker,0);
     d92:	60 e0       	ldi	r22, 0x00	; 0
     d94:	70 e0       	ldi	r23, 0x00	; 0
     d96:	89 ed       	ldi	r24, 0xD9	; 217
     d98:	92 e0       	ldi	r25, 0x02	; 2
     d9a:	a6 d5       	rcall	.+2892   	; 0x18e8 <PostSemaphore>
			return &(fp1->nx);
     d9c:	22 96       	adiw	r28, 0x02	; 2
     d9e:	a8 c0       	rjmp	.+336    	; 0xef0 <malloc+0x1d0>
	 * that would still fit the request -- we need it for step 2.
	 *
	 */
	for (s = 0, fp1 = __flp, fp2 = 0;
	     fp1;
	     fp2 = fp1, fp1 = fp1->nx) {
     da0:	fe 01       	movw	r30, r28
			else
				__flp = fp1->nx;
			PostSemaphore(&MallocBlocker,0);
			return &(fp1->nx);
		}
		if (fp1->sz > len) {
     da2:	08 17       	cp	r16, r24
     da4:	19 07       	cpc	r17, r25
     da6:	48 f4       	brcc	.+18     	; 0xdba <malloc+0x9a>
			if (s == 0 || fp1->sz < s)
     da8:	21 15       	cp	r18, r1
     daa:	31 05       	cpc	r19, r1
     dac:	29 f0       	breq	.+10     	; 0xdb8 <malloc+0x98>
     dae:	82 17       	cp	r24, r18
     db0:	93 07       	cpc	r25, r19
     db2:	18 f4       	brcc	.+6      	; 0xdba <malloc+0x9a>
     db4:	9c 01       	movw	r18, r24
     db6:	01 c0       	rjmp	.+2      	; 0xdba <malloc+0x9a>
     db8:	9c 01       	movw	r18, r24
	 * that would still fit the request -- we need it for step 2.
	 *
	 */
	for (s = 0, fp1 = __flp, fp2 = 0;
	     fp1;
	     fp2 = fp1, fp1 = fp1->nx) {
     dba:	c2 81       	ldd	r28, Z+2	; 0x02
     dbc:	d3 81       	ldd	r29, Z+3	; 0x03
	 * would match exactly.  If we found one, we are done.  While
	 * walking, note down the size of the largest chunk we found
	 * that would still fit the request -- we need it for step 2.
	 *
	 */
	for (s = 0, fp1 = __flp, fp2 = 0;
     dbe:	20 97       	sbiw	r28, 0x00	; 0
     dc0:	91 f6       	brne	.-92     	; 0xd66 <malloc+0x46>
	 * difference between the requested size and the size of the
	 * chunk found is large enough for another freelist entry; if
	 * not, just enlarge the request size to what we have found,
	 * and use the entire chunk.
	 */
	if (s) {
     dc2:	21 15       	cp	r18, r1
     dc4:	31 05       	cpc	r19, r1
     dc6:	09 f4       	brne	.+2      	; 0xdca <malloc+0xaa>
     dc8:	46 c0       	rjmp	.+140    	; 0xe56 <malloc+0x136>
		if (s - len < sizeof(struct __freelist))
     dca:	c9 01       	movw	r24, r18
     dcc:	80 1b       	sub	r24, r16
     dce:	91 0b       	sbc	r25, r17
     dd0:	04 97       	sbiw	r24, 0x04	; 4
     dd2:	08 f4       	brcc	.+2      	; 0xdd6 <malloc+0xb6>
     dd4:	87 c0       	rjmp	.+270    	; 0xee4 <malloc+0x1c4>
     dd6:	87 c0       	rjmp	.+270    	; 0xee6 <malloc+0x1c6>
			len = s;
		for (fp1 = __flp, fp2 = 0;
		     fp1;
		     fp2 = fp1, fp1 = fp1->nx) {
			if (fp1->sz == s) {
     dd8:	f7 01       	movw	r30, r14
     dda:	80 81       	ld	r24, Z
     ddc:	91 81       	ldd	r25, Z+1	; 0x01
     dde:	28 17       	cp	r18, r24
     de0:	39 07       	cpc	r19, r25
     de2:	81 f5       	brne	.+96     	; 0xe44 <malloc+0x124>
				if (len == s) {
     de4:	20 17       	cp	r18, r16
     de6:	31 07       	cpc	r19, r17
     de8:	d9 f4       	brne	.+54     	; 0xe20 <malloc+0x100>
					/*
					 * Use entire chunk; same as
					 * above.
					 */
					if (fp2)
     dea:	10 97       	sbiw	r26, 0x00	; 0
     dec:	39 f0       	breq	.+14     	; 0xdfc <malloc+0xdc>
						fp2->nx = fp1->nx;
     dee:	82 81       	ldd	r24, Z+2	; 0x02
     df0:	93 81       	ldd	r25, Z+3	; 0x03
     df2:	13 96       	adiw	r26, 0x03	; 3
     df4:	9c 93       	st	X, r25
     df6:	8e 93       	st	-X, r24
     df8:	12 97       	sbiw	r26, 0x02	; 2
     dfa:	0a c0       	rjmp	.+20     	; 0xe10 <malloc+0xf0>
	if (s) {
		if (s - len < sizeof(struct __freelist))
			len = s;
		for (fp1 = __flp, fp2 = 0;
		     fp1;
		     fp2 = fp1, fp1 = fp1->nx) {
     dfc:	d7 01       	movw	r26, r14
					 * above.
					 */
					if (fp2)
						fp2->nx = fp1->nx;
					else
						__flp = fp1->nx;
     dfe:	12 96       	adiw	r26, 0x02	; 2
     e00:	8d 91       	ld	r24, X+
     e02:	9c 91       	ld	r25, X
     e04:	13 97       	sbiw	r26, 0x03	; 3
     e06:	90 93 fa 02 	sts	0x02FA, r25	; 0x8002fa <__flp+0x1>
     e0a:	80 93 f9 02 	sts	0x02F9, r24	; 0x8002f9 <__flp>
     e0e:	7d 01       	movw	r14, r26
					PostSemaphore(&MallocBlocker,0);
     e10:	60 e0       	ldi	r22, 0x00	; 0
     e12:	70 e0       	ldi	r23, 0x00	; 0
     e14:	89 ed       	ldi	r24, 0xD9	; 217
     e16:	92 e0       	ldi	r25, 0x02	; 2
     e18:	67 d5       	rcall	.+2766   	; 0x18e8 <PostSemaphore>
					return &(fp1->nx);
     e1a:	e7 01       	movw	r28, r14
     e1c:	22 96       	adiw	r28, 0x02	; 2
     e1e:	68 c0       	rjmp	.+208    	; 0xef0 <malloc+0x1d0>
				 * entry, and note down the size of
				 * the new chunk before returning it
				 * to the caller.
				 */
				cp = (char *)fp1;
				s -= len;
     e20:	20 1b       	sub	r18, r16
     e22:	31 0b       	sbc	r19, r17
				cp += s;
				fp2 = (struct __freelist *)cp;
				fp2->sz = len;
     e24:	e7 01       	movw	r28, r14
     e26:	c2 0f       	add	r28, r18
     e28:	d3 1f       	adc	r29, r19
     e2a:	09 93       	st	Y+, r16
     e2c:	19 93       	st	Y+, r17
				fp1->sz = s - sizeof(size_t);
     e2e:	22 50       	subi	r18, 0x02	; 2
     e30:	31 09       	sbc	r19, r1
     e32:	f7 01       	movw	r30, r14
     e34:	31 83       	std	Z+1, r19	; 0x01
     e36:	20 83       	st	Z, r18
				PostSemaphore(&MallocBlocker,0);
     e38:	60 e0       	ldi	r22, 0x00	; 0
     e3a:	70 e0       	ldi	r23, 0x00	; 0
     e3c:	89 ed       	ldi	r24, 0xD9	; 217
     e3e:	92 e0       	ldi	r25, 0x02	; 2
     e40:	53 d5       	rcall	.+2726   	; 0x18e8 <PostSemaphore>
				return &(fp2->nx);
     e42:	56 c0       	rjmp	.+172    	; 0xef0 <malloc+0x1d0>
	if (s) {
		if (s - len < sizeof(struct __freelist))
			len = s;
		for (fp1 = __flp, fp2 = 0;
		     fp1;
		     fp2 = fp1, fp1 = fp1->nx) {
     e44:	d7 01       	movw	r26, r14
     e46:	12 96       	adiw	r26, 0x02	; 2
     e48:	ed 90       	ld	r14, X+
     e4a:	fc 90       	ld	r15, X
     e4c:	13 97       	sbiw	r26, 0x03	; 3
	 * and use the entire chunk.
	 */
	if (s) {
		if (s - len < sizeof(struct __freelist))
			len = s;
		for (fp1 = __flp, fp2 = 0;
     e4e:	e1 14       	cp	r14, r1
     e50:	f1 04       	cpc	r15, r1
     e52:	09 f0       	breq	.+2      	; 0xe56 <malloc+0x136>
     e54:	c1 cf       	rjmp	.-126    	; 0xdd8 <malloc+0xb8>
	 * Under Unix, the "break value" was the end of the data
	 * segment as dynamically requested from the operating system.
	 * Since we don't have an operating system, just make sure
	 * that we don't collide with the stack.
	 */
	if (__brkval == 0)
     e56:	80 91 d7 02 	lds	r24, 0x02D7	; 0x8002d7 <__brkval>
     e5a:	90 91 d8 02 	lds	r25, 0x02D8	; 0x8002d8 <__brkval+0x1>
     e5e:	89 2b       	or	r24, r25
     e60:	41 f4       	brne	.+16     	; 0xe72 <malloc+0x152>
		__brkval = __malloc_heap_start;
     e62:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <__malloc_heap_start>
     e66:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <__malloc_heap_start+0x1>
     e6a:	90 93 d8 02 	sts	0x02D8, r25	; 0x8002d8 <__brkval+0x1>
     e6e:	80 93 d7 02 	sts	0x02D7, r24	; 0x8002d7 <__brkval>
	cp = __malloc_heap_end;
     e72:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <__malloc_heap_end>
     e76:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <__malloc_heap_end+0x1>
	if (cp == 0)
     e7a:	00 97       	sbiw	r24, 0x00	; 0
     e7c:	41 f4       	brne	.+16     	; 0xe8e <malloc+0x16e>
		cp = STACK_POINTER() - __malloc_margin;
     e7e:	8d b7       	in	r24, 0x3d	; 61
     e80:	9e b7       	in	r25, 0x3e	; 62
     e82:	20 91 20 01 	lds	r18, 0x0120	; 0x800120 <__malloc_margin>
     e86:	30 91 21 01 	lds	r19, 0x0121	; 0x800121 <__malloc_margin+0x1>
     e8a:	82 1b       	sub	r24, r18
     e8c:	93 0b       	sbc	r25, r19
	avail = cp - __brkval;
     e8e:	c0 91 d7 02 	lds	r28, 0x02D7	; 0x8002d7 <__brkval>
     e92:	d0 91 d8 02 	lds	r29, 0x02D8	; 0x8002d8 <__brkval+0x1>
     e96:	8c 1b       	sub	r24, r28
     e98:	9d 0b       	sbc	r25, r29
	/*
	 * Both tests below are needed to catch the case len >= 0xfffe.
	 */
	if (avail >= len && avail >= len + sizeof(size_t)) {
     e9a:	80 17       	cp	r24, r16
     e9c:	91 07       	cpc	r25, r17
     e9e:	a0 f0       	brcs	.+40     	; 0xec8 <malloc+0x1a8>
     ea0:	98 01       	movw	r18, r16
     ea2:	2e 5f       	subi	r18, 0xFE	; 254
     ea4:	3f 4f       	sbci	r19, 0xFF	; 255
     ea6:	82 17       	cp	r24, r18
     ea8:	93 07       	cpc	r25, r19
     eaa:	70 f0       	brcs	.+28     	; 0xec8 <malloc+0x1a8>
		fp1 = (struct __freelist *)__brkval;
		__brkval += len + sizeof(size_t);
     eac:	2c 0f       	add	r18, r28
     eae:	3d 1f       	adc	r19, r29
     eb0:	30 93 d8 02 	sts	0x02D8, r19	; 0x8002d8 <__brkval+0x1>
     eb4:	20 93 d7 02 	sts	0x02D7, r18	; 0x8002d7 <__brkval>
		fp1->sz = len;
     eb8:	09 93       	st	Y+, r16
     eba:	19 93       	st	Y+, r17
		PostSemaphore(&MallocBlocker,0);
     ebc:	60 e0       	ldi	r22, 0x00	; 0
     ebe:	70 e0       	ldi	r23, 0x00	; 0
     ec0:	89 ed       	ldi	r24, 0xD9	; 217
     ec2:	92 e0       	ldi	r25, 0x02	; 2
     ec4:	11 d5       	rcall	.+2594   	; 0x18e8 <PostSemaphore>
		return &(fp1->nx);
	}
	/*
	 * Step 4: There's no help, just fail. :-/
	 */
	 PostSemaphore(&MallocBlocker,0);
     ec6:	14 c0       	rjmp	.+40     	; 0xef0 <malloc+0x1d0>
     ec8:	60 e0       	ldi	r22, 0x00	; 0
     eca:	70 e0       	ldi	r23, 0x00	; 0
     ecc:	89 ed       	ldi	r24, 0xD9	; 217
     ece:	92 e0       	ldi	r25, 0x02	; 2
     ed0:	0b d5       	rcall	.+2582   	; 0x18e8 <PostSemaphore>
	return 0;
     ed2:	c0 e0       	ldi	r28, 0x00	; 0
     ed4:	d0 e0       	ldi	r29, 0x00	; 0
     ed6:	0c c0       	rjmp	.+24     	; 0xef0 <malloc+0x1d0>
			len = s;
		for (fp1 = __flp, fp2 = 0;
		     fp1;
		     fp2 = fp1, fp1 = fp1->nx) {
			if (fp1->sz == s) {
				if (len == s) {
     ed8:	20 17       	cp	r18, r16
     eda:	31 07       	cpc	r19, r17
     edc:	09 f4       	brne	.+2      	; 0xee0 <malloc+0x1c0>
     ede:	8f cf       	rjmp	.-226    	; 0xdfe <malloc+0xde>
	 * and use the entire chunk.
	 */
	if (s) {
		if (s - len < sizeof(struct __freelist))
			len = s;
		for (fp1 = __flp, fp2 = 0;
     ee0:	7d 01       	movw	r14, r26
     ee2:	9e cf       	rjmp	.-196    	; 0xe20 <malloc+0x100>
	 * chunk found is large enough for another freelist entry; if
	 * not, just enlarge the request size to what we have found,
	 * and use the entire chunk.
	 */
	if (s) {
		if (s - len < sizeof(struct __freelist))
     ee4:	89 01       	movw	r16, r18
			len = s;
		for (fp1 = __flp, fp2 = 0;
		     fp1;
		     fp2 = fp1, fp1 = fp1->nx) {
			if (fp1->sz == s) {
     ee6:	24 17       	cp	r18, r20
     ee8:	35 07       	cpc	r19, r21
     eea:	09 f0       	breq	.+2      	; 0xeee <malloc+0x1ce>
     eec:	ac cf       	rjmp	.-168    	; 0xe46 <malloc+0x126>
     eee:	f4 cf       	rjmp	.-24     	; 0xed8 <malloc+0x1b8>
	/*
	 * Step 4: There's no help, just fail. :-/
	 */
	 PostSemaphore(&MallocBlocker,0);
	return 0;
}
     ef0:	ce 01       	movw	r24, r28
     ef2:	df 91       	pop	r29
     ef4:	cf 91       	pop	r28
     ef6:	1f 91       	pop	r17
     ef8:	0f 91       	pop	r16
     efa:	ff 90       	pop	r15
     efc:	ef 90       	pop	r14
     efe:	08 95       	ret

00000f00 <free>:
		free is thread safe.
	parameters:
		p.....pointer to memory block to free
**************************************************/
void free(void *p)
{
     f00:	0f 93       	push	r16
     f02:	1f 93       	push	r17
     f04:	cf 93       	push	r28
     f06:	df 93       	push	r29
	struct __freelist *fp1, *fp2, *fpnew;
	char *cp1, *cp2, *cpnew;

	/* ISO C says free(NULL) must be a no-op */
	if (p == 0)
     f08:	00 97       	sbiw	r24, 0x00	; 0
     f0a:	09 f4       	brne	.+2      	; 0xf0e <free+0xe>
     f0c:	84 c0       	rjmp	.+264    	; 0x1016 <free+0x116>
     f0e:	8c 01       	movw	r16, r24
		return;

	PendSemaphore(&MallocBlocker,0);
     f10:	60 e0       	ldi	r22, 0x00	; 0
     f12:	70 e0       	ldi	r23, 0x00	; 0
     f14:	89 ed       	ldi	r24, 0xD9	; 217
     f16:	92 e0       	ldi	r25, 0x02	; 2
     f18:	9b d3       	rcall	.+1846   	; 0x1650 <PendSemaphore>
	cpnew = p;
	cpnew -= sizeof(size_t);
     f1a:	d8 01       	movw	r26, r16
     f1c:	12 97       	sbiw	r26, 0x02	; 2
	fpnew = (struct __freelist *)cpnew;
	fpnew->nx = 0;
     f1e:	13 96       	adiw	r26, 0x03	; 3
     f20:	1c 92       	st	X, r1
     f22:	1e 92       	st	-X, r1
     f24:	12 97       	sbiw	r26, 0x02	; 2

	/*
	 * Trivial case first: if there's no freelist yet, our entry
	 * will be the only one on it.
	 */
	if (__flp == 0) {
     f26:	e0 91 f9 02 	lds	r30, 0x02F9	; 0x8002f9 <__flp>
     f2a:	f0 91 fa 02 	lds	r31, 0x02FA	; 0x8002fa <__flp+0x1>
     f2e:	30 97       	sbiw	r30, 0x00	; 0
     f30:	21 f0       	breq	.+8      	; 0xf3a <free+0x3a>
	 * if possible.
	 */
	for (fp1 = __flp, fp2 = 0;
	     fp1;
	     fp2 = fp1, fp1 = fp1->nx) {
		if (fp1 < fpnew)
     f32:	ea 17       	cp	r30, r26
     f34:	fb 07       	cpc	r31, r27
     f36:	78 f0       	brcs	.+30     	; 0xf56 <free+0x56>
     f38:	5f c0       	rjmp	.+190    	; 0xff8 <free+0xf8>
	/*
	 * Trivial case first: if there's no freelist yet, our entry
	 * will be the only one on it.
	 */
	if (__flp == 0) {
		__flp = fpnew;
     f3a:	b0 93 fa 02 	sts	0x02FA, r27	; 0x8002fa <__flp+0x1>
     f3e:	a0 93 f9 02 	sts	0x02F9, r26	; 0x8002f9 <__flp>
		PostSemaphore(&MallocBlocker,0);
     f42:	60 e0       	ldi	r22, 0x00	; 0
     f44:	70 e0       	ldi	r23, 0x00	; 0
     f46:	89 ed       	ldi	r24, 0xD9	; 217
     f48:	92 e0       	ldi	r25, 0x02	; 2
     f4a:	ce d4       	rcall	.+2460   	; 0x18e8 <PostSemaphore>
		return;
     f4c:	64 c0       	rjmp	.+200    	; 0x1016 <free+0x116>
	 * if possible.
	 */
	for (fp1 = __flp, fp2 = 0;
	     fp1;
	     fp2 = fp1, fp1 = fp1->nx) {
		if (fp1 < fpnew)
     f4e:	8a 17       	cp	r24, r26
     f50:	9b 07       	cpc	r25, r27
     f52:	30 f4       	brcc	.+12     	; 0xf60 <free+0x60>
	 * freelist.  Try to aggregate the chunk with adjacent chunks
	 * if possible.
	 */
	for (fp1 = __flp, fp2 = 0;
	     fp1;
	     fp2 = fp1, fp1 = fp1->nx) {
     f54:	fc 01       	movw	r30, r24
     f56:	82 81       	ldd	r24, Z+2	; 0x02
     f58:	93 81       	ldd	r25, Z+3	; 0x03
	/*
	 * Now, find the position where our new entry belongs onto the
	 * freelist.  Try to aggregate the chunk with adjacent chunks
	 * if possible.
	 */
	for (fp1 = __flp, fp2 = 0;
     f5a:	00 97       	sbiw	r24, 0x00	; 0
     f5c:	c1 f7       	brne	.-16     	; 0xf4e <free+0x4e>
     f5e:	2e c0       	rjmp	.+92     	; 0xfbc <free+0xbc>
	     fp1;
	     fp2 = fp1, fp1 = fp1->nx) {
		if (fp1 < fpnew)
			continue;
		cp1 = (char *)fp1;
		fpnew->nx = fp1;
     f60:	98 01       	movw	r18, r16
     f62:	22 50       	subi	r18, 0x02	; 2
     f64:	31 09       	sbc	r19, r1
     f66:	e9 01       	movw	r28, r18
     f68:	9b 83       	std	Y+3, r25	; 0x03
     f6a:	8a 83       	std	Y+2, r24	; 0x02
		if ((char *)&(fpnew->nx) + fpnew->sz == cp1) {
     f6c:	28 81       	ld	r18, Y
     f6e:	39 81       	ldd	r19, Y+1	; 0x01
     f70:	a8 01       	movw	r20, r16
     f72:	42 0f       	add	r20, r18
     f74:	53 1f       	adc	r21, r19
     f76:	84 17       	cp	r24, r20
     f78:	95 07       	cpc	r25, r21
     f7a:	a1 f4       	brne	.+40     	; 0xfa4 <free+0xa4>
     f7c:	02 c0       	rjmp	.+4      	; 0xf82 <free+0x82>
     f7e:	e0 e0       	ldi	r30, 0x00	; 0
     f80:	f0 e0       	ldi	r31, 0x00	; 0
			/* upper chunk adjacent, assimilate it */
			fpnew->sz += fp1->sz + sizeof(size_t);
     f82:	ec 01       	movw	r28, r24
     f84:	68 81       	ld	r22, Y
     f86:	79 81       	ldd	r23, Y+1	; 0x01
     f88:	6e 5f       	subi	r22, 0xFE	; 254
     f8a:	7f 4f       	sbci	r23, 0xFF	; 255
     f8c:	26 0f       	add	r18, r22
     f8e:	37 1f       	adc	r19, r23
     f90:	e8 01       	movw	r28, r16
     f92:	3a 93       	st	-Y, r19
     f94:	2a 93       	st	-Y, r18
     f96:	ae 01       	movw	r20, r28
			fpnew->nx = fp1->nx;
     f98:	ec 01       	movw	r28, r24
     f9a:	8a 81       	ldd	r24, Y+2	; 0x02
     f9c:	9b 81       	ldd	r25, Y+3	; 0x03
     f9e:	ea 01       	movw	r28, r20
     fa0:	9b 83       	std	Y+3, r25	; 0x03
     fa2:	8a 83       	std	Y+2, r24	; 0x02
		}
		if (fp2 == 0) {
     fa4:	30 97       	sbiw	r30, 0x00	; 0
     fa6:	51 f4       	brne	.+20     	; 0xfbc <free+0xbc>
			/* new head of freelist */
			__flp = fpnew;
     fa8:	b0 93 fa 02 	sts	0x02FA, r27	; 0x8002fa <__flp+0x1>
     fac:	a0 93 f9 02 	sts	0x02F9, r26	; 0x8002f9 <__flp>
			PostSemaphore(&MallocBlocker,0);
     fb0:	60 e0       	ldi	r22, 0x00	; 0
     fb2:	70 e0       	ldi	r23, 0x00	; 0
     fb4:	89 ed       	ldi	r24, 0xD9	; 217
     fb6:	92 e0       	ldi	r25, 0x02	; 2
     fb8:	97 d4       	rcall	.+2350   	; 0x18e8 <PostSemaphore>
			return;
     fba:	2d c0       	rjmp	.+90     	; 0x1016 <free+0x116>
	 * Note that we get here either if we hit the "break" above,
	 * or if we fell off the end of the loop.  The latter means
	 * we've got a new topmost chunk.  Either way, try aggregating
	 * with the lower chunk if possible.
	 */
	fp2->nx = fpnew;
     fbc:	b3 83       	std	Z+3, r27	; 0x03
     fbe:	a2 83       	std	Z+2, r26	; 0x02
	cp2 = (char *)&(fp2->nx);
	if (cp2 + fp2->sz == cpnew) {
     fc0:	ef 01       	movw	r28, r30
     fc2:	29 91       	ld	r18, Y+
     fc4:	39 91       	ld	r19, Y+
     fc6:	ce 01       	movw	r24, r28
     fc8:	82 0f       	add	r24, r18
     fca:	93 1f       	adc	r25, r19
     fcc:	a8 17       	cp	r26, r24
     fce:	b9 07       	cpc	r27, r25
     fd0:	69 f4       	brne	.+26     	; 0xfec <free+0xec>
		/* lower junk adjacent, merge */
		fp2->sz += fpnew->sz + sizeof(size_t);
     fd2:	e8 01       	movw	r28, r16
     fd4:	5a 91       	ld	r21, -Y
     fd6:	4a 91       	ld	r20, -Y
     fd8:	24 0f       	add	r18, r20
     fda:	35 1f       	adc	r19, r21
     fdc:	2e 5f       	subi	r18, 0xFE	; 254
     fde:	3f 4f       	sbci	r19, 0xFF	; 255
     fe0:	31 83       	std	Z+1, r19	; 0x01
     fe2:	20 83       	st	Z, r18
		fp2->nx = fpnew->nx;
     fe4:	8a 81       	ldd	r24, Y+2	; 0x02
     fe6:	9b 81       	ldd	r25, Y+3	; 0x03
     fe8:	93 83       	std	Z+3, r25	; 0x03
     fea:	82 83       	std	Z+2, r24	; 0x02
	}
	PostSemaphore(&MallocBlocker,0);
     fec:	60 e0       	ldi	r22, 0x00	; 0
     fee:	70 e0       	ldi	r23, 0x00	; 0
     ff0:	89 ed       	ldi	r24, 0xD9	; 217
     ff2:	92 e0       	ldi	r25, 0x02	; 2
     ff4:	79 d4       	rcall	.+2290   	; 0x18e8 <PostSemaphore>
     ff6:	0f c0       	rjmp	.+30     	; 0x1016 <free+0x116>
	     fp1;
	     fp2 = fp1, fp1 = fp1->nx) {
		if (fp1 < fpnew)
			continue;
		cp1 = (char *)fp1;
		fpnew->nx = fp1;
     ff8:	c8 01       	movw	r24, r16
     ffa:	02 97       	sbiw	r24, 0x02	; 2
     ffc:	ec 01       	movw	r28, r24
     ffe:	fb 83       	std	Y+3, r31	; 0x03
    1000:	ea 83       	std	Y+2, r30	; 0x02
		if ((char *)&(fpnew->nx) + fpnew->sz == cp1) {
    1002:	28 81       	ld	r18, Y
    1004:	39 81       	ldd	r19, Y+1	; 0x01
    1006:	c8 01       	movw	r24, r16
    1008:	82 0f       	add	r24, r18
    100a:	93 1f       	adc	r25, r19
    100c:	e8 17       	cp	r30, r24
    100e:	f9 07       	cpc	r31, r25
    1010:	09 f4       	brne	.+2      	; 0x1014 <free+0x114>
    1012:	b5 cf       	rjmp	.-150    	; 0xf7e <free+0x7e>
    1014:	c9 cf       	rjmp	.-110    	; 0xfa8 <free+0xa8>
		/* lower junk adjacent, merge */
		fp2->sz += fpnew->sz + sizeof(size_t);
		fp2->nx = fpnew->nx;
	}
	PostSemaphore(&MallocBlocker,0);
}
    1016:	df 91       	pop	r29
    1018:	cf 91       	pop	r28
    101a:	1f 91       	pop	r17
    101c:	0f 91       	pop	r16
    101e:	08 95       	ret

00001020 <OS_InitMalloc>:
// If start == 0, use default value
// If end == 0, use default value
//--------------------------------------------------------------------

void OS_InitMalloc(char *start, char *end)
{
    1020:	0f 93       	push	r16
    1022:	1f 93       	push	r17
    1024:	cf 93       	push	r28
    1026:	df 93       	push	r29
    1028:	8c 01       	movw	r16, r24
    102a:	eb 01       	movw	r28, r22
	CreateSemaphore(&MallocBlocker,1,SEMAPHORE_MODE_BLOCKING,"Malloc");
    102c:	2c e7       	ldi	r18, 0x7C	; 124
    102e:	31 e0       	ldi	r19, 0x01	; 1
    1030:	40 e0       	ldi	r20, 0x00	; 0
    1032:	50 e0       	ldi	r21, 0x00	; 0
    1034:	61 e0       	ldi	r22, 0x01	; 1
    1036:	70 e0       	ldi	r23, 0x00	; 0
    1038:	89 ed       	ldi	r24, 0xD9	; 217
    103a:	92 e0       	ldi	r25, 0x02	; 2
    103c:	5e d8       	rcall	.-3908   	; 0xfa <CreateSemaphore>
	if(start) __malloc_heap_start = start;
    103e:	01 15       	cp	r16, r1
    1040:	11 05       	cpc	r17, r1
    1042:	21 f0       	breq	.+8      	; 0x104c <OS_InitMalloc+0x2c>
    1044:	10 93 1f 01 	sts	0x011F, r17	; 0x80011f <__malloc_heap_start+0x1>
    1048:	00 93 1e 01 	sts	0x011E, r16	; 0x80011e <__malloc_heap_start>
	if(end) __malloc_heap_end = end;
    104c:	20 97       	sbiw	r28, 0x00	; 0
    104e:	21 f0       	breq	.+8      	; 0x1058 <OS_InitMalloc+0x38>
    1050:	d0 93 1d 01 	sts	0x011D, r29	; 0x80011d <__malloc_heap_end+0x1>
    1054:	c0 93 1c 01 	sts	0x011C, r28	; 0x80011c <__malloc_heap_end>
}
    1058:	df 91       	pop	r29
    105a:	cf 91       	pop	r28
    105c:	1f 91       	pop	r17
    105e:	0f 91       	pop	r16
    1060:	08 95       	ret

00001062 <NewMessageBuffer>:
 #include <stdlib.h>
 #include "semaphore.h"
 #include "Message.h"

 MESSBUFF *NewMessageBuffer(int size)
 {
    1062:	0f 93       	push	r16
    1064:	1f 93       	push	r17
    1066:	cf 93       	push	r28
    1068:	df 93       	push	r29
    106a:	8c 01       	movw	r16, r24
	MESSBUFF *pMB;
	pMB = (MESSBUFF *)malloc(sizeof (MESSBUFF));
    106c:	8c e0       	ldi	r24, 0x0C	; 12
    106e:	90 e0       	ldi	r25, 0x00	; 0
    1070:	57 de       	rcall	.-850    	; 0xd20 <malloc>
    1072:	ec 01       	movw	r28, r24
	pMB->m_Buff = (MESSAGE *)malloc(sizeof(MESSAGE) * size);
    1074:	c8 01       	movw	r24, r16
    1076:	88 0f       	add	r24, r24
    1078:	99 1f       	adc	r25, r25
    107a:	80 0f       	add	r24, r16
    107c:	91 1f       	adc	r25, r17
    107e:	88 0f       	add	r24, r24
    1080:	99 1f       	adc	r25, r25
    1082:	4e de       	rcall	.-868    	; 0xd20 <malloc>
    1084:	9b 87       	std	Y+11, r25	; 0x0b
    1086:	8a 87       	std	Y+10, r24	; 0x0a
	pMB->m_pSem = NewSemaphore(0,SEMAPHORE_MODE_BLOCKING,"Message");
    1088:	43 e8       	ldi	r20, 0x83	; 131
    108a:	51 e0       	ldi	r21, 0x01	; 1
    108c:	60 e0       	ldi	r22, 0x00	; 0
    108e:	70 e0       	ldi	r23, 0x00	; 0
    1090:	80 e0       	ldi	r24, 0x00	; 0
    1092:	90 e0       	ldi	r25, 0x00	; 0
    1094:	64 d8       	rcall	.-3896   	; 0x15e <NewSemaphore>
    1096:	99 83       	std	Y+1, r25	; 0x01
    1098:	88 83       	st	Y, r24
	pMB->m_Head = 0;
    109a:	1d 82       	std	Y+5, r1	; 0x05
    109c:	1c 82       	std	Y+4, r1	; 0x04
	pMB->m_Size = size;
    109e:	19 87       	std	Y+9, r17	; 0x09
    10a0:	08 87       	std	Y+8, r16	; 0x08
	pMB->m_Tail = 0;
    10a2:	1f 82       	std	Y+7, r1	; 0x07
    10a4:	1e 82       	std	Y+6, r1	; 0x06
	pMB->n_Msg = 0;
    10a6:	1b 82       	std	Y+3, r1	; 0x03
    10a8:	1a 82       	std	Y+2, r1	; 0x02
	return pMB;
 }
    10aa:	ce 01       	movw	r24, r28
    10ac:	df 91       	pop	r29
    10ae:	cf 91       	pop	r28
    10b0:	1f 91       	pop	r17
    10b2:	0f 91       	pop	r16
    10b4:	08 95       	ret

000010b6 <PostMessage>:

 void PostMessage(MESSBUFF *pMB, int cmd,int Param1,int Param2)
 {
    10b6:	fc 01       	movw	r30, r24
	if(pMB->n_Msg < pMB->m_Size)
    10b8:	a2 81       	ldd	r26, Z+2	; 0x02
    10ba:	b3 81       	ldd	r27, Z+3	; 0x03
    10bc:	80 85       	ldd	r24, Z+8	; 0x08
    10be:	91 85       	ldd	r25, Z+9	; 0x09
    10c0:	a8 17       	cp	r26, r24
    10c2:	b9 07       	cpc	r27, r25
    10c4:	0c f0       	brlt	.+2      	; 0x10c8 <PostMessage+0x12>
    10c6:	47 c0       	rjmp	.+142    	; 0x1156 <PostMessage+0xa0>
	{
		pMB->m_Buff[pMB->m_Head].m_Cmd = cmd;
    10c8:	84 81       	ldd	r24, Z+4	; 0x04
    10ca:	95 81       	ldd	r25, Z+5	; 0x05
    10cc:	dc 01       	movw	r26, r24
    10ce:	aa 0f       	add	r26, r26
    10d0:	bb 1f       	adc	r27, r27
    10d2:	8a 0f       	add	r24, r26
    10d4:	9b 1f       	adc	r25, r27
    10d6:	88 0f       	add	r24, r24
    10d8:	99 1f       	adc	r25, r25
    10da:	a2 85       	ldd	r26, Z+10	; 0x0a
    10dc:	b3 85       	ldd	r27, Z+11	; 0x0b
    10de:	a8 0f       	add	r26, r24
    10e0:	b9 1f       	adc	r27, r25
    10e2:	6d 93       	st	X+, r22
    10e4:	7c 93       	st	X, r23
		pMB->m_Buff[pMB->m_Head].m_Param1 = Param1;
    10e6:	84 81       	ldd	r24, Z+4	; 0x04
    10e8:	95 81       	ldd	r25, Z+5	; 0x05
    10ea:	dc 01       	movw	r26, r24
    10ec:	aa 0f       	add	r26, r26
    10ee:	bb 1f       	adc	r27, r27
    10f0:	8a 0f       	add	r24, r26
    10f2:	9b 1f       	adc	r25, r27
    10f4:	88 0f       	add	r24, r24
    10f6:	99 1f       	adc	r25, r25
    10f8:	a2 85       	ldd	r26, Z+10	; 0x0a
    10fa:	b3 85       	ldd	r27, Z+11	; 0x0b
    10fc:	a8 0f       	add	r26, r24
    10fe:	b9 1f       	adc	r27, r25
    1100:	13 96       	adiw	r26, 0x03	; 3
    1102:	5c 93       	st	X, r21
    1104:	4e 93       	st	-X, r20
    1106:	12 97       	sbiw	r26, 0x02	; 2
		pMB->m_Buff[pMB->m_Head].m_Param2 = Param2;
    1108:	84 81       	ldd	r24, Z+4	; 0x04
    110a:	95 81       	ldd	r25, Z+5	; 0x05
    110c:	dc 01       	movw	r26, r24
    110e:	aa 0f       	add	r26, r26
    1110:	bb 1f       	adc	r27, r27
    1112:	8a 0f       	add	r24, r26
    1114:	9b 1f       	adc	r25, r27
    1116:	88 0f       	add	r24, r24
    1118:	99 1f       	adc	r25, r25
    111a:	a2 85       	ldd	r26, Z+10	; 0x0a
    111c:	b3 85       	ldd	r27, Z+11	; 0x0b
    111e:	a8 0f       	add	r26, r24
    1120:	b9 1f       	adc	r27, r25
    1122:	15 96       	adiw	r26, 0x05	; 5
    1124:	3c 93       	st	X, r19
    1126:	2e 93       	st	-X, r18
    1128:	14 97       	sbiw	r26, 0x04	; 4
		pMB->m_Head++;
    112a:	84 81       	ldd	r24, Z+4	; 0x04
    112c:	95 81       	ldd	r25, Z+5	; 0x05
    112e:	01 96       	adiw	r24, 0x01	; 1
    1130:	95 83       	std	Z+5, r25	; 0x05
    1132:	84 83       	std	Z+4, r24	; 0x04
		if(pMB->m_Head == pMB->m_Size) pMB->m_Head = 0;
    1134:	20 85       	ldd	r18, Z+8	; 0x08
    1136:	31 85       	ldd	r19, Z+9	; 0x09
    1138:	82 17       	cp	r24, r18
    113a:	93 07       	cpc	r25, r19
    113c:	11 f4       	brne	.+4      	; 0x1142 <PostMessage+0x8c>
    113e:	15 82       	std	Z+5, r1	; 0x05
    1140:	14 82       	std	Z+4, r1	; 0x04
		pMB->n_Msg++;
    1142:	82 81       	ldd	r24, Z+2	; 0x02
    1144:	93 81       	ldd	r25, Z+3	; 0x03
    1146:	01 96       	adiw	r24, 0x01	; 1
    1148:	93 83       	std	Z+3, r25	; 0x03
    114a:	82 83       	std	Z+2, r24	; 0x02
		PostSemaphore(pMB->m_pSem,0);
    114c:	60 e0       	ldi	r22, 0x00	; 0
    114e:	70 e0       	ldi	r23, 0x00	; 0
    1150:	80 81       	ld	r24, Z
    1152:	91 81       	ldd	r25, Z+1	; 0x01
    1154:	c9 c3       	rjmp	.+1938   	; 0x18e8 <PostSemaphore>
    1156:	08 95       	ret

00001158 <GetMessage>:
	}
}

 MESSAGE *GetMessage(MESSBUFF *pMB)
 {
    1158:	cf 93       	push	r28
    115a:	df 93       	push	r29
    115c:	ec 01       	movw	r28, r24
	MESSAGE *pMsg;

	PendSemaphore(pMB->m_pSem,0);
    115e:	60 e0       	ldi	r22, 0x00	; 0
    1160:	70 e0       	ldi	r23, 0x00	; 0
    1162:	88 81       	ld	r24, Y
    1164:	99 81       	ldd	r25, Y+1	; 0x01
    1166:	74 d2       	rcall	.+1256   	; 0x1650 <PendSemaphore>
	pMsg = &pMB->m_Buff[pMB->m_Tail];
    1168:	2e 81       	ldd	r18, Y+6	; 0x06
    116a:	3f 81       	ldd	r19, Y+7	; 0x07
    116c:	c9 01       	movw	r24, r18
    116e:	88 0f       	add	r24, r24
    1170:	99 1f       	adc	r25, r25
    1172:	82 0f       	add	r24, r18
    1174:	93 1f       	adc	r25, r19
    1176:	88 0f       	add	r24, r24
    1178:	99 1f       	adc	r25, r25
    117a:	4a 85       	ldd	r20, Y+10	; 0x0a
    117c:	5b 85       	ldd	r21, Y+11	; 0x0b
    117e:	84 0f       	add	r24, r20
    1180:	95 1f       	adc	r25, r21
	if(++pMB->m_Tail == pMB->m_Size)
    1182:	2f 5f       	subi	r18, 0xFF	; 255
    1184:	3f 4f       	sbci	r19, 0xFF	; 255
    1186:	3f 83       	std	Y+7, r19	; 0x07
    1188:	2e 83       	std	Y+6, r18	; 0x06
    118a:	48 85       	ldd	r20, Y+8	; 0x08
    118c:	59 85       	ldd	r21, Y+9	; 0x09
    118e:	24 17       	cp	r18, r20
    1190:	35 07       	cpc	r19, r21
    1192:	11 f4       	brne	.+4      	; 0x1198 <GetMessage+0x40>
		pMB->m_Tail = 0;
    1194:	1f 82       	std	Y+7, r1	; 0x07
    1196:	1e 82       	std	Y+6, r1	; 0x06
	pMB->n_Msg--;
    1198:	2a 81       	ldd	r18, Y+2	; 0x02
    119a:	3b 81       	ldd	r19, Y+3	; 0x03
    119c:	21 50       	subi	r18, 0x01	; 1
    119e:	31 09       	sbc	r19, r1
    11a0:	3b 83       	std	Y+3, r19	; 0x03
    11a2:	2a 83       	std	Y+2, r18	; 0x02
	return pMsg;
 }
    11a4:	df 91       	pop	r29
    11a6:	cf 91       	pop	r28
    11a8:	08 95       	ret

000011aa <InitMessageQueueManager>:
void InitMessageQueueManager(void)
{
	//--------------------------------------
	// Allow access to one task at a time
	//--------------------------------------
	MqBlocker = NewSemaphore(1,SEMAPHORE_MODE_BLOCKING,"MSG_BLOCKER");
    11aa:	4b e8       	ldi	r20, 0x8B	; 139
    11ac:	51 e0       	ldi	r21, 0x01	; 1
    11ae:	60 e0       	ldi	r22, 0x00	; 0
    11b0:	70 e0       	ldi	r23, 0x00	; 0
    11b2:	81 e0       	ldi	r24, 0x01	; 1
    11b4:	90 e0       	ldi	r25, 0x00	; 0
    11b6:	0e 94 af 00 	call	0x15e	; 0x15e <NewSemaphore>
    11ba:	90 93 ab 01 	sts	0x01AB, r25	; 0x8001ab <MqBlocker+0x1>
    11be:	80 93 aa 01 	sts	0x01AA, r24	; 0x8001aa <MqBlocker>
    11c2:	08 95       	ret

000011c4 <newMidiParseDescriptor>:
		PostMessage(pDacTaskMsg,DAC_PITCHBEND,data,0);
	}
}

void ActionController(unsigned char chan,unsigned char Num,unsigned char val)
{
    11c4:	8c e0       	ldi	r24, 0x0C	; 12
    11c6:	90 e0       	ldi	r25, 0x00	; 0
    11c8:	ab cd       	rjmp	.-1194   	; 0xd20 <malloc>
    11ca:	08 95       	ret

000011cc <InitMidiParseDesc>:
    11cc:	cf 93       	push	r28
    11ce:	df 93       	push	r29
    11d0:	ec 01       	movw	r28, r24
    11d2:	1a 82       	std	Y+2, r1	; 0x02
    11d4:	19 82       	std	Y+1, r1	; 0x01
    11d6:	1d 82       	std	Y+5, r1	; 0x05
    11d8:	1f 82       	std	Y+7, r1	; 0x07
    11da:	1e 82       	std	Y+6, r1	; 0x06
    11dc:	80 e8       	ldi	r24, 0x80	; 128
    11de:	90 e0       	ldi	r25, 0x00	; 0
    11e0:	9f dd       	rcall	.-1218   	; 0xd20 <malloc>
    11e2:	99 87       	std	Y+9, r25	; 0x09
    11e4:	88 87       	std	Y+8, r24	; 0x08
    11e6:	18 82       	st	Y, r1
    11e8:	1b 82       	std	Y+3, r1	; 0x03
    11ea:	1c 82       	std	Y+4, r1	; 0x04
    11ec:	df 91       	pop	r29
    11ee:	cf 91       	pop	r28
    11f0:	08 95       	ret

000011f2 <ActionSysExData>:
    11f2:	fc 01       	movw	r30, r24
    11f4:	80 85       	ldd	r24, Z+8	; 0x08
    11f6:	91 85       	ldd	r25, Z+9	; 0x09
    11f8:	26 81       	ldd	r18, Z+6	; 0x06
    11fa:	37 81       	ldd	r19, Z+7	; 0x07
    11fc:	a9 01       	movw	r20, r18
    11fe:	4f 5f       	subi	r20, 0xFF	; 255
    1200:	5f 4f       	sbci	r21, 0xFF	; 255
    1202:	57 83       	std	Z+7, r21	; 0x07
    1204:	46 83       	std	Z+6, r20	; 0x06
    1206:	fc 01       	movw	r30, r24
    1208:	e2 0f       	add	r30, r18
    120a:	f3 1f       	adc	r31, r19
    120c:	60 83       	st	Z, r22
    120e:	08 95       	ret

00001210 <ActionSysRTStart>:
    1210:	87 e0       	ldi	r24, 0x07	; 7
    1212:	90 e0       	ldi	r25, 0x00	; 0
    1214:	0b c3       	rjmp	.+1558   	; 0x182c <SetPortC>
    1216:	08 95       	ret

00001218 <ActionSysRTContinue>:
    1218:	87 e0       	ldi	r24, 0x07	; 7
    121a:	90 e0       	ldi	r25, 0x00	; 0
    121c:	07 c3       	rjmp	.+1550   	; 0x182c <SetPortC>
    121e:	08 95       	ret

00001220 <ActionSysRTStop>:
    1220:	87 e0       	ldi	r24, 0x07	; 7
    1222:	90 e0       	ldi	r25, 0x00	; 0
    1224:	1a c3       	rjmp	.+1588   	; 0x185a <ClearPortC>
    1226:	08 95       	ret

00001228 <ActionSysRTReset>:
    1228:	82 e0       	ldi	r24, 0x02	; 2
    122a:	90 e0       	ldi	r25, 0x00	; 0
    122c:	84 d2       	rcall	.+1288   	; 0x1736 <SetPortA>
    122e:	60 e0       	ldi	r22, 0x00	; 0
    1230:	70 e0       	ldi	r23, 0x00	; 0
    1232:	80 91 71 02 	lds	r24, 0x0271	; 0x800271 <pSemReset>
    1236:	90 91 72 02 	lds	r25, 0x0272	; 0x800272 <pSemReset+0x1>
    123a:	56 c3       	rjmp	.+1708   	; 0x18e8 <PostSemaphore>
    123c:	08 95       	ret

0000123e <ActionSysRTClock>:
    123e:	86 e0       	ldi	r24, 0x06	; 6
    1240:	90 e0       	ldi	r25, 0x00	; 0
    1242:	f4 d2       	rcall	.+1512   	; 0x182c <SetPortC>
    1244:	60 e0       	ldi	r22, 0x00	; 0
    1246:	70 e0       	ldi	r23, 0x00	; 0
    1248:	80 91 57 02 	lds	r24, 0x0257	; 0x800257 <pSemClock>
    124c:	90 91 58 02 	lds	r25, 0x0258	; 0x800258 <pSemClock+0x1>
    1250:	4b c3       	rjmp	.+1686   	; 0x18e8 <PostSemaphore>
    1252:	08 95       	ret

00001254 <ActionNoteOff>:
    1254:	90 91 f8 01 	lds	r25, 0x01F8	; 0x8001f8 <Settings>
    1258:	98 13       	cpse	r25, r24
    125a:	24 c0       	rjmp	.+72     	; 0x12a4 <ActionNoteOff+0x50>
    125c:	80 e2       	ldi	r24, 0x20	; 32
    125e:	68 9f       	mul	r22, r24
    1260:	90 01       	movw	r18, r0
    1262:	11 24       	eor	r1, r1
    1264:	40 e0       	ldi	r20, 0x00	; 0
    1266:	50 e0       	ldi	r21, 0x00	; 0
    1268:	62 e0       	ldi	r22, 0x02	; 2
    126a:	70 e0       	ldi	r23, 0x00	; 0
    126c:	80 91 8b 02 	lds	r24, 0x028B	; 0x80028b <pDacTaskMsg>
    1270:	90 91 8c 02 	lds	r25, 0x028C	; 0x80028c <pDacTaskMsg+0x1>
    1274:	20 df       	rcall	.-448    	; 0x10b6 <PostMessage>
    1276:	20 e0       	ldi	r18, 0x00	; 0
    1278:	30 e0       	ldi	r19, 0x00	; 0
    127a:	40 e0       	ldi	r20, 0x00	; 0
    127c:	50 e0       	ldi	r21, 0x00	; 0
    127e:	63 e0       	ldi	r22, 0x03	; 3
    1280:	70 e0       	ldi	r23, 0x00	; 0
    1282:	80 91 55 02 	lds	r24, 0x0255	; 0x800255 <pADSR1Msg>
    1286:	90 91 56 02 	lds	r25, 0x0256	; 0x800256 <pADSR1Msg+0x1>
    128a:	15 df       	rcall	.-470    	; 0x10b6 <PostMessage>
    128c:	20 e0       	ldi	r18, 0x00	; 0
    128e:	30 e0       	ldi	r19, 0x00	; 0
    1290:	40 e0       	ldi	r20, 0x00	; 0
    1292:	50 e0       	ldi	r21, 0x00	; 0
    1294:	63 e0       	ldi	r22, 0x03	; 3
    1296:	70 e0       	ldi	r23, 0x00	; 0
    1298:	80 91 de 01 	lds	r24, 0x01DE	; 0x8001de <pADSR2Msg>
    129c:	90 91 df 01 	lds	r25, 0x01DF	; 0x8001df <pADSR2Msg+0x1>
    12a0:	0a cf       	rjmp	.-492    	; 0x10b6 <PostMessage>
    12a2:	08 95       	ret
    12a4:	90 91 f9 01 	lds	r25, 0x01F9	; 0x8001f9 <Settings+0x1>
    12a8:	89 17       	cp	r24, r25
    12aa:	49 f0       	breq	.+18     	; 0x12be <ActionNoteOff+0x6a>
    12ac:	90 91 fa 01 	lds	r25, 0x01FA	; 0x8001fa <Settings+0x2>
    12b0:	89 17       	cp	r24, r25
    12b2:	29 f0       	breq	.+10     	; 0x12be <ActionNoteOff+0x6a>
    12b4:	90 91 fb 01 	lds	r25, 0x01FB	; 0x8001fb <Settings+0x3>
    12b8:	89 13       	cpse	r24, r25
    12ba:	80 91 fc 01 	lds	r24, 0x01FC	; 0x8001fc <Settings+0x4>
    12be:	08 95       	ret

000012c0 <ActionNoteOn>:
    12c0:	cf 93       	push	r28
    12c2:	df 93       	push	r29
    12c4:	c4 2f       	mov	r28, r20
    12c6:	90 91 f8 01 	lds	r25, 0x01F8	; 0x8001f8 <Settings>
    12ca:	98 13       	cpse	r25, r24
    12cc:	29 c0       	rjmp	.+82     	; 0x1320 <ActionNoteOn+0x60>
    12ce:	80 e2       	ldi	r24, 0x20	; 32
    12d0:	68 9f       	mul	r22, r24
    12d2:	90 01       	movw	r18, r0
    12d4:	11 24       	eor	r1, r1
    12d6:	40 e0       	ldi	r20, 0x00	; 0
    12d8:	50 e0       	ldi	r21, 0x00	; 0
    12da:	62 e0       	ldi	r22, 0x02	; 2
    12dc:	70 e0       	ldi	r23, 0x00	; 0
    12de:	80 91 8b 02 	lds	r24, 0x028B	; 0x80028b <pDacTaskMsg>
    12e2:	90 91 8c 02 	lds	r25, 0x028C	; 0x80028c <pDacTaskMsg+0x1>
    12e6:	e7 de       	rcall	.-562    	; 0x10b6 <PostMessage>
    12e8:	c1 11       	cpse	r28, r1
    12ea:	03 c0       	rjmp	.+6      	; 0x12f2 <ActionNoteOn+0x32>
    12ec:	c3 e0       	ldi	r28, 0x03	; 3
    12ee:	d0 e0       	ldi	r29, 0x00	; 0
    12f0:	02 c0       	rjmp	.+4      	; 0x12f6 <ActionNoteOn+0x36>
    12f2:	c2 e0       	ldi	r28, 0x02	; 2
    12f4:	d0 e0       	ldi	r29, 0x00	; 0
    12f6:	20 e0       	ldi	r18, 0x00	; 0
    12f8:	30 e0       	ldi	r19, 0x00	; 0
    12fa:	40 e0       	ldi	r20, 0x00	; 0
    12fc:	50 e0       	ldi	r21, 0x00	; 0
    12fe:	be 01       	movw	r22, r28
    1300:	80 91 55 02 	lds	r24, 0x0255	; 0x800255 <pADSR1Msg>
    1304:	90 91 56 02 	lds	r25, 0x0256	; 0x800256 <pADSR1Msg+0x1>
    1308:	d6 de       	rcall	.-596    	; 0x10b6 <PostMessage>
    130a:	20 e0       	ldi	r18, 0x00	; 0
    130c:	30 e0       	ldi	r19, 0x00	; 0
    130e:	40 e0       	ldi	r20, 0x00	; 0
    1310:	50 e0       	ldi	r21, 0x00	; 0
    1312:	be 01       	movw	r22, r28
    1314:	80 91 de 01 	lds	r24, 0x01DE	; 0x8001de <pADSR2Msg>
    1318:	90 91 df 01 	lds	r25, 0x01DF	; 0x8001df <pADSR2Msg+0x1>
    131c:	cc de       	rcall	.-616    	; 0x10b6 <PostMessage>
    131e:	47 c0       	rjmp	.+142    	; 0x13ae <ActionNoteOn+0xee>
    1320:	90 91 f9 01 	lds	r25, 0x01F9	; 0x8001f9 <Settings+0x1>
    1324:	89 13       	cpse	r24, r25
    1326:	0e c0       	rjmp	.+28     	; 0x1344 <ActionNoteOn+0x84>
    1328:	80 e2       	ldi	r24, 0x20	; 32
    132a:	68 9f       	mul	r22, r24
    132c:	90 01       	movw	r18, r0
    132e:	11 24       	eor	r1, r1
    1330:	44 e0       	ldi	r20, 0x04	; 4
    1332:	50 e0       	ldi	r21, 0x00	; 0
    1334:	62 e0       	ldi	r22, 0x02	; 2
    1336:	70 e0       	ldi	r23, 0x00	; 0
    1338:	80 91 8b 02 	lds	r24, 0x028B	; 0x80028b <pDacTaskMsg>
    133c:	90 91 8c 02 	lds	r25, 0x028C	; 0x80028c <pDacTaskMsg+0x1>
    1340:	ba de       	rcall	.-652    	; 0x10b6 <PostMessage>
    1342:	35 c0       	rjmp	.+106    	; 0x13ae <ActionNoteOn+0xee>
    1344:	90 91 fa 01 	lds	r25, 0x01FA	; 0x8001fa <Settings+0x2>
    1348:	89 13       	cpse	r24, r25
    134a:	0e c0       	rjmp	.+28     	; 0x1368 <ActionNoteOn+0xa8>
    134c:	80 e2       	ldi	r24, 0x20	; 32
    134e:	68 9f       	mul	r22, r24
    1350:	90 01       	movw	r18, r0
    1352:	11 24       	eor	r1, r1
    1354:	45 e0       	ldi	r20, 0x05	; 5
    1356:	50 e0       	ldi	r21, 0x00	; 0
    1358:	62 e0       	ldi	r22, 0x02	; 2
    135a:	70 e0       	ldi	r23, 0x00	; 0
    135c:	80 91 8b 02 	lds	r24, 0x028B	; 0x80028b <pDacTaskMsg>
    1360:	90 91 8c 02 	lds	r25, 0x028C	; 0x80028c <pDacTaskMsg+0x1>
    1364:	a8 de       	rcall	.-688    	; 0x10b6 <PostMessage>
    1366:	23 c0       	rjmp	.+70     	; 0x13ae <ActionNoteOn+0xee>
    1368:	90 91 fb 01 	lds	r25, 0x01FB	; 0x8001fb <Settings+0x3>
    136c:	89 13       	cpse	r24, r25
    136e:	0e c0       	rjmp	.+28     	; 0x138c <ActionNoteOn+0xcc>
    1370:	80 e2       	ldi	r24, 0x20	; 32
    1372:	68 9f       	mul	r22, r24
    1374:	90 01       	movw	r18, r0
    1376:	11 24       	eor	r1, r1
    1378:	46 e0       	ldi	r20, 0x06	; 6
    137a:	50 e0       	ldi	r21, 0x00	; 0
    137c:	62 e0       	ldi	r22, 0x02	; 2
    137e:	70 e0       	ldi	r23, 0x00	; 0
    1380:	80 91 8b 02 	lds	r24, 0x028B	; 0x80028b <pDacTaskMsg>
    1384:	90 91 8c 02 	lds	r25, 0x028C	; 0x80028c <pDacTaskMsg+0x1>
    1388:	96 de       	rcall	.-724    	; 0x10b6 <PostMessage>
    138a:	11 c0       	rjmp	.+34     	; 0x13ae <ActionNoteOn+0xee>
    138c:	90 91 fc 01 	lds	r25, 0x01FC	; 0x8001fc <Settings+0x4>
    1390:	89 13       	cpse	r24, r25
    1392:	0d c0       	rjmp	.+26     	; 0x13ae <ActionNoteOn+0xee>
    1394:	80 e2       	ldi	r24, 0x20	; 32
    1396:	68 9f       	mul	r22, r24
    1398:	90 01       	movw	r18, r0
    139a:	11 24       	eor	r1, r1
    139c:	47 e0       	ldi	r20, 0x07	; 7
    139e:	50 e0       	ldi	r21, 0x00	; 0
    13a0:	62 e0       	ldi	r22, 0x02	; 2
    13a2:	70 e0       	ldi	r23, 0x00	; 0
    13a4:	80 91 8b 02 	lds	r24, 0x028B	; 0x80028b <pDacTaskMsg>
    13a8:	90 91 8c 02 	lds	r25, 0x028C	; 0x80028c <pDacTaskMsg+0x1>
    13ac:	84 de       	rcall	.-760    	; 0x10b6 <PostMessage>
    13ae:	df 91       	pop	r29
    13b0:	cf 91       	pop	r28
    13b2:	08 95       	ret

000013b4 <ActionPitchWheel>:
    13b4:	90 91 f8 01 	lds	r25, 0x01F8	; 0x8001f8 <Settings>
    13b8:	98 13       	cpse	r25, r24
    13ba:	0a c0       	rjmp	.+20     	; 0x13d0 <ActionPitchWheel+0x1c>
    13bc:	ab 01       	movw	r20, r22
    13be:	20 e0       	ldi	r18, 0x00	; 0
    13c0:	30 e0       	ldi	r19, 0x00	; 0
    13c2:	63 e0       	ldi	r22, 0x03	; 3
    13c4:	70 e0       	ldi	r23, 0x00	; 0
    13c6:	80 91 8b 02 	lds	r24, 0x028B	; 0x80028b <pDacTaskMsg>
    13ca:	90 91 8c 02 	lds	r25, 0x028C	; 0x80028c <pDacTaskMsg+0x1>
    13ce:	73 ce       	rjmp	.-794    	; 0x10b6 <PostMessage>
    13d0:	08 95       	ret

000013d2 <ParseMidi>:

}

int ParseMidi(MIDIPARSE_D *pMp, unsigned char c)
{
    13d2:	cf 93       	push	r28
    13d4:	df 93       	push	r29
    13d6:	ec 01       	movw	r28, r24
	//	c.......a byte of midi data
	//
	// returns:
	//	0
	//-----------------------------------------
	if(c & (unsigned char)0x80)	//is it a command?
    13d8:	66 23       	and	r22, r22
    13da:	0c f0       	brlt	.+2      	; 0x13de <ParseMidi+0xc>
    13dc:	3b c0       	rjmp	.+118    	; 0x1454 <ParseMidi+0x82>
	{
		if(c < (unsigned char)0xf0)
    13de:	60 3f       	cpi	r22, 0xF0	; 240
    13e0:	48 f4       	brcc	.+18     	; 0x13f4 <ParseMidi+0x22>
		{
			//process this stuff, dispose of everything else
			//Command portion of data
			pMp->cmd = (unsigned char)(c & (unsigned char)0xf0);
    13e2:	86 2f       	mov	r24, r22
    13e4:	80 7f       	andi	r24, 0xF0	; 240
    13e6:	89 83       	std	Y+1, r24	; 0x01
			// channel portion of data
			pMp->chan = (unsigned char)(c & 0x0f);
    13e8:	e6 2f       	mov	r30, r22
    13ea:	ef 70       	andi	r30, 0x0F	; 15
    13ec:	ea 83       	std	Y+2, r30	; 0x02
			//set state to receive first data byte
			pMp->state = NOTE0;
    13ee:	81 e0       	ldi	r24, 0x01	; 1
    13f0:	8d 83       	std	Y+5, r24	; 0x05
    13f2:	05 c1       	rjmp	.+522    	; 0x15fe <ParseMidi+0x22c>
		}
		else	//process system commands
		{
			switch(c)
    13f4:	46 2f       	mov	r20, r22
    13f6:	50 e0       	ldi	r21, 0x00	; 0
    13f8:	fa 01       	movw	r30, r20
    13fa:	e0 5f       	subi	r30, 0xF0	; 240
    13fc:	f1 09       	sbc	r31, r1
    13fe:	e0 31       	cpi	r30, 0x10	; 16
    1400:	f1 05       	cpc	r31, r1
    1402:	08 f0       	brcs	.+2      	; 0x1406 <ParseMidi+0x34>
    1404:	fc c0       	rjmp	.+504    	; 0x15fe <ParseMidi+0x22c>
    1406:	ea 5b       	subi	r30, 0xBA	; 186
    1408:	ff 4f       	sbci	r31, 0xFF	; 255
    140a:	f6 c6       	rjmp	.+3564   	; 0x21f8 <__tablejump2__>
			{
				case SYSEX:	//n bytes defined by command
                   	pMp->state = SYSEX_ID;
    140c:	85 e0       	ldi	r24, 0x05	; 5
    140e:	8d 83       	std	Y+5, r24	; 0x05
                    pMp->cmd = SYSEX;
    1410:	80 ef       	ldi	r24, 0xF0	; 240
    1412:	89 83       	std	Y+1, r24	; 0x01
// Action Functions for Midi Parser
//---------------------------------

void ActionSysEx(MIDIPARSE_D *pMD)
{
	pMD->SysexCount = 0;
    1414:	1f 82       	std	Y+7, r1	; 0x07
    1416:	1e 82       	std	Y+6, r1	; 0x06
    1418:	f2 c0       	rjmp	.+484    	; 0x15fe <ParseMidi+0x22c>
                   	pMp->state = SYSEX_ID;
                    pMp->cmd = SYSEX;
					ActionSysEx(pMp);
					break;
				case SYSCOM_MTCQUARTERFRAME:		//2 bytes
					pMp->cmd = SYSCOM_MTCQUARTERFRAME;
    141a:	81 ef       	ldi	r24, 0xF1	; 241
    141c:	89 83       	std	Y+1, r24	; 0x01
					pMp->state = SYSCOM_STATE;
    141e:	84 e0       	ldi	r24, 0x04	; 4
    1420:	8d 83       	std	Y+5, r24	; 0x05
					break;
    1422:	ed c0       	rjmp	.+474    	; 0x15fe <ParseMidi+0x22c>
				case SYSCOMSONGPOS:		//3 bytes
					pMp->cmd = SYSCOMSONGPOS;
    1424:	82 ef       	ldi	r24, 0xF2	; 242
    1426:	89 83       	std	Y+1, r24	; 0x01
					pMp->state = NOTE0;
    1428:	81 e0       	ldi	r24, 0x01	; 1
    142a:	8d 83       	std	Y+5, r24	; 0x05
					break;
    142c:	e8 c0       	rjmp	.+464    	; 0x15fe <ParseMidi+0x22c>
				case SYSCOMSONGSEL:		//2 bytes
					pMp->cmd = SYSCOMSONGSEL;
    142e:	83 ef       	ldi	r24, 0xF3	; 243
    1430:	89 83       	std	Y+1, r24	; 0x01
					pMp->state = SYSCOM_STATE;
    1432:	84 e0       	ldi	r24, 0x04	; 4
    1434:	8d 83       	std	Y+5, r24	; 0x05
					break;
    1436:	e3 c0       	rjmp	.+454    	; 0x15fe <ParseMidi+0x22c>
					break;
				case SYSCOMTUNEREQ:		//1 byte
					ActionSysComTuneReq();
					break;
				case SYSEXEND:			//1 byte
                   	pMp->state = IDLE;
    1438:	1d 82       	std	Y+5, r1	; 0x05
                    pMp->cmd = SYSEXEND;
    143a:	87 ef       	ldi	r24, 0xF7	; 247
    143c:	89 83       	std	Y+1, r24	; 0x01
					ActionSysExEnd(pMp);
					break;
				case SYSRTCLOCK:		//1 byte
					ActionSysRTClock();
    143e:	df c0       	rjmp	.+446    	; 0x15fe <ParseMidi+0x22c>
					break;
    1440:	fe de       	rcall	.-516    	; 0x123e <ActionSysRTClock>
				case SYSRTUNDEF:
					ActionSysRTUndef();
					break;
				case SYSRTSTART:		//1 byte
					ActionSysRTStart();
    1442:	dd c0       	rjmp	.+442    	; 0x15fe <ParseMidi+0x22c>
					break;
				case SYSRTCONTINUE:		//1 byte
					ActionSysRTContinue();
    1444:	e5 de       	rcall	.-566    	; 0x1210 <ActionSysRTStart>
					break;
    1446:	db c0       	rjmp	.+438    	; 0x15fe <ParseMidi+0x22c>
				case SYSRTSTOP:			//1 byte
					ActionSysRTStop();
    1448:	e7 de       	rcall	.-562    	; 0x1218 <ActionSysRTContinue>
    144a:	d9 c0       	rjmp	.+434    	; 0x15fe <ParseMidi+0x22c>
					break;
    144c:	e9 de       	rcall	.-558    	; 0x1220 <ActionSysRTStop>
					break;
				case SYSRTACTIVESEN:	//1 byte
					ActionSysRTActiveSense();
					break;
				case SYSRTRESET:		//1 byte
					ActionSysRTReset();
    144e:	d7 c0       	rjmp	.+430    	; 0x15fe <ParseMidi+0x22c>
    1450:	eb de       	rcall	.-554    	; 0x1228 <ActionSysRTReset>
					break;
    1452:	d5 c0       	rjmp	.+426    	; 0x15fe <ParseMidi+0x22c>
	else	// 	then it must be data
	{
		/*	we must handle the case of running status...so we need to keep track of
		**  which data byte we are on
		*/
		switch(pMp->cmd)	//what was the last command?
    1454:	89 81       	ldd	r24, Y+1	; 0x01
    1456:	80 3d       	cpi	r24, 0xD0	; 208
    1458:	09 f4       	brne	.+2      	; 0x145c <ParseMidi+0x8a>
    145a:	64 c0       	rjmp	.+200    	; 0x1524 <ParseMidi+0x152>
    145c:	80 f4       	brcc	.+32     	; 0x147e <ParseMidi+0xac>
    145e:	80 3a       	cpi	r24, 0xA0	; 160
    1460:	09 f4       	brne	.+2      	; 0x1464 <ParseMidi+0x92>
    1462:	4c c0       	rjmp	.+152    	; 0x14fc <ParseMidi+0x12a>
    1464:	28 f4       	brcc	.+10     	; 0x1470 <ParseMidi+0x9e>
    1466:	80 38       	cpi	r24, 0x80	; 128
    1468:	e1 f0       	breq	.+56     	; 0x14a2 <ParseMidi+0xd0>
    146a:	80 39       	cpi	r24, 0x90	; 144
    146c:	69 f1       	breq	.+90     	; 0x14c8 <ParseMidi+0xf6>
    146e:	c7 c0       	rjmp	.+398    	; 0x15fe <ParseMidi+0x22c>
    1470:	80 3b       	cpi	r24, 0xB0	; 176
    1472:	09 f4       	brne	.+2      	; 0x1476 <ParseMidi+0xa4>
    1474:	54 c0       	rjmp	.+168    	; 0x151e <ParseMidi+0x14c>
    1476:	80 3c       	cpi	r24, 0xC0	; 192
    1478:	09 f4       	brne	.+2      	; 0x147c <ParseMidi+0xaa>
    147a:	84 c0       	rjmp	.+264    	; 0x1584 <ParseMidi+0x1b2>
    147c:	c0 c0       	rjmp	.+384    	; 0x15fe <ParseMidi+0x22c>
    147e:	81 3f       	cpi	r24, 0xF1	; 241
    1480:	09 f4       	brne	.+2      	; 0x1484 <ParseMidi+0xb2>
    1482:	9d c0       	rjmp	.+314    	; 0x15be <ParseMidi+0x1ec>
    1484:	38 f4       	brcc	.+14     	; 0x1494 <ParseMidi+0xc2>
    1486:	80 3e       	cpi	r24, 0xE0	; 224
    1488:	09 f4       	brne	.+2      	; 0x148c <ParseMidi+0xba>
    148a:	5b c0       	rjmp	.+182    	; 0x1542 <ParseMidi+0x170>
    148c:	80 3f       	cpi	r24, 0xF0	; 240
    148e:	09 f4       	brne	.+2      	; 0x1492 <ParseMidi+0xc0>
    1490:	7c c0       	rjmp	.+248    	; 0x158a <ParseMidi+0x1b8>
    1492:	b5 c0       	rjmp	.+362    	; 0x15fe <ParseMidi+0x22c>
    1494:	82 3f       	cpi	r24, 0xF2	; 242
    1496:	09 f4       	brne	.+2      	; 0x149a <ParseMidi+0xc8>
    1498:	94 c0       	rjmp	.+296    	; 0x15c2 <ParseMidi+0x1f0>
    149a:	83 3f       	cpi	r24, 0xF3	; 243
    149c:	09 f4       	brne	.+2      	; 0x14a0 <ParseMidi+0xce>
    149e:	ae c0       	rjmp	.+348    	; 0x15fc <ParseMidi+0x22a>
    14a0:	ae c0       	rjmp	.+348    	; 0x15fe <ParseMidi+0x22c>
		{
			case NOTEOFF:	//last command was note off 3 bytes
				switch(pMp->state)
    14a2:	8d 81       	ldd	r24, Y+5	; 0x05
    14a4:	81 30       	cpi	r24, 0x01	; 1
    14a6:	19 f0       	breq	.+6      	; 0x14ae <ParseMidi+0xdc>
    14a8:	82 30       	cpi	r24, 0x02	; 2
    14aa:	29 f0       	breq	.+10     	; 0x14b6 <ParseMidi+0xe4>
    14ac:	a8 c0       	rjmp	.+336    	; 0x15fe <ParseMidi+0x22c>
				{
					case NOTE0:
						pMp->nextnote = c;
    14ae:	6b 83       	std	Y+3, r22	; 0x03
						pMp->state = NOTE1;
    14b0:	82 e0       	ldi	r24, 0x02	; 2
    14b2:	8d 83       	std	Y+5, r24	; 0x05
						break;
					case NOTE1:
						pMp->currentnote = pMp->nextnote;
    14b4:	a4 c0       	rjmp	.+328    	; 0x15fe <ParseMidi+0x22c>
    14b6:	8b 81       	ldd	r24, Y+3	; 0x03
						ActionNoteOff(pMp->chan,pMp->nextnote,c);
    14b8:	8c 83       	std	Y+4, r24	; 0x04
    14ba:	46 2f       	mov	r20, r22
    14bc:	68 2f       	mov	r22, r24
    14be:	8a 81       	ldd	r24, Y+2	; 0x02
    14c0:	c9 de       	rcall	.-622    	; 0x1254 <ActionNoteOff>
						pMp->state = NOTE0;
    14c2:	81 e0       	ldi	r24, 0x01	; 1
    14c4:	8d 83       	std	Y+5, r24	; 0x05
						break;
    14c6:	9b c0       	rjmp	.+310    	; 0x15fe <ParseMidi+0x22c>
				} //end of switch(pMp->state)
				break;
			case NOTEON:	// last command was note on 3 bytes
				switch(pMp->state)
    14c8:	8d 81       	ldd	r24, Y+5	; 0x05
    14ca:	81 30       	cpi	r24, 0x01	; 1
    14cc:	19 f0       	breq	.+6      	; 0x14d4 <ParseMidi+0x102>
    14ce:	82 30       	cpi	r24, 0x02	; 2
    14d0:	29 f0       	breq	.+10     	; 0x14dc <ParseMidi+0x10a>
    14d2:	95 c0       	rjmp	.+298    	; 0x15fe <ParseMidi+0x22c>
				{
					case NOTE0:
						pMp->nextnote = c;
    14d4:	6b 83       	std	Y+3, r22	; 0x03
						pMp->state = NOTE1;
    14d6:	82 e0       	ldi	r24, 0x02	; 2
    14d8:	8d 83       	std	Y+5, r24	; 0x05
						break;
    14da:	91 c0       	rjmp	.+290    	; 0x15fe <ParseMidi+0x22c>
					case NOTE1:
						pMp->currentnote = pMp->nextnote;
    14dc:	8b 81       	ldd	r24, Y+3	; 0x03
						if(c > 0)
    14de:	8c 83       	std	Y+4, r24	; 0x04
    14e0:	66 23       	and	r22, r22
							ActionNoteOn(pMp->chan,pMp->currentnote,c);
    14e2:	29 f0       	breq	.+10     	; 0x14ee <ParseMidi+0x11c>
    14e4:	46 2f       	mov	r20, r22
    14e6:	68 2f       	mov	r22, r24
    14e8:	8a 81       	ldd	r24, Y+2	; 0x02
    14ea:	ea de       	rcall	.-556    	; 0x12c0 <ActionNoteOn>
						else
							ActionNoteOff(pMp->chan,pMp->nextnote,c);
    14ec:	04 c0       	rjmp	.+8      	; 0x14f6 <ParseMidi+0x124>
    14ee:	40 e0       	ldi	r20, 0x00	; 0
    14f0:	68 2f       	mov	r22, r24
    14f2:	8a 81       	ldd	r24, Y+2	; 0x02
    14f4:	af de       	rcall	.-674    	; 0x1254 <ActionNoteOff>
						pMp->state = NOTE0;
    14f6:	81 e0       	ldi	r24, 0x01	; 1
    14f8:	8d 83       	std	Y+5, r24	; 0x05
						break;
    14fa:	81 c0       	rjmp	.+258    	; 0x15fe <ParseMidi+0x22c>
					default:
						break;
				} //end of switch(pMp->state)
				break;
			case NOTEPRES:	// last command was note pressure  3 bytes
				switch(pMp->state)
    14fc:	8d 81       	ldd	r24, Y+5	; 0x05
    14fe:	81 30       	cpi	r24, 0x01	; 1
    1500:	19 f0       	breq	.+6      	; 0x1508 <ParseMidi+0x136>
    1502:	82 30       	cpi	r24, 0x02	; 2
    1504:	29 f0       	breq	.+10     	; 0x1510 <ParseMidi+0x13e>
    1506:	7b c0       	rjmp	.+246    	; 0x15fe <ParseMidi+0x22c>
				{
					case NOTE0:
						pMp->nextnote = c;
    1508:	6b 83       	std	Y+3, r22	; 0x03
						pMp->state = NOTE1;
    150a:	82 e0       	ldi	r24, 0x02	; 2
    150c:	8d 83       	std	Y+5, r24	; 0x05
						break;
    150e:	77 c0       	rjmp	.+238    	; 0x15fe <ParseMidi+0x22c>
					case NOTE1:
						pMp->state = NOTE0;
    1510:	81 e0       	ldi	r24, 0x01	; 1
    1512:	8d 83       	std	Y+5, r24	; 0x05
						pMp->currentnote = pMp->nextnote;
    1514:	8b 81       	ldd	r24, Y+3	; 0x03
    1516:	8c 83       	std	Y+4, r24	; 0x04
	}
}

void ActionAfterTouch(unsigned char chan,unsigned char Note, unsigned char Pressure)
{
	if(chan == Settings.m_CH1_MidiChannel)
    1518:	80 91 f8 01 	lds	r24, 0x01F8	; 0x8001f8 <Settings>
    151c:	70 c0       	rjmp	.+224    	; 0x15fe <ParseMidi+0x22c>
	}
}

void ActionChanPressure(unsigned char chan, unsigned char Pressure)
{
	if(chan == Settings.m_CH1_MidiChannel)
    151e:	80 91 f8 01 	lds	r24, 0x01F8	; 0x8001f8 <Settings>
    1522:	6d c0       	rjmp	.+218    	; 0x15fe <ParseMidi+0x22c>
				break;
			case CHANPRES:		//last command was channel pressuren 2 bytes
				ActionChanPressure(pMp->chan,c);
				break;
			case CONTROL:			//control change 3 bytes
				switch(pMp->state)
    1524:	8d 81       	ldd	r24, Y+5	; 0x05
    1526:	81 30       	cpi	r24, 0x01	; 1
    1528:	19 f0       	breq	.+6      	; 0x1530 <ParseMidi+0x15e>
    152a:	82 30       	cpi	r24, 0x02	; 2
    152c:	29 f0       	breq	.+10     	; 0x1538 <ParseMidi+0x166>
    152e:	67 c0       	rjmp	.+206    	; 0x15fe <ParseMidi+0x22c>
				{
					case NOTE0:
						pMp->state = NOTE1;
    1530:	82 e0       	ldi	r24, 0x02	; 2
    1532:	8d 83       	std	Y+5, r24	; 0x05
						pMp->nextnote = c;
    1534:	6b 83       	std	Y+3, r22	; 0x03
						break;
    1536:	63 c0       	rjmp	.+198    	; 0x15fe <ParseMidi+0x22c>
					case NOTE1:
						pMp->state = NOTE0;
    1538:	81 e0       	ldi	r24, 0x01	; 1
    153a:	8d 83       	std	Y+5, r24	; 0x05
						pMp->currentnote = pMp->nextnote;
    153c:	8b 81       	ldd	r24, Y+3	; 0x03
    153e:	8c 83       	std	Y+4, r24	; 0x04
						ActionController(pMp->chan,pMp->currentnote,c);
						break;
    1540:	5e c0       	rjmp	.+188    	; 0x15fe <ParseMidi+0x22c>
				} //end of switch(pMp->state)
				break;
			case WHEEL:			//last command was pitch wheel change 3 bytes
				switch(pMp->state)
    1542:	8d 81       	ldd	r24, Y+5	; 0x05
    1544:	81 30       	cpi	r24, 0x01	; 1
    1546:	19 f0       	breq	.+6      	; 0x154e <ParseMidi+0x17c>
    1548:	82 30       	cpi	r24, 0x02	; 2
    154a:	41 f0       	breq	.+16     	; 0x155c <ParseMidi+0x18a>
    154c:	58 c0       	rjmp	.+176    	; 0x15fe <ParseMidi+0x22c>
				{
					case NOTE0:
						pMp->v = ((int)c);
    154e:	e6 2f       	mov	r30, r22
    1550:	f0 e0       	ldi	r31, 0x00	; 0
    1552:	fb 87       	std	Y+11, r31	; 0x0b
    1554:	ea 87       	std	Y+10, r30	; 0x0a
						pMp->state = NOTE1;
    1556:	82 e0       	ldi	r24, 0x02	; 2
    1558:	8d 83       	std	Y+5, r24	; 0x05
						break;
    155a:	51 c0       	rjmp	.+162    	; 0x15fe <ParseMidi+0x22c>
					case NOTE1:
						pMp->v |= ((int)c)<<7;
						pMp->v <<= 2;	//12 bits;
    155c:	80 e8       	ldi	r24, 0x80	; 128
    155e:	68 9f       	mul	r22, r24
    1560:	f0 01       	movw	r30, r0
    1562:	11 24       	eor	r1, r1
    1564:	6a 85       	ldd	r22, Y+10	; 0x0a
    1566:	7b 85       	ldd	r23, Y+11	; 0x0b
    1568:	e6 2b       	or	r30, r22
    156a:	f7 2b       	or	r31, r23
    156c:	bf 01       	movw	r22, r30
    156e:	66 0f       	add	r22, r22
    1570:	77 1f       	adc	r23, r23
    1572:	66 0f       	add	r22, r22
    1574:	77 1f       	adc	r23, r23
    1576:	7b 87       	std	Y+11, r23	; 0x0b
						pMp->state = NOTE0;
    1578:	6a 87       	std	Y+10, r22	; 0x0a
    157a:	81 e0       	ldi	r24, 0x01	; 1
						ActionPitchWheel(pMp->chan,pMp->v);
    157c:	8d 83       	std	Y+5, r24	; 0x05
    157e:	8a 81       	ldd	r24, Y+2	; 0x02
    1580:	19 df       	rcall	.-462    	; 0x13b4 <ActionPitchWheel>
						break;
    1582:	3d c0       	rjmp	.+122    	; 0x15fe <ParseMidi+0x22c>
				}	// end of switch(pMp->state)
				break;
			case PATCH:			//last command was patch change 2 bytes
				pMp->state = NOTE0;
    1584:	81 e0       	ldi	r24, 0x01	; 1
    1586:	8d 83       	std	Y+5, r24	; 0x05
				ActionProgramChange(pMp->chan,c);
				break;
    1588:	3a c0       	rjmp	.+116    	; 0x15fe <ParseMidi+0x22c>
			case SYSEX:		//1 byte...This is where we pass of sysex data
				switch(pMp->state)
    158a:	8d 81       	ldd	r24, Y+5	; 0x05
    158c:	86 30       	cpi	r24, 0x06	; 6
    158e:	61 f0       	breq	.+24     	; 0x15a8 <ParseMidi+0x1d6>
    1590:	87 30       	cpi	r24, 0x07	; 7
    1592:	91 f0       	breq	.+36     	; 0x15b8 <ParseMidi+0x1e6>
    1594:	85 30       	cpi	r24, 0x05	; 5
    1596:	99 f5       	brne	.+102    	; 0x15fe <ParseMidi+0x22c>
				{
					case SYSEX_ID:
						if(c == 0x7D)	//manufacturers ID
    1598:	6d 37       	cpi	r22, 0x7D	; 125
    159a:	19 f4       	brne	.+6      	; 0x15a2 <ParseMidi+0x1d0>
							pMp->state = SYSEX_MODEL;
    159c:	86 e0       	ldi	r24, 0x06	; 6
    159e:	8d 83       	std	Y+5, r24	; 0x05
    15a0:	2e c0       	rjmp	.+92     	; 0x15fe <ParseMidi+0x22c>
						else
							pMp->state = SYSEX_IGNORE;
    15a2:	88 e0       	ldi	r24, 0x08	; 8
    15a4:	8d 83       	std	Y+5, r24	; 0x05
						break;
					case SYSEX_MODEL:
						if(c == 0x10)	//model number
    15a6:	2b c0       	rjmp	.+86     	; 0x15fe <ParseMidi+0x22c>
    15a8:	60 31       	cpi	r22, 0x10	; 16
							pMp->state = SYSEX_DATA;
    15aa:	19 f4       	brne	.+6      	; 0x15b2 <ParseMidi+0x1e0>
    15ac:	87 e0       	ldi	r24, 0x07	; 7
    15ae:	8d 83       	std	Y+5, r24	; 0x05
						else
							pMp->state = SYSEX_IGNORE;
    15b0:	26 c0       	rjmp	.+76     	; 0x15fe <ParseMidi+0x22c>
    15b2:	88 e0       	ldi	r24, 0x08	; 8
    15b4:	8d 83       	std	Y+5, r24	; 0x05
						break;
					case SYSEX_DATA:
						ActionSysExData(pMp,c);
    15b6:	23 c0       	rjmp	.+70     	; 0x15fe <ParseMidi+0x22c>
    15b8:	ce 01       	movw	r24, r28
    15ba:	1b de       	rcall	.-970    	; 0x11f2 <ActionSysExData>
						break;
    15bc:	20 c0       	rjmp	.+64     	; 0x15fe <ParseMidi+0x22c>
					case SYSEX_IGNORE:
						break;
				} //end of switch(pMp->state)
               	break;
			case SYSCOM_MTCQUARTERFRAME:
				pMp->state = IDLE;
    15be:	1d 82       	std	Y+5, r1	; 0x05
				ActionMTCQuarterFrameMessage(c);
				break;
    15c0:	1e c0       	rjmp	.+60     	; 0x15fe <ParseMidi+0x22c>
			case SYSCOMSONGPOS:
				switch(pMp->state)
    15c2:	8d 81       	ldd	r24, Y+5	; 0x05
    15c4:	81 30       	cpi	r24, 0x01	; 1
    15c6:	19 f0       	breq	.+6      	; 0x15ce <ParseMidi+0x1fc>
    15c8:	82 30       	cpi	r24, 0x02	; 2
    15ca:	41 f0       	breq	.+16     	; 0x15dc <ParseMidi+0x20a>
    15cc:	18 c0       	rjmp	.+48     	; 0x15fe <ParseMidi+0x22c>
				{
					case NOTE0:
						pMp->v = ((int)c);
    15ce:	e6 2f       	mov	r30, r22
    15d0:	f0 e0       	ldi	r31, 0x00	; 0
    15d2:	fb 87       	std	Y+11, r31	; 0x0b
    15d4:	ea 87       	std	Y+10, r30	; 0x0a
						pMp->state = NOTE1;
    15d6:	82 e0       	ldi	r24, 0x02	; 2
    15d8:	8d 83       	std	Y+5, r24	; 0x05
						break;
    15da:	11 c0       	rjmp	.+34     	; 0x15fe <ParseMidi+0x22c>
					case NOTE1:
						pMp->v |= ((int)c)<<7;
						pMp->v <<= 2;	//12 bits;
    15dc:	80 e8       	ldi	r24, 0x80	; 128
    15de:	68 9f       	mul	r22, r24
    15e0:	f0 01       	movw	r30, r0
    15e2:	11 24       	eor	r1, r1
    15e4:	4a 85       	ldd	r20, Y+10	; 0x0a
    15e6:	5b 85       	ldd	r21, Y+11	; 0x0b
    15e8:	e4 2b       	or	r30, r20
    15ea:	f5 2b       	or	r31, r21
    15ec:	ee 0f       	add	r30, r30
    15ee:	ff 1f       	adc	r31, r31
    15f0:	ee 0f       	add	r30, r30
    15f2:	ff 1f       	adc	r31, r31
    15f4:	fb 87       	std	Y+11, r31	; 0x0b
    15f6:	ea 87       	std	Y+10, r30	; 0x0a
						pMp->state = IDLE;
    15f8:	1d 82       	std	Y+5, r1	; 0x05
						ActionSysComSongPos(pMp->v);
						break;
    15fa:	01 c0       	rjmp	.+2      	; 0x15fe <ParseMidi+0x22c>
				} //end of switch(pMp->state)
				break;
			case SYSCOMSONGSEL:
				pMp->state = IDLE;
    15fc:	1d 82       	std	Y+5, r1	; 0x05
				ActionSysComSongSel(c);
				break;
		}	//end of switch(cmd)
	}	//end of if(c & 0x080)
	return 0;
}
    15fe:	80 e0       	ldi	r24, 0x00	; 0
    1600:	90 e0       	ldi	r25, 0x00	; 0
    1602:	df 91       	pop	r29
    1604:	cf 91       	pop	r28
    1606:	08 95       	ret

00001608 <PriorityCompare>:
//		positive....priority of s1 > s2
//		negative....priority of s1 < s2
//----------------------------------------------------------------------
//
static int PriorityCompare(void **s1, void **s2)
{
    1608:	cf 93       	push	r28
    160a:	df 93       	push	r29
	int r;

	//check priority levels
	if( (r = ((TCB *)*s1)->priority - ((TCB *)*s2)->priority) != 0)
    160c:	dc 01       	movw	r26, r24
    160e:	ed 91       	ld	r30, X+
    1610:	fc 91       	ld	r31, X
    1612:	eb 01       	movw	r28, r22
    1614:	a8 81       	ld	r26, Y
    1616:	b9 81       	ldd	r27, Y+1	; 0x01
    1618:	86 81       	ldd	r24, Z+6	; 0x06
    161a:	97 81       	ldd	r25, Z+7	; 0x07
    161c:	16 96       	adiw	r26, 0x06	; 6
    161e:	2d 91       	ld	r18, X+
    1620:	3c 91       	ld	r19, X
    1622:	17 97       	sbiw	r26, 0x07	; 7
    1624:	82 1b       	sub	r24, r18
    1626:	93 0b       	sbc	r25, r19
    1628:	41 f4       	brne	.+16     	; 0x163a <PriorityCompare+0x32>
		return r;
	//if priority levels are the same, then check time stamps
	return (int)(((TCB *)*s2)->TimeStamp - ((TCB *)*s1)->TimeStamp);
    162a:	1c 96       	adiw	r26, 0x0c	; 12
    162c:	8d 91       	ld	r24, X+
    162e:	9c 91       	ld	r25, X
    1630:	1d 97       	sbiw	r26, 0x0d	; 13
    1632:	24 85       	ldd	r18, Z+12	; 0x0c
    1634:	35 85       	ldd	r19, Z+13	; 0x0d
    1636:	82 1b       	sub	r24, r18
    1638:	93 0b       	sbc	r25, r19
}
    163a:	df 91       	pop	r29
    163c:	cf 91       	pop	r28
    163e:	08 95       	ret

00001640 <OSInit>:
//	parameters:
//		none
//---------------------------------------------------------------------------
void OSInit(void)
{
	CreatePriorityQueue(&ActiveTasks,32,PriorityCompare);
    1640:	44 e0       	ldi	r20, 0x04	; 4
    1642:	5b e0       	ldi	r21, 0x0B	; 11
    1644:	60 e2       	ldi	r22, 0x20	; 32
    1646:	70 e0       	ldi	r23, 0x00	; 0
    1648:	8c ec       	ldi	r24, 0xCC	; 204
    164a:	91 e0       	ldi	r25, 0x01	; 1
    164c:	27 c2       	rjmp	.+1102   	; 0x1a9c <CreatePriorityQueue>
    164e:	08 95       	ret

00001650 <PendSemaphore>:
**	Inidicates status of operation.  0 or positive is normal,
**		negative is error
**************************************************************************/

int PendSemaphore(SEMAPHORE *e, int Timeout)	//wait for semaphore availiable
{
    1650:	ef 92       	push	r14
    1652:	ff 92       	push	r15
    1654:	1f 93       	push	r17
    1656:	cf 93       	push	r28
    1658:	df 93       	push	r29
    165a:	ec 01       	movw	r28, r24
    165c:	7b 01       	movw	r14, r22
	char sr;
	int retval;
	sr = Disable();
    165e:	0e 94 75 00 	call	0xea	; 0xea <Disable>
    1662:	18 2f       	mov	r17, r24
	if(e->EventCount > 0)	/*	is resource availiable?	*/
    1664:	8a 85       	ldd	r24, Y+10	; 0x0a
    1666:	9b 85       	ldd	r25, Y+11	; 0x0b
    1668:	18 16       	cp	r1, r24
    166a:	19 06       	cpc	r1, r25
    166c:	4c f4       	brge	.+18     	; 0x1680 <PendSemaphore+0x30>
	{
		/*	yes	*/
		--e->EventCount;
    166e:	01 97       	sbiw	r24, 0x01	; 1
    1670:	9b 87       	std	Y+11, r25	; 0x0b
    1672:	8a 87       	std	Y+10, r24	; 0x0a
		Enable(sr);
    1674:	81 2f       	mov	r24, r17
    1676:	0e 94 79 00 	call	0xf2	; 0xf2 <Enable>
		retval = EVENT_NOERROR;	//everything is peachy
    167a:	80 e0       	ldi	r24, 0x00	; 0
    167c:	90 e0       	ldi	r25, 0x00	; 0
    167e:	4e c0       	rjmp	.+156    	; 0x171c <PendSemaphore+0xcc>
	}
	else
	{
		/*	no	*/
		--e->EventCount;
    1680:	01 97       	sbiw	r24, 0x01	; 1
    1682:	9b 87       	std	Y+11, r25	; 0x0b
    1684:	8a 87       	std	Y+10, r24	; 0x0a
		if(!e->task_head)		//make linked list of waiting tasks
    1686:	88 81       	ld	r24, Y
    1688:	99 81       	ldd	r25, Y+1	; 0x01
    168a:	89 2b       	or	r24, r25
    168c:	39 f4       	brne	.+14     	; 0x169c <PendSemaphore+0x4c>
			e->task_head = pCurrentTask;
    168e:	80 91 d6 01 	lds	r24, 0x01D6	; 0x8001d6 <pCurrentTask>
    1692:	90 91 d7 01 	lds	r25, 0x01D7	; 0x8001d7 <pCurrentTask+0x1>
    1696:	99 83       	std	Y+1, r25	; 0x01
    1698:	88 83       	st	Y, r24
    169a:	08 c0       	rjmp	.+16     	; 0x16ac <PendSemaphore+0x5c>
		else
			e->task_tail->next = pCurrentTask;
    169c:	ea 81       	ldd	r30, Y+2	; 0x02
    169e:	fb 81       	ldd	r31, Y+3	; 0x03
    16a0:	80 91 d6 01 	lds	r24, 0x01D6	; 0x8001d6 <pCurrentTask>
    16a4:	90 91 d7 01 	lds	r25, 0x01D7	; 0x8001d7 <pCurrentTask+0x1>
    16a8:	95 8b       	std	Z+21, r25	; 0x15
    16aa:	84 8b       	std	Z+20, r24	; 0x14
		e->task_tail = pCurrentTask;
    16ac:	e0 91 d6 01 	lds	r30, 0x01D6	; 0x8001d6 <pCurrentTask>
    16b0:	f0 91 d7 01 	lds	r31, 0x01D7	; 0x8001d7 <pCurrentTask+0x1>
    16b4:	fb 83       	std	Y+3, r31	; 0x03
    16b6:	ea 83       	std	Y+2, r30	; 0x02
		pCurrentTask->status = EVENT_NOERROR;
    16b8:	11 86       	std	Z+9, r1	; 0x09
    16ba:	10 86       	std	Z+8, r1	; 0x08
		if(e->SemaphoreMode)
    16bc:	88 85       	ldd	r24, Y+8	; 0x08
    16be:	99 85       	ldd	r25, Y+9	; 0x09
    16c0:	89 2b       	or	r24, r25
    16c2:	11 f0       	breq	.+4      	; 0x16c8 <PendSemaphore+0x78>
			pCurrentTask->timeout = Timeout;
    16c4:	f1 8a       	std	Z+17, r15	; 0x11
    16c6:	e0 8a       	std	Z+16, r14	; 0x10

		//swap out current task
		//Update the time stamp on current task
		pCurrentTask->TimeStamp = TStamp;
    16c8:	80 91 fb 02 	lds	r24, 0x02FB	; 0x8002fb <TStamp>
    16cc:	90 91 fc 02 	lds	r25, 0x02FC	; 0x8002fc <TStamp+0x1>
    16d0:	95 87       	std	Z+13, r25	; 0x0d
    16d2:	84 87       	std	Z+12, r24	; 0x0c
		//get highest priority task from queue
		if(Delete(&ActiveTasks,(void **)&pNextTask))	
    16d4:	6a ed       	ldi	r22, 0xDA	; 218
    16d6:	71 e0       	ldi	r23, 0x01	; 1
    16d8:	8c ec       	ldi	r24, 0xCC	; 204
    16da:	91 e0       	ldi	r25, 0x01	; 1
    16dc:	5f d2       	rcall	.+1214   	; 0x1b9c <Delete>
    16de:	89 2b       	or	r24, r25
    16e0:	61 f0       	breq	.+24     	; 0x16fa <PendSemaphore+0xaa>
		{
			//increment swaps on new task
			pNextTask->TcbSwaps++;
    16e2:	e0 91 da 01 	lds	r30, 0x01DA	; 0x8001da <pNextTask>
    16e6:	f0 91 db 01 	lds	r31, 0x01DB	; 0x8001db <pNextTask+0x1>
    16ea:	86 85       	ldd	r24, Z+14	; 0x0e
    16ec:	97 85       	ldd	r25, Z+15	; 0x0f
    16ee:	01 96       	adiw	r24, 0x01	; 1
    16f0:	97 87       	std	Z+15, r25	; 0x0f
    16f2:	86 87       	std	Z+14, r24	; 0x0e
			DoSwap();		//do context swap
    16f4:	0e 94 f6 01 	call	0x3ec	; 0x3ec <DoSwap>
    16f8:	08 c0       	rjmp	.+16     	; 0x170a <PendSemaphore+0xba>
		}
		else
		{
			//there were no tasks in the queue
			//set status to error and return
			pCurrentTask->status = EVENT_NOTASKS;
    16fa:	e0 91 d6 01 	lds	r30, 0x01D6	; 0x8001d6 <pCurrentTask>
    16fe:	f0 91 d7 01 	lds	r31, 0x01D7	; 0x8001d7 <pCurrentTask+0x1>
    1702:	8f ef       	ldi	r24, 0xFF	; 255
    1704:	9f ef       	ldi	r25, 0xFF	; 255
    1706:	91 87       	std	Z+9, r25	; 0x09
    1708:	80 87       	std	Z+8, r24	; 0x08
		}
		//-----------------------
		// Pend is over, check status
		//-----------------------

		Enable(sr);
    170a:	81 2f       	mov	r24, r17
    170c:	0e 94 79 00 	call	0xf2	; 0xf2 <Enable>
		retval = pCurrentTask->status;	//return this value
    1710:	e0 91 d6 01 	lds	r30, 0x01D6	; 0x8001d6 <pCurrentTask>
    1714:	f0 91 d7 01 	lds	r31, 0x01D7	; 0x8001d7 <pCurrentTask+0x1>
    1718:	80 85       	ldd	r24, Z+8	; 0x08
    171a:	91 85       	ldd	r25, Z+9	; 0x09
	}
	return retval;
}
    171c:	df 91       	pop	r29
    171e:	cf 91       	pop	r28
    1720:	1f 91       	pop	r17
    1722:	ff 90       	pop	r15
    1724:	ef 90       	pop	r14
    1726:	08 95       	ret

00001728 <InitPorts>:
 static volatile char PortCShad;
 static volatile char PortDShad;

 void InitPorts(void)
 {
	PORTA = 0x00;
    1728:	12 b8       	out	0x02, r1	; 2
	PORTB = 0x41;
    172a:	81 e4       	ldi	r24, 0x41	; 65
    172c:	85 b9       	out	0x05, r24	; 5
	PORTC = 0x00;
    172e:	18 b8       	out	0x08, r1	; 8
	PORTD = 0x10;
    1730:	80 e1       	ldi	r24, 0x10	; 16
    1732:	8b b9       	out	0x0b, r24	; 11
    1734:	08 95       	ret

00001736 <SetPortA>:
 }
 
 void SetPortA(int bit)
 {
    1736:	cf 93       	push	r28
    1738:	c8 2f       	mov	r28, r24
	char sr = Disable();
    173a:	0e 94 75 00 	call	0xea	; 0xea <Disable>
	PortAShad |= BIT(bit);
    173e:	90 91 af 01 	lds	r25, 0x01AF	; 0x8001af <PortAShad>
    1742:	21 e0       	ldi	r18, 0x01	; 1
    1744:	30 e0       	ldi	r19, 0x00	; 0
    1746:	02 c0       	rjmp	.+4      	; 0x174c <SetPortA+0x16>
    1748:	22 0f       	add	r18, r18
    174a:	33 1f       	adc	r19, r19
    174c:	ca 95       	dec	r28
    174e:	e2 f7       	brpl	.-8      	; 0x1748 <SetPortA+0x12>
    1750:	29 2b       	or	r18, r25
    1752:	20 93 af 01 	sts	0x01AF, r18	; 0x8001af <PortAShad>
	PORTA = PortAShad;
    1756:	90 91 af 01 	lds	r25, 0x01AF	; 0x8001af <PortAShad>
    175a:	92 b9       	out	0x02, r25	; 2
	Enable(sr);
    175c:	0e 94 79 00 	call	0xf2	; 0xf2 <Enable>
 }
    1760:	cf 91       	pop	r28
    1762:	08 95       	ret

00001764 <ClearPortA>:

 void ClearPortA(int bit)
 {
    1764:	cf 93       	push	r28
    1766:	c8 2f       	mov	r28, r24
	char sr = Disable();
    1768:	0e 94 75 00 	call	0xea	; 0xea <Disable>
 	PortAShad &= ~BIT(bit);
    176c:	90 91 af 01 	lds	r25, 0x01AF	; 0x8001af <PortAShad>
    1770:	21 e0       	ldi	r18, 0x01	; 1
    1772:	30 e0       	ldi	r19, 0x00	; 0
    1774:	02 c0       	rjmp	.+4      	; 0x177a <ClearPortA+0x16>
    1776:	22 0f       	add	r18, r18
    1778:	33 1f       	adc	r19, r19
    177a:	ca 95       	dec	r28
    177c:	e2 f7       	brpl	.-8      	; 0x1776 <ClearPortA+0x12>
    177e:	20 95       	com	r18
    1780:	29 23       	and	r18, r25
    1782:	20 93 af 01 	sts	0x01AF, r18	; 0x8001af <PortAShad>
 	PORTA = PortAShad;
    1786:	90 91 af 01 	lds	r25, 0x01AF	; 0x8001af <PortAShad>
    178a:	92 b9       	out	0x02, r25	; 2
	Enable(sr);
    178c:	0e 94 79 00 	call	0xf2	; 0xf2 <Enable>
}
    1790:	cf 91       	pop	r28
    1792:	08 95       	ret

00001794 <SetDacSel>:

 void SetDacSel(int sel)
 {
    1794:	cf 93       	push	r28
    1796:	df 93       	push	r29
    1798:	ec 01       	movw	r28, r24
	char sr = Disable();
    179a:	0e 94 75 00 	call	0xea	; 0xea <Disable>
	sel <<= PORTA_DACSEL0;
  	PortAShad &= ~(BIT(PORTA_DACSEL3) | BIT(PORTA_DACSEL2)| BIT(PORTA_DACSEL1) | BIT(PORTA_DACSEL0));
    179e:	90 91 af 01 	lds	r25, 0x01AF	; 0x8001af <PortAShad>
    17a2:	9f 70       	andi	r25, 0x0F	; 15
    17a4:	90 93 af 01 	sts	0x01AF, r25	; 0x8001af <PortAShad>
	PortAShad |= sel;
    17a8:	90 91 af 01 	lds	r25, 0x01AF	; 0x8001af <PortAShad>
    17ac:	c2 95       	swap	r28
    17ae:	d2 95       	swap	r29
    17b0:	d0 7f       	andi	r29, 0xF0	; 240
    17b2:	dc 27       	eor	r29, r28
    17b4:	c0 7f       	andi	r28, 0xF0	; 240
    17b6:	dc 27       	eor	r29, r28
    17b8:	c9 2b       	or	r28, r25
    17ba:	c0 93 af 01 	sts	0x01AF, r28	; 0x8001af <PortAShad>
  	PORTA = PortAShad;
    17be:	90 91 af 01 	lds	r25, 0x01AF	; 0x8001af <PortAShad>
    17c2:	92 b9       	out	0x02, r25	; 2
	Enable(sr);
    17c4:	0e 94 79 00 	call	0xf2	; 0xf2 <Enable>
 }
    17c8:	df 91       	pop	r29
    17ca:	cf 91       	pop	r28
    17cc:	08 95       	ret

000017ce <SetPortB>:

 void SetPortB(int bit)
 {
    17ce:	cf 93       	push	r28
    17d0:	c8 2f       	mov	r28, r24
	char sr = Disable();
    17d2:	0e 94 75 00 	call	0xea	; 0xea <Disable>
	PortBShad |= BIT(bit);
    17d6:	90 91 ae 01 	lds	r25, 0x01AE	; 0x8001ae <PortBShad>
    17da:	21 e0       	ldi	r18, 0x01	; 1
    17dc:	30 e0       	ldi	r19, 0x00	; 0
    17de:	02 c0       	rjmp	.+4      	; 0x17e4 <SetPortB+0x16>
    17e0:	22 0f       	add	r18, r18
    17e2:	33 1f       	adc	r19, r19
    17e4:	ca 95       	dec	r28
    17e6:	e2 f7       	brpl	.-8      	; 0x17e0 <SetPortB+0x12>
    17e8:	29 2b       	or	r18, r25
    17ea:	20 93 ae 01 	sts	0x01AE, r18	; 0x8001ae <PortBShad>
	PORTB = PortBShad;
    17ee:	90 91 ae 01 	lds	r25, 0x01AE	; 0x8001ae <PortBShad>
    17f2:	95 b9       	out	0x05, r25	; 5
	Enable(sr);
    17f4:	0e 94 79 00 	call	0xf2	; 0xf2 <Enable>
 }
    17f8:	cf 91       	pop	r28
    17fa:	08 95       	ret

000017fc <ClearPortB>:

 void ClearPortB(int bit)
 {
    17fc:	cf 93       	push	r28
    17fe:	c8 2f       	mov	r28, r24
	char sr = Disable();
    1800:	0e 94 75 00 	call	0xea	; 0xea <Disable>
	PortBShad &=~BIT(bit);
    1804:	90 91 ae 01 	lds	r25, 0x01AE	; 0x8001ae <PortBShad>
    1808:	21 e0       	ldi	r18, 0x01	; 1
    180a:	30 e0       	ldi	r19, 0x00	; 0
    180c:	02 c0       	rjmp	.+4      	; 0x1812 <ClearPortB+0x16>
    180e:	22 0f       	add	r18, r18
    1810:	33 1f       	adc	r19, r19
    1812:	ca 95       	dec	r28
    1814:	e2 f7       	brpl	.-8      	; 0x180e <ClearPortB+0x12>
    1816:	20 95       	com	r18
    1818:	29 23       	and	r18, r25
    181a:	20 93 ae 01 	sts	0x01AE, r18	; 0x8001ae <PortBShad>
	PORTB = PortBShad;
    181e:	90 91 ae 01 	lds	r25, 0x01AE	; 0x8001ae <PortBShad>
    1822:	95 b9       	out	0x05, r25	; 5
 	Enable(sr);
    1824:	0e 94 79 00 	call	0xf2	; 0xf2 <Enable>
}
    1828:	cf 91       	pop	r28
    182a:	08 95       	ret

0000182c <SetPortC>:

 void SetPortC(int bit)
 {
    182c:	cf 93       	push	r28
    182e:	c8 2f       	mov	r28, r24
	char sr = Disable();
    1830:	0e 94 75 00 	call	0xea	; 0xea <Disable>
	PortCShad |= BIT(bit);
    1834:	90 91 ad 01 	lds	r25, 0x01AD	; 0x8001ad <PortCShad>
    1838:	21 e0       	ldi	r18, 0x01	; 1
    183a:	30 e0       	ldi	r19, 0x00	; 0
    183c:	02 c0       	rjmp	.+4      	; 0x1842 <SetPortC+0x16>
    183e:	22 0f       	add	r18, r18
    1840:	33 1f       	adc	r19, r19
    1842:	ca 95       	dec	r28
    1844:	e2 f7       	brpl	.-8      	; 0x183e <SetPortC+0x12>
    1846:	29 2b       	or	r18, r25
    1848:	20 93 ad 01 	sts	0x01AD, r18	; 0x8001ad <PortCShad>
	PORTC = PortCShad;
    184c:	90 91 ad 01 	lds	r25, 0x01AD	; 0x8001ad <PortCShad>
    1850:	98 b9       	out	0x08, r25	; 8
	Enable(sr);
    1852:	0e 94 79 00 	call	0xf2	; 0xf2 <Enable>
 }
    1856:	cf 91       	pop	r28
    1858:	08 95       	ret

0000185a <ClearPortC>:

 void ClearPortC(int bit)
 {
    185a:	cf 93       	push	r28
    185c:	c8 2f       	mov	r28, r24
	char sr = Disable();
    185e:	0e 94 75 00 	call	0xea	; 0xea <Disable>
	PortCShad &= ~BIT(bit);
    1862:	90 91 ad 01 	lds	r25, 0x01AD	; 0x8001ad <PortCShad>
    1866:	21 e0       	ldi	r18, 0x01	; 1
    1868:	30 e0       	ldi	r19, 0x00	; 0
    186a:	02 c0       	rjmp	.+4      	; 0x1870 <ClearPortC+0x16>
    186c:	22 0f       	add	r18, r18
    186e:	33 1f       	adc	r19, r19
    1870:	ca 95       	dec	r28
    1872:	e2 f7       	brpl	.-8      	; 0x186c <ClearPortC+0x12>
    1874:	20 95       	com	r18
    1876:	29 23       	and	r18, r25
    1878:	20 93 ad 01 	sts	0x01AD, r18	; 0x8001ad <PortCShad>
	PORTC = PortCShad;
    187c:	90 91 ad 01 	lds	r25, 0x01AD	; 0x8001ad <PortCShad>
    1880:	98 b9       	out	0x08, r25	; 8
	Enable(sr);
    1882:	0e 94 79 00 	call	0xf2	; 0xf2 <Enable>
}
    1886:	cf 91       	pop	r28
    1888:	08 95       	ret

0000188a <SetPortD>:

 void SetPortD(int bit)
 {
    188a:	cf 93       	push	r28
    188c:	c8 2f       	mov	r28, r24
	char sr = Disable();
    188e:	0e 94 75 00 	call	0xea	; 0xea <Disable>
	PortDShad |= BIT(bit);
    1892:	90 91 ac 01 	lds	r25, 0x01AC	; 0x8001ac <PortDShad>
    1896:	21 e0       	ldi	r18, 0x01	; 1
    1898:	30 e0       	ldi	r19, 0x00	; 0
    189a:	02 c0       	rjmp	.+4      	; 0x18a0 <SetPortD+0x16>
    189c:	22 0f       	add	r18, r18
    189e:	33 1f       	adc	r19, r19
    18a0:	ca 95       	dec	r28
    18a2:	e2 f7       	brpl	.-8      	; 0x189c <SetPortD+0x12>
    18a4:	29 2b       	or	r18, r25
    18a6:	20 93 ac 01 	sts	0x01AC, r18	; 0x8001ac <PortDShad>
	PORTD = PortDShad;
    18aa:	90 91 ac 01 	lds	r25, 0x01AC	; 0x8001ac <PortDShad>
    18ae:	9b b9       	out	0x0b, r25	; 11
 	Enable(sr);
    18b0:	0e 94 79 00 	call	0xf2	; 0xf2 <Enable>
}
    18b4:	cf 91       	pop	r28
    18b6:	08 95       	ret

000018b8 <ClearPortD>:

 void ClearPortD(int bit)
 {
    18b8:	cf 93       	push	r28
    18ba:	c8 2f       	mov	r28, r24
	char sr = Disable();
    18bc:	0e 94 75 00 	call	0xea	; 0xea <Disable>
	PortDShad &= ~BIT(bit);
    18c0:	90 91 ac 01 	lds	r25, 0x01AC	; 0x8001ac <PortDShad>
    18c4:	21 e0       	ldi	r18, 0x01	; 1
    18c6:	30 e0       	ldi	r19, 0x00	; 0
    18c8:	02 c0       	rjmp	.+4      	; 0x18ce <ClearPortD+0x16>
    18ca:	22 0f       	add	r18, r18
    18cc:	33 1f       	adc	r19, r19
    18ce:	ca 95       	dec	r28
    18d0:	e2 f7       	brpl	.-8      	; 0x18ca <ClearPortD+0x12>
    18d2:	20 95       	com	r18
    18d4:	29 23       	and	r18, r25
    18d6:	20 93 ac 01 	sts	0x01AC, r18	; 0x8001ac <PortDShad>
	PORTD = PortDShad;
    18da:	90 91 ac 01 	lds	r25, 0x01AC	; 0x8001ac <PortDShad>
    18de:	9b b9       	out	0x0b, r25	; 11
 	Enable(sr);
    18e0:	0e 94 79 00 	call	0xf2	; 0xf2 <Enable>
    18e4:	cf 91       	pop	r28
    18e6:	08 95       	ret

000018e8 <PostSemaphore>:
**
** return value: 0 = No Error, negative indicates error
***************************************************************************/

int PostSemaphore(SEMAPHORE *e, int Value)	//signal semaphore availiable
{
    18e8:	ef 92       	push	r14
    18ea:	ff 92       	push	r15
    18ec:	1f 93       	push	r17
    18ee:	cf 93       	push	r28
    18f0:	df 93       	push	r29
    18f2:	ec 01       	movw	r28, r24
    18f4:	7b 01       	movw	r14, r22
	char sr=0;
	//------------------------------
	// do not disable IRQ if inside
	// of an interrupt routine
	//------------------------------
	if(!InterruptCount)sr = Disable();
    18f6:	80 91 dc 01 	lds	r24, 0x01DC	; 0x8001dc <InterruptCount>
    18fa:	90 91 dd 01 	lds	r25, 0x01DD	; 0x8001dd <InterruptCount+0x1>
    18fe:	89 2b       	or	r24, r25
    1900:	21 f4       	brne	.+8      	; 0x190a <PostSemaphore+0x22>
    1902:	0e 94 75 00 	call	0xea	; 0xea <Disable>
    1906:	18 2f       	mov	r17, r24
    1908:	01 c0       	rjmp	.+2      	; 0x190c <PostSemaphore+0x24>
***************************************************************************/

int PostSemaphore(SEMAPHORE *e, int Value)	//signal semaphore availiable
{
	TCB *t;
	char sr=0;
    190a:	10 e0       	ldi	r17, 0x00	; 0
	//------------------------------
	// do not disable IRQ if inside
	// of an interrupt routine
	//------------------------------
	if(!InterruptCount)sr = Disable();
	if(e->EventCount < 32766)	//is it going to overflow??
    190c:	8a 85       	ldd	r24, Y+10	; 0x0a
    190e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1910:	8e 3f       	cpi	r24, 0xFE	; 254
    1912:	2f e7       	ldi	r18, 0x7F	; 127
    1914:	92 07       	cpc	r25, r18
    1916:	cc f5       	brge	.+114    	; 0x198a <PostSemaphore+0xa2>
	{
		if(e->EventCount >= 0)	//increment semaphore
    1918:	99 23       	and	r25, r25
    191a:	6c f0       	brlt	.+26     	; 0x1936 <PostSemaphore+0x4e>
		{
			++e->EventCount;
    191c:	01 96       	adiw	r24, 0x01	; 1
    191e:	9b 87       	std	Y+11, r25	; 0x0b
    1920:	8a 87       	std	Y+10, r24	; 0x0a
			if(!InterruptCount)Enable(sr);
    1922:	c0 91 dc 01 	lds	r28, 0x01DC	; 0x8001dc <InterruptCount>
    1926:	d0 91 dd 01 	lds	r29, 0x01DD	; 0x8001dd <InterruptCount+0x1>
    192a:	20 97       	sbiw	r28, 0x00	; 0
    192c:	d1 f5       	brne	.+116    	; 0x19a2 <PostSemaphore+0xba>
    192e:	81 2f       	mov	r24, r17
    1930:	0e 94 79 00 	call	0xf2	; 0xf2 <Enable>
    1934:	3e c0       	rjmp	.+124    	; 0x19b2 <PostSemaphore+0xca>
		}
		else
		{
			++e->EventCount;
    1936:	01 96       	adiw	r24, 0x01	; 1
    1938:	9b 87       	std	Y+11, r25	; 0x0b
    193a:	8a 87       	std	Y+10, r24	; 0x0a
			if(e->task_head)				//is there really a task waiting?
    193c:	e8 81       	ld	r30, Y
    193e:	f9 81       	ldd	r31, Y+1	; 0x01
    1940:	30 97       	sbiw	r30, 0x00	; 0
    1942:	c9 f0       	breq	.+50     	; 0x1976 <PostSemaphore+0x8e>
			{
				t = e->task_head;		//get first task in
				e->task_head = t->next;       //remove from list
    1944:	84 89       	ldd	r24, Z+20	; 0x14
    1946:	95 89       	ldd	r25, Z+21	; 0x15
    1948:	99 83       	std	Y+1, r25	; 0x01
    194a:	88 83       	st	Y, r24
				t->next = (TCB *)0;
    194c:	15 8a       	std	Z+21, r1	; 0x15
    194e:	14 8a       	std	Z+20, r1	; 0x14
				t->status = Value;			//return this value
    1950:	f1 86       	std	Z+9, r15	; 0x09
    1952:	e0 86       	std	Z+8, r14	; 0x08
				Insert(&ActiveTasks,t);	//put task back onto active list
    1954:	bf 01       	movw	r22, r30
    1956:	8c ec       	ldi	r24, 0xCC	; 204
    1958:	91 e0       	ldi	r25, 0x01	; 1
    195a:	b5 d0       	rcall	.+362    	; 0x1ac6 <Insert>
				if(!InterruptCount)Enable(sr);
    195c:	80 91 dc 01 	lds	r24, 0x01DC	; 0x8001dc <InterruptCount>
    1960:	90 91 dd 01 	lds	r25, 0x01DD	; 0x8001dd <InterruptCount+0x1>
    1964:	89 2b       	or	r24, r25
    1966:	19 f4       	brne	.+6      	; 0x196e <PostSemaphore+0x86>
    1968:	81 2f       	mov	r24, r17
    196a:	0e 94 79 00 	call	0xf2	; 0xf2 <Enable>
				Yield();
    196e:	1a d4       	rcall	.+2100   	; 0x21a4 <Yield>
			else
			{
				if(!InterruptCount)Enable(sr);
			}
		}
		return EVENT_NOERROR;
    1970:	c0 e0       	ldi	r28, 0x00	; 0
    1972:	d0 e0       	ldi	r29, 0x00	; 0
    1974:	1e c0       	rjmp	.+60     	; 0x19b2 <PostSemaphore+0xca>
				if(!InterruptCount)Enable(sr);
				Yield();
			}
			else
			{
				if(!InterruptCount)Enable(sr);
    1976:	c0 91 dc 01 	lds	r28, 0x01DC	; 0x8001dc <InterruptCount>
    197a:	d0 91 dd 01 	lds	r29, 0x01DD	; 0x8001dd <InterruptCount+0x1>
    197e:	20 97       	sbiw	r28, 0x00	; 0
    1980:	99 f4       	brne	.+38     	; 0x19a8 <PostSemaphore+0xc0>
    1982:	81 2f       	mov	r24, r17
    1984:	0e 94 79 00 	call	0xf2	; 0xf2 <Enable>
    1988:	14 c0       	rjmp	.+40     	; 0x19b2 <PostSemaphore+0xca>
		}
		return EVENT_NOERROR;
	}
	else
	{
		if(!InterruptCount)Enable(sr);
    198a:	80 91 dc 01 	lds	r24, 0x01DC	; 0x8001dc <InterruptCount>
    198e:	90 91 dd 01 	lds	r25, 0x01DD	; 0x8001dd <InterruptCount+0x1>
    1992:	89 2b       	or	r24, r25
    1994:	61 f4       	brne	.+24     	; 0x19ae <PostSemaphore+0xc6>
    1996:	81 2f       	mov	r24, r17
    1998:	0e 94 79 00 	call	0xf2	; 0xf2 <Enable>
		return(EVENT_OVERFLOW);
    199c:	ce ef       	ldi	r28, 0xFE	; 254
    199e:	df ef       	ldi	r29, 0xFF	; 255
    19a0:	08 c0       	rjmp	.+16     	; 0x19b2 <PostSemaphore+0xca>
			else
			{
				if(!InterruptCount)Enable(sr);
			}
		}
		return EVENT_NOERROR;
    19a2:	c0 e0       	ldi	r28, 0x00	; 0
    19a4:	d0 e0       	ldi	r29, 0x00	; 0
    19a6:	05 c0       	rjmp	.+10     	; 0x19b2 <PostSemaphore+0xca>
    19a8:	c0 e0       	ldi	r28, 0x00	; 0
    19aa:	d0 e0       	ldi	r29, 0x00	; 0
    19ac:	02 c0       	rjmp	.+4      	; 0x19b2 <PostSemaphore+0xca>
	}
	else
	{
		if(!InterruptCount)Enable(sr);
		return(EVENT_OVERFLOW);
    19ae:	ce ef       	ldi	r28, 0xFE	; 254
    19b0:	df ef       	ldi	r29, 0xFF	; 255
	}
}
    19b2:	ce 01       	movw	r24, r28
    19b4:	df 91       	pop	r29
    19b6:	cf 91       	pop	r28
    19b8:	1f 91       	pop	r17
    19ba:	ff 90       	pop	r15
    19bc:	ef 90       	pop	r14
    19be:	08 95       	ret

000019c0 <ReheapDown>:
**	parameters:
**		pQ.......pointer to the priority queue
**
***********************************************/
static void ReheapDown(PRIORITYQUEUE* pQ)
{
    19c0:	6f 92       	push	r6
    19c2:	7f 92       	push	r7
    19c4:	8f 92       	push	r8
    19c6:	9f 92       	push	r9
    19c8:	af 92       	push	r10
    19ca:	bf 92       	push	r11
    19cc:	cf 92       	push	r12
    19ce:	df 92       	push	r13
    19d0:	ef 92       	push	r14
    19d2:	ff 92       	push	r15
    19d4:	0f 93       	push	r16
    19d6:	1f 93       	push	r17
    19d8:	cf 93       	push	r28
    19da:	df 93       	push	r29
	void **ppParent;	//pointer to parent
	void **ppChild;   //pointer to child
	void **ppSibling;	//pointer to sibling
	void **ppHeap;	//pointer to m_ppHeap

	ppHeap = pQ->m_ppHeap;
    19dc:	dc 01       	movw	r26, r24
    19de:	18 96       	adiw	r26, 0x08	; 8
    19e0:	ad 90       	ld	r10, X+
    19e2:	bc 90       	ld	r11, X
    19e4:	19 97       	sbiw	r26, 0x09	; 9
	for(parent=0,child=1;child < pQ->m_nItems;)
    19e6:	12 96       	adiw	r26, 0x02	; 2
    19e8:	2d 91       	ld	r18, X+
    19ea:	3c 91       	ld	r19, X
    19ec:	13 97       	sbiw	r26, 0x03	; 3
    19ee:	22 30       	cpi	r18, 0x02	; 2
    19f0:	31 05       	cpc	r19, r1
    19f2:	0c f4       	brge	.+2      	; 0x19f6 <ReheapDown+0x36>
    19f4:	44 c0       	rjmp	.+136    	; 0x1a7e <ReheapDown+0xbe>
    19f6:	6c 01       	movw	r12, r24
    19f8:	ee 24       	eor	r14, r14
    19fa:	e3 94       	inc	r14
    19fc:	f1 2c       	mov	r15, r1
    19fe:	c0 e0       	ldi	r28, 0x00	; 0
    1a00:	d0 e0       	ldi	r29, 0x00	; 0
    1a02:	02 c0       	rjmp	.+4      	; 0x1a08 <ReheapDown+0x48>
		//----------------------------------
		swap(ppParent,ppChild);
		//----------------------------------
		// new parent is the child
		//----------------------------------
		parent = child;
    1a04:	e7 01       	movw	r28, r14
		//----------------------------------
		// calculate new child index
		//----------------------------------
		child = LEFTCHILD(parent);
    1a06:	7c 01       	movw	r14, r24
	for(parent=0,child=1;child < pQ->m_nItems;)
	{
		//----------------------------------
		// get pointer to parent and child nodes
		//----------------------------------
		ppParent = &ppHeap[parent];
    1a08:	cc 0f       	add	r28, r28
    1a0a:	dd 1f       	adc	r29, r29
    1a0c:	ca 0d       	add	r28, r10
    1a0e:	db 1d       	adc	r29, r11
		ppChild = &ppHeap[child];
    1a10:	87 01       	movw	r16, r14
    1a12:	00 0f       	add	r16, r16
    1a14:	11 1f       	adc	r17, r17
    1a16:	0a 0d       	add	r16, r10
    1a18:	1b 1d       	adc	r17, r11
		//-----------------------------------
		// is there a possible sibling to
		// the child node?
		//------------------------------------
		if(child + 1 < pQ->m_nItems)
    1a1a:	37 01       	movw	r6, r14
    1a1c:	bf ef       	ldi	r27, 0xFF	; 255
    1a1e:	6b 1a       	sub	r6, r27
    1a20:	7b 0a       	sbc	r7, r27
    1a22:	62 16       	cp	r6, r18
    1a24:	73 06       	cpc	r7, r19
    1a26:	74 f4       	brge	.+28     	; 0x1a44 <ReheapDown+0x84>
		{
			//---------------------------------
			// get a pointer to the sibling
			//---------------------------------
			ppSibling = ppChild + 1;
    1a28:	48 01       	movw	r8, r16
    1a2a:	e2 e0       	ldi	r30, 0x02	; 2
    1a2c:	8e 0e       	add	r8, r30
    1a2e:	91 1c       	adc	r9, r1
			//---------------------------------
			// is priority of child less than
			// that of the sibling?
			//---------------------------------
			if((*pQ->m_Cmp)(ppChild,ppSibling) < 0)
    1a30:	d6 01       	movw	r26, r12
    1a32:	ed 91       	ld	r30, X+
    1a34:	fc 91       	ld	r31, X
    1a36:	b4 01       	movw	r22, r8
    1a38:	c8 01       	movw	r24, r16
    1a3a:	09 95       	icall
    1a3c:	99 23       	and	r25, r25
    1a3e:	14 f4       	brge	.+4      	; 0x1a44 <ReheapDown+0x84>
			{
				//--------------------------------
				// make the child equal to sibling
				//---------------------------------
				ppChild = ppSibling;
    1a40:	84 01       	movw	r16, r8
				//--------------------------------
				// make child index equal to that
				// of the sibling
				//--------------------------------
				child++;
    1a42:	73 01       	movw	r14, r6
		//-------------------------------------
		// if the priority of the parent is
		// greater than or equal to the child
		// we are done, break out of the loop
		//------------------------------------
		if((*pQ->m_Cmp)(ppParent,ppChild) >= 0)
    1a44:	d6 01       	movw	r26, r12
    1a46:	ed 91       	ld	r30, X+
    1a48:	fc 91       	ld	r31, X
    1a4a:	b8 01       	movw	r22, r16
    1a4c:	ce 01       	movw	r24, r28
    1a4e:	09 95       	icall
    1a50:	99 23       	and	r25, r25
    1a52:	ac f4       	brge	.+42     	; 0x1a7e <ReheapDown+0xbe>

static void swap(void **ppS1,void **ppS2)
{
	void *pTemp;

	pTemp = *ppS1;
    1a54:	88 81       	ld	r24, Y
    1a56:	99 81       	ldd	r25, Y+1	; 0x01
	*ppS1 = *ppS2;
    1a58:	f8 01       	movw	r30, r16
    1a5a:	20 81       	ld	r18, Z
    1a5c:	31 81       	ldd	r19, Z+1	; 0x01
    1a5e:	39 83       	std	Y+1, r19	; 0x01
    1a60:	28 83       	st	Y, r18
	*ppS2 = pTemp;
    1a62:	91 83       	std	Z+1, r25	; 0x01
    1a64:	80 83       	st	Z, r24
		//----------------------------------
		parent = child;
		//----------------------------------
		// calculate new child index
		//----------------------------------
		child = LEFTCHILD(parent);
    1a66:	c7 01       	movw	r24, r14
    1a68:	88 0f       	add	r24, r24
    1a6a:	99 1f       	adc	r25, r25
    1a6c:	01 96       	adiw	r24, 0x01	; 1
	void **ppChild;   //pointer to child
	void **ppSibling;	//pointer to sibling
	void **ppHeap;	//pointer to m_ppHeap

	ppHeap = pQ->m_ppHeap;
	for(parent=0,child=1;child < pQ->m_nItems;)
    1a6e:	d6 01       	movw	r26, r12
    1a70:	12 96       	adiw	r26, 0x02	; 2
    1a72:	2d 91       	ld	r18, X+
    1a74:	3c 91       	ld	r19, X
    1a76:	13 97       	sbiw	r26, 0x03	; 3
    1a78:	82 17       	cp	r24, r18
    1a7a:	93 07       	cpc	r25, r19
    1a7c:	1c f2       	brlt	.-122    	; 0x1a04 <ReheapDown+0x44>
		//----------------------------------
		// calculate new child index
		//----------------------------------
		child = LEFTCHILD(parent);
	}	//end of for loop
}
    1a7e:	df 91       	pop	r29
    1a80:	cf 91       	pop	r28
    1a82:	1f 91       	pop	r17
    1a84:	0f 91       	pop	r16
    1a86:	ff 90       	pop	r15
    1a88:	ef 90       	pop	r14
    1a8a:	df 90       	pop	r13
    1a8c:	cf 90       	pop	r12
    1a8e:	bf 90       	pop	r11
    1a90:	af 90       	pop	r10
    1a92:	9f 90       	pop	r9
    1a94:	8f 90       	pop	r8
    1a96:	7f 90       	pop	r7
    1a98:	6f 90       	pop	r6
    1a9a:	08 95       	ret

00001a9c <CreatePriorityQueue>:
// these.
//
//---------------------------------------------------------
//
void CreatePriorityQueue(PRIORITYQUEUE *q,int ne,int (*c)(void **,void **))
{
    1a9c:	cf 93       	push	r28
    1a9e:	df 93       	push	r29
    1aa0:	ec 01       	movw	r28, r24
	q->m_Cmp = c;
    1aa2:	59 83       	std	Y+1, r21	; 0x01
    1aa4:	48 83       	st	Y, r20
	q->m_nItems = 0;
    1aa6:	1b 82       	std	Y+3, r1	; 0x03
    1aa8:	1a 82       	std	Y+2, r1	; 0x02
	q->m_Maxitems = ne;
    1aaa:	7d 83       	std	Y+5, r23	; 0x05
    1aac:	6c 83       	std	Y+4, r22	; 0x04
	q->m_ppHeap = (void **)malloc(sizeof(void *) * ne);
    1aae:	cb 01       	movw	r24, r22
    1ab0:	88 0f       	add	r24, r24
    1ab2:	99 1f       	adc	r25, r25
    1ab4:	35 d9       	rcall	.-3478   	; 0xd20 <malloc>
    1ab6:	99 87       	std	Y+9, r25	; 0x09
    1ab8:	88 87       	std	Y+8, r24	; 0x08
    q->m_ppBottom = &q->m_ppHeap[-1];
    1aba:	02 97       	sbiw	r24, 0x02	; 2
    1abc:	9f 83       	std	Y+7, r25	; 0x07
    1abe:	8e 83       	std	Y+6, r24	; 0x06
}
    1ac0:	df 91       	pop	r29
    1ac2:	cf 91       	pop	r28
    1ac4:	08 95       	ret

00001ac6 <Insert>:
//		space available in queue
//
//---------------------------------------------------------
//
int Insert(PRIORITYQUEUE* pQ,void *item)
{
    1ac6:	af 92       	push	r10
    1ac8:	bf 92       	push	r11
    1aca:	cf 92       	push	r12
    1acc:	df 92       	push	r13
    1ace:	ef 92       	push	r14
    1ad0:	ff 92       	push	r15
    1ad2:	0f 93       	push	r16
    1ad4:	1f 93       	push	r17
    1ad6:	cf 93       	push	r28
    1ad8:	df 93       	push	r29
	int space_avail;

	space_avail = pQ->m_Maxitems - pQ->m_nItems;
    1ada:	dc 01       	movw	r26, r24
    1adc:	12 96       	adiw	r26, 0x02	; 2
    1ade:	2d 91       	ld	r18, X+
    1ae0:	3c 91       	ld	r19, X
    1ae2:	13 97       	sbiw	r26, 0x03	; 3
    1ae4:	14 96       	adiw	r26, 0x04	; 4
    1ae6:	ed 90       	ld	r14, X+
    1ae8:	fc 90       	ld	r15, X
    1aea:	15 97       	sbiw	r26, 0x05	; 5
    1aec:	e2 1a       	sub	r14, r18
    1aee:	f3 0a       	sbc	r15, r19
	if((space_avail) > 0)
    1af0:	1e 14       	cp	r1, r14
    1af2:	1f 04       	cpc	r1, r15
    1af4:	0c f0       	brlt	.+2      	; 0x1af8 <Insert+0x32>
    1af6:	46 c0       	rjmp	.+140    	; 0x1b84 <Insert+0xbe>
    1af8:	8c 01       	movw	r16, r24
	{
		++pQ->m_nItems;
    1afa:	2f 5f       	subi	r18, 0xFF	; 255
    1afc:	3f 4f       	sbci	r19, 0xFF	; 255
    1afe:	fc 01       	movw	r30, r24
    1b00:	33 83       	std	Z+3, r19	; 0x03
    1b02:	22 83       	std	Z+2, r18	; 0x02
		*(++pQ->m_ppBottom) = item;
    1b04:	06 80       	ldd	r0, Z+6	; 0x06
    1b06:	f7 81       	ldd	r31, Z+7	; 0x07
    1b08:	e0 2d       	mov	r30, r0
    1b0a:	cf 01       	movw	r24, r30
    1b0c:	02 96       	adiw	r24, 0x02	; 2
    1b0e:	17 96       	adiw	r26, 0x07	; 7
    1b10:	9c 93       	st	X, r25
    1b12:	8e 93       	st	-X, r24
    1b14:	16 97       	sbiw	r26, 0x06	; 6
    1b16:	73 83       	std	Z+3, r23	; 0x03
    1b18:	62 83       	std	Z+2, r22	; 0x02
	void **ppChild;	//pointer to child

	//-------------------------
	// Index of child node
	//-------------------------
	child = pQ->m_nItems - 1;
    1b1a:	12 96       	adiw	r26, 0x02	; 2
    1b1c:	6d 91       	ld	r22, X+
    1b1e:	7c 91       	ld	r23, X
    1b20:	13 97       	sbiw	r26, 0x03	; 3
    1b22:	61 50       	subi	r22, 0x01	; 1
    1b24:	71 09       	sbc	r23, r1
	//-------------------------
	// Index of parent node
	// Keep looping while
	// parent is valid (>= 0)
	//-------------------------
	while(child > 0)
    1b26:	16 16       	cp	r1, r22
    1b28:	17 06       	cpc	r1, r23
    1b2a:	64 f5       	brge	.+88     	; 0x1b84 <Insert+0xbe>
	{
		parent = PARENT(child);
    1b2c:	cb 01       	movw	r24, r22
    1b2e:	01 97       	sbiw	r24, 0x01	; 1
    1b30:	6c 01       	movw	r12, r24
    1b32:	1a f4       	brpl	.+6      	; 0x1b3a <Insert+0x74>
    1b34:	bf ef       	ldi	r27, 0xFF	; 255
    1b36:	cb 1a       	sub	r12, r27
    1b38:	db 0a       	sbc	r13, r27
    1b3a:	d5 94       	asr	r13
    1b3c:	c7 94       	ror	r12
		//-----------------------------
		// get pointers to parent
		// and child nodes
		//------------------------------
		ppChild = &pQ->m_ppHeap[child];
    1b3e:	f8 01       	movw	r30, r16
    1b40:	80 85       	ldd	r24, Z+8	; 0x08
    1b42:	91 85       	ldd	r25, Z+9	; 0x09
    1b44:	66 0f       	add	r22, r22
    1b46:	77 1f       	adc	r23, r23
    1b48:	ec 01       	movw	r28, r24
    1b4a:	c6 0f       	add	r28, r22
    1b4c:	d7 1f       	adc	r29, r23
		ppParent = &pQ->m_ppHeap[parent];
    1b4e:	56 01       	movw	r10, r12
    1b50:	aa 0c       	add	r10, r10
    1b52:	bb 1c       	adc	r11, r11
    1b54:	a8 0e       	add	r10, r24
    1b56:	b9 1e       	adc	r11, r25
		// If the priority of the parent
		// is greater than or equal to
		// the priority of the child,
		// we are done, break from the loop
		//---------------------------------
		if( (*pQ->m_Cmp)(ppParent,ppChild) >= 0)
    1b58:	01 90       	ld	r0, Z+
    1b5a:	f0 81       	ld	r31, Z
    1b5c:	e0 2d       	mov	r30, r0
    1b5e:	be 01       	movw	r22, r28
    1b60:	c5 01       	movw	r24, r10
    1b62:	09 95       	icall
    1b64:	99 23       	and	r25, r25
    1b66:	74 f4       	brge	.+28     	; 0x1b84 <Insert+0xbe>

static void swap(void **ppS1,void **ppS2)
{
	void *pTemp;

	pTemp = *ppS1;
    1b68:	d5 01       	movw	r26, r10
    1b6a:	8d 91       	ld	r24, X+
    1b6c:	9c 91       	ld	r25, X
    1b6e:	11 97       	sbiw	r26, 0x01	; 1
	*ppS1 = *ppS2;
    1b70:	28 81       	ld	r18, Y
    1b72:	39 81       	ldd	r19, Y+1	; 0x01
    1b74:	2d 93       	st	X+, r18
    1b76:	3c 93       	st	X, r19
	*ppS2 = pTemp;
    1b78:	99 83       	std	Y+1, r25	; 0x01
    1b7a:	88 83       	st	Y, r24
		//----------------------------------
		swap(ppParent,ppChild);
		//----------------------------------
		// the new parent is the child
		//----------------------------------
		child = parent;
    1b7c:	b6 01       	movw	r22, r12
	//-------------------------
	// Index of parent node
	// Keep looping while
	// parent is valid (>= 0)
	//-------------------------
	while(child > 0)
    1b7e:	1c 14       	cp	r1, r12
    1b80:	1d 04       	cpc	r1, r13
    1b82:	a4 f2       	brlt	.-88     	; 0x1b2c <Insert+0x66>
		++pQ->m_nItems;
		*(++pQ->m_ppBottom) = item;
		ReheapUp(pQ);
	}
	return space_avail;
}
    1b84:	c7 01       	movw	r24, r14
    1b86:	df 91       	pop	r29
    1b88:	cf 91       	pop	r28
    1b8a:	1f 91       	pop	r17
    1b8c:	0f 91       	pop	r16
    1b8e:	ff 90       	pop	r15
    1b90:	ef 90       	pop	r14
    1b92:	df 90       	pop	r13
    1b94:	cf 90       	pop	r12
    1b96:	bf 90       	pop	r11
    1b98:	af 90       	pop	r10
    1b9a:	08 95       	ret

00001b9c <Delete>:
// return value:
//		returns slots in use in the queue
//---------------------------------------------------------

int Delete(PRIORITYQUEUE* pQ,void **target)
{
    1b9c:	cf 93       	push	r28
    1b9e:	df 93       	push	r29
	int SlotsInUse;

	if((SlotsInUse = pQ->m_nItems) > 0)
    1ba0:	dc 01       	movw	r26, r24
    1ba2:	12 96       	adiw	r26, 0x02	; 2
    1ba4:	cd 91       	ld	r28, X+
    1ba6:	dc 91       	ld	r29, X
    1ba8:	13 97       	sbiw	r26, 0x03	; 3
    1baa:	1c 16       	cp	r1, r28
    1bac:	1d 06       	cpc	r1, r29
    1bae:	ec f4       	brge	.+58     	; 0x1bea <Delete+0x4e>
    1bb0:	fc 01       	movw	r30, r24
	{
		*target = *pQ->m_ppHeap;		//get item from top of m_ppHeap
    1bb2:	a0 85       	ldd	r26, Z+8	; 0x08
    1bb4:	b1 85       	ldd	r27, Z+9	; 0x09
    1bb6:	8d 91       	ld	r24, X+
    1bb8:	9c 91       	ld	r25, X
    1bba:	db 01       	movw	r26, r22
    1bbc:	8d 93       	st	X+, r24
    1bbe:	9c 93       	st	X, r25
		*pQ->m_ppHeap = *pQ->m_ppBottom--;
    1bc0:	80 85       	ldd	r24, Z+8	; 0x08
    1bc2:	91 85       	ldd	r25, Z+9	; 0x09
    1bc4:	a6 81       	ldd	r26, Z+6	; 0x06
    1bc6:	b7 81       	ldd	r27, Z+7	; 0x07
    1bc8:	9d 01       	movw	r18, r26
    1bca:	22 50       	subi	r18, 0x02	; 2
    1bcc:	31 09       	sbc	r19, r1
    1bce:	37 83       	std	Z+7, r19	; 0x07
    1bd0:	26 83       	std	Z+6, r18	; 0x06
    1bd2:	2d 91       	ld	r18, X+
    1bd4:	3c 91       	ld	r19, X
    1bd6:	dc 01       	movw	r26, r24
    1bd8:	2d 93       	st	X+, r18
    1bda:	3c 93       	st	X, r19
		--pQ->m_nItems;
    1bdc:	82 81       	ldd	r24, Z+2	; 0x02
    1bde:	93 81       	ldd	r25, Z+3	; 0x03
    1be0:	01 97       	sbiw	r24, 0x01	; 1
    1be2:	93 83       	std	Z+3, r25	; 0x03
    1be4:	82 83       	std	Z+2, r24	; 0x02
		ReheapDown(pQ);
    1be6:	cf 01       	movw	r24, r30
    1be8:	eb de       	rcall	.-554    	; 0x19c0 <ReheapDown>
	}
	return SlotsInUse;
}
    1bea:	ce 01       	movw	r24, r28
    1bec:	df 91       	pop	r29
    1bee:	cf 91       	pop	r28
    1bf0:	08 95       	ret

00001bf2 <Replace>:
//	return value:
//		returns number of slots in use
//-----------------------------------------------------------

int Replace(PRIORITYQUEUE* pQ,void **target,void *item)
{
    1bf2:	cf 92       	push	r12
    1bf4:	df 92       	push	r13
    1bf6:	ef 92       	push	r14
    1bf8:	ff 92       	push	r15
    1bfa:	0f 93       	push	r16
    1bfc:	1f 93       	push	r17
    1bfe:	cf 93       	push	r28
    1c00:	df 93       	push	r29
    1c02:	00 d0       	rcall	.+0      	; 0x1c04 <Replace+0x12>
    1c04:	cd b7       	in	r28, 0x3d	; 61
    1c06:	de b7       	in	r29, 0x3e	; 62
    1c08:	5a 83       	std	Y+2, r21	; 0x02
    1c0a:	49 83       	std	Y+1, r20	; 0x01
	int SlotsInUse;

	if((SlotsInUse = pQ->m_nItems) > 0)
    1c0c:	dc 01       	movw	r26, r24
    1c0e:	12 96       	adiw	r26, 0x02	; 2
    1c10:	cd 90       	ld	r12, X+
    1c12:	dc 90       	ld	r13, X
    1c14:	13 97       	sbiw	r26, 0x03	; 3
    1c16:	1c 14       	cp	r1, r12
    1c18:	1d 04       	cpc	r1, r13
    1c1a:	4c f5       	brge	.+82     	; 0x1c6e <Replace+0x7c>
    1c1c:	7b 01       	movw	r14, r22
    1c1e:	8c 01       	movw	r16, r24
	{
		if ((*pQ->m_Cmp)(&item,pQ->m_ppHeap) > 0)	//only replace if priority is less
    1c20:	fc 01       	movw	r30, r24
    1c22:	60 85       	ldd	r22, Z+8	; 0x08
    1c24:	71 85       	ldd	r23, Z+9	; 0x09
    1c26:	01 90       	ld	r0, Z+
    1c28:	f0 81       	ld	r31, Z
    1c2a:	e0 2d       	mov	r30, r0
    1c2c:	ce 01       	movw	r24, r28
    1c2e:	01 96       	adiw	r24, 0x01	; 1
    1c30:	09 95       	icall
    1c32:	18 16       	cp	r1, r24
    1c34:	19 06       	cpc	r1, r25
    1c36:	34 f4       	brge	.+12     	; 0x1c44 <Replace+0x52>
		{
			*target = item;		//item is higher priority
    1c38:	89 81       	ldd	r24, Y+1	; 0x01
    1c3a:	9a 81       	ldd	r25, Y+2	; 0x02
    1c3c:	d7 01       	movw	r26, r14
    1c3e:	8d 93       	st	X+, r24
    1c40:	9c 93       	st	X, r25
    1c42:	1a c0       	rjmp	.+52     	; 0x1c78 <Replace+0x86>
		}
		else
		{
			*target = *pQ->m_ppHeap;
    1c44:	d8 01       	movw	r26, r16
    1c46:	18 96       	adiw	r26, 0x08	; 8
    1c48:	ed 91       	ld	r30, X+
    1c4a:	fc 91       	ld	r31, X
    1c4c:	19 97       	sbiw	r26, 0x09	; 9
    1c4e:	80 81       	ld	r24, Z
    1c50:	91 81       	ldd	r25, Z+1	; 0x01
    1c52:	f7 01       	movw	r30, r14
    1c54:	91 83       	std	Z+1, r25	; 0x01
    1c56:	80 83       	st	Z, r24
			*pQ->m_ppHeap = item;
    1c58:	18 96       	adiw	r26, 0x08	; 8
    1c5a:	ed 91       	ld	r30, X+
    1c5c:	fc 91       	ld	r31, X
    1c5e:	19 97       	sbiw	r26, 0x09	; 9
    1c60:	89 81       	ldd	r24, Y+1	; 0x01
    1c62:	9a 81       	ldd	r25, Y+2	; 0x02
    1c64:	91 83       	std	Z+1, r25	; 0x01
    1c66:	80 83       	st	Z, r24
			ReheapDown(pQ);
    1c68:	c8 01       	movw	r24, r16
    1c6a:	aa de       	rcall	.-684    	; 0x19c0 <ReheapDown>
    1c6c:	05 c0       	rjmp	.+10     	; 0x1c78 <Replace+0x86>
		}
	}
	else
		*target = item;
    1c6e:	89 81       	ldd	r24, Y+1	; 0x01
    1c70:	9a 81       	ldd	r25, Y+2	; 0x02
    1c72:	db 01       	movw	r26, r22
    1c74:	8d 93       	st	X+, r24
    1c76:	9c 93       	st	X, r25
	return SlotsInUse;
}
    1c78:	c6 01       	movw	r24, r12
    1c7a:	0f 90       	pop	r0
    1c7c:	0f 90       	pop	r0
    1c7e:	df 91       	pop	r29
    1c80:	cf 91       	pop	r28
    1c82:	1f 91       	pop	r17
    1c84:	0f 91       	pop	r16
    1c86:	ff 90       	pop	r15
    1c88:	ef 90       	pop	r14
    1c8a:	df 90       	pop	r13
    1c8c:	cf 90       	pop	r12
    1c8e:	08 95       	ret

00001c90 <InitSpi>:
void InitSpi(void)
{
	// setup SPI interface :
	// master mode
	// enable SPI
	SPCR |= BIT(MSTR)  | BIT(SPE);
    1c90:	8c b5       	in	r24, 0x2c	; 44
    1c92:	80 65       	ori	r24, 0x50	; 80
    1c94:	8c bd       	out	0x2c, r24	; 44
	// clock = f/16
	// select clock phase positive-going in middle of data
	// Data order MSB first
	SPCR &= ~(BIT(CPOL) | BIT(DORD) );
    1c96:	8c b5       	in	r24, 0x2c	; 44
    1c98:	87 7d       	andi	r24, 0xD7	; 215
    1c9a:	8c bd       	out	0x2c, r24	; 44
    1c9c:	08 95       	ret

00001c9e <PortFull>:

int PortFull(void)
{
	char a;
	int retval=0;
	a = SPSR;
    1c9e:	8d b5       	in	r24, 0x2d	; 45
	if(a & 0x80) retval = 1;
	return retval;
    1ca0:	08 2e       	mov	r0, r24
    1ca2:	00 0c       	add	r0, r0
    1ca4:	99 0b       	sbc	r25, r25
}
    1ca6:	89 2f       	mov	r24, r25
    1ca8:	88 1f       	adc	r24, r24
    1caa:	88 27       	eor	r24, r24
    1cac:	88 1f       	adc	r24, r24
    1cae:	90 e0       	ldi	r25, 0x00	; 0
    1cb0:	08 95       	ret

00001cb2 <WriteSpi>:
	parameters:
*************************************************/

void WriteSpi(char v)
{
	SPDR = v;
    1cb2:	8e bd       	out	0x2e, r24	; 46
	while(!PortFull());
    1cb4:	f4 df       	rcall	.-24     	; 0x1c9e <PortFull>
    1cb6:	89 2b       	or	r24, r25
    1cb8:	e9 f3       	breq	.-6      	; 0x1cb4 <WriteSpi+0x2>
}
    1cba:	08 95       	ret

00001cbc <WriteDAC>:

void WriteDAC(int v,int Sel)
{
    1cbc:	ff 92       	push	r15
    1cbe:	0f 93       	push	r16
    1cc0:	1f 93       	push	r17
    1cc2:	cf 93       	push	r28
    1cc4:	df 93       	push	r29
    1cc6:	00 d0       	rcall	.+0      	; 0x1cc8 <WriteDAC+0xc>
    1cc8:	cd b7       	in	r28, 0x3d	; 61
    1cca:	de b7       	in	r29, 0x3e	; 62
    1ccc:	9a 83       	std	Y+2, r25	; 0x02
    1cce:	89 83       	std	Y+1, r24	; 0x01
    1cd0:	8b 01       	movw	r16, r22
	char t;
	char *b = (char *)&v;
	char sr;

	t = b[0];
	b[0] = b[1];
    1cd2:	8a 81       	ldd	r24, Y+2	; 0x02
	b[1] = t;
    1cd4:	99 81       	ldd	r25, Y+1	; 0x01
    1cd6:	9a 83       	std	Y+2, r25	; 0x02
	SPDR = b[0];
    1cd8:	8e bd       	out	0x2e, r24	; 46
	while(!PortFull());
    1cda:	e1 df       	rcall	.-62     	; 0x1c9e <PortFull>
    1cdc:	89 2b       	or	r24, r25
    1cde:	e9 f3       	breq	.-6      	; 0x1cda <WriteDAC+0x1e>
	SPDR = b[1];
    1ce0:	8a 81       	ldd	r24, Y+2	; 0x02
	while(!PortFull());
    1ce2:	8e bd       	out	0x2e, r24	; 46
    1ce4:	dc df       	rcall	.-72     	; 0x1c9e <PortFull>
    1ce6:	89 2b       	or	r24, r25
    1ce8:	e9 f3       	breq	.-6      	; 0x1ce4 <WriteDAC+0x28>
	sr = Disable();
    1cea:	0e 94 75 00 	call	0xea	; 0xea <Disable>
    1cee:	f8 2e       	mov	r15, r24
	ClearPortA(PORTA_LD_DAC);
    1cf0:	83 e0       	ldi	r24, 0x03	; 3
    1cf2:	90 e0       	ldi	r25, 0x00	; 0
    1cf4:	37 dd       	rcall	.-1426   	; 0x1764 <ClearPortA>
	SetPortA(PORTA_LD_DAC);
    1cf6:	83 e0       	ldi	r24, 0x03	; 3
    1cf8:	90 e0       	ldi	r25, 0x00	; 0
    1cfa:	1d dd       	rcall	.-1478   	; 0x1736 <SetPortA>
    1cfc:	8f 2d       	mov	r24, r15
	Enable(sr);
    1cfe:	0e 94 79 00 	call	0xf2	; 0xf2 <Enable>
	SetDacSel(Sel);
    1d02:	c8 01       	movw	r24, r16
    1d04:	47 dd       	rcall	.-1394   	; 0x1794 <SetDacSel>
    1d06:	0f 90       	pop	r0
}
    1d08:	0f 90       	pop	r0
    1d0a:	df 91       	pop	r29
    1d0c:	cf 91       	pop	r28
    1d0e:	1f 91       	pop	r17
    1d10:	0f 91       	pop	r16
    1d12:	ff 90       	pop	r15
    1d14:	08 95       	ret

00001d16 <StartOS>:
    1d16:	6a ed       	ldi	r22, 0xDA	; 218
	// Remove task from priorty queue
	// Restore its context
	// and then jump to the first task using
	// return from subroutine
	//---------------------------------------
	Delete(&ActiveTasks,(void **)&pNextTask);
    1d18:	71 e0       	ldi	r23, 0x01	; 1
    1d1a:	8c ec       	ldi	r24, 0xCC	; 204
    1d1c:	91 e0       	ldi	r25, 0x01	; 1
    1d1e:	3e df       	rcall	.-388    	; 0x1b9c <Delete>
	pCurrentTask = pNextTask;
    1d20:	80 91 da 01 	lds	r24, 0x01DA	; 0x8001da <pNextTask>
    1d24:	90 91 db 01 	lds	r25, 0x01DB	; 0x8001db <pNextTask+0x1>
    1d28:	90 93 d7 01 	sts	0x01D7, r25	; 0x8001d7 <pCurrentTask+0x1>
    1d2c:	80 93 d6 01 	sts	0x01D6, r24	; 0x8001d6 <pCurrentTask>
	RESTORE_CONTEXT();
    1d30:	a0 91 da 01 	lds	r26, 0x01DA	; 0x8001da <pNextTask>
    1d34:	b0 91 db 01 	lds	r27, 0x01DB	; 0x8001db <pNextTask+0x1>
    1d38:	cd 91       	ld	r28, X+
    1d3a:	cd bf       	out	0x3d, r28	; 61
    1d3c:	dd 91       	ld	r29, X+
    1d3e:	de bf       	out	0x3e, r29	; 62
    1d40:	0f 90       	pop	r0
    1d42:	1f 90       	pop	r1
    1d44:	2f 90       	pop	r2
    1d46:	3f 90       	pop	r3
    1d48:	4f 90       	pop	r4
    1d4a:	5f 90       	pop	r5
    1d4c:	6f 90       	pop	r6
    1d4e:	7f 90       	pop	r7
    1d50:	8f 90       	pop	r8
    1d52:	9f 90       	pop	r9
    1d54:	af 90       	pop	r10
    1d56:	bf 90       	pop	r11
    1d58:	cf 90       	pop	r12
    1d5a:	df 90       	pop	r13
    1d5c:	ef 90       	pop	r14
    1d5e:	ff 90       	pop	r15
    1d60:	0f 91       	pop	r16
    1d62:	1f 91       	pop	r17
    1d64:	2f 91       	pop	r18
    1d66:	3f 91       	pop	r19
    1d68:	4f 91       	pop	r20
    1d6a:	5f 91       	pop	r21
    1d6c:	6f 91       	pop	r22
    1d6e:	7f 91       	pop	r23
    1d70:	8f 91       	pop	r24
    1d72:	9f 91       	pop	r25
    1d74:	af 91       	pop	r26
    1d76:	bf 91       	pop	r27
    1d78:	cf 91       	pop	r28
    1d7a:	df 91       	pop	r29
    1d7c:	ef 91       	pop	r30
    1d7e:	ff 91       	pop	r31
    1d80:	f7 fd       	sbrc	r31, 7
    1d82:	03 c0       	rjmp	.+6      	; 0x1d8a <irqen>
    1d84:	ff bf       	out	0x3f, r31	; 63
    1d86:	ff 91       	pop	r31
    1d88:	08 95       	ret

00001d8a <irqen>:
    1d8a:	ff 77       	andi	r31, 0x7F	; 127
    1d8c:	ff bf       	out	0x3f, r31	; 63
    1d8e:	ff 91       	pop	r31
    1d90:	18 95       	reti

00001d92 <TimeDelay>:
// return value:
//	returns non zero value if something happened out of the ordinary
//--------------------------------------------------------------------------

int TimeDelay(int mSec)
{
    1d92:	ef 92       	push	r14
    1d94:	ff 92       	push	r15
    1d96:	0f 93       	push	r16
    1d98:	1f 93       	push	r17
    1d9a:	cf 93       	push	r28
    1d9c:	df 93       	push	r29
    1d9e:	7c 01       	movw	r14, r24
	int retval;
	static int DCount = 0;	//keeps track of the number of times its called
	SEMAPHORE *e;					//pointer to event control block for semaphore

	char *s = malloc(32);	//get a new block of memory
    1da0:	80 e2       	ldi	r24, 0x20	; 32
    1da2:	90 e0       	ldi	r25, 0x00	; 0
    1da4:	0e 94 90 06 	call	0xd20	; 0xd20 <malloc>
    1da8:	d8 2f       	mov	r29, r24
    1daa:	c9 2f       	mov	r28, r25
	s[0] = 'D';				//create name for semaphore
    1dac:	68 2f       	mov	r22, r24
    1dae:	79 2f       	mov	r23, r25
    1db0:	84 e4       	ldi	r24, 0x44	; 68
    1db2:	fb 01       	movw	r30, r22
    1db4:	81 93       	st	Z+, r24
    1db6:	bf 01       	movw	r22, r30
	itoa(DCount++,&s[1],10);
    1db8:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <DCount.2219>
    1dbc:	90 91 b1 01 	lds	r25, 0x01B1	; 0x8001b1 <DCount.2219+0x1>
    1dc0:	9c 01       	movw	r18, r24
    1dc2:	2f 5f       	subi	r18, 0xFF	; 255
    1dc4:	3f 4f       	sbci	r19, 0xFF	; 255
    1dc6:	30 93 b1 01 	sts	0x01B1, r19	; 0x8001b1 <DCount.2219+0x1>
    1dca:	20 93 b0 01 	sts	0x01B0, r18	; 0x8001b0 <DCount.2219>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
    1dce:	4a e0       	ldi	r20, 0x0A	; 10
    1dd0:	23 d2       	rcall	.+1094   	; 0x2218 <__itoa_ncheck>
	e = NewSemaphore(0,SEMAPHORE_MODE_TIMEOUT,s);	//create semaphore
    1dd2:	4d 2f       	mov	r20, r29
    1dd4:	5c 2f       	mov	r21, r28
    1dd6:	61 e0       	ldi	r22, 0x01	; 1
    1dd8:	70 e0       	ldi	r23, 0x00	; 0
    1dda:	80 e0       	ldi	r24, 0x00	; 0
    1ddc:	90 e0       	ldi	r25, 0x00	; 0
    1dde:	0e 94 af 00 	call	0x15e	; 0x15e <NewSemaphore>
    1de2:	8c 01       	movw	r16, r24
	free(s);			//return memory block
    1de4:	8d 2f       	mov	r24, r29
    1de6:	9c 2f       	mov	r25, r28
    1de8:	8b d8       	rcall	.-3818   	; 0xf00 <free>
	retval = PendSemaphore(e,mSec);	//pend for time delay period
    1dea:	b7 01       	movw	r22, r14
    1dec:	c8 01       	movw	r24, r16
    1dee:	30 dc       	rcall	.-1952   	; 0x1650 <PendSemaphore>
    1df0:	ec 01       	movw	r28, r24
	DeleteSemaphore(e);				//return semaphore back to pool
    1df2:	c8 01       	movw	r24, r16
    1df4:	0e 94 df 00 	call	0x1be	; 0x1be <DeleteSemaphore>
	return retval;					//exit
}
    1df8:	ce 01       	movw	r24, r28
    1dfa:	df 91       	pop	r29
    1dfc:	cf 91       	pop	r28
    1dfe:	1f 91       	pop	r17
    1e00:	0f 91       	pop	r16
    1e02:	ff 90       	pop	r15
    1e04:	ef 90       	pop	r14
    1e06:	08 95       	ret

00001e08 <TimerTicker>:
**  Control Blocks looking for timed out events.                      **
**                                                                    **
***********************************************************************/

void TimerTicker(void)
{
    1e08:	ef 92       	push	r14
    1e0a:	ff 92       	push	r15
    1e0c:	0f 93       	push	r16
    1e0e:	1f 93       	push	r17
    1e10:	cf 93       	push	r28
    1e12:	df 93       	push	r29
	TCB *t,**prev;

	//------------------------------
	// Increment the time stamp
	//------------------------------
	++TStamp;
    1e14:	80 91 fb 02 	lds	r24, 0x02FB	; 0x8002fb <TStamp>
    1e18:	90 91 fc 02 	lds	r25, 0x02FC	; 0x8002fc <TStamp+0x1>
    1e1c:	01 96       	adiw	r24, 0x01	; 1
    1e1e:	90 93 fc 02 	sts	0x02FC, r25	; 0x8002fc <TStamp+0x1>
    1e22:	80 93 fb 02 	sts	0x02FB, r24	; 0x8002fb <TStamp>
	// gone to zero, put the tasks that
	// are waiting on those semaphores
	// back into the queue so that they
	// can execute.
	//-----------------------------------
	for(e = pTimeoutList;e;e=e->Tnext)	//go through whole list
    1e26:	e0 90 ca 01 	lds	r14, 0x01CA	; 0x8001ca <pTimeoutList>
    1e2a:	f0 90 cb 01 	lds	r15, 0x01CB	; 0x8001cb <pTimeoutList+0x1>
    1e2e:	e1 14       	cp	r14, r1
    1e30:	f1 04       	cpc	r15, r1
    1e32:	a9 f1       	breq	.+106    	; 0x1e9e <TimerTicker+0x96>
			if(t->timeout > 0)	//if less than zero, infinite timeout
			{
				if( --(t->timeout) <= 0)	//decrement timeout counter
				{
					e->EventCount++;		//fake a post
					t->status = EVENT_TIMEOUT;	//event caused by semaphore
    1e34:	0d ef       	ldi	r16, 0xFD	; 253
    1e36:	1f ef       	ldi	r17, 0xFF	; 255
	// back into the queue so that they
	// can execute.
	//-----------------------------------
	for(e = pTimeoutList;e;e=e->Tnext)	//go through whole list
	{
		for(prev = &(e->task_head),t = e->task_head;t;)
    1e38:	f7 01       	movw	r30, r14
    1e3a:	c0 81       	ld	r28, Z
    1e3c:	d1 81       	ldd	r29, Z+1	; 0x01
    1e3e:	20 97       	sbiw	r28, 0x00	; 0
    1e40:	41 f1       	breq	.+80     	; 0x1e92 <TimerTicker+0x8a>
		{
			if(t->timeout > 0)	//if less than zero, infinite timeout
    1e42:	88 89       	ldd	r24, Y+16	; 0x10
    1e44:	99 89       	ldd	r25, Y+17	; 0x11
    1e46:	18 16       	cp	r1, r24
    1e48:	19 06       	cpc	r1, r25
    1e4a:	e4 f4       	brge	.+56     	; 0x1e84 <TimerTicker+0x7c>
			{
				if( --(t->timeout) <= 0)	//decrement timeout counter
    1e4c:	01 97       	sbiw	r24, 0x01	; 1
    1e4e:	99 8b       	std	Y+17, r25	; 0x11
    1e50:	88 8b       	std	Y+16, r24	; 0x10
    1e52:	18 16       	cp	r1, r24
    1e54:	19 06       	cpc	r1, r25
    1e56:	b4 f0       	brlt	.+44     	; 0x1e84 <TimerTicker+0x7c>
				{
					e->EventCount++;		//fake a post
    1e58:	d7 01       	movw	r26, r14
    1e5a:	1a 96       	adiw	r26, 0x0a	; 10
    1e5c:	8d 91       	ld	r24, X+
    1e5e:	9c 91       	ld	r25, X
    1e60:	1b 97       	sbiw	r26, 0x0b	; 11
    1e62:	01 96       	adiw	r24, 0x01	; 1
    1e64:	1b 96       	adiw	r26, 0x0b	; 11
    1e66:	9c 93       	st	X, r25
    1e68:	8e 93       	st	-X, r24
    1e6a:	1a 97       	sbiw	r26, 0x0a	; 10
					t->status = EVENT_TIMEOUT;	//event caused by semaphore
    1e6c:	19 87       	std	Y+9, r17	; 0x09
    1e6e:	08 87       	std	Y+8, r16	; 0x08
					*prev = t->next;	//remove t from list
    1e70:	8c 89       	ldd	r24, Y+20	; 0x14
    1e72:	9d 89       	ldd	r25, Y+21	; 0x15
    1e74:	91 83       	std	Z+1, r25	; 0x01
    1e76:	80 83       	st	Z, r24
					t->next = 0;
    1e78:	1d 8a       	std	Y+21, r1	; 0x15
    1e7a:	1c 8a       	std	Y+20, r1	; 0x14
					Insert(&ActiveTasks,t);//put it back in queue
    1e7c:	be 01       	movw	r22, r28
    1e7e:	8c ec       	ldi	r24, 0xCC	; 204
    1e80:	91 e0       	ldi	r25, 0x01	; 1
    1e82:	21 de       	rcall	.-958    	; 0x1ac6 <Insert>
				}
			}
			prev = &(t->next);
    1e84:	fe 01       	movw	r30, r28
    1e86:	74 96       	adiw	r30, 0x14	; 20
			t = t->next;
    1e88:	0c 88       	ldd	r0, Y+20	; 0x14
    1e8a:	dd 89       	ldd	r29, Y+21	; 0x15
    1e8c:	c0 2d       	mov	r28, r0
	// back into the queue so that they
	// can execute.
	//-----------------------------------
	for(e = pTimeoutList;e;e=e->Tnext)	//go through whole list
	{
		for(prev = &(e->task_head),t = e->task_head;t;)
    1e8e:	20 97       	sbiw	r28, 0x00	; 0
    1e90:	c1 f6       	brne	.-80     	; 0x1e42 <TimerTicker+0x3a>
	// gone to zero, put the tasks that
	// are waiting on those semaphores
	// back into the queue so that they
	// can execute.
	//-----------------------------------
	for(e = pTimeoutList;e;e=e->Tnext)	//go through whole list
    1e92:	f7 01       	movw	r30, r14
    1e94:	e4 80       	ldd	r14, Z+4	; 0x04
    1e96:	f5 80       	ldd	r15, Z+5	; 0x05
    1e98:	e1 14       	cp	r14, r1
    1e9a:	f1 04       	cpc	r15, r1
    1e9c:	69 f6       	brne	.-102    	; 0x1e38 <TimerTicker+0x30>
			}
			prev = &(t->next);
			t = t->next;
		}
	}
}
    1e9e:	df 91       	pop	r29
    1ea0:	cf 91       	pop	r28
    1ea2:	1f 91       	pop	r17
    1ea4:	0f 91       	pop	r16
    1ea6:	ff 90       	pop	r15
    1ea8:	ef 90       	pop	r14
    1eaa:	08 95       	ret

00001eac <__vector_20>:
	TxDesc.m_pBuffer[TxDesc.m_Head++] = c;
	if(TxDesc.m_Head == TxDesc.m_Size) TxDesc.m_Head = 0;
	TxDesc.m_nChar++;
	UART_TXirq(1);
	Enable(sr);
}
    1eac:	ff 93       	push	r31
    1eae:	ff b7       	in	r31, 0x3f	; 63
    1eb0:	f0 68       	ori	r31, 0x80	; 128
    1eb2:	ff 93       	push	r31
    1eb4:	ef 93       	push	r30
    1eb6:	df 93       	push	r29
    1eb8:	cf 93       	push	r28
    1eba:	bf 93       	push	r27
    1ebc:	af 93       	push	r26
    1ebe:	9f 93       	push	r25
    1ec0:	8f 93       	push	r24
    1ec2:	7f 93       	push	r23
    1ec4:	6f 93       	push	r22
    1ec6:	5f 93       	push	r21
    1ec8:	4f 93       	push	r20
    1eca:	3f 93       	push	r19
    1ecc:	2f 93       	push	r18
    1ece:	1f 93       	push	r17
    1ed0:	0f 93       	push	r16
    1ed2:	ff 92       	push	r15
    1ed4:	ef 92       	push	r14
    1ed6:	df 92       	push	r13
    1ed8:	cf 92       	push	r12
    1eda:	bf 92       	push	r11
    1edc:	af 92       	push	r10
    1ede:	9f 92       	push	r9
    1ee0:	8f 92       	push	r8
    1ee2:	7f 92       	push	r7
    1ee4:	6f 92       	push	r6
    1ee6:	5f 92       	push	r5
    1ee8:	4f 92       	push	r4
    1eea:	3f 92       	push	r3
    1eec:	2f 92       	push	r2
    1eee:	1f 92       	push	r1
    1ef0:	11 24       	eor	r1, r1
    1ef2:	0f 92       	push	r0
    1ef4:	0e 94 cc 02 	call	0x598	; 0x598 <EnterInterrupt>
    1ef8:	ee eb       	ldi	r30, 0xBE	; 190
    1efa:	f1 e0       	ldi	r31, 0x01	; 1
    1efc:	22 85       	ldd	r18, Z+10	; 0x0a
    1efe:	33 85       	ldd	r19, Z+11	; 0x0b
    1f00:	84 81       	ldd	r24, Z+4	; 0x04
    1f02:	95 81       	ldd	r25, Z+5	; 0x05
    1f04:	28 17       	cp	r18, r24
    1f06:	39 07       	cpc	r19, r25
    1f08:	1c f5       	brge	.+70     	; 0x1f50 <__vector_20+0xa4>
    1f0a:	ef 01       	movw	r28, r30
    1f0c:	60 e0       	ldi	r22, 0x00	; 0
    1f0e:	70 e0       	ldi	r23, 0x00	; 0
    1f10:	80 81       	ld	r24, Z
    1f12:	91 81       	ldd	r25, Z+1	; 0x01
    1f14:	e9 dc       	rcall	.-1582   	; 0x18e8 <PostSemaphore>
    1f16:	40 91 c6 00 	lds	r20, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    1f1a:	6a 81       	ldd	r22, Y+2	; 0x02
    1f1c:	7b 81       	ldd	r23, Y+3	; 0x03
    1f1e:	8e 81       	ldd	r24, Y+6	; 0x06
    1f20:	9f 81       	ldd	r25, Y+7	; 0x07
    1f22:	9c 01       	movw	r18, r24
    1f24:	2f 5f       	subi	r18, 0xFF	; 255
    1f26:	3f 4f       	sbci	r19, 0xFF	; 255
    1f28:	3f 83       	std	Y+7, r19	; 0x07
    1f2a:	2e 83       	std	Y+6, r18	; 0x06
    1f2c:	fb 01       	movw	r30, r22
    1f2e:	e8 0f       	add	r30, r24
    1f30:	f9 1f       	adc	r31, r25
    1f32:	40 83       	st	Z, r20
    1f34:	8a 85       	ldd	r24, Y+10	; 0x0a
    1f36:	9b 85       	ldd	r25, Y+11	; 0x0b
    1f38:	01 96       	adiw	r24, 0x01	; 1
    1f3a:	9b 87       	std	Y+11, r25	; 0x0b
    1f3c:	8a 87       	std	Y+10, r24	; 0x0a
    1f3e:	8c 81       	ldd	r24, Y+4	; 0x04
    1f40:	9d 81       	ldd	r25, Y+5	; 0x05
    1f42:	28 17       	cp	r18, r24
    1f44:	39 07       	cpc	r19, r25
    1f46:	21 f4       	brne	.+8      	; 0x1f50 <__vector_20+0xa4>
    1f48:	10 92 c5 01 	sts	0x01C5, r1	; 0x8001c5 <RxDesc+0x7>
    1f4c:	10 92 c4 01 	sts	0x01C4, r1	; 0x8001c4 <RxDesc+0x6>
    1f50:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <ExitInterrupt>
    1f54:	0f 90       	pop	r0
    1f56:	1f 90       	pop	r1
    1f58:	2f 90       	pop	r2
    1f5a:	3f 90       	pop	r3
    1f5c:	4f 90       	pop	r4
    1f5e:	5f 90       	pop	r5
    1f60:	6f 90       	pop	r6
    1f62:	7f 90       	pop	r7
    1f64:	8f 90       	pop	r8
    1f66:	9f 90       	pop	r9
    1f68:	af 90       	pop	r10
    1f6a:	bf 90       	pop	r11
    1f6c:	cf 90       	pop	r12
    1f6e:	df 90       	pop	r13
    1f70:	ef 90       	pop	r14
    1f72:	ff 90       	pop	r15
    1f74:	0f 91       	pop	r16
    1f76:	1f 91       	pop	r17
    1f78:	2f 91       	pop	r18
    1f7a:	3f 91       	pop	r19
    1f7c:	4f 91       	pop	r20
    1f7e:	5f 91       	pop	r21
    1f80:	6f 91       	pop	r22
    1f82:	7f 91       	pop	r23
    1f84:	8f 91       	pop	r24
    1f86:	9f 91       	pop	r25
    1f88:	af 91       	pop	r26
    1f8a:	bf 91       	pop	r27
    1f8c:	cf 91       	pop	r28
    1f8e:	df 91       	pop	r29
    1f90:	ef 91       	pop	r30
    1f92:	ff 91       	pop	r31
    1f94:	ff 77       	andi	r31, 0x7F	; 127
    1f96:	ff bf       	out	0x3f, r31	; 63
    1f98:	ff 91       	pop	r31
    1f9a:	18 95       	reti

00001f9c <USART_GetC>:
    1f9c:	0f 93       	push	r16
    1f9e:	1f 93       	push	r17
    1fa0:	cf 93       	push	r28
    1fa2:	df 93       	push	r29
    1fa4:	ce eb       	ldi	r28, 0xBE	; 190
    1fa6:	d1 e0       	ldi	r29, 0x01	; 1
    1fa8:	60 e0       	ldi	r22, 0x00	; 0
    1faa:	70 e0       	ldi	r23, 0x00	; 0
    1fac:	88 81       	ld	r24, Y
    1fae:	99 81       	ldd	r25, Y+1	; 0x01
    1fb0:	4f db       	rcall	.-2402   	; 0x1650 <PendSemaphore>
    1fb2:	0e 94 75 00 	call	0xea	; 0xea <Disable>
    1fb6:	6a 81       	ldd	r22, Y+2	; 0x02
    1fb8:	7b 81       	ldd	r23, Y+3	; 0x03
    1fba:	28 85       	ldd	r18, Y+8	; 0x08
    1fbc:	39 85       	ldd	r19, Y+9	; 0x09
    1fbe:	a9 01       	movw	r20, r18
    1fc0:	4f 5f       	subi	r20, 0xFF	; 255
    1fc2:	5f 4f       	sbci	r21, 0xFF	; 255
    1fc4:	59 87       	std	Y+9, r21	; 0x09
    1fc6:	48 87       	std	Y+8, r20	; 0x08
    1fc8:	fb 01       	movw	r30, r22
    1fca:	e2 0f       	add	r30, r18
    1fcc:	f3 1f       	adc	r31, r19
    1fce:	00 81       	ld	r16, Z
    1fd0:	10 e0       	ldi	r17, 0x00	; 0
    1fd2:	2a 85       	ldd	r18, Y+10	; 0x0a
    1fd4:	3b 85       	ldd	r19, Y+11	; 0x0b
    1fd6:	21 50       	subi	r18, 0x01	; 1
    1fd8:	31 09       	sbc	r19, r1
    1fda:	3b 87       	std	Y+11, r19	; 0x0b
    1fdc:	2a 87       	std	Y+10, r18	; 0x0a
    1fde:	2c 81       	ldd	r18, Y+4	; 0x04
    1fe0:	3d 81       	ldd	r19, Y+5	; 0x05
    1fe2:	42 17       	cp	r20, r18
    1fe4:	53 07       	cpc	r21, r19
    1fe6:	21 f4       	brne	.+8      	; 0x1ff0 <USART_GetC+0x54>
    1fe8:	10 92 c7 01 	sts	0x01C7, r1	; 0x8001c7 <RxDesc+0x9>
    1fec:	10 92 c6 01 	sts	0x01C6, r1	; 0x8001c6 <RxDesc+0x8>
    1ff0:	0e 94 79 00 	call	0xf2	; 0xf2 <Enable>
    1ff4:	c8 01       	movw	r24, r16
    1ff6:	df 91       	pop	r29
    1ff8:	cf 91       	pop	r28
    1ffa:	1f 91       	pop	r17
    1ffc:	0f 91       	pop	r16
    1ffe:	08 95       	ret

00002000 <UART_TXirq>:
    2000:	88 23       	and	r24, r24
    2002:	31 f0       	breq	.+12     	; 0x2010 <UART_TXirq+0x10>
    2004:	e1 ec       	ldi	r30, 0xC1	; 193
    2006:	f0 e0       	ldi	r31, 0x00	; 0
    2008:	80 81       	ld	r24, Z
    200a:	80 62       	ori	r24, 0x20	; 32
    200c:	80 83       	st	Z, r24
    200e:	08 95       	ret
    2010:	e1 ec       	ldi	r30, 0xC1	; 193
    2012:	f0 e0       	ldi	r31, 0x00	; 0
    2014:	80 81       	ld	r24, Z
    2016:	8f 7d       	andi	r24, 0xDF	; 223
    2018:	80 83       	st	Z, r24
    201a:	08 95       	ret

0000201c <__vector_21>:
    201c:	ff 93       	push	r31
    201e:	ff b7       	in	r31, 0x3f	; 63
    2020:	f0 68       	ori	r31, 0x80	; 128
    2022:	ff 93       	push	r31
    2024:	ef 93       	push	r30
    2026:	df 93       	push	r29
    2028:	cf 93       	push	r28
    202a:	bf 93       	push	r27
    202c:	af 93       	push	r26
    202e:	9f 93       	push	r25
    2030:	8f 93       	push	r24
    2032:	7f 93       	push	r23
    2034:	6f 93       	push	r22
    2036:	5f 93       	push	r21
    2038:	4f 93       	push	r20
    203a:	3f 93       	push	r19
    203c:	2f 93       	push	r18
    203e:	1f 93       	push	r17
    2040:	0f 93       	push	r16
    2042:	ff 92       	push	r15
    2044:	ef 92       	push	r14
    2046:	df 92       	push	r13
    2048:	cf 92       	push	r12
    204a:	bf 92       	push	r11
    204c:	af 92       	push	r10
    204e:	9f 92       	push	r9
    2050:	8f 92       	push	r8
    2052:	7f 92       	push	r7
    2054:	6f 92       	push	r6
    2056:	5f 92       	push	r5
    2058:	4f 92       	push	r4
    205a:	3f 92       	push	r3
    205c:	2f 92       	push	r2
    205e:	1f 92       	push	r1
    2060:	11 24       	eor	r1, r1
    2062:	0f 92       	push	r0
    2064:	0e 94 cc 02 	call	0x598	; 0x598 <EnterInterrupt>
    2068:	c2 eb       	ldi	r28, 0xB2	; 178
    206a:	d1 e0       	ldi	r29, 0x01	; 1
    206c:	60 e0       	ldi	r22, 0x00	; 0
    206e:	70 e0       	ldi	r23, 0x00	; 0
    2070:	88 81       	ld	r24, Y
    2072:	99 81       	ldd	r25, Y+1	; 0x01
    2074:	39 dc       	rcall	.-1934   	; 0x18e8 <PostSemaphore>
    2076:	2a 81       	ldd	r18, Y+2	; 0x02
    2078:	3b 81       	ldd	r19, Y+3	; 0x03
    207a:	88 85       	ldd	r24, Y+8	; 0x08
    207c:	99 85       	ldd	r25, Y+9	; 0x09
    207e:	ac 01       	movw	r20, r24
    2080:	4f 5f       	subi	r20, 0xFF	; 255
    2082:	5f 4f       	sbci	r21, 0xFF	; 255
    2084:	59 87       	std	Y+9, r21	; 0x09
    2086:	48 87       	std	Y+8, r20	; 0x08
    2088:	f9 01       	movw	r30, r18
    208a:	e8 0f       	add	r30, r24
    208c:	f9 1f       	adc	r31, r25
    208e:	80 81       	ld	r24, Z
    2090:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    2094:	8a 85       	ldd	r24, Y+10	; 0x0a
    2096:	9b 85       	ldd	r25, Y+11	; 0x0b
    2098:	01 97       	sbiw	r24, 0x01	; 1
    209a:	9b 87       	std	Y+11, r25	; 0x0b
    209c:	8a 87       	std	Y+10, r24	; 0x0a
    209e:	89 2b       	or	r24, r25
    20a0:	11 f4       	brne	.+4      	; 0x20a6 <__vector_21+0x8a>
    20a2:	80 e0       	ldi	r24, 0x00	; 0
    20a4:	ad df       	rcall	.-166    	; 0x2000 <UART_TXirq>
    20a6:	e2 eb       	ldi	r30, 0xB2	; 178
    20a8:	f1 e0       	ldi	r31, 0x01	; 1
    20aa:	20 85       	ldd	r18, Z+8	; 0x08
    20ac:	31 85       	ldd	r19, Z+9	; 0x09
    20ae:	84 81       	ldd	r24, Z+4	; 0x04
    20b0:	95 81       	ldd	r25, Z+5	; 0x05
    20b2:	28 17       	cp	r18, r24
    20b4:	39 07       	cpc	r19, r25
    20b6:	21 f4       	brne	.+8      	; 0x20c0 <__vector_21+0xa4>
    20b8:	10 92 bb 01 	sts	0x01BB, r1	; 0x8001bb <TxDesc+0x9>
    20bc:	10 92 ba 01 	sts	0x01BA, r1	; 0x8001ba <TxDesc+0x8>
    20c0:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <ExitInterrupt>
    20c4:	0f 90       	pop	r0
    20c6:	1f 90       	pop	r1
    20c8:	2f 90       	pop	r2
    20ca:	3f 90       	pop	r3
    20cc:	4f 90       	pop	r4
    20ce:	5f 90       	pop	r5
    20d0:	6f 90       	pop	r6
    20d2:	7f 90       	pop	r7
    20d4:	8f 90       	pop	r8
    20d6:	9f 90       	pop	r9
    20d8:	af 90       	pop	r10
    20da:	bf 90       	pop	r11
    20dc:	cf 90       	pop	r12
    20de:	df 90       	pop	r13
    20e0:	ef 90       	pop	r14
    20e2:	ff 90       	pop	r15
    20e4:	0f 91       	pop	r16
    20e6:	1f 91       	pop	r17
    20e8:	2f 91       	pop	r18
    20ea:	3f 91       	pop	r19
    20ec:	4f 91       	pop	r20
    20ee:	5f 91       	pop	r21
    20f0:	6f 91       	pop	r22
    20f2:	7f 91       	pop	r23
    20f4:	8f 91       	pop	r24
    20f6:	9f 91       	pop	r25
    20f8:	af 91       	pop	r26
    20fa:	bf 91       	pop	r27
    20fc:	cf 91       	pop	r28
    20fe:	df 91       	pop	r29
    2100:	ef 91       	pop	r30
    2102:	ff 91       	pop	r31
    2104:	ff 77       	andi	r31, 0x7F	; 127
    2106:	ff bf       	out	0x3f, r31	; 63
    2108:	ff 91       	pop	r31
    210a:	18 95       	reti

0000210c <USART_Init>:
	else
		UCSR0B &= ~BIT(UDRIE0);
}

void USART_Init(void)
{
    210c:	0f 93       	push	r16
    210e:	1f 93       	push	r17
    2110:	cf 93       	push	r28
    2112:	df 93       	push	r29
	//---------------------------------------
	// Transmit descriptor
	//---------------------------------------
	 TxDesc.m_pBuffer = malloc(UART_BUFFSIZE);
    2114:	80 e8       	ldi	r24, 0x80	; 128
    2116:	90 e0       	ldi	r25, 0x00	; 0
    2118:	0e 94 90 06 	call	0xd20	; 0xd20 <malloc>
    211c:	c2 eb       	ldi	r28, 0xB2	; 178
    211e:	d1 e0       	ldi	r29, 0x01	; 1
    2120:	9b 83       	std	Y+3, r25	; 0x03
    2122:	8a 83       	std	Y+2, r24	; 0x02
	 TxDesc.m_Head = 0;
    2124:	1f 82       	std	Y+7, r1	; 0x07
    2126:	1e 82       	std	Y+6, r1	; 0x06
	 TxDesc.m_Tail = 0;
    2128:	19 86       	std	Y+9, r1	; 0x09
    212a:	18 86       	std	Y+8, r1	; 0x08
	 TxDesc.m_nChar = 0;
    212c:	1b 86       	std	Y+11, r1	; 0x0b
    212e:	1a 86       	std	Y+10, r1	; 0x0a
	 TxDesc.m_Size = UART_BUFFSIZE;
    2130:	00 e8       	ldi	r16, 0x80	; 128
    2132:	10 e0       	ldi	r17, 0x00	; 0
    2134:	1d 83       	std	Y+5, r17	; 0x05
    2136:	0c 83       	std	Y+4, r16	; 0x04
	 TxDesc.m_pSem = NewSemaphore(UART_BUFFSIZE,SEMAPHORE_MODE_BLOCKING,"TxBlock");
    2138:	47 e9       	ldi	r20, 0x97	; 151
    213a:	51 e0       	ldi	r21, 0x01	; 1
    213c:	60 e0       	ldi	r22, 0x00	; 0
    213e:	70 e0       	ldi	r23, 0x00	; 0
    2140:	80 e8       	ldi	r24, 0x80	; 128
    2142:	90 e0       	ldi	r25, 0x00	; 0
    2144:	0e 94 af 00 	call	0x15e	; 0x15e <NewSemaphore>
    2148:	99 83       	std	Y+1, r25	; 0x01
    214a:	88 83       	st	Y, r24
	 //---------------------------------------
	 // Receive Descriptor
	 //---------------------------------------
	 RxDesc.m_pBuffer = malloc(UART_BUFFSIZE);
    214c:	80 e8       	ldi	r24, 0x80	; 128
    214e:	90 e0       	ldi	r25, 0x00	; 0
    2150:	0e 94 90 06 	call	0xd20	; 0xd20 <malloc>
    2154:	ce eb       	ldi	r28, 0xBE	; 190
    2156:	d1 e0       	ldi	r29, 0x01	; 1
    2158:	9b 83       	std	Y+3, r25	; 0x03
    215a:	8a 83       	std	Y+2, r24	; 0x02
	 RxDesc.m_Head = 0;
    215c:	1f 82       	std	Y+7, r1	; 0x07
    215e:	1e 82       	std	Y+6, r1	; 0x06
	 RxDesc.m_Tail = 0;
    2160:	19 86       	std	Y+9, r1	; 0x09
    2162:	18 86       	std	Y+8, r1	; 0x08
	 RxDesc.m_nChar = 0;
    2164:	1b 86       	std	Y+11, r1	; 0x0b
    2166:	1a 86       	std	Y+10, r1	; 0x0a
	 RxDesc.m_pSem = NewSemaphore(0,SEMAPHORE_MODE_BLOCKING,"RxBlock");
    2168:	4f e9       	ldi	r20, 0x9F	; 159
    216a:	51 e0       	ldi	r21, 0x01	; 1
    216c:	60 e0       	ldi	r22, 0x00	; 0
    216e:	70 e0       	ldi	r23, 0x00	; 0
    2170:	80 e0       	ldi	r24, 0x00	; 0
    2172:	90 e0       	ldi	r25, 0x00	; 0
    2174:	0e 94 af 00 	call	0x15e	; 0x15e <NewSemaphore>
    2178:	99 83       	std	Y+1, r25	; 0x01
    217a:	88 83       	st	Y, r24
	 RxDesc.m_Size = UART_BUFFSIZE;
    217c:	1d 83       	std	Y+5, r17	; 0x05
    217e:	0c 83       	std	Y+4, r16	; 0x04
	 //---------------------------------
	 // Set Baud Rate
	 // UBRR = Fosc/(16 * Baud) - 1
	 //---------------------------------
	 UBRR0H = 0;
    2180:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	 UBRR0L = BAUD_MIDI; // 20000000/(16 * 31250) - 1
    2184:	87 e2       	ldi	r24, 0x27	; 39
    2186:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	 UCSR0A = 0;
    218a:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
	 //----------------------------------
	 // Enable TX and RX interrupt
	 //----------------------------------
	 UCSR0B = BIT(RXCIE0) | BIT(RXEN0) | BIT(TXEN0);
    218e:	88 e9       	ldi	r24, 0x98	; 152
    2190:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	 //----------------------------------
	 // 8 Bits, No parity
	 //----------------------------------
	 UCSR0C =  BIT(UCSZ01) | BIT(UCSZ00);
    2194:	86 e0       	ldi	r24, 0x06	; 6
    2196:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
}
    219a:	df 91       	pop	r29
    219c:	cf 91       	pop	r28
    219e:	1f 91       	pop	r17
    21a0:	0f 91       	pop	r16
    21a2:	08 95       	ret

000021a4 <Yield>:
** are in an interrupt
** routine
*********************************************************************/

void Yield(void)
{
    21a4:	cf 93       	push	r28
	char sr;

	// Do not yield if at the interrupt level
	if(!InterruptCount)
    21a6:	80 91 dc 01 	lds	r24, 0x01DC	; 0x8001dc <InterruptCount>
    21aa:	90 91 dd 01 	lds	r25, 0x01DD	; 0x8001dd <InterruptCount+0x1>
    21ae:	89 2b       	or	r24, r25
    21b0:	09 f5       	brne	.+66     	; 0x21f4 <Yield+0x50>
	{
		sr = Disable();
    21b2:	0e 94 75 00 	call	0xea	; 0xea <Disable>
    21b6:	c8 2f       	mov	r28, r24
		//update the time stamp in current task
		pCurrentTask->TimeStamp = TStamp;
    21b8:	40 91 d6 01 	lds	r20, 0x01D6	; 0x8001d6 <pCurrentTask>
    21bc:	50 91 d7 01 	lds	r21, 0x01D7	; 0x8001d7 <pCurrentTask+0x1>
    21c0:	80 91 fb 02 	lds	r24, 0x02FB	; 0x8002fb <TStamp>
    21c4:	90 91 fc 02 	lds	r25, 0x02FC	; 0x8002fc <TStamp+0x1>
    21c8:	fa 01       	movw	r30, r20
    21ca:	95 87       	std	Z+13, r25	; 0x0d
    21cc:	84 87       	std	Z+12, r24	; 0x0c
		//Insert current task back into queue
		//and get a new task
		Replace(&ActiveTasks,(void **)&pNextTask,(void *)pCurrentTask);
    21ce:	6a ed       	ldi	r22, 0xDA	; 218
    21d0:	71 e0       	ldi	r23, 0x01	; 1
    21d2:	8c ec       	ldi	r24, 0xCC	; 204
    21d4:	91 e0       	ldi	r25, 0x01	; 1
    21d6:	0d dd       	rcall	.-1510   	; 0x1bf2 <Replace>
		//increment task swaps
		pNextTask->TcbSwaps++;
    21d8:	e0 91 da 01 	lds	r30, 0x01DA	; 0x8001da <pNextTask>
    21dc:	f0 91 db 01 	lds	r31, 0x01DB	; 0x8001db <pNextTask+0x1>
    21e0:	86 85       	ldd	r24, Z+14	; 0x0e
    21e2:	97 85       	ldd	r25, Z+15	; 0x0f
    21e4:	01 96       	adiw	r24, 0x01	; 1
    21e6:	97 87       	std	Z+15, r25	; 0x0f
    21e8:	86 87       	std	Z+14, r24	; 0x0e
		//swap tasks
		DoSwap();
    21ea:	0e 94 f6 01 	call	0x3ec	; 0x3ec <DoSwap>
		Enable(sr);
    21ee:	8c 2f       	mov	r24, r28
    21f0:	0e 94 79 00 	call	0xf2	; 0xf2 <Enable>
	}
}
    21f4:	cf 91       	pop	r28
    21f6:	08 95       	ret

000021f8 <__tablejump2__>:
    21f8:	ee 0f       	add	r30, r30
    21fa:	ff 1f       	adc	r31, r31
    21fc:	00 24       	eor	r0, r0
    21fe:	00 1c       	adc	r0, r0
    2200:	0b be       	out	0x3b, r0	; 59
    2202:	07 90       	elpm	r0, Z+
    2204:	f6 91       	elpm	r31, Z
    2206:	e0 2d       	mov	r30, r0
    2208:	09 94       	ijmp

0000220a <strcpy>:
    220a:	fb 01       	movw	r30, r22
    220c:	dc 01       	movw	r26, r24
    220e:	01 90       	ld	r0, Z+
    2210:	0d 92       	st	X+, r0
    2212:	00 20       	and	r0, r0
    2214:	e1 f7       	brne	.-8      	; 0x220e <strcpy+0x4>
    2216:	08 95       	ret

00002218 <__itoa_ncheck>:
    2218:	bb 27       	eor	r27, r27
    221a:	4a 30       	cpi	r20, 0x0A	; 10
    221c:	31 f4       	brne	.+12     	; 0x222a <__itoa_ncheck+0x12>
    221e:	99 23       	and	r25, r25
    2220:	22 f4       	brpl	.+8      	; 0x222a <__itoa_ncheck+0x12>
    2222:	bd e2       	ldi	r27, 0x2D	; 45
    2224:	90 95       	com	r25
    2226:	81 95       	neg	r24
    2228:	9f 4f       	sbci	r25, 0xFF	; 255
    222a:	01 c0       	rjmp	.+2      	; 0x222e <__utoa_common>

0000222c <__utoa_ncheck>:
    222c:	bb 27       	eor	r27, r27

0000222e <__utoa_common>:
    222e:	fb 01       	movw	r30, r22
    2230:	55 27       	eor	r21, r21
    2232:	aa 27       	eor	r26, r26
    2234:	88 0f       	add	r24, r24
    2236:	99 1f       	adc	r25, r25
    2238:	aa 1f       	adc	r26, r26
    223a:	a4 17       	cp	r26, r20
    223c:	10 f0       	brcs	.+4      	; 0x2242 <__utoa_common+0x14>
    223e:	a4 1b       	sub	r26, r20
    2240:	83 95       	inc	r24
    2242:	50 51       	subi	r21, 0x10	; 16
    2244:	b9 f7       	brne	.-18     	; 0x2234 <__utoa_common+0x6>
    2246:	a0 5d       	subi	r26, 0xD0	; 208
    2248:	aa 33       	cpi	r26, 0x3A	; 58
    224a:	08 f0       	brcs	.+2      	; 0x224e <__utoa_common+0x20>
    224c:	a9 5d       	subi	r26, 0xD9	; 217
    224e:	a1 93       	st	Z+, r26
    2250:	00 97       	sbiw	r24, 0x00	; 0
    2252:	79 f7       	brne	.-34     	; 0x2232 <__utoa_common+0x4>
    2254:	b1 11       	cpse	r27, r1
    2256:	b1 93       	st	Z+, r27
    2258:	11 92       	st	Z+, r1
    225a:	cb 01       	movw	r24, r22
    225c:	00 c0       	rjmp	.+0      	; 0x225e <strrev>

0000225e <strrev>:
    225e:	dc 01       	movw	r26, r24
    2260:	fc 01       	movw	r30, r24
    2262:	67 2f       	mov	r22, r23
    2264:	71 91       	ld	r23, Z+
    2266:	77 23       	and	r23, r23
    2268:	e1 f7       	brne	.-8      	; 0x2262 <strrev+0x4>
    226a:	32 97       	sbiw	r30, 0x02	; 2
    226c:	04 c0       	rjmp	.+8      	; 0x2276 <strrev+0x18>
    226e:	7c 91       	ld	r23, X
    2270:	6d 93       	st	X+, r22
    2272:	70 83       	st	Z, r23
    2274:	62 91       	ld	r22, -Z
    2276:	ae 17       	cp	r26, r30
    2278:	bf 07       	cpc	r27, r31
    227a:	c8 f3       	brcs	.-14     	; 0x226e <strrev+0x10>
    227c:	08 95       	ret

0000227e <_exit>:
    227e:	f8 94       	cli

00002280 <__stop_program>:
    2280:	ff cf       	rjmp	.-2      	; 0x2280 <__stop_program>
